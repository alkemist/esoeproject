<?xml version="1.0"?>

<!-- ====================================================================== 
	Author: Bradley Beddoes
	Date: 10/04/2006
	Purpose: Builds ESOE tools library
	====================================================================== -->

<project name="esoetools" xmlns:ivy="antlib:org.apache.ivy.ant">

	<property file="build.properties" />

	<description>Builds ESOE Startup for various deployment environments</description>

	<taskdef resource="emma_ant.properties">
		<classpath>
			<pathelement location="${ant.emma}" />
			<pathelement location="${ant.emma_ant}" />
		</classpath>
	</taskdef>

	<!-- 
		Integration with apache ivy for dependency resolution in the development environment, this is a standalone target and should be run manually before invoking other
		ant operations associated with SAML2 lib for Java
	-->
	<target name="dev-resolve">
		<ivy:configure />
		<ivy:resolve file="ivy.xml" conf="dev" />
		<ivy:retrieve pattern="${artifacts.dev}/[artifact].[ext]" conf="dev" />
		<ivy:report conf="dev" graph="false" todir="${artifacts.dev}" />
	</target>
	
	<target name="dev-release-resolve">
		<ivy:configure />
		<ivy:resolve file="ivy.xml" conf="dev" />
		<ivy:retrieve pattern="${artifacts.dev-release}/[artifact].[ext]" conf="dev" />
		<ivy:report conf="dev" graph="false" todir="${artifacts.dev-release}" />
	</target>

	<target name="dev-publish">
		<ivy:configure />
		<ivy:resolve file="ivy.xml" conf="dev" />
		<ivy:publish resolver="local-resolver" forcedeliver="true">
			<artifacts pattern="${output.dev}/[artifact].[ext]" />
		</ivy:publish>
	</target>

	<!-- 
		ESOEStartup development environment compilation and war creation
	-->
	<target name="dev-jar" depends="dev-build" description="Assembles ESOEStartup development jar">
		<jar destfile="${output.dev}/${output.dev.jar}.jar">
			<fileset dir="${output.dev.build}">
				<include name="**/*" />
			</fileset>
			<fileset dir="${src}">
				<include name="**/*.properties" />
				<include name="**/*.xml" />
				<include name="**/*.html" />
			</fileset>
		</jar>
	</target>

	<target name="dev-build" depends="setup" description="Compiles ESOE Startup code base">
		<javac source="1.5" target="1.5" destdir="${output.dev.build}" srcdir="${src}" debug="true" debuglevel="lines,vars,source">
			<classpath>
				<fileset dir="${artifacts}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>

	<!-- 
		ESOEStartup JUnit test execution and report generation, includes automated code
		coverage statistics generated by emma, emma.sourceforge.net
	-->
	<target name="junit" depends="junit-functional, junit-regression" description="Invokes all unit tests defined for the ESOEStartup">

		<!-- Combine coverage reports to single view -->
		<emma>
			<report sourcepath="${src}">
				<fileset dir="${output.dev.coverage.dir}">
					<include name="**/*.emma" />
				</fileset>

				<txt outfile="${output.dev.coverage.dir}/coverage.txt" />
				<html outfile="${output.dev.coverage.dir}/coverage.html" />
				<xml outfile="${output.dev.coverage.dir}/coverage.xml" />
			</report>
		</emma>
	</target>

	<target name="emma-instr" description="Configures esoestartup jar for emma coverage reporting">
		<emma>
			<instr mode="fullcopy" outdir="${output.dev.coverage.dir}" merge="false" metadatafile="${output.dev.coverage.dir}/metadata.emma">
				<instrpath>
					<fileset dir="${output.dev}" includes="**/*.jar" />
				</instrpath>
				<!-- Coverage report on all ESOEStartup code except dynamically generated message classes and exception implementations -->
				<filter includes="com.qut.*" excludes="com.qut.*Messages*, com.qut.*Exception*" />
			</instr>
		</emma>
	</target>

	<target name="junit-regression-build" depends="dev-jar" description="Compiles ESOEStartup regression tests code base">
		<javac source="1.5" target="1.5" destdir="${output.test.regression.build}" srcdir="${src.tests.regression}" debug="true" debuglevel="lines,vars,source">
			<classpath>
				<fileset dir="${artifacts}">
					<include name="**/*.jar" />
				</fileset>
				<path path="${output.dev}/${output.dev.jar}.jar" />
			</classpath>
		</javac>
	</target>

	<target name="junit-regression" depends="junit-regression-build, emma-instr" description="Invokes all junit regression tests for the ESOEStartup">
		<mkdir dir="${junit.test.regression.reports}" />

		<junit printsummary="yes" haltonfailure="no" fork="yes">
			<classpath>
				<path path="${output.dev.coverage.dir}/lib/${output.dev.jar}.jar" />
				<path path="${output.test.regression.build}" />
				<path refid="esoestartup.classpath" />
				<!--  Allow tests to resolve locally required resouces such as xml config files -->
				<path path="${src.tests.regression}" />
			</classpath>

			<jvmarg value="-Demma.coverage.out.file=${output.dev.coverage.regression.dir}/coverage.emma" />
			<jvmarg value="-Demma.coverage.out.merge=true" />

			<formatter type="xml" />

			<batchtest fork="yes" todir="${output.dev.junit.regression.reports}">
				<fileset dir="${output.test.regression.build}">
					<include name="**/*Test*.class" />
					<exclude name="**/*KerberosV5*.class" />
				</fileset>
			</batchtest>
		</junit>

		<emma>
			<report sourcepath="${src}">
				<fileset dir="${output.dev.coverage.regression.dir}">
					<include name="*.emma" />
				</fileset>
				<fileset file="${output.dev.coverage.dir}/metadata.emma" />

				<txt outfile="${output.dev.coverage.regression.dir}/coverage.txt" />
				<html outfile="${output.dev.coverage.regression.dir}/coverage.html" />
				<xml outfile="${output.dev.coverage.regression.dir}/coverage.xml" />
			</report>
		</emma>

	</target>

	<target name="junit-functional-build" depends="dev-jar" description="Compiles ESOEStartup functional test code base">
		<javac source="1.5" target="1.5" destdir="${output.test.functional.build}" srcdir="${src.tests.functional}" debug="true" debuglevel="lines,vars,source">
			<classpath>
				<fileset dir="${artifacts}">
					<include name="**/*.jar" />
				</fileset>
				<path path="${output.dev}/${output.dev.jar}.jar" />
			</classpath>
		</javac>
	</target>

	<target name="junit-functional" depends="junit-functional-build, emma-instr" description="Invokes all junit functional tests for the ESOEStartup">
		<mkdir dir="${junit.test.functional.reports}" />

		<junit printsummary="yes" haltonfailure="no" fork="yes">
			<classpath>
				<path path="${output.dev.coverage.dir}/lib/${output.dev.jar}.jar" />
				<path path="${output.test.functional.build}" />
				<fileset dir="${artifacts}">
					<include name="**/*.jar" />
				</fileset>
				<!--  Allow tests to resolve locally required resouces such as xml config files -->
				<path path="${src.tests.functional}" />
			</classpath>

			<formatter type="xml" />

			<jvmarg value="-Demma.coverage.out.file=${output.dev.coverage.functional.dir}/coverage.emma" />
			<jvmarg value="-Demma.coverage.out.merge=true" />

			<batchtest fork="yes" todir="${output.dev.junit.functional.reports}">
				<fileset dir="${output.test.functional.build}">
					<include name="**/*Test*.class" />
					<exclude name="**/*KerberosV5*.class" />
				</fileset>
			</batchtest>
		</junit>

		<emma>
			<report sourcepath="${src}">
				<fileset dir="${output.dev.coverage.functional.dir}">
					<include name="*.emma" />
				</fileset>
				<fileset file="${output.dev.coverage.dir}/metadata.emma" />

				<txt outfile="${output.dev.coverage.functional.dir}/coverage.txt" />
				<html outfile="${output.dev.coverage.functional.dir}/coverage.html" />
				<xml outfile="${output.dev.coverage.functional.dir}/coverage.xml" />
			</report>
		</emma>
	</target>

	<!-- 
		ESOEStartup java documentation generation
	-->
	<target name="javadoc" description="Build javadoc for the entire project">
		<javadoc packagenames="com.qut.*" sourcepath="src" defaultexcludes="yes" destdir="${doc}" author="true" version="true" use="true" windowtitle="administration">
			<doctitle>
				<![CDATA[<h1>ESOE Startup API</h1>]]>
			</doctitle>
		<bottom>
			<![CDATA[<i>Copyright &#169; 2006 Queensland University of Technology. All Rights Reserved.</i>]]>
			</bottom>
	<tag name="todo" scope="all" description="To do:" />

	<!-- configure our classpath -->
	<classpath>
		<fileset dir="${artifacts}">
			<include name="**/*.jar" />
		</fileset>
	</classpath>

</javadoc>
</target>

<!-- 
		General operations to setup and cleanup environment 
	-->
<target name="setup" depends="clean">
<mkdir dir="${output.dev.build}" />
<mkdir dir="${output.dev}" />

<mkdir dir="${output.test.regression.build}" />
<mkdir dir="${output.test.functional.build}" />

<mkdir dir="${output.dev.coverage.dir}" />
<mkdir dir="${output.dev.coverage.functional.dir}" />
<mkdir dir="${output.dev.coverage.regression.dir}" />
</target>

<target name="clean" description="clean up binaries and api doc">
<delete dir="${output.dev.build}" />
<delete dir="${output.dev}" />

<delete dir="${output.test.regression.build}" />
<delete dir="${output.test.functional.build}" />

<delete dir="${output.dev.coverage.dir}" />
<delete dir="${output.dev.coverage.functional.dir}" />
<delete dir="${output.dev.coverage.regression.dir}" />
</target>

</project>
