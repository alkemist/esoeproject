<?xml version="1.0" encoding="UTF-8"?>
<tc:tc-config xmlns:tc="http://www.terracotta.org/config">
	<!-- optional -->
	<system>
		<configuration-model>development</configuration-model>
	</system>

	<servers>

		<server host="balsam.qut.edu.au" name="balsam">

			<dso-port>9510</dso-port>
			<logs>../tomcat/logs/jonquil_tcserver-logs</logs>

			<dso>
				<persistence>
					<!--
						'temporary-swap-only' causes the DSO server to use the
						disk as a temporary backing store. Data is not
						preserved across server restarts. This mode is somewhat
						faster than 'permanent-store' mode.
						
						'permanent-store' causes the DSO server to write data
						immediately and permanently to disk. Upon server restart,
						data will be restored, meaning data underneath roots
						in your program will be restored to the exact state it
						was in when the server shut down.
						
						Note that if you are using clustered DSO servers (i.e., if
						you have more than one <server> element defined,
						below), then you must use 'permanent-store' mode. This
						is required for proper operation of the DSO
						failover mechanism.
						
						Default: 'temporary-swap-only'
					-->
					<mode>permanent-store</mode>
				</persistence>
			</dso>

			<authentication>
				<password-file>
					/usr/local/site/esoe/terracotta-2.3.0/jmxremote.passwd
				</password-file>
				<access-file>
					/usr/local/site/esoe/terracotta-2.3.0/jmxremote.access
				</access-file>
			</authentication>

		</server>

	</servers>



	<clients>
		<!--  Where should the client write its log files?
			
			This value undergoes parameter substitution before being used;
			thus, a value like 'client-logs-%h' would expand to
			'client-logs-banana' if running on host 'banana'. See the
			Product Guide for more details.
			
			If this is a relative path, then it is interpreted relative to
			the current working directory of the client (that is, the directory
			you were in when you started the program that uses Terracotta
			services). It is thus recommended that you specify an absolute
			path here.
			
			
			Default: 'logs-%i'; this places the logs in a directory relative
			to the directory you were in when you invoked the program that uses
			Terracotta services (your client), and calls that directory, for example,
			'logs-10.0.0.57' if the machine that the client is on has assigned IP
			address 10.0.0.57.
		-->

		<logs>tomcat/logs/tcclient-logs</logs>
		<!--  This section contains data for Terracotta DSO that's specific to
			the DSO client only. 
		-->

		<dso>
			<!--  This section controls output from the DSO client that can help you
				debug your program. 
			-->

			<debugging>

				<!--  This section controls output from the DSO client related to
					operations occurring at runtime. See the Product Guide for
					more details; each individual element controls a different
					kind of output. 
				-->
				<runtime-logging>
					<lock-debug>true</lock-debug>
					<non-portable-dump>true</non-portable-dump>
					<wait-notify-debug>false</wait-notify-debug>
					<distributed-method-debug>
						true
					</distributed-method-debug>
					<new-object-debug>true</new-object-debug>
				</runtime-logging>

				<!--  This section controls the exact format of the output from
					any options enabled under 'runtime-logging', above. See
					the Product Guide for more details; each individual element
					controls a different kind of output. 
				-->
				<runtime-output-options>
					<auto-lock-details>true</auto-lock-details>
					<caller>true</caller>
					<full-stack>false</full-stack>
				</runtime-output-options>
			</debugging>
		</dso>

	</clients>

	<!-- list of Terracotta enabled applications -->

	<application>

		<dso>

			<instrumented-classes>

				<include>
					<class-expression>
						com.qut.middleware.esoe.sessions..*
					</class-expression>
				</include>
				<include>
					<class-expression>java.util..*</class-expression>
				</include>
				<include>
					<class-expression>
						com.qut.middleware.saml2.schemas.esoe.sessions..*
					</class-expression>
				</include>

				<exclude>org.apache.commons.dbcp..*</exclude>
				<exclude>org.apache.axis2..*</exclude>
				<exclude>com.ctc.wstx..*</exclude>
				<exclude>com.qut.middleware.esoe.ws.impl..*</exclude>
				<exclude>
					com.qut.middleware.esoe.sessions.impl.SessionsMonitor
				</exclude>

			</instrumented-classes>

			<!--  You need to run create-dso-boot and point it at this file to generate these -->
			<additional-boot-jar-classes>
				<include>
					javax.xml.datatype.XMLGregorianCalendar
				</include>
				<include>
					com.sun.org.apache.xerces.internal.jaxp.datatype.XMLGregorianCalendarImpl
				</include>
				<include>java.util.ArrayList</include>
			</additional-boot-jar-classes>

			<dso-reflection-enabled>true</dso-reflection-enabled>

		</dso>

		<spring>

			<!-- list of web applications -->
			<jee-application name="*">

				<!--  These fields can not be shared, as they rely on host specific resources -->
				<transient-fields>
					<field-name>
						com.qut.middleware.esoe.sessions.impl.PrincipalImpl.logger
					</field-name>
					<field-name>
						com.qut.middleware.esoe.sessions.cache.impl.SessionCacheImpl.logger
					</field-name>
				</transient-fields>

				<!-- optional (default false)
					<session-support>true</session-support>  
				-->

				<!-- optional (default false) 
					<fast-proxy>true</fast-proxy>
				-->

				<application-contexts>
					<application-context>
						<paths>
							<path>/WEB-INF/esoeContext.xml</path>
						</paths>
						<beans>
							<bean name="sessionCache">
								<non-distributed-field>
									logger
								</non-distributed-field>
							</bean>
						</beans>
					</application-context>
				</application-contexts>

				<locks>
					<autolock>
						<method-expression>
							* *..*.*(..)
						</method-expression>
					</autolock>

					<named-lock>
						<lock-name>principalLock</lock-name>
						<method-expression>
							* com.qut.middleware.esoe.sessions.impl.PrincipalImpl.set*(..)
						</method-expression>
						<lock-level>write</lock-level>
					</named-lock>

				</locks>

			</jee-application>

		</spring>
	</application>

</tc:tc-config>


