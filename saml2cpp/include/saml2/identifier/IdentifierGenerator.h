/*
 * Copyright 2006-2007, Queensland University of Technology
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
 * use this file except in compliance with the License. You may obtain a copy of 
 * the License at 
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
 * License for the specific language governing permissions and limitations under 
 * the License.
 * 
 * Author: Bradley Beddoes
 * Creation Date: 5/2/2006
 * 
 * Purpose: Provides all identifier generator functionality to SAML2lib-cpp
 */
 
#ifndef IDENTIFIERGENERATOR_H_
#define IDENTIFIERGENERATOR_H_

/* STL */
#include <string>

/* Local Codebase */
#include "saml2/identifier/IdentifierCache.h"
#include "saml2/SAML2Defs.h"

namespace saml2
{
	class SAML2EXPORT IdentifierGenerator
	{
		public:
		/*
		 * Constructor
		 * 
		 * @param cache Application wide implementation of IdentifierCache
		 */
		IdentifierGenerator(IdentifierCache* cache);
		
		/**
		 * This function generates a random identifier to be used with SAML 2.0 documents. The case that the same random
		 * identifier would be generated by the ESOE for two seperate objects will be less the 2 ^ -160. This meets
		 * requirements of the SAML 2.0 specification. Additionally identifiers will begin with the character '_' to meet
		 * requirements of the xsd:ID attribute. Format of the identifier: ID ::= _(SHA1 20 bytes)-(SHA1 16 bytes)
		 * 
		 * @exception IdentifierCacheException Thrown when identifier generation fails due to OpenSSL problem
		 * 
		 * @return Returns a SAML ID
		 */
		std::wstring generateSAMLID();
	
		/**
		 * This function generates a random identifier to be used with SAML 2.0 subject and subject. The case that the same
		 * random identifier would be generated by the ESOE for two seperate objects will be less the 2 ^ -160. This meets
		 * requirements of the SAML 2.0 specification. Format of the identifier: AuthnID ::= (SHA1 20 bytes)-(SHA1 16 bytes)
		 * 
		 * @exception IdentifierCacheException Thrown when identifier generation fails due to OpenSSL problem
		 * 
		 * @return Returns an AuthnID
		 */
		std::wstring generateSAMLAuthnID();
	
		/**
		 * This function generates a random identifier to be used with SAML 2.0 session identifiers. Format of the
		 * identifier: SessionID ::= (SHA1 10 bytes)
		 * 
		 * @exception IdentifierCacheException Thrown when identifier generation fails due to OpenSSL problem
		 * 
		 * @return Returns a SessionID
		 */
		std::wstring generateSAMLSessionID();
		
		/**
		 * This function generates a random identifier to be used with metadata KeyName values. Format of the
		 * identifier: KeyName ::= (SHA1 8 bytes)
		 * 
		 * @exception IdentifierCacheException Thrown when identifier generation fails due to OpenSSL problem
		 * 
		 * @return Returns a SessionID
		 */
		std::string generateXMLKeyName();
	
		/**
		 * This function generates a random identifier to be used in supplying session identifiers to user-agents. The case
		 * that the same random identifier would be generated by the ESOE for two seperate objects will be less the 2 ^
		 * -160. Format of the identifier: SESSIONID ::= ID-(Time since epoch of session generation [second resolution only])
		 *
		 * @exception IdentifierCacheException Thrown when identifier generation fails due to OpenSSL problem
		 * 
		 * @return Returns a SESSIONID
		 */
		std::string generateSessionID();
		
		private:
		/**
		 * Generates the specified number of random bytes using openssl and returns a hex encoded representation
		 * 
		 * @param length The number of random bytes to generate, must be less then MAX_BYTES
		 * 
		 * @exception IdentifierCacheException Thrown when identifier generation fails due to OpenSSL problem
		 * 
		 * @return A hex encoded std::string representation of the randomly generated bytes
		 */
		std::string generate(const unsigned int length);
		
		IdentifierCache* cache;
	};
}

#endif /*IDENTIFIERGENERATOR_H_*/
