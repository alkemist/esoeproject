// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

/**
 * @file
 * @brief Generated from ../saml2cpp/schema/esoe-schema-saml-protocol.xsd.
 */

#ifndef ESOE_SCHEMA_SAML_PROTOCOL_HXX
#define ESOE_SCHEMA_SAML_PROTOCOL_HXX

// Begin prologue.
//
#include "saml2/SAML2Defs.h"
//
// End prologue.

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 3000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include "saml2/xsd/xml-schema.hxx"

// Forward declarations.
//
namespace middleware
{
  namespace ESOEProtocolSchema
  {
    class ClearAuthzCacheRequestType;
    class ClearAuthzCacheResponseType;
    class ValidateInitializationRequestType;
    class ValidateInitializationResponseType;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>
#include <xsd/cxx/tree/containers-wildcard.hxx>

#include "saml2/bindings/saml-schema-assertion-2.0.hxx"

#include "saml2/bindings/saml-schema-protocol-2.0.hxx"

#include "saml2/bindings/lxacml-schema.hxx"

#include "saml2/bindings/lxacml-schema-context.hxx"

namespace middleware
{
  /**
   * @brief C++ namespace for the %http://www.qut.com/middleware/ESOEProtocolSchema
   * schema namespace.
   */
  namespace ESOEProtocolSchema
  {
    /**
     * @brief Class corresponding to the %ClearAuthzCacheRequestType schema type.
     *
     * @nosubgrouping
     */
    class SAML2EXPORT ClearAuthzCacheRequestType: public ::saml2::protocol::RequestAbstractType
    {
      public:
      /**
       * @name Subject
       *
       * @brief Accessor and modifier functions for the %Subject
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::saml2::assertion::SubjectType Subject_type;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< Subject_type > Subject_optional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< Subject_type, wchar_t > Subject_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const Subject_optional&
      Subject () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      Subject_optional&
      Subject ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      Subject (const Subject_type& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      Subject (const Subject_optional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      Subject (::std::auto_ptr< Subject_type > p);

      //@}

      /**
       * @name Reason
       *
       * @brief Accessor and modifier functions for the %Reason
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string Reason_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< Reason_type, wchar_t > Reason_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const Reason_type&
      Reason () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      Reason_type&
      Reason ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      Reason (const Reason_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      Reason (::std::auto_ptr< Reason_type > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Default constructor.
       *
       * Note that this constructor leaves required elements and
       * attributes uninitialized.
       */
      ClearAuthzCacheRequestType ();

      /**
       * @brief Construct an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      ClearAuthzCacheRequestType (const ID_type&,
                                  const Version_type&,
                                  const IssueInstant_type&,
                                  const Reason_type&);

      /**
       * @brief Construct an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to construct the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      ClearAuthzCacheRequestType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::type* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to construct the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the _clone function instead.
       */
      ClearAuthzCacheRequestType (const ClearAuthzCacheRequestType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::type* c = 0);

      /**
       * @brief Copy the object polymorphically.
       *
       * @param f Flags to construct the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of an instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual ClearAuthzCacheRequestType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0) const;

      //@}

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      private:
      Subject_optional Subject_;
      ::xsd::cxx::tree::one< Reason_type > Reason_;
    };

    /**
     * @brief Class corresponding to the %ClearAuthzCacheResponseType schema type.
     *
     * @nosubgrouping
     */
    class SAML2EXPORT ClearAuthzCacheResponseType: public ::saml2::protocol::StatusResponseType
    {
      public:
      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Default constructor.
       *
       * Note that this constructor leaves required elements and
       * attributes uninitialized.
       */
      ClearAuthzCacheResponseType ();

      /**
       * @brief Construct an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      ClearAuthzCacheResponseType (const Status_type&,
                                   const ID_type&,
                                   const Version_type&,
                                   const IssueInstant_type&);

      /**
       * @brief Construct an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to construct the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      ClearAuthzCacheResponseType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::type* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to construct the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the _clone function instead.
       */
      ClearAuthzCacheResponseType (const ClearAuthzCacheResponseType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::type* c = 0);

      /**
       * @brief Copy the object polymorphically.
       *
       * @param f Flags to construct the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of an instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual ClearAuthzCacheResponseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0) const;

      //@}
    };

    /**
     * @brief Class corresponding to the %ValidateInitializationRequestType schema type.
     *
     * @nosubgrouping
     */
    class SAML2EXPORT ValidateInitializationRequestType: public ::saml2::protocol::RequestAbstractType
    {
      public:
      /**
       * @name ipAddress
       *
       * @brief Accessor and modifier functions for the %ipAddress
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::string ipAddress_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< ipAddress_type > ipAddress_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef ipAddress_sequence::iterator ipAddress_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef ipAddress_sequence::const_iterator ipAddress_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ipAddress_type, wchar_t > ipAddress_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const ipAddress_sequence&
      ipAddress () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      ipAddress_sequence&
      ipAddress ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      ipAddress (const ipAddress_sequence& s);

      //@}

      /**
       * @name compileDate
       *
       * @brief Accessor and modifier functions for the %compileDate
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::string compileDate_type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< compileDate_type, wchar_t > compileDate_traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const compileDate_type&
      compileDate () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      compileDate_type&
      compileDate ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      compileDate (const compileDate_type& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      compileDate (::std::auto_ptr< compileDate_type > p);

      //@}

      /**
       * @name compileSystem
       *
       * @brief Accessor and modifier functions for the %compileSystem
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::string compileSystem_type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< compileSystem_type, wchar_t > compileSystem_traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const compileSystem_type&
      compileSystem () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      compileSystem_type&
      compileSystem ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      compileSystem (const compileSystem_type& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      compileSystem (::std::auto_ptr< compileSystem_type > p);

      //@}

      /**
       * @name sw-version
       *
       * @brief Accessor and modifier functions for the %sw-version
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::string sw_version_type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< sw_version_type, wchar_t > sw_version_traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const sw_version_type&
      sw_version () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      sw_version_type&
      sw_version ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      sw_version (const sw_version_type& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      sw_version (::std::auto_ptr< sw_version_type > p);

      //@}

      /**
       * @name environment
       *
       * @brief Accessor and modifier functions for the %environment
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::string environment_type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< environment_type, wchar_t > environment_traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const environment_type&
      environment () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      environment_type&
      environment ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      environment (const environment_type& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      environment (::std::auto_ptr< environment_type > p);

      //@}

      /**
       * @name nodeId
       *
       * @brief Accessor and modifier functions for the %nodeId
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::string nodeId_type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< nodeId_type, wchar_t > nodeId_traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const nodeId_type&
      nodeId () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      nodeId_type&
      nodeId ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      nodeId (const nodeId_type& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      nodeId (::std::auto_ptr< nodeId_type > p);

      //@}

      /**
       * @name authzCacheIndex
       *
       * @brief Accessor and modifier functions for the %authzCacheIndex
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::unsigned_short authzCacheIndex_type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< authzCacheIndex_type, wchar_t > authzCacheIndex_traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const authzCacheIndex_type&
      authzCacheIndex () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      authzCacheIndex_type&
      authzCacheIndex ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      authzCacheIndex (const authzCacheIndex_type& x);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Default constructor.
       *
       * Note that this constructor leaves required elements and
       * attributes uninitialized.
       */
      ValidateInitializationRequestType ();

      /**
       * @brief Construct an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      ValidateInitializationRequestType (const ID_type&,
                                         const Version_type&,
                                         const IssueInstant_type&,
                                         const compileDate_type&,
                                         const compileSystem_type&,
                                         const sw_version_type&,
                                         const environment_type&,
                                         const nodeId_type&,
                                         const authzCacheIndex_type&);

      /**
       * @brief Construct an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to construct the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      ValidateInitializationRequestType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::type* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to construct the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the _clone function instead.
       */
      ValidateInitializationRequestType (const ValidateInitializationRequestType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::type* c = 0);

      /**
       * @brief Copy the object polymorphically.
       *
       * @param f Flags to construct the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of an instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual ValidateInitializationRequestType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0) const;

      //@}

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      private:
      ipAddress_sequence ipAddress_;
      ::xsd::cxx::tree::one< compileDate_type > compileDate_;
      ::xsd::cxx::tree::one< compileSystem_type > compileSystem_;
      ::xsd::cxx::tree::one< sw_version_type > sw_version_;
      ::xsd::cxx::tree::one< environment_type > environment_;
      ::xsd::cxx::tree::one< nodeId_type > nodeId_;
      ::xsd::cxx::tree::one< authzCacheIndex_type > authzCacheIndex_;
    };

    /**
     * @brief Class corresponding to the %ValidateInitializationResponseType schema type.
     *
     * @nosubgrouping
     */
    class SAML2EXPORT ValidateInitializationResponseType: public ::saml2::protocol::StatusResponseType
    {
      public:
      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Default constructor.
       *
       * Note that this constructor leaves required elements and
       * attributes uninitialized.
       */
      ValidateInitializationResponseType ();

      /**
       * @brief Construct an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      ValidateInitializationResponseType (const Status_type&,
                                          const ID_type&,
                                          const Version_type&,
                                          const IssueInstant_type&);

      /**
       * @brief Construct an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to construct the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      ValidateInitializationResponseType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::type* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to construct the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the _clone function instead.
       */
      ValidateInitializationResponseType (const ValidateInitializationResponseType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::type* c = 0);

      /**
       * @brief Copy the object polymorphically.
       *
       * @param f Flags to construct the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of an instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual ValidateInitializationResponseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0) const;

      //@}
    };
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMInputSource.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace middleware
{
  namespace ESOEProtocolSchema
  {
    /**
     * @name Parsing functions for the %ClearAuthzCacheRequest document root.
     */
    //@{

    /**
     * @brief Parse a URI or a local file.
     *
     * @param uri A URI or a local file name.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::std::wstring& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a URI or a local file with an error handler.
     *
     * @param uri A URI or a local file name.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::std::wstring& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a URI or a local file with a Xerces-C++ DOM error
     * handler.
     *
     * @param uri A URI or a local file name.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::std::wstring& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream.
     *
     * @param is A standrad input stream.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with an error handler.
     *
     * @param is A standrad input stream.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a Xerces-C++ DOM error
     * handler.
     *
     * @param is A standrad input stream.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream& is,
                            const ::std::wstring& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id and an
     * error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream& is,
                            const ::std::wstring& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id and a
     * Xerces-C++ DOM error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream& is,
                            const ::std::wstring& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM input source.
     *
     * @param is A Xerces-C++ DOM input source.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::xercesc::DOMInputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM input source with an error handler.
     *
     * @param is A Xerces-C++ DOM input source.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::xercesc::DOMInputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM input source with a Xerces-C++ DOM
     * error handler.
     *
     * @param is A Xerces-C++ DOM input source.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::xercesc::DOMInputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A pointer to the Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function is normally used together with the keep_dom and
     * own_dom parsing flags to assign ownership of the DOM document
     * to the object model.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::xercesc::DOMDocument* d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    //@}

    /**
     * @name Parsing functions for the %ClearAuthzCacheResponse document root.
     */
    //@{

    /**
     * @brief Parse a URI or a local file.
     *
     * @param uri A URI or a local file name.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::std::wstring& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a URI or a local file with an error handler.
     *
     * @param uri A URI or a local file name.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::std::wstring& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a URI or a local file with a Xerces-C++ DOM error
     * handler.
     *
     * @param uri A URI or a local file name.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::std::wstring& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream.
     *
     * @param is A standrad input stream.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with an error handler.
     *
     * @param is A standrad input stream.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a Xerces-C++ DOM error
     * handler.
     *
     * @param is A standrad input stream.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream& is,
                             const ::std::wstring& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id and an
     * error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream& is,
                             const ::std::wstring& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id and a
     * Xerces-C++ DOM error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream& is,
                             const ::std::wstring& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM input source.
     *
     * @param is A Xerces-C++ DOM input source.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::xercesc::DOMInputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM input source with an error handler.
     *
     * @param is A Xerces-C++ DOM input source.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::xercesc::DOMInputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM input source with a Xerces-C++ DOM
     * error handler.
     *
     * @param is A Xerces-C++ DOM input source.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::xercesc::DOMInputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A pointer to the Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function is normally used together with the keep_dom and
     * own_dom parsing flags to assign ownership of the DOM document
     * to the object model.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::xercesc::DOMDocument* d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    //@}

    /**
     * @name Parsing functions for the %ValidateInitializationRequest document root.
     */
    //@{

    /**
     * @brief Parse a URI or a local file.
     *
     * @param uri A URI or a local file name.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::std::wstring& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a URI or a local file with an error handler.
     *
     * @param uri A URI or a local file name.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::std::wstring& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a URI or a local file with a Xerces-C++ DOM error
     * handler.
     *
     * @param uri A URI or a local file name.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::std::wstring& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream.
     *
     * @param is A standrad input stream.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with an error handler.
     *
     * @param is A standrad input stream.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a Xerces-C++ DOM error
     * handler.
     *
     * @param is A standrad input stream.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream& is,
                                   const ::std::wstring& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id and an
     * error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream& is,
                                   const ::std::wstring& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id and a
     * Xerces-C++ DOM error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream& is,
                                   const ::std::wstring& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM input source.
     *
     * @param is A Xerces-C++ DOM input source.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::xercesc::DOMInputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM input source with an error handler.
     *
     * @param is A Xerces-C++ DOM input source.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::xercesc::DOMInputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM input source with a Xerces-C++ DOM
     * error handler.
     *
     * @param is A Xerces-C++ DOM input source.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::xercesc::DOMInputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A pointer to the Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function is normally used together with the keep_dom and
     * own_dom parsing flags to assign ownership of the DOM document
     * to the object model.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::xercesc::DOMDocument* d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    //@}

    /**
     * @name Parsing functions for the %ValidateInitializationResponse document root.
     */
    //@{

    /**
     * @brief Parse a URI or a local file.
     *
     * @param uri A URI or a local file name.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::std::wstring& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a URI or a local file with an error handler.
     *
     * @param uri A URI or a local file name.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::std::wstring& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a URI or a local file with a Xerces-C++ DOM error
     * handler.
     *
     * @param uri A URI or a local file name.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::std::wstring& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream.
     *
     * @param is A standrad input stream.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with an error handler.
     *
     * @param is A standrad input stream.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a Xerces-C++ DOM error
     * handler.
     *
     * @param is A standrad input stream.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream& is,
                                    const ::std::wstring& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id and an
     * error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream& is,
                                    const ::std::wstring& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id and a
     * Xerces-C++ DOM error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream& is,
                                    const ::std::wstring& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM input source.
     *
     * @param is A Xerces-C++ DOM input source.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::xercesc::DOMInputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM input source with an error handler.
     *
     * @param is A Xerces-C++ DOM input source.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::xercesc::DOMInputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM input source with a Xerces-C++ DOM
     * error handler.
     *
     * @param is A Xerces-C++ DOM input source.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::xercesc::DOMInputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A pointer to the Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function is normally used together with the keep_dom and
     * own_dom parsing flags to assign ownership of the DOM document
     * to the object model.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::xercesc::DOMDocument* d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    //@}
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace middleware
{
  namespace ESOEProtocolSchema
  {
    /**
     * @name Serialization functions for the %ClearAuthzCacheRequest document root.
     */
    //@{

    /**
     * @brief Serialize to a standard output stream.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    SAML2EXPORT
    void
    ClearAuthzCacheRequest (::std::ostream& os,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& x, 
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::wstring& e = L"UTF-8",
                            ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a standard output stream with an error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh An error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    ClearAuthzCacheRequest (::std::ostream& os,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& x, 
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::error_handler& eh,
                            const ::std::wstring& e = L"UTF-8",
                            ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a standard output stream with a Xerces-C++ DOM
     * error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh A Xerces-C++ DOM error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    ClearAuthzCacheRequest (::std::ostream& os,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& x, 
                            const ::xml_schema::namespace_infomap& m,
                            ::xercesc::DOMErrorHandler& eh,
                            const ::std::wstring& e = L"UTF-8",
                            ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    SAML2EXPORT
    void
    ClearAuthzCacheRequest (::xercesc::XMLFormatTarget& ft,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& x, 
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::wstring& e = L"UTF-8",
                            ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with an error
     * handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh An error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    ClearAuthzCacheRequest (::xercesc::XMLFormatTarget& ft,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& x, 
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::error_handler& eh,
                            const ::std::wstring& e = L"UTF-8",
                            ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with a
     * Xerces-C++ DOM error handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh A Xerces-C++ DOM error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    ClearAuthzCacheRequest (::xercesc::XMLFormatTarget& ft,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& x, 
                            const ::xml_schema::namespace_infomap& m,
                            ::xercesc::DOMErrorHandler& eh,
                            const ::std::wstring& e = L"UTF-8",
                            ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to an existing Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param x An object model to serialize.
     * @param f Serialization flags.
     *
     * Note that it is your responsibility to create the DOM document
     * with the correct root element as well as set the necessary
     * namespace mapping attributes.
     */
    SAML2EXPORT
    void
    ClearAuthzCacheRequest (::xercesc::DOMDocument& d,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& x,
                            ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a new Xerces-C++ DOM document.
     *
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param f Serialization flags.
     * @return A pointer to the new Xerces-C++ DOM document.
     */
    SAML2EXPORT
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ClearAuthzCacheRequest (const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& x, 
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::flags f = 0);

    //@}

    SAML2EXPORT
    void
    operator<< (::xercesc::DOMElement&, const ClearAuthzCacheRequestType&);

    /**
     * @name Serialization functions for the %ClearAuthzCacheResponse document root.
     */
    //@{

    /**
     * @brief Serialize to a standard output stream.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    SAML2EXPORT
    void
    ClearAuthzCacheResponse (::std::ostream& os,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& x, 
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a standard output stream with an error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh An error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    ClearAuthzCacheResponse (::std::ostream& os,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& x, 
                             const ::xml_schema::namespace_infomap& m,
                             ::xml_schema::error_handler& eh,
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a standard output stream with a Xerces-C++ DOM
     * error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh A Xerces-C++ DOM error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    ClearAuthzCacheResponse (::std::ostream& os,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& x, 
                             const ::xml_schema::namespace_infomap& m,
                             ::xercesc::DOMErrorHandler& eh,
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    SAML2EXPORT
    void
    ClearAuthzCacheResponse (::xercesc::XMLFormatTarget& ft,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& x, 
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with an error
     * handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh An error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    ClearAuthzCacheResponse (::xercesc::XMLFormatTarget& ft,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& x, 
                             const ::xml_schema::namespace_infomap& m,
                             ::xml_schema::error_handler& eh,
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with a
     * Xerces-C++ DOM error handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh A Xerces-C++ DOM error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    ClearAuthzCacheResponse (::xercesc::XMLFormatTarget& ft,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& x, 
                             const ::xml_schema::namespace_infomap& m,
                             ::xercesc::DOMErrorHandler& eh,
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to an existing Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param x An object model to serialize.
     * @param f Serialization flags.
     *
     * Note that it is your responsibility to create the DOM document
     * with the correct root element as well as set the necessary
     * namespace mapping attributes.
     */
    SAML2EXPORT
    void
    ClearAuthzCacheResponse (::xercesc::DOMDocument& d,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& x,
                             ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a new Xerces-C++ DOM document.
     *
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param f Serialization flags.
     * @return A pointer to the new Xerces-C++ DOM document.
     */
    SAML2EXPORT
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ClearAuthzCacheResponse (const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& x, 
                             const ::xml_schema::namespace_infomap& m,
                             ::xml_schema::flags f = 0);

    //@}

    SAML2EXPORT
    void
    operator<< (::xercesc::DOMElement&, const ClearAuthzCacheResponseType&);

    /**
     * @name Serialization functions for the %ValidateInitializationRequest document root.
     */
    //@{

    /**
     * @brief Serialize to a standard output stream.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    SAML2EXPORT
    void
    ValidateInitializationRequest (::std::ostream& os,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& x, 
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::wstring& e = L"UTF-8",
                                   ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a standard output stream with an error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh An error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    ValidateInitializationRequest (::std::ostream& os,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& x, 
                                   const ::xml_schema::namespace_infomap& m,
                                   ::xml_schema::error_handler& eh,
                                   const ::std::wstring& e = L"UTF-8",
                                   ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a standard output stream with a Xerces-C++ DOM
     * error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh A Xerces-C++ DOM error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    ValidateInitializationRequest (::std::ostream& os,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& x, 
                                   const ::xml_schema::namespace_infomap& m,
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::std::wstring& e = L"UTF-8",
                                   ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    SAML2EXPORT
    void
    ValidateInitializationRequest (::xercesc::XMLFormatTarget& ft,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& x, 
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::wstring& e = L"UTF-8",
                                   ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with an error
     * handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh An error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    ValidateInitializationRequest (::xercesc::XMLFormatTarget& ft,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& x, 
                                   const ::xml_schema::namespace_infomap& m,
                                   ::xml_schema::error_handler& eh,
                                   const ::std::wstring& e = L"UTF-8",
                                   ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with a
     * Xerces-C++ DOM error handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh A Xerces-C++ DOM error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    ValidateInitializationRequest (::xercesc::XMLFormatTarget& ft,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& x, 
                                   const ::xml_schema::namespace_infomap& m,
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::std::wstring& e = L"UTF-8",
                                   ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to an existing Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param x An object model to serialize.
     * @param f Serialization flags.
     *
     * Note that it is your responsibility to create the DOM document
     * with the correct root element as well as set the necessary
     * namespace mapping attributes.
     */
    SAML2EXPORT
    void
    ValidateInitializationRequest (::xercesc::DOMDocument& d,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& x,
                                   ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a new Xerces-C++ DOM document.
     *
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param f Serialization flags.
     * @return A pointer to the new Xerces-C++ DOM document.
     */
    SAML2EXPORT
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ValidateInitializationRequest (const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& x, 
                                   const ::xml_schema::namespace_infomap& m,
                                   ::xml_schema::flags f = 0);

    //@}

    SAML2EXPORT
    void
    operator<< (::xercesc::DOMElement&, const ValidateInitializationRequestType&);

    /**
     * @name Serialization functions for the %ValidateInitializationResponse document root.
     */
    //@{

    /**
     * @brief Serialize to a standard output stream.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    SAML2EXPORT
    void
    ValidateInitializationResponse (::std::ostream& os,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& x, 
                                    const ::xml_schema::namespace_infomap& m,
                                    const ::std::wstring& e = L"UTF-8",
                                    ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a standard output stream with an error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh An error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    ValidateInitializationResponse (::std::ostream& os,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& x, 
                                    const ::xml_schema::namespace_infomap& m,
                                    ::xml_schema::error_handler& eh,
                                    const ::std::wstring& e = L"UTF-8",
                                    ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a standard output stream with a Xerces-C++ DOM
     * error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh A Xerces-C++ DOM error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    ValidateInitializationResponse (::std::ostream& os,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& x, 
                                    const ::xml_schema::namespace_infomap& m,
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::std::wstring& e = L"UTF-8",
                                    ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    SAML2EXPORT
    void
    ValidateInitializationResponse (::xercesc::XMLFormatTarget& ft,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& x, 
                                    const ::xml_schema::namespace_infomap& m,
                                    const ::std::wstring& e = L"UTF-8",
                                    ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with an error
     * handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh An error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    ValidateInitializationResponse (::xercesc::XMLFormatTarget& ft,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& x, 
                                    const ::xml_schema::namespace_infomap& m,
                                    ::xml_schema::error_handler& eh,
                                    const ::std::wstring& e = L"UTF-8",
                                    ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with a
     * Xerces-C++ DOM error handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh A Xerces-C++ DOM error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    ValidateInitializationResponse (::xercesc::XMLFormatTarget& ft,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& x, 
                                    const ::xml_schema::namespace_infomap& m,
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::std::wstring& e = L"UTF-8",
                                    ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to an existing Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param x An object model to serialize.
     * @param f Serialization flags.
     *
     * Note that it is your responsibility to create the DOM document
     * with the correct root element as well as set the necessary
     * namespace mapping attributes.
     */
    SAML2EXPORT
    void
    ValidateInitializationResponse (::xercesc::DOMDocument& d,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& x,
                                    ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a new Xerces-C++ DOM document.
     *
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param f Serialization flags.
     * @return A pointer to the new Xerces-C++ DOM document.
     */
    SAML2EXPORT
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ValidateInitializationResponse (const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& x, 
                                    const ::xml_schema::namespace_infomap& m,
                                    ::xml_schema::flags f = 0);

    //@}

    SAML2EXPORT
    void
    operator<< (::xercesc::DOMElement&, const ValidateInitializationResponseType&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // ESOE_SCHEMA_SAML_PROTOCOL_HXX
