// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

/**
 * @file
 * @brief Generated from ../saml2cpp/schema/soap-1.1-envelope.xsd.
 */

#ifndef SOAP_1_1_ENVELOPE_HXX
#define SOAP_1_1_ENVELOPE_HXX

// Begin prologue.
//
#include "saml2/SAML2Defs.h"
//
// End prologue.

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 3000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include "saml2/xsd/xml-schema.hxx"

// Forward declarations.
//
namespace soap
{
  namespace v11
  {
    class Envelope;
    class Header;
    class Body;
    class encodingStyle;
    class Fault;
    class detail;
    class mustUnderstand;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>
#include <xsd/cxx/tree/containers-wildcard.hxx>

namespace soap
{
  /**
   * @brief C++ namespace for the %http://schemas.xmlsoap.org/soap/envelope/
   * schema namespace.
   */
  namespace v11
  {
    /**
     * @brief Class corresponding to the %Envelope schema type.
     *
     * @nosubgrouping
     */
    class SAML2EXPORT Envelope: public ::xml_schema::type
    {
      public:
      /**
       * @name Header
       *
       * @brief Accessor and modifier functions for the %Header
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::soap::v11::Header Header_type;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< Header_type > Header_optional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< Header_type, wchar_t > Header_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const Header_optional&
      Header () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      Header_optional&
      Header ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      Header (const Header_type& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      Header (const Header_optional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      Header (::std::auto_ptr< Header_type > p);

      //@}

      /**
       * @name Body
       *
       * @brief Accessor and modifier functions for the %Body
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::soap::v11::Body Body_type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< Body_type, wchar_t > Body_traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const Body_type&
      Body () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      Body_type&
      Body ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      Body (const Body_type& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      Body (::std::auto_ptr< Body_type > p);

      //@}

      /**
       * @name any
       *
       * @brief Accessor and modifier functions for the any wildcard.
       */
      //@{

      /**
       * @brief DOM element sequence container type.
       */
      typedef ::xsd::cxx::tree::element_sequence any_sequence;

      /**
       * @brief DOM element iterator type.
       */
      typedef any_sequence::iterator any_iterator;

      /**
       * @brief DOM element constant iterator type.
       */
      typedef any_sequence::const_iterator any_const_iterator;

      /**
       * @brief Return a read-only (constant) reference to the wildcard
       * element sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const any_sequence&
      any () const;

      /**
       * @brief Return a read-write reference to the wildcard element
       * sequence.
       *
       * @return A reference to the sequence container.
       */
      any_sequence&
      any ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds
       * it to the wildcard element sequence. Note that this operation
       * completely changes the sequence and all old elements will be
       * lost.
       */
      void
      any (const any_sequence& s);

      //@}

      /**
       * @name any_attribute
       *
       * @brief Accessor and modifier functions for the anyAttribute
       * wildcard.
       */
      //@{

      /**
       * @brief DOM attribute set container type.
       */
      typedef ::xsd::cxx::tree::attribute_set< wchar_t > any_attribute_set;

      /**
       * @brief DOM attribute iterator type.
       */
      typedef any_attribute_set::iterator any_attribute_iterator;

      /**
       * @brief DOM attribute constant iterator type.
       */
      typedef any_attribute_set::const_iterator any_attribute_const_iterator;

      /**
       * @brief Return a read-only (constant) reference to the
       * attribute set.
       *
       * @return A constant reference to the set container.
       */
      const any_attribute_set&
      any_attribute () const;

      /**
       * @brief Return a read-write reference to the attribute set.
       *
       * @return A reference to the set container.
       */
      any_attribute_set&
      any_attribute ();

      /**
       * @brief Copy attributes from a given set.
       *
       * @param s A set to copy elements from.
       *
       * For each attribute in @a s this function makes a copy and adds
       * it to the set. Note that this operation completely changes the 
       * set and all old attributes will be lost.
       */
      void
      any_attribute (const any_attribute_set& s);

      //@}

      /**
       * @brief Return a read-only (constant) reference to the DOM
       * document associated with this instance.
       *
       * @return A constant reference to the DOM document.
       *
       * The DOM document returned by this function is used to store
       * the raw XML content corresponding to wildcards.
       */
      const ::xercesc::DOMDocument&
      dom_document () const;

      /**
       * @brief Return a read-write reference to the DOM document
       * associated with this instance.
       *
       * @return A reference to the DOM document.
       *
       * The DOM document returned by this function is used to store
       * the raw XML content corresponding to wildcards.
       */
      ::xercesc::DOMDocument&
      dom_document ();

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Default constructor.
       *
       * Note that this constructor leaves required elements and
       * attributes uninitialized.
       */
      Envelope ();

      /**
       * @brief Construct an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      Envelope (const Body_type&);

      /**
       * @brief Construct an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to construct the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      Envelope (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to construct the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the _clone function instead.
       */
      Envelope (const Envelope& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0);

      /**
       * @brief Copy the object polymorphically.
       *
       * @param f Flags to construct the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of an instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual Envelope*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0) const;

      //@}

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      private:
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      Header_optional Header_;
      ::xsd::cxx::tree::one< Body_type > Body_;
      any_sequence any_;
      any_attribute_set any_attribute_;
    };

    /**
     * @brief Class corresponding to the %Header schema type.
     *
     * @nosubgrouping
     */
    class SAML2EXPORT Header: public ::xml_schema::type
    {
      public:
      /**
       * @name any
       *
       * @brief Accessor and modifier functions for the any wildcard.
       */
      //@{

      /**
       * @brief DOM element sequence container type.
       */
      typedef ::xsd::cxx::tree::element_sequence any_sequence;

      /**
       * @brief DOM element iterator type.
       */
      typedef any_sequence::iterator any_iterator;

      /**
       * @brief DOM element constant iterator type.
       */
      typedef any_sequence::const_iterator any_const_iterator;

      /**
       * @brief Return a read-only (constant) reference to the wildcard
       * element sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const any_sequence&
      any () const;

      /**
       * @brief Return a read-write reference to the wildcard element
       * sequence.
       *
       * @return A reference to the sequence container.
       */
      any_sequence&
      any ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds
       * it to the wildcard element sequence. Note that this operation
       * completely changes the sequence and all old elements will be
       * lost.
       */
      void
      any (const any_sequence& s);

      //@}

      /**
       * @name any_attribute
       *
       * @brief Accessor and modifier functions for the anyAttribute
       * wildcard.
       */
      //@{

      /**
       * @brief DOM attribute set container type.
       */
      typedef ::xsd::cxx::tree::attribute_set< wchar_t > any_attribute_set;

      /**
       * @brief DOM attribute iterator type.
       */
      typedef any_attribute_set::iterator any_attribute_iterator;

      /**
       * @brief DOM attribute constant iterator type.
       */
      typedef any_attribute_set::const_iterator any_attribute_const_iterator;

      /**
       * @brief Return a read-only (constant) reference to the
       * attribute set.
       *
       * @return A constant reference to the set container.
       */
      const any_attribute_set&
      any_attribute () const;

      /**
       * @brief Return a read-write reference to the attribute set.
       *
       * @return A reference to the set container.
       */
      any_attribute_set&
      any_attribute ();

      /**
       * @brief Copy attributes from a given set.
       *
       * @param s A set to copy elements from.
       *
       * For each attribute in @a s this function makes a copy and adds
       * it to the set. Note that this operation completely changes the 
       * set and all old attributes will be lost.
       */
      void
      any_attribute (const any_attribute_set& s);

      //@}

      /**
       * @brief Return a read-only (constant) reference to the DOM
       * document associated with this instance.
       *
       * @return A constant reference to the DOM document.
       *
       * The DOM document returned by this function is used to store
       * the raw XML content corresponding to wildcards.
       */
      const ::xercesc::DOMDocument&
      dom_document () const;

      /**
       * @brief Return a read-write reference to the DOM document
       * associated with this instance.
       *
       * @return A reference to the DOM document.
       *
       * The DOM document returned by this function is used to store
       * the raw XML content corresponding to wildcards.
       */
      ::xercesc::DOMDocument&
      dom_document ();

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Construct an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      Header ();

      /**
       * @brief Construct an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to construct the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      Header (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to construct the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the _clone function instead.
       */
      Header (const Header& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0);

      /**
       * @brief Copy the object polymorphically.
       *
       * @param f Flags to construct the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of an instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual Header*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0) const;

      //@}

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      private:
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      any_sequence any_;
      any_attribute_set any_attribute_;
    };

    /**
     * @brief Class corresponding to the %Body schema type.
     *
     * @nosubgrouping
     */
    class SAML2EXPORT Body: public ::xml_schema::type
    {
      public:
      /**
       * @name any
       *
       * @brief Accessor and modifier functions for the any wildcard.
       */
      //@{

      /**
       * @brief DOM element sequence container type.
       */
      typedef ::xsd::cxx::tree::element_sequence any_sequence;

      /**
       * @brief DOM element iterator type.
       */
      typedef any_sequence::iterator any_iterator;

      /**
       * @brief DOM element constant iterator type.
       */
      typedef any_sequence::const_iterator any_const_iterator;

      /**
       * @brief Return a read-only (constant) reference to the wildcard
       * element sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const any_sequence&
      any () const;

      /**
       * @brief Return a read-write reference to the wildcard element
       * sequence.
       *
       * @return A reference to the sequence container.
       */
      any_sequence&
      any ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds
       * it to the wildcard element sequence. Note that this operation
       * completely changes the sequence and all old elements will be
       * lost.
       */
      void
      any (const any_sequence& s);

      //@}

      /**
       * @name any_attribute
       *
       * @brief Accessor and modifier functions for the anyAttribute
       * wildcard.
       *
       * Prose in the spec does not specify that attributes are allowed on the Body
       * element
       */
      //@{

      /**
       * @brief DOM attribute set container type.
       */
      typedef ::xsd::cxx::tree::attribute_set< wchar_t > any_attribute_set;

      /**
       * @brief DOM attribute iterator type.
       */
      typedef any_attribute_set::iterator any_attribute_iterator;

      /**
       * @brief DOM attribute constant iterator type.
       */
      typedef any_attribute_set::const_iterator any_attribute_const_iterator;

      /**
       * @brief Return a read-only (constant) reference to the
       * attribute set.
       *
       * @return A constant reference to the set container.
       */
      const any_attribute_set&
      any_attribute () const;

      /**
       * @brief Return a read-write reference to the attribute set.
       *
       * @return A reference to the set container.
       */
      any_attribute_set&
      any_attribute ();

      /**
       * @brief Copy attributes from a given set.
       *
       * @param s A set to copy elements from.
       *
       * For each attribute in @a s this function makes a copy and adds
       * it to the set. Note that this operation completely changes the 
       * set and all old attributes will be lost.
       */
      void
      any_attribute (const any_attribute_set& s);

      //@}

      /**
       * @brief Return a read-only (constant) reference to the DOM
       * document associated with this instance.
       *
       * @return A constant reference to the DOM document.
       *
       * The DOM document returned by this function is used to store
       * the raw XML content corresponding to wildcards.
       */
      const ::xercesc::DOMDocument&
      dom_document () const;

      /**
       * @brief Return a read-write reference to the DOM document
       * associated with this instance.
       *
       * @return A reference to the DOM document.
       *
       * The DOM document returned by this function is used to store
       * the raw XML content corresponding to wildcards.
       */
      ::xercesc::DOMDocument&
      dom_document ();

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Construct an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      Body ();

      /**
       * @brief Construct an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to construct the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      Body (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to construct the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the _clone function instead.
       */
      Body (const Body& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0);

      /**
       * @brief Copy the object polymorphically.
       *
       * @param f Flags to construct the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of an instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual Body*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0) const;

      //@}

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      private:
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      any_sequence any_;
      any_attribute_set any_attribute_;
    };

    /**
     * @brief List class corresponding to the %encodingStyle
     * schema type.
     *
     * This class has an interface of a standard C++ sequence (e.g.,
     * std::vector).
     *
     * 'encodingStyle' indicates any canonicalization conventions followed in the
     * contents of the containing element.  For example, the value
     * 'http://schemas.xmlsoap.org/soap/encoding/' indicates the pattern described in
     * SOAP specification
     */
    class SAML2EXPORT encodingStyle: public ::xml_schema::simple_type, public ::xsd::cxx::tree::list< ::xml_schema::uri, wchar_t >
    {
      public:
      /**
       * @brief Default constructor.
       *
       * Constructs an empty list.
       */
      encodingStyle ();

      /**
       * @brief Construct an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to construct the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      encodingStyle (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::type* c = 0);

      /**
       * @brief Construct an instance from a DOM attribute.
       *
       * @param a A DOM attribute to extract the data from.
       * @param f Flags to construct the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      encodingStyle (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::type* c = 0);

      /**
       * @brief Construct an instance from a string fragment.
       *
       * @param s A string fragment to extract the data from.
       * @param e A DOM element containing the string fragment.
       * @param f Flags to construct the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      encodingStyle (const ::std::wstring& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::type* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to construct the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the _clone function instead.
       */
      encodingStyle (const encodingStyle& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::type* c = 0);

      /**
       * @brief Copy the object polymorphically.
       *
       * @param f Flags to construct the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of an instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual encodingStyle*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0) const;
    };

    /**
     * @brief Class corresponding to the %Fault schema type.
     *
     * Fault reporting structure
     *
     * @nosubgrouping
     */
    class SAML2EXPORT Fault: public ::xml_schema::type
    {
      public:
      /**
       * @name faultcode
       *
       * @brief Accessor and modifier functions for the %faultcode
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::qname faultcode_type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< faultcode_type, wchar_t > faultcode_traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const faultcode_type&
      faultcode () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      faultcode_type&
      faultcode ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      faultcode (const faultcode_type& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      faultcode (::std::auto_ptr< faultcode_type > p);

      //@}

      /**
       * @name faultstring
       *
       * @brief Accessor and modifier functions for the %faultstring
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::string faultstring_type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< faultstring_type, wchar_t > faultstring_traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const faultstring_type&
      faultstring () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      faultstring_type&
      faultstring ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      faultstring (const faultstring_type& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      faultstring (::std::auto_ptr< faultstring_type > p);

      //@}

      /**
       * @name faultactor
       *
       * @brief Accessor and modifier functions for the %faultactor
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::uri faultactor_type;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< faultactor_type > faultactor_optional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< faultactor_type, wchar_t > faultactor_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const faultactor_optional&
      faultactor () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      faultactor_optional&
      faultactor ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      faultactor (const faultactor_type& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      faultactor (const faultactor_optional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      faultactor (::std::auto_ptr< faultactor_type > p);

      //@}

      /**
       * @name detail
       *
       * @brief Accessor and modifier functions for the %detail
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::soap::v11::detail detail_type;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< detail_type > detail_optional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< detail_type, wchar_t > detail_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const detail_optional&
      detail () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      detail_optional&
      detail ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      detail (const detail_type& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      detail (const detail_optional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      detail (::std::auto_ptr< detail_type > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Default constructor.
       *
       * Note that this constructor leaves required elements and
       * attributes uninitialized.
       */
      Fault ();

      /**
       * @brief Construct an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      Fault (const faultcode_type&,
             const faultstring_type&);

      /**
       * @brief Construct an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to construct the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      Fault (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::type* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to construct the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the _clone function instead.
       */
      Fault (const Fault& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::type* c = 0);

      /**
       * @brief Copy the object polymorphically.
       *
       * @param f Flags to construct the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of an instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual Fault*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0) const;

      //@}

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      private:
      ::xsd::cxx::tree::one< faultcode_type > faultcode_;
      ::xsd::cxx::tree::one< faultstring_type > faultstring_;
      faultactor_optional faultactor_;
      detail_optional detail_;
    };

    /**
     * @brief Class corresponding to the %detail schema type.
     *
     * @nosubgrouping
     */
    class SAML2EXPORT detail: public ::xml_schema::type
    {
      public:
      /**
       * @name any
       *
       * @brief Accessor and modifier functions for the any wildcard.
       */
      //@{

      /**
       * @brief DOM element sequence container type.
       */
      typedef ::xsd::cxx::tree::element_sequence any_sequence;

      /**
       * @brief DOM element iterator type.
       */
      typedef any_sequence::iterator any_iterator;

      /**
       * @brief DOM element constant iterator type.
       */
      typedef any_sequence::const_iterator any_const_iterator;

      /**
       * @brief Return a read-only (constant) reference to the wildcard
       * element sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const any_sequence&
      any () const;

      /**
       * @brief Return a read-write reference to the wildcard element
       * sequence.
       *
       * @return A reference to the sequence container.
       */
      any_sequence&
      any ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds
       * it to the wildcard element sequence. Note that this operation
       * completely changes the sequence and all old elements will be
       * lost.
       */
      void
      any (const any_sequence& s);

      //@}

      /**
       * @name any_attribute
       *
       * @brief Accessor and modifier functions for the anyAttribute
       * wildcard.
       */
      //@{

      /**
       * @brief DOM attribute set container type.
       */
      typedef ::xsd::cxx::tree::attribute_set< wchar_t > any_attribute_set;

      /**
       * @brief DOM attribute iterator type.
       */
      typedef any_attribute_set::iterator any_attribute_iterator;

      /**
       * @brief DOM attribute constant iterator type.
       */
      typedef any_attribute_set::const_iterator any_attribute_const_iterator;

      /**
       * @brief Return a read-only (constant) reference to the
       * attribute set.
       *
       * @return A constant reference to the set container.
       */
      const any_attribute_set&
      any_attribute () const;

      /**
       * @brief Return a read-write reference to the attribute set.
       *
       * @return A reference to the set container.
       */
      any_attribute_set&
      any_attribute ();

      /**
       * @brief Copy attributes from a given set.
       *
       * @param s A set to copy elements from.
       *
       * For each attribute in @a s this function makes a copy and adds
       * it to the set. Note that this operation completely changes the 
       * set and all old attributes will be lost.
       */
      void
      any_attribute (const any_attribute_set& s);

      //@}

      /**
       * @brief Return a read-only (constant) reference to the DOM
       * document associated with this instance.
       *
       * @return A constant reference to the DOM document.
       *
       * The DOM document returned by this function is used to store
       * the raw XML content corresponding to wildcards.
       */
      const ::xercesc::DOMDocument&
      dom_document () const;

      /**
       * @brief Return a read-write reference to the DOM document
       * associated with this instance.
       *
       * @return A reference to the DOM document.
       *
       * The DOM document returned by this function is used to store
       * the raw XML content corresponding to wildcards.
       */
      ::xercesc::DOMDocument&
      dom_document ();

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Construct an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      detail ();

      /**
       * @brief Construct an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to construct the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      detail (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to construct the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the _clone function instead.
       */
      detail (const detail& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0);

      /**
       * @brief Copy the object polymorphically.
       *
       * @param f Flags to construct the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of an instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual detail*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0) const;

      //@}

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      private:
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      any_sequence any_;
      any_attribute_set any_attribute_;
    };

    /**
     * @brief Class corresponding to the %mustUnderstand schema type.
     *
     * @nosubgrouping
     */
    class SAML2EXPORT mustUnderstand: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::boolean, wchar_t, ::xml_schema::simple_type >
    {
      public:
      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Default constructor.
       *
       * Note that this constructor leaves required elements and
       * attributes uninitialized.
       */
      mustUnderstand ();

      /**
       * @brief Construct an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      mustUnderstand (const ::xml_schema::boolean&);

      /**
       * @brief Construct an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to construct the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      mustUnderstand (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::type* c = 0);

      /**
       * @brief Construct an instance from a DOM attribute.
       *
       * @param a A DOM attribute to extract the data from.
       * @param f Flags to construct the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      mustUnderstand (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::type* c = 0);

      /**
       * @brief Construct an instance from a string fragment.
       *
       * @param s A string fragment to extract the data from.
       * @param e A DOM element containing the string fragment.
       * @param f Flags to construct the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      mustUnderstand (const ::std::wstring& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::type* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to construct the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the _clone function instead.
       */
      mustUnderstand (const mustUnderstand& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::type* c = 0);

      /**
       * @brief Copy the object polymorphically.
       *
       * @param f Flags to construct the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of an instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual mustUnderstand*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0) const;

      //@}
    };
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMInputSource.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace soap
{
  namespace v11
  {
    /**
     * @name Parsing functions for the %Envelope document root.
     */
    //@{

    /**
     * @brief Parse a URI or a local file.
     *
     * @param uri A URI or a local file name.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (const ::std::wstring& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a URI or a local file with an error handler.
     *
     * @param uri A URI or a local file name.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (const ::std::wstring& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a URI or a local file with a Xerces-C++ DOM error
     * handler.
     *
     * @param uri A URI or a local file name.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (const ::std::wstring& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream.
     *
     * @param is A standrad input stream.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with an error handler.
     *
     * @param is A standrad input stream.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a Xerces-C++ DOM error
     * handler.
     *
     * @param is A standrad input stream.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id and an
     * error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id and a
     * Xerces-C++ DOM error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (::std::istream& is,
               const ::std::wstring& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM input source.
     *
     * @param is A Xerces-C++ DOM input source.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (const ::xercesc::DOMInputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM input source with an error handler.
     *
     * @param is A Xerces-C++ DOM input source.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (const ::xercesc::DOMInputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM input source with a Xerces-C++ DOM
     * error handler.
     *
     * @param is A Xerces-C++ DOM input source.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (const ::xercesc::DOMInputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A pointer to the Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function is normally used together with the keep_dom and
     * own_dom parsing flags to assign ownership of the DOM document
     * to the object model.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (::xercesc::DOMDocument* d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    //@}

    /**
     * @name Parsing functions for the %Header document root.
     */
    //@{

    /**
     * @brief Parse a URI or a local file.
     *
     * @param uri A URI or a local file name.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (const ::std::wstring& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a URI or a local file with an error handler.
     *
     * @param uri A URI or a local file name.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (const ::std::wstring& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a URI or a local file with a Xerces-C++ DOM error
     * handler.
     *
     * @param uri A URI or a local file name.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (const ::std::wstring& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream.
     *
     * @param is A standrad input stream.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with an error handler.
     *
     * @param is A standrad input stream.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a Xerces-C++ DOM error
     * handler.
     *
     * @param is A standrad input stream.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (::std::istream& is,
             const ::std::wstring& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id and an
     * error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (::std::istream& is,
             const ::std::wstring& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id and a
     * Xerces-C++ DOM error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (::std::istream& is,
             const ::std::wstring& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM input source.
     *
     * @param is A Xerces-C++ DOM input source.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (const ::xercesc::DOMInputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM input source with an error handler.
     *
     * @param is A Xerces-C++ DOM input source.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (const ::xercesc::DOMInputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM input source with a Xerces-C++ DOM
     * error handler.
     *
     * @param is A Xerces-C++ DOM input source.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (const ::xercesc::DOMInputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A pointer to the Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function is normally used together with the keep_dom and
     * own_dom parsing flags to assign ownership of the DOM document
     * to the object model.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (::xercesc::DOMDocument* d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    //@}

    /**
     * @name Parsing functions for the %Body document root.
     */
    //@{

    /**
     * @brief Parse a URI or a local file.
     *
     * @param uri A URI or a local file name.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (const ::std::wstring& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a URI or a local file with an error handler.
     *
     * @param uri A URI or a local file name.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (const ::std::wstring& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a URI or a local file with a Xerces-C++ DOM error
     * handler.
     *
     * @param uri A URI or a local file name.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (const ::std::wstring& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream.
     *
     * @param is A standrad input stream.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with an error handler.
     *
     * @param is A standrad input stream.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a Xerces-C++ DOM error
     * handler.
     *
     * @param is A standrad input stream.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (::std::istream& is,
           const ::std::wstring& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id and an
     * error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (::std::istream& is,
           const ::std::wstring& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id and a
     * Xerces-C++ DOM error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (::std::istream& is,
           const ::std::wstring& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM input source.
     *
     * @param is A Xerces-C++ DOM input source.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (const ::xercesc::DOMInputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM input source with an error handler.
     *
     * @param is A Xerces-C++ DOM input source.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (const ::xercesc::DOMInputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM input source with a Xerces-C++ DOM
     * error handler.
     *
     * @param is A Xerces-C++ DOM input source.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (const ::xercesc::DOMInputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A pointer to the Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function is normally used together with the keep_dom and
     * own_dom parsing flags to assign ownership of the DOM document
     * to the object model.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (::xercesc::DOMDocument* d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    //@}

    /**
     * @name Parsing functions for the %Fault document root.
     */
    //@{

    /**
     * @brief Parse a URI or a local file.
     *
     * @param uri A URI or a local file name.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (const ::std::wstring& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a URI or a local file with an error handler.
     *
     * @param uri A URI or a local file name.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (const ::std::wstring& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a URI or a local file with a Xerces-C++ DOM error
     * handler.
     *
     * @param uri A URI or a local file name.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (const ::std::wstring& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream.
     *
     * @param is A standrad input stream.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with an error handler.
     *
     * @param is A standrad input stream.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a Xerces-C++ DOM error
     * handler.
     *
     * @param is A standrad input stream.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id and an
     * error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id and a
     * Xerces-C++ DOM error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (::std::istream& is,
            const ::std::wstring& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM input source.
     *
     * @param is A Xerces-C++ DOM input source.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (const ::xercesc::DOMInputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM input source with an error handler.
     *
     * @param is A Xerces-C++ DOM input source.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (const ::xercesc::DOMInputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM input source with a Xerces-C++ DOM
     * error handler.
     *
     * @param is A Xerces-C++ DOM input source.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (const ::xercesc::DOMInputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A pointer to the Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function is normally used together with the keep_dom and
     * own_dom parsing flags to assign ownership of the DOM document
     * to the object model.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (::xercesc::DOMDocument* d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    //@}
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace soap
{
  namespace v11
  {
    /**
     * @name Serialization functions for the %Envelope document root.
     */
    //@{

    /**
     * @brief Serialize to a standard output stream.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    SAML2EXPORT
    void
    Envelope_ (::std::ostream& os,
               const ::soap::v11::Envelope& x, 
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a standard output stream with an error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh An error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    Envelope_ (::std::ostream& os,
               const ::soap::v11::Envelope& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& eh,
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a standard output stream with a Xerces-C++ DOM
     * error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh A Xerces-C++ DOM error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    Envelope_ (::std::ostream& os,
               const ::soap::v11::Envelope& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& eh,
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    SAML2EXPORT
    void
    Envelope_ (::xercesc::XMLFormatTarget& ft,
               const ::soap::v11::Envelope& x, 
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with an error
     * handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh An error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    Envelope_ (::xercesc::XMLFormatTarget& ft,
               const ::soap::v11::Envelope& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& eh,
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with a
     * Xerces-C++ DOM error handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh A Xerces-C++ DOM error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    Envelope_ (::xercesc::XMLFormatTarget& ft,
               const ::soap::v11::Envelope& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& eh,
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to an existing Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param x An object model to serialize.
     * @param f Serialization flags.
     *
     * Note that it is your responsibility to create the DOM document
     * with the correct root element as well as set the necessary
     * namespace mapping attributes.
     */
    SAML2EXPORT
    void
    Envelope_ (::xercesc::DOMDocument& d,
               const ::soap::v11::Envelope& x,
               ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a new Xerces-C++ DOM document.
     *
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param f Serialization flags.
     * @return A pointer to the new Xerces-C++ DOM document.
     */
    SAML2EXPORT
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Envelope_ (const ::soap::v11::Envelope& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f = 0);

    //@}

    SAML2EXPORT
    void
    operator<< (::xercesc::DOMElement&, const Envelope&);

    /**
     * @name Serialization functions for the %Header document root.
     */
    //@{

    /**
     * @brief Serialize to a standard output stream.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    SAML2EXPORT
    void
    Header_ (::std::ostream& os,
             const ::soap::v11::Header& x, 
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a standard output stream with an error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh An error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    Header_ (::std::ostream& os,
             const ::soap::v11::Header& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& eh,
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a standard output stream with a Xerces-C++ DOM
     * error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh A Xerces-C++ DOM error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    Header_ (::std::ostream& os,
             const ::soap::v11::Header& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& eh,
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    SAML2EXPORT
    void
    Header_ (::xercesc::XMLFormatTarget& ft,
             const ::soap::v11::Header& x, 
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with an error
     * handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh An error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    Header_ (::xercesc::XMLFormatTarget& ft,
             const ::soap::v11::Header& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& eh,
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with a
     * Xerces-C++ DOM error handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh A Xerces-C++ DOM error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    Header_ (::xercesc::XMLFormatTarget& ft,
             const ::soap::v11::Header& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& eh,
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to an existing Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param x An object model to serialize.
     * @param f Serialization flags.
     *
     * Note that it is your responsibility to create the DOM document
     * with the correct root element as well as set the necessary
     * namespace mapping attributes.
     */
    SAML2EXPORT
    void
    Header_ (::xercesc::DOMDocument& d,
             const ::soap::v11::Header& x,
             ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a new Xerces-C++ DOM document.
     *
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param f Serialization flags.
     * @return A pointer to the new Xerces-C++ DOM document.
     */
    SAML2EXPORT
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Header_ (const ::soap::v11::Header& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f = 0);

    //@}

    SAML2EXPORT
    void
    operator<< (::xercesc::DOMElement&, const Header&);

    /**
     * @name Serialization functions for the %Body document root.
     */
    //@{

    /**
     * @brief Serialize to a standard output stream.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    SAML2EXPORT
    void
    Body_ (::std::ostream& os,
           const ::soap::v11::Body& x, 
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e = L"UTF-8",
           ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a standard output stream with an error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh An error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    Body_ (::std::ostream& os,
           const ::soap::v11::Body& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& eh,
           const ::std::wstring& e = L"UTF-8",
           ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a standard output stream with a Xerces-C++ DOM
     * error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh A Xerces-C++ DOM error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    Body_ (::std::ostream& os,
           const ::soap::v11::Body& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& eh,
           const ::std::wstring& e = L"UTF-8",
           ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    SAML2EXPORT
    void
    Body_ (::xercesc::XMLFormatTarget& ft,
           const ::soap::v11::Body& x, 
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e = L"UTF-8",
           ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with an error
     * handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh An error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    Body_ (::xercesc::XMLFormatTarget& ft,
           const ::soap::v11::Body& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& eh,
           const ::std::wstring& e = L"UTF-8",
           ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with a
     * Xerces-C++ DOM error handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh A Xerces-C++ DOM error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    Body_ (::xercesc::XMLFormatTarget& ft,
           const ::soap::v11::Body& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& eh,
           const ::std::wstring& e = L"UTF-8",
           ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to an existing Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param x An object model to serialize.
     * @param f Serialization flags.
     *
     * Note that it is your responsibility to create the DOM document
     * with the correct root element as well as set the necessary
     * namespace mapping attributes.
     */
    SAML2EXPORT
    void
    Body_ (::xercesc::DOMDocument& d,
           const ::soap::v11::Body& x,
           ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a new Xerces-C++ DOM document.
     *
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param f Serialization flags.
     * @return A pointer to the new Xerces-C++ DOM document.
     */
    SAML2EXPORT
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Body_ (const ::soap::v11::Body& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f = 0);

    //@}

    SAML2EXPORT
    void
    operator<< (::xercesc::DOMElement&, const Body&);

    SAML2EXPORT
    void
    operator<< (::xercesc::DOMElement&, const encodingStyle&);

    SAML2EXPORT
    void
    operator<< (::xercesc::DOMAttr&, const encodingStyle&);

    SAML2EXPORT
    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                const encodingStyle&);

    /**
     * @name Serialization functions for the %Fault document root.
     */
    //@{

    /**
     * @brief Serialize to a standard output stream.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    SAML2EXPORT
    void
    Fault_ (::std::ostream& os,
            const ::soap::v11::Fault& x, 
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a standard output stream with an error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh An error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    Fault_ (::std::ostream& os,
            const ::soap::v11::Fault& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& eh,
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a standard output stream with a Xerces-C++ DOM
     * error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh A Xerces-C++ DOM error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    Fault_ (::std::ostream& os,
            const ::soap::v11::Fault& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& eh,
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    SAML2EXPORT
    void
    Fault_ (::xercesc::XMLFormatTarget& ft,
            const ::soap::v11::Fault& x, 
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with an error
     * handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh An error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    Fault_ (::xercesc::XMLFormatTarget& ft,
            const ::soap::v11::Fault& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& eh,
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with a
     * Xerces-C++ DOM error handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param eh A Xerces-C++ DOM error handler.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    Fault_ (::xercesc::XMLFormatTarget& ft,
            const ::soap::v11::Fault& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& eh,
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to an existing Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param x An object model to serialize.
     * @param f Serialization flags.
     *
     * Note that it is your responsibility to create the DOM document
     * with the correct root element as well as set the necessary
     * namespace mapping attributes.
     */
    SAML2EXPORT
    void
    Fault_ (::xercesc::DOMDocument& d,
            const ::soap::v11::Fault& x,
            ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a new Xerces-C++ DOM document.
     *
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param f Serialization flags.
     * @return A pointer to the new Xerces-C++ DOM document.
     */
    SAML2EXPORT
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Fault_ (const ::soap::v11::Fault& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f = 0);

    //@}

    SAML2EXPORT
    void
    operator<< (::xercesc::DOMElement&, const Fault&);

    SAML2EXPORT
    void
    operator<< (::xercesc::DOMElement&, const detail&);

    SAML2EXPORT
    void
    operator<< (::xercesc::DOMElement&, const mustUnderstand&);

    SAML2EXPORT
    void
    operator<< (::xercesc::DOMAttr&, const mustUnderstand&);

    SAML2EXPORT
    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                const mustUnderstand&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SOAP_1_1_ENVELOPE_HXX
