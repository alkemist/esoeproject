// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

/**
 * @file
 * @brief Generated from sessiondata-schema.xsd.
 */

#ifndef CXX_HOME_SHAUN_ESOEPROJECT_SAML2CPP_SCHEMA_SESSIONDATA_SCHEMA_HXX
#define CXX_HOME_SHAUN_ESOEPROJECT_SAML2CPP_SCHEMA_SESSIONDATA_SCHEMA_HXX

// Begin prologue.
//
#include "saml2/SAML2Defs.h"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include "saml2/xsd/xml-schema.hxx"

// Forward declarations.
//
namespace middleware
{
  namespace SessionDataSchema
  {
    class SessionDataType;
    class IdentityType;
    class AttributeType;
    class DataType;
    class HandlerType;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

namespace middleware
{
  /**
   * @brief C++ namespace for the %http://www.qut.com/middleware/SessionDataSchema
   * schema namespace.
   */
  namespace SessionDataSchema
  {
    /**
     * @brief Class corresponding to the %SessionDataType schema type.
     *
     * @nosubgrouping
     */
    class SAML2EXPORT SessionDataType: public ::xml_schema::type
    {
      public:
      /**
       * @name Identity
       *
       * @brief Accessor and modifier functions for the %Identity
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::middleware::SessionDataSchema::IdentityType Identity_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< Identity_type > Identity_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef Identity_sequence::iterator Identity_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef Identity_sequence::const_iterator Identity_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< Identity_type, wchar_t > Identity_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const Identity_sequence&
      Identity () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      Identity_sequence&
      Identity ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      Identity (const Identity_sequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      SessionDataType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      SessionDataType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      SessionDataType (const SessionDataType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual SessionDataType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~SessionDataType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Identity_sequence Identity_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %IdentityType schema type.
     *
     * @nosubgrouping
     */
    class SAML2EXPORT IdentityType: public ::xml_schema::type
    {
      public:
      /**
       * @name Attribute
       *
       * @brief Accessor and modifier functions for the %Attribute
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::middleware::SessionDataSchema::AttributeType Attribute_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< Attribute_type > Attribute_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef Attribute_sequence::iterator Attribute_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef Attribute_sequence::const_iterator Attribute_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< Attribute_type, wchar_t > Attribute_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const Attribute_sequence&
      Attribute () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      Attribute_sequence&
      Attribute ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      Attribute (const Attribute_sequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      IdentityType ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      IdentityType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      IdentityType (const IdentityType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual IdentityType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~IdentityType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Attribute_sequence Attribute_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %AttributeType schema type.
     *
     * @nosubgrouping
     */
    class SAML2EXPORT AttributeType: public ::xml_schema::type
    {
      public:
      /**
       * @name Handler
       *
       * @brief Accessor and modifier functions for the %Handler
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::middleware::SessionDataSchema::HandlerType Handler_type;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< Handler_type > Handler_sequence;

      /**
       * @brief Element iterator type.
       */
      typedef Handler_sequence::iterator Handler_iterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef Handler_sequence::const_iterator Handler_const_iterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< Handler_type, wchar_t > Handler_traits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const Handler_sequence&
      Handler () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      Handler_sequence&
      Handler ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      Handler (const Handler_sequence& s);

      //@}

      /**
       * @name Identifier
       *
       * @brief Accessor and modifier functions for the %Identifier
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string Identifier_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< Identifier_type, wchar_t > Identifier_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const Identifier_type&
      Identifier () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      Identifier_type&
      Identifier ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      Identifier (const Identifier_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      Identifier (::std::auto_ptr< Identifier_type > p);

      //@}

      /**
       * @name Type
       *
       * @brief Accessor and modifier functions for the %Type
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::middleware::SessionDataSchema::DataType Type_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< Type_type, wchar_t > Type_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const Type_type&
      Type () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      Type_type&
      Type ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      Type (const Type_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      Type (::std::auto_ptr< Type_type > p);

      //@}

      /**
       * @name Singleton
       *
       * @brief Accessor and modifier functions for the %Singleton
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::boolean Singleton_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< Singleton_type, wchar_t > Singleton_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const Singleton_type&
      Singleton () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      Singleton_type&
      Singleton ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      Singleton (const Singleton_type& x);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Default constructor.
       *
       * Note that this constructor leaves required elements and
       * attributes uninitialized.
       */
      AttributeType ();

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      AttributeType (const Identifier_type&,
                     const Type_type&,
                     const Singleton_type&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      AttributeType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      AttributeType (const AttributeType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual AttributeType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~AttributeType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Handler_sequence Handler_;
      ::xsd::cxx::tree::one< Identifier_type > Identifier_;
      ::xsd::cxx::tree::one< Type_type > Type_;
      ::xsd::cxx::tree::one< Singleton_type > Singleton_;

      //@endcond
    };

    /**
     * @brief Enumeration class corresponding to the %DataType
     * schema type.
     */
    class SAML2EXPORT DataType: public ::xml_schema::string
    {
      public:

      /**
       * @brief Underlying enum type.
       */
      enum value
      {
        String,
        Integer,
        Float,
        Date,
        Boolean,
        Other
      };

      /**
       * @brief Default constructor.
       *
       * Note that this constructor may leave the instance in an
       * invalid state.
       */
      DataType ();

      /**
       * @brief Create an instance from the underlying enum value.
       *
       * @param v A enum value.
       */
      DataType (value v);

      /**
       * @brief Create an instance from a C string.
       *
       * @param v A string value.
       */
      DataType (const wchar_t* v);

      /**
       * @brief Create an instance from a string.
       *
       * @param v A string value.
       */
      DataType (const ::std::wstring& v);

      /**
       * @brief Create an instance from the base value.
       *
       * @param v A base value.
       */
      DataType (const ::xml_schema::string& v);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      DataType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      /**
       * @brief Create an instance from a DOM attribute.
       *
       * @param a A DOM attribute to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      DataType (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      /**
       * @brief Create an instance from a string fragment.
       *
       * @param s A string fragment to extract the data from.
       * @param e A pointer to DOM element containing the string fragment.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      DataType (const ::std::wstring& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      DataType (const DataType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual DataType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      /**
       * @brief Assign the underlying enum value.
       *
       * @param v A enum value.
       * @return A refernce to the instance.
       */
      DataType&
      operator= (value v);

      /**
       * @brief Implicit conversion operator to the underlying
       * enum value.
       *
       * @return A enum value.
       */
      virtual
      operator value () const
      {
        return _xsd_DataType_convert ();
      }

      //@cond

      protected:
      value
      _xsd_DataType_convert () const;

      public:
      static const wchar_t* const _xsd_DataType_literals_[6];
      static const value _xsd_DataType_indexes_[6];

      //@endcond
    };

    /**
     * @brief Class corresponding to the %HandlerType schema type.
     *
     * @nosubgrouping
     */
    class SAML2EXPORT HandlerType: public ::xml_schema::type
    {
      public:
      /**
       * @name Name
       *
       * @brief Accessor and modifier functions for the %Name
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string Name_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< Name_type, wchar_t > Name_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const Name_type&
      Name () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      Name_type&
      Name ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      Name (const Name_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      Name (::std::auto_ptr< Name_type > p);

      //@}

      /**
       * @name LocalIdentifier
       *
       * @brief Accessor and modifier functions for the %LocalIdentifier
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::string LocalIdentifier_type;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< LocalIdentifier_type, wchar_t > LocalIdentifier_traits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const LocalIdentifier_type&
      LocalIdentifier () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      LocalIdentifier_type&
      LocalIdentifier ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      LocalIdentifier (const LocalIdentifier_type& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      LocalIdentifier (::std::auto_ptr< LocalIdentifier_type > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Default constructor.
       *
       * Note that this constructor leaves required elements and
       * attributes uninitialized.
       */
      HandlerType ();

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      HandlerType (const Name_type&,
                   const LocalIdentifier_type&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      HandlerType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      HandlerType (const HandlerType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual HandlerType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~HandlerType ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Name_type > Name_;
      ::xsd::cxx::tree::one< LocalIdentifier_type > LocalIdentifier_;

      //@endcond
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace middleware
{
  namespace SessionDataSchema
  {
    /**
     * @name Parsing functions for the %SessionData document root.
     */
    //@{

    /**
     * @brief Parse a URI or a local file.
     *
     * @param uri A URI or a local file name.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (const ::std::wstring& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a URI or a local file with an error handler.
     *
     * @param uri A URI or a local file name.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (const ::std::wstring& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a URI or a local file with a Xerces-C++ DOM error
     * handler.
     *
     * @param uri A URI or a local file name.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (const ::std::wstring& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream.
     *
     * @param is A standrad input stream.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with an error handler.
     *
     * @param is A standrad input stream.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a Xerces-C++ DOM error
     * handler.
     *
     * @param is A standrad input stream.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::std::istream& is,
                 const ::std::wstring& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id and an
     * error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::std::istream& is,
                 const ::std::wstring& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a standard input stream with a resource id and a
     * Xerces-C++ DOM error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::std::istream& is,
                 const ::std::wstring& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ input source.
     *
     * @param is A Xerces-C++ input source.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ input source with an error handler.
     *
     * @param is A Xerces-C++ input source.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
     * error handler.
     *
     * @param is A Xerces-C++ input source.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A pointer to the Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function is normally used together with the keep_dom and
     * own_dom parsing flags to assign ownership of the DOM document
     * to the object model.
     */
    SAML2EXPORT
    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    //@}
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace middleware
{
  namespace SessionDataSchema
  {
    /**
     * @name Serialization functions for the %SessionData document root.
     */
    //@{

    /**
     * @brief Serialize to a standard output stream.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    SAML2EXPORT
    void
    SessionData (::std::ostream& os,
                 const ::middleware::SessionDataSchema::SessionDataType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a standard output stream with an error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param eh An error handler.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    SessionData (::std::ostream& os,
                 const ::middleware::SessionDataSchema::SessionDataType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a standard output stream with a Xerces-C++ DOM
     * error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param eh A Xerces-C++ DOM error handler.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    SessionData (::std::ostream& os,
                 const ::middleware::SessionDataSchema::SessionDataType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    SAML2EXPORT
    void
    SessionData (::xercesc::XMLFormatTarget& ft,
                 const ::middleware::SessionDataSchema::SessionDataType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with an error
     * handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param eh An error handler.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    SessionData (::xercesc::XMLFormatTarget& ft,
                 const ::middleware::SessionDataSchema::SessionDataType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with a
     * Xerces-C++ DOM error handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param eh A Xerces-C++ DOM error handler.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    SAML2EXPORT
    void
    SessionData (::xercesc::XMLFormatTarget& ft,
                 const ::middleware::SessionDataSchema::SessionDataType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to an existing Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param x An object model to serialize.
     * @param f Serialization flags.
     *
     * Note that it is your responsibility to create the DOM document
     * with the correct root element as well as set the necessary
     * namespace mapping attributes.
     */
    SAML2EXPORT
    void
    SessionData (::xercesc::DOMDocument& d,
                 const ::middleware::SessionDataSchema::SessionDataType& x,
                 ::xml_schema::flags f = 0);

    /**
     * @brief Serialize to a new Xerces-C++ DOM document.
     *
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param f Serialization flags.
     * @return A pointer to the new Xerces-C++ DOM document.
     */
    SAML2EXPORT
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SessionData (const ::middleware::SessionDataSchema::SessionDataType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);

    //@}

    SAML2EXPORT
    void
    operator<< (::xercesc::DOMElement&, const SessionDataType&);

    SAML2EXPORT
    void
    operator<< (::xercesc::DOMElement&, const IdentityType&);

    SAML2EXPORT
    void
    operator<< (::xercesc::DOMElement&, const AttributeType&);

    SAML2EXPORT
    void
    operator<< (::xercesc::DOMElement&, const DataType&);

    SAML2EXPORT
    void
    operator<< (::xercesc::DOMAttr&, const DataType&);

    SAML2EXPORT
    void
    operator<< (::xml_schema::list_stream&,
                const DataType&);

    SAML2EXPORT
    void
    operator<< (::xercesc::DOMElement&, const HandlerType&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_HOME_SHAUN_ESOEPROJECT_SAML2CPP_SCHEMA_SESSIONDATA_SCHEMA_HXX
