// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

#ifndef LXACML_SCHEMA_CONTEXT_HXX
#define LXACML_SCHEMA_CONTEXT_HXX

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 2030100L)
#error XSD runtime version mismatch
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include "xsd/xml-schema.hxx"

// Forward declarations.
//
namespace middleware
{
  namespace lxacmlContextSchema
  {
    class RequestType;
    class SubjectType;
    class ResourceType;
    class ActionType;
    class AttributeType;
    class AttributeValueType;
    class ResponseType;
    class ResultType;
    class DecisionType;
    class StatusType;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include "lxacml-schema.hxx"

namespace middleware
{
  namespace lxacmlContextSchema
  {
    class RequestType: public ::xml_schema::type
    {
      public:

      struct _xsd_RequestType
      {
        typedef ::xml_schema::type base_;
      };

      // Subject
      // 
      public:
      struct Subject
      {
        typedef ::middleware::lxacmlContextSchema::SubjectType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Subject::type&
      Subject () const;

      Subject::type&
      Subject ();

      void
      Subject (const Subject::type&);

      void
      Subject (::std::auto_ptr< Subject::type >);

      // Resource
      // 
      public:
      struct Resource
      {
        typedef ::middleware::lxacmlContextSchema::ResourceType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Resource::type&
      Resource () const;

      Resource::type&
      Resource ();

      void
      Resource (const Resource::type&);

      void
      Resource (::std::auto_ptr< Resource::type >);

      // Action
      // 
      public:
      struct Action
      {
        typedef ::middleware::lxacmlContextSchema::ActionType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Action::container&
      Action () const;

      Action::container&
      Action ();

      void
      Action (const Action::type&);

      void
      Action (const Action::container&);

      void
      Action (::std::auto_ptr< Action::type >);

      // Constructors.
      //
      public:
      RequestType ();

      RequestType (const Subject::type&,
                   const Resource::type&);

      RequestType (const ::xercesc::DOMElement&,
                   ::xml_schema::flags = 0,
                   ::xml_schema::type* = 0);

      RequestType (const RequestType&,
                   ::xml_schema::flags = 0,
                   ::xml_schema::type* = 0);

      virtual RequestType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< Subject::type > _xsd_Subject_;
      ::xsd::cxx::tree::one< Resource::type > _xsd_Resource_;
      ::xsd::cxx::tree::optional< Action::type > _xsd_Action_;
    };

    class SubjectType: public ::xml_schema::type
    {
      public:

      struct _xsd_SubjectType
      {
        typedef ::xml_schema::type base_;
      };

      // Attribute
      // 
      public:
      struct Attribute
      {
        typedef ::middleware::lxacmlContextSchema::AttributeType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Attribute::type&
      Attribute () const;

      Attribute::type&
      Attribute ();

      void
      Attribute (const Attribute::type&);

      void
      Attribute (::std::auto_ptr< Attribute::type >);

      // Constructors.
      //
      public:
      SubjectType ();

      SubjectType (const Attribute::type&);

      SubjectType (const ::xercesc::DOMElement&,
                   ::xml_schema::flags = 0,
                   ::xml_schema::type* = 0);

      SubjectType (const SubjectType&,
                   ::xml_schema::flags = 0,
                   ::xml_schema::type* = 0);

      virtual SubjectType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< Attribute::type > _xsd_Attribute_;
    };

    class ResourceType: public ::xml_schema::type
    {
      public:

      struct _xsd_ResourceType
      {
        typedef ::xml_schema::type base_;
      };

      // Attribute
      // 
      public:
      struct Attribute
      {
        typedef ::middleware::lxacmlContextSchema::AttributeType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Attribute::type&
      Attribute () const;

      Attribute::type&
      Attribute ();

      void
      Attribute (const Attribute::type&);

      void
      Attribute (::std::auto_ptr< Attribute::type >);

      // Constructors.
      //
      public:
      ResourceType ();

      ResourceType (const Attribute::type&);

      ResourceType (const ::xercesc::DOMElement&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      ResourceType (const ResourceType&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      virtual ResourceType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< Attribute::type > _xsd_Attribute_;
    };

    class ActionType: public ::xml_schema::type
    {
      public:

      struct _xsd_ActionType
      {
        typedef ::xml_schema::type base_;
      };

      // Attribute
      // 
      public:
      struct Attribute
      {
        typedef ::middleware::lxacmlContextSchema::AttributeType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Attribute::type&
      Attribute () const;

      Attribute::type&
      Attribute ();

      void
      Attribute (const Attribute::type&);

      void
      Attribute (::std::auto_ptr< Attribute::type >);

      // Constructors.
      //
      public:
      ActionType ();

      ActionType (const Attribute::type&);

      ActionType (const ::xercesc::DOMElement&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      ActionType (const ActionType&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      virtual ActionType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< Attribute::type > _xsd_Attribute_;
    };

    class AttributeType: public ::xml_schema::type
    {
      public:

      struct _xsd_AttributeType
      {
        typedef ::xml_schema::type base_;
      };

      // AttributeValue
      // 
      public:
      struct AttributeValue
      {
        typedef ::middleware::lxacmlContextSchema::AttributeValueType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const AttributeValue::type&
      AttributeValue () const;

      AttributeValue::type&
      AttributeValue ();

      void
      AttributeValue (const AttributeValue::type&);

      void
      AttributeValue (::std::auto_ptr< AttributeValue::type >);

      // Issuer
      // 
      public:
      struct Issuer
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Issuer::container&
      Issuer () const;

      Issuer::container&
      Issuer ();

      void
      Issuer (const Issuer::type&);

      void
      Issuer (const Issuer::container&);

      void
      Issuer (::std::auto_ptr< Issuer::type >);

      // Constructors.
      //
      public:
      AttributeType ();

      AttributeType (const AttributeValue::type&);

      AttributeType (const ::xercesc::DOMElement&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      AttributeType (const AttributeType&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      virtual AttributeType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< AttributeValue::type > _xsd_AttributeValue_;
      ::xsd::cxx::tree::optional< Issuer::type > _xsd_Issuer_;
    };

    class ResponseType: public ::xml_schema::type
    {
      public:

      struct _xsd_ResponseType
      {
        typedef ::xml_schema::type base_;
      };

      // Result
      // 
      public:
      struct Result
      {
        typedef ::middleware::lxacmlContextSchema::ResultType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Result::type&
      Result () const;

      Result::type&
      Result ();

      void
      Result (const Result::type&);

      void
      Result (::std::auto_ptr< Result::type >);

      // Constructors.
      //
      public:
      ResponseType ();

      ResponseType (const Result::type&);

      ResponseType (const ::xercesc::DOMElement&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      ResponseType (const ResponseType&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      virtual ResponseType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< Result::type > _xsd_Result_;
    };

    class ResultType: public ::xml_schema::type
    {
      public:

      struct _xsd_ResultType
      {
        typedef ::xml_schema::type base_;
      };

      // Decision
      // 
      public:
      struct Decision
      {
        typedef ::middleware::lxacmlContextSchema::DecisionType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Decision::type&
      Decision () const;

      Decision::type&
      Decision ();

      void
      Decision (const Decision::type&);

      void
      Decision (::std::auto_ptr< Decision::type >);

      // Status
      // 
      public:
      struct Status
      {
        typedef ::middleware::lxacmlContextSchema::StatusType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Status::container&
      Status () const;

      Status::container&
      Status ();

      void
      Status (const Status::type&);

      void
      Status (const Status::container&);

      void
      Status (::std::auto_ptr< Status::type >);

      // Obligations
      // 
      public:
      struct Obligations
      {
        typedef ::middleware::lxacmlSchema::ObligationsType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Obligations::type&
      Obligations () const;

      Obligations::type&
      Obligations ();

      void
      Obligations (const Obligations::type&);

      void
      Obligations (::std::auto_ptr< Obligations::type >);

      // Constructors.
      //
      public:
      ResultType ();

      ResultType (const Decision::type&,
                  const Obligations::type&);

      ResultType (const ::xercesc::DOMElement&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      ResultType (const ResultType&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      virtual ResultType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< Decision::type > _xsd_Decision_;
      ::xsd::cxx::tree::optional< Status::type > _xsd_Status_;
      ::xsd::cxx::tree::one< Obligations::type > _xsd_Obligations_;
    };

    class DecisionType: public ::xml_schema::string
    {
      public:
      enum _xsd_DecisionType
      {
        Permit,
        Deny
      };

      DecisionType ();

      DecisionType (_xsd_DecisionType);

      DecisionType (const ::xml_schema::string&);

      DecisionType (const ::xercesc::DOMElement&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      DecisionType (const ::xercesc::DOMAttr&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      DecisionType (const ::std::basic_string< wchar_t >&,
                    const ::xercesc::DOMElement*,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      DecisionType (const DecisionType&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      virtual DecisionType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      DecisionType&
      operator= (_xsd_DecisionType);

      virtual
      operator _xsd_DecisionType () const
      {
        return _xsd_DecisionType_convert ();
      }

      protected:
      _xsd_DecisionType
      _xsd_DecisionType_convert () const;

      public:
      static const wchar_t* const _xsd_DecisionType_literals_[2];
      static const _xsd_DecisionType _xsd_DecisionType_indexes_[2];
    };

    class StatusType: public ::xml_schema::type
    {
      public:

      struct _xsd_StatusType
      {
        typedef ::xml_schema::type base_;
      };

      // StatusMessage
      // 
      public:
      struct StatusMessage
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const StatusMessage::container&
      StatusMessage () const;

      StatusMessage::container&
      StatusMessage ();

      void
      StatusMessage (const StatusMessage::type&);

      void
      StatusMessage (const StatusMessage::container&);

      void
      StatusMessage (::std::auto_ptr< StatusMessage::type >);

      // Constructors.
      //
      public:
      StatusType ();

      StatusType (const ::xercesc::DOMElement&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      StatusType (const StatusType&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      virtual StatusType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< StatusMessage::type > _xsd_StatusMessage_;
    };
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMInputSource.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace middleware
{
  namespace lxacmlContextSchema
  {
    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (const ::std::basic_string< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (const ::std::basic_string< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (const ::std::basic_string< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::std::istream&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::std::istream&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::std::istream&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (const ::xercesc::DOMInputSource&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (const ::xercesc::DOMInputSource&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (const ::xercesc::DOMInputSource&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (const ::xercesc::DOMDocument&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (const ::std::basic_string< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (const ::std::basic_string< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (const ::std::basic_string< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::std::istream&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::std::istream&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::std::istream&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (const ::xercesc::DOMInputSource&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (const ::xercesc::DOMInputSource&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (const ::xercesc::DOMInputSource&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (const ::xercesc::DOMDocument&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (const ::std::basic_string< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (const ::std::basic_string< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (const ::std::basic_string< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::std::istream&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::std::istream&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::std::istream&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (const ::xercesc::DOMInputSource&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (const ::xercesc::DOMInputSource&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (const ::xercesc::DOMInputSource&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (const ::xercesc::DOMDocument&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (const ::std::basic_string< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (const ::std::basic_string< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (const ::std::basic_string< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::std::istream&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::std::istream&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::std::istream&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (const ::xercesc::DOMInputSource&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (const ::xercesc::DOMInputSource&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (const ::xercesc::DOMInputSource&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (const ::xercesc::DOMDocument&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (const ::std::basic_string< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (const ::std::basic_string< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (const ::std::basic_string< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::std::istream&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::std::istream&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::std::istream&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (const ::xercesc::DOMInputSource&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (const ::xercesc::DOMInputSource&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (const ::xercesc::DOMInputSource&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (const ::xercesc::DOMDocument&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (const ::std::basic_string< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (const ::std::basic_string< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (const ::std::basic_string< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::std::istream&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::std::istream&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::std::istream&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (const ::xercesc::DOMInputSource&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (const ::xercesc::DOMInputSource&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (const ::xercesc::DOMInputSource&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (const ::xercesc::DOMDocument&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (const ::std::basic_string< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (const ::std::basic_string< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (const ::std::basic_string< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::std::istream&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::std::istream&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::std::istream&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (const ::xercesc::DOMInputSource&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (const ::xercesc::DOMInputSource&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (const ::xercesc::DOMInputSource&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (const ::xercesc::DOMDocument&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (const ::std::basic_string< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (const ::std::basic_string< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (const ::std::basic_string< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::std::istream&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::std::istream&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::std::istream&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (const ::xercesc::DOMInputSource&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (const ::xercesc::DOMInputSource&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (const ::xercesc::DOMInputSource&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (const ::xercesc::DOMDocument&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (const ::std::basic_string< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (const ::std::basic_string< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (const ::std::basic_string< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::std::istream&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::std::istream&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::std::istream&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (const ::xercesc::DOMInputSource&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (const ::xercesc::DOMInputSource&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (const ::xercesc::DOMInputSource&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (const ::xercesc::DOMDocument&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (const ::std::basic_string< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (const ::std::basic_string< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (const ::std::basic_string< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::std::istream&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::std::istream&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::std::istream&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (const ::xercesc::DOMInputSource&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (const ::xercesc::DOMInputSource&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (const ::xercesc::DOMInputSource&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (const ::xercesc::DOMDocument&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::std::basic_string< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::std::basic_string< wchar_t >&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::std::basic_string< wchar_t >&,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream&,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream&,
                   const ::std::basic_string< wchar_t >& id,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream&,
                   const ::std::basic_string< wchar_t >& id,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream&,
                   const ::std::basic_string< wchar_t >& id,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::xercesc::DOMInputSource&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::xercesc::DOMInputSource&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::xercesc::DOMInputSource&,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::xercesc::DOMDocument&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());
  }
}

#include <iosfwd> // std::ostream&

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace middleware
{
  namespace lxacmlContextSchema
  {
    // Serialize to an existing DOM instance.
    //
    void
    Request (::xercesc::DOMDocument&,
             const ::middleware::lxacmlContextSchema::RequestType&,
             ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Request (const ::middleware::lxacmlContextSchema::RequestType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Request (::xercesc::XMLFormatTarget&,
             const ::middleware::lxacmlContextSchema::RequestType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    Request (::xercesc::XMLFormatTarget&,
             const ::middleware::lxacmlContextSchema::RequestType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);

    void
    Request (::xercesc::XMLFormatTarget&,
             const ::middleware::lxacmlContextSchema::RequestType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Request (::std::ostream&,
             const ::middleware::lxacmlContextSchema::RequestType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    Request (::std::ostream&,
             const ::middleware::lxacmlContextSchema::RequestType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);

    void
    Request (::std::ostream&,
             const ::middleware::lxacmlContextSchema::RequestType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const RequestType&);

    // Serialize to an existing DOM instance.
    //
    void
    Subject (::xercesc::DOMDocument&,
             const ::middleware::lxacmlContextSchema::SubjectType&,
             ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Subject (const ::middleware::lxacmlContextSchema::SubjectType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Subject (::xercesc::XMLFormatTarget&,
             const ::middleware::lxacmlContextSchema::SubjectType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    Subject (::xercesc::XMLFormatTarget&,
             const ::middleware::lxacmlContextSchema::SubjectType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);

    void
    Subject (::xercesc::XMLFormatTarget&,
             const ::middleware::lxacmlContextSchema::SubjectType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Subject (::std::ostream&,
             const ::middleware::lxacmlContextSchema::SubjectType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    Subject (::std::ostream&,
             const ::middleware::lxacmlContextSchema::SubjectType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);

    void
    Subject (::std::ostream&,
             const ::middleware::lxacmlContextSchema::SubjectType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const SubjectType&);

    // Serialize to an existing DOM instance.
    //
    void
    Resource (::xercesc::DOMDocument&,
              const ::middleware::lxacmlContextSchema::ResourceType&,
              ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Resource (const ::middleware::lxacmlContextSchema::ResourceType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Resource (::xercesc::XMLFormatTarget&,
              const ::middleware::lxacmlContextSchema::ResourceType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    Resource (::xercesc::XMLFormatTarget&,
              const ::middleware::lxacmlContextSchema::ResourceType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    Resource (::xercesc::XMLFormatTarget&,
              const ::middleware::lxacmlContextSchema::ResourceType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Resource (::std::ostream&,
              const ::middleware::lxacmlContextSchema::ResourceType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    Resource (::std::ostream&,
              const ::middleware::lxacmlContextSchema::ResourceType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    Resource (::std::ostream&,
              const ::middleware::lxacmlContextSchema::ResourceType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ResourceType&);

    // Serialize to an existing DOM instance.
    //
    void
    Action (::xercesc::DOMDocument&,
            const ::middleware::lxacmlContextSchema::ActionType&,
            ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Action (const ::middleware::lxacmlContextSchema::ActionType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Action (::xercesc::XMLFormatTarget&,
            const ::middleware::lxacmlContextSchema::ActionType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    Action (::xercesc::XMLFormatTarget&,
            const ::middleware::lxacmlContextSchema::ActionType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    Action (::xercesc::XMLFormatTarget&,
            const ::middleware::lxacmlContextSchema::ActionType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Action (::std::ostream&,
            const ::middleware::lxacmlContextSchema::ActionType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    Action (::std::ostream&,
            const ::middleware::lxacmlContextSchema::ActionType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    Action (::std::ostream&,
            const ::middleware::lxacmlContextSchema::ActionType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ActionType&);

    // Serialize to an existing DOM instance.
    //
    void
    Attribute (::xercesc::DOMDocument&,
               const ::middleware::lxacmlContextSchema::AttributeType&,
               ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Attribute (const ::middleware::lxacmlContextSchema::AttributeType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Attribute (::xercesc::XMLFormatTarget&,
               const ::middleware::lxacmlContextSchema::AttributeType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    Attribute (::xercesc::XMLFormatTarget&,
               const ::middleware::lxacmlContextSchema::AttributeType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    Attribute (::xercesc::XMLFormatTarget&,
               const ::middleware::lxacmlContextSchema::AttributeType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Attribute (::std::ostream&,
               const ::middleware::lxacmlContextSchema::AttributeType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    Attribute (::std::ostream&,
               const ::middleware::lxacmlContextSchema::AttributeType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    Attribute (::std::ostream&,
               const ::middleware::lxacmlContextSchema::AttributeType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const AttributeType&);

    // Serialize to an existing DOM instance.
    //
    void
    AttributeValue (::xercesc::DOMDocument&,
                    const ::middleware::lxacmlContextSchema::AttributeValueType&,
                    ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeValue (const ::middleware::lxacmlContextSchema::AttributeValueType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AttributeValue (::xercesc::XMLFormatTarget&,
                    const ::middleware::lxacmlContextSchema::AttributeValueType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    AttributeValue (::xercesc::XMLFormatTarget&,
                    const ::middleware::lxacmlContextSchema::AttributeValueType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);

    void
    AttributeValue (::xercesc::XMLFormatTarget&,
                    const ::middleware::lxacmlContextSchema::AttributeValueType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AttributeValue (::std::ostream&,
                    const ::middleware::lxacmlContextSchema::AttributeValueType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    AttributeValue (::std::ostream&,
                    const ::middleware::lxacmlContextSchema::AttributeValueType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);

    void
    AttributeValue (::std::ostream&,
                    const ::middleware::lxacmlContextSchema::AttributeValueType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    Response (::xercesc::DOMDocument&,
              const ::middleware::lxacmlContextSchema::ResponseType&,
              ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Response (const ::middleware::lxacmlContextSchema::ResponseType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Response (::xercesc::XMLFormatTarget&,
              const ::middleware::lxacmlContextSchema::ResponseType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    Response (::xercesc::XMLFormatTarget&,
              const ::middleware::lxacmlContextSchema::ResponseType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    Response (::xercesc::XMLFormatTarget&,
              const ::middleware::lxacmlContextSchema::ResponseType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Response (::std::ostream&,
              const ::middleware::lxacmlContextSchema::ResponseType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    Response (::std::ostream&,
              const ::middleware::lxacmlContextSchema::ResponseType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    Response (::std::ostream&,
              const ::middleware::lxacmlContextSchema::ResponseType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ResponseType&);

    // Serialize to an existing DOM instance.
    //
    void
    Result (::xercesc::DOMDocument&,
            const ::middleware::lxacmlContextSchema::ResultType&,
            ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Result (const ::middleware::lxacmlContextSchema::ResultType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Result (::xercesc::XMLFormatTarget&,
            const ::middleware::lxacmlContextSchema::ResultType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    Result (::xercesc::XMLFormatTarget&,
            const ::middleware::lxacmlContextSchema::ResultType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    Result (::xercesc::XMLFormatTarget&,
            const ::middleware::lxacmlContextSchema::ResultType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Result (::std::ostream&,
            const ::middleware::lxacmlContextSchema::ResultType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    Result (::std::ostream&,
            const ::middleware::lxacmlContextSchema::ResultType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    Result (::std::ostream&,
            const ::middleware::lxacmlContextSchema::ResultType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ResultType&);

    // Serialize to an existing DOM instance.
    //
    void
    Decision (::xercesc::DOMDocument&,
              const ::middleware::lxacmlContextSchema::DecisionType&,
              ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Decision (const ::middleware::lxacmlContextSchema::DecisionType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Decision (::xercesc::XMLFormatTarget&,
              const ::middleware::lxacmlContextSchema::DecisionType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    Decision (::xercesc::XMLFormatTarget&,
              const ::middleware::lxacmlContextSchema::DecisionType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    Decision (::xercesc::XMLFormatTarget&,
              const ::middleware::lxacmlContextSchema::DecisionType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Decision (::std::ostream&,
              const ::middleware::lxacmlContextSchema::DecisionType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    Decision (::std::ostream&,
              const ::middleware::lxacmlContextSchema::DecisionType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    Decision (::std::ostream&,
              const ::middleware::lxacmlContextSchema::DecisionType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                DecisionType);

    void
    operator<< (::xercesc::DOMAttr&,
                DecisionType);

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                DecisionType);

    // Serialize to an existing DOM instance.
    //
    void
    Status (::xercesc::DOMDocument&,
            const ::middleware::lxacmlContextSchema::StatusType&,
            ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Status (const ::middleware::lxacmlContextSchema::StatusType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Status (::xercesc::XMLFormatTarget&,
            const ::middleware::lxacmlContextSchema::StatusType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    Status (::xercesc::XMLFormatTarget&,
            const ::middleware::lxacmlContextSchema::StatusType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    Status (::xercesc::XMLFormatTarget&,
            const ::middleware::lxacmlContextSchema::StatusType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Status (::std::ostream&,
            const ::middleware::lxacmlContextSchema::StatusType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    Status (::std::ostream&,
            const ::middleware::lxacmlContextSchema::StatusType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    Status (::std::ostream&,
            const ::middleware::lxacmlContextSchema::StatusType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const StatusType&);

    // Serialize to an existing DOM instance.
    //
    void
    StatusMessage (::xercesc::DOMDocument&,
                   const ::xml_schema::string&,
                   ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    StatusMessage (const ::xml_schema::string&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    StatusMessage (::xercesc::XMLFormatTarget&,
                   const ::xml_schema::string&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    void
    StatusMessage (::xercesc::XMLFormatTarget&,
                   const ::xml_schema::string&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);

    void
    StatusMessage (::xercesc::XMLFormatTarget&,
                   const ::xml_schema::string&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xercesc::DOMErrorHandler&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    StatusMessage (::std::ostream&,
                   const ::xml_schema::string&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    void
    StatusMessage (::std::ostream&,
                   const ::xml_schema::string&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);

    void
    StatusMessage (::std::ostream&,
                   const ::xml_schema::string&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xercesc::DOMErrorHandler&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
#include "xsd/xml-schema-custom-attributevaluetype.h"
//
// End epilogue.

#endif // LXACML_SCHEMA_CONTEXT_HXX
