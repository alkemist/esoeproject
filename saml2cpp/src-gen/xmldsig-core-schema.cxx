// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "xmldsig-core-schema.hxx"

namespace w3
{
  namespace xmldsig
  {
    // CryptoBinary
    // 


    // SignatureType
    // 

    const SignatureType::SignedInfo::type& SignatureType::
    SignedInfo () const
    {
      return this->_xsd_SignedInfo_.get ();
    }

    SignatureType::SignedInfo::type& SignatureType::
    SignedInfo ()
    {
      return this->_xsd_SignedInfo_.get ();
    }

    void SignatureType::
    SignedInfo (const SignedInfo::type& SignedInfo)
    {
      this->_xsd_SignedInfo_.set (SignedInfo);
    }

    void SignatureType::
    SignedInfo (::std::auto_ptr< SignedInfo::type > SignedInfo)
    {
      this->_xsd_SignedInfo_.set (SignedInfo);
    }

    const SignatureType::SignatureValue::type& SignatureType::
    SignatureValue () const
    {
      return this->_xsd_SignatureValue_.get ();
    }

    SignatureType::SignatureValue::type& SignatureType::
    SignatureValue ()
    {
      return this->_xsd_SignatureValue_.get ();
    }

    void SignatureType::
    SignatureValue (const SignatureValue::type& SignatureValue)
    {
      this->_xsd_SignatureValue_.set (SignatureValue);
    }

    void SignatureType::
    SignatureValue (::std::auto_ptr< SignatureValue::type > SignatureValue)
    {
      this->_xsd_SignatureValue_.set (SignatureValue);
    }

    const SignatureType::KeyInfo::container& SignatureType::
    KeyInfo () const
    {
      return this->_xsd_KeyInfo_;
    }

    SignatureType::KeyInfo::container& SignatureType::
    KeyInfo ()
    {
      return this->_xsd_KeyInfo_;
    }

    void SignatureType::
    KeyInfo (const KeyInfo::type& KeyInfo)
    {
      this->_xsd_KeyInfo_.set (KeyInfo);
    }

    void SignatureType::
    KeyInfo (const KeyInfo::container& KeyInfo)
    {
      this->_xsd_KeyInfo_ = KeyInfo;
    }

    void SignatureType::
    KeyInfo (::std::auto_ptr< KeyInfo::type > KeyInfo)
    {
      this->_xsd_KeyInfo_.set (KeyInfo);
    }

    const SignatureType::Object::container& SignatureType::
    Object () const
    {
      return this->_xsd_Object_;
    }

    SignatureType::Object::container& SignatureType::
    Object ()
    {
      return this->_xsd_Object_;
    }

    void SignatureType::
    Object (const Object::container& Object)
    {
      this->_xsd_Object_ = Object;
    }

    const SignatureType::Id::container& SignatureType::
    Id () const
    {
      return this->_xsd_Id_;
    }

    SignatureType::Id::container& SignatureType::
    Id ()
    {
      return this->_xsd_Id_;
    }

    void SignatureType::
    Id (const Id::type& Id)
    {
      this->_xsd_Id_.set (Id);
    }

    void SignatureType::
    Id (const Id::container& Id)
    {
      this->_xsd_Id_ = Id;
    }

    void SignatureType::
    Id (::std::auto_ptr< Id::type > Id)
    {
      this->_xsd_Id_.set (Id);
    }


    // SignatureValueType
    // 

    const SignatureValueType::Id::container& SignatureValueType::
    Id () const
    {
      return this->_xsd_Id_;
    }

    SignatureValueType::Id::container& SignatureValueType::
    Id ()
    {
      return this->_xsd_Id_;
    }

    void SignatureValueType::
    Id (const Id::type& Id)
    {
      this->_xsd_Id_.set (Id);
    }

    void SignatureValueType::
    Id (const Id::container& Id)
    {
      this->_xsd_Id_ = Id;
    }

    void SignatureValueType::
    Id (::std::auto_ptr< Id::type > Id)
    {
      this->_xsd_Id_.set (Id);
    }


    // SignedInfoType
    // 

    const SignedInfoType::CanonicalizationMethod::type& SignedInfoType::
    CanonicalizationMethod () const
    {
      return this->_xsd_CanonicalizationMethod_.get ();
    }

    SignedInfoType::CanonicalizationMethod::type& SignedInfoType::
    CanonicalizationMethod ()
    {
      return this->_xsd_CanonicalizationMethod_.get ();
    }

    void SignedInfoType::
    CanonicalizationMethod (const CanonicalizationMethod::type& CanonicalizationMethod)
    {
      this->_xsd_CanonicalizationMethod_.set (CanonicalizationMethod);
    }

    void SignedInfoType::
    CanonicalizationMethod (::std::auto_ptr< CanonicalizationMethod::type > CanonicalizationMethod)
    {
      this->_xsd_CanonicalizationMethod_.set (CanonicalizationMethod);
    }

    const SignedInfoType::SignatureMethod::type& SignedInfoType::
    SignatureMethod () const
    {
      return this->_xsd_SignatureMethod_.get ();
    }

    SignedInfoType::SignatureMethod::type& SignedInfoType::
    SignatureMethod ()
    {
      return this->_xsd_SignatureMethod_.get ();
    }

    void SignedInfoType::
    SignatureMethod (const SignatureMethod::type& SignatureMethod)
    {
      this->_xsd_SignatureMethod_.set (SignatureMethod);
    }

    void SignedInfoType::
    SignatureMethod (::std::auto_ptr< SignatureMethod::type > SignatureMethod)
    {
      this->_xsd_SignatureMethod_.set (SignatureMethod);
    }

    const SignedInfoType::Reference::container& SignedInfoType::
    Reference () const
    {
      return this->_xsd_Reference_;
    }

    SignedInfoType::Reference::container& SignedInfoType::
    Reference ()
    {
      return this->_xsd_Reference_;
    }

    void SignedInfoType::
    Reference (const Reference::container& Reference)
    {
      this->_xsd_Reference_ = Reference;
    }

    const SignedInfoType::Id::container& SignedInfoType::
    Id () const
    {
      return this->_xsd_Id_;
    }

    SignedInfoType::Id::container& SignedInfoType::
    Id ()
    {
      return this->_xsd_Id_;
    }

    void SignedInfoType::
    Id (const Id::type& Id)
    {
      this->_xsd_Id_.set (Id);
    }

    void SignedInfoType::
    Id (const Id::container& Id)
    {
      this->_xsd_Id_ = Id;
    }

    void SignedInfoType::
    Id (::std::auto_ptr< Id::type > Id)
    {
      this->_xsd_Id_.set (Id);
    }


    // CanonicalizationMethodType
    // 

    const CanonicalizationMethodType::Algorithm::type& CanonicalizationMethodType::
    Algorithm () const
    {
      return this->_xsd_Algorithm_.get ();
    }

    CanonicalizationMethodType::Algorithm::type& CanonicalizationMethodType::
    Algorithm ()
    {
      return this->_xsd_Algorithm_.get ();
    }

    void CanonicalizationMethodType::
    Algorithm (const Algorithm::type& Algorithm)
    {
      this->_xsd_Algorithm_.set (Algorithm);
    }

    void CanonicalizationMethodType::
    Algorithm (::std::auto_ptr< Algorithm::type > Algorithm)
    {
      this->_xsd_Algorithm_.set (Algorithm);
    }


    // SignatureMethodType
    // 

    const SignatureMethodType::HMACOutputLength::container& SignatureMethodType::
    HMACOutputLength () const
    {
      return this->_xsd_HMACOutputLength_;
    }

    SignatureMethodType::HMACOutputLength::container& SignatureMethodType::
    HMACOutputLength ()
    {
      return this->_xsd_HMACOutputLength_;
    }

    void SignatureMethodType::
    HMACOutputLength (const HMACOutputLength::type& HMACOutputLength)
    {
      this->_xsd_HMACOutputLength_.set (HMACOutputLength);
    }

    void SignatureMethodType::
    HMACOutputLength (const HMACOutputLength::container& HMACOutputLength)
    {
      this->_xsd_HMACOutputLength_ = HMACOutputLength;
    }

    void SignatureMethodType::
    HMACOutputLength (::std::auto_ptr< HMACOutputLength::type > HMACOutputLength)
    {
      this->_xsd_HMACOutputLength_.set (HMACOutputLength);
    }

    const SignatureMethodType::Algorithm::type& SignatureMethodType::
    Algorithm () const
    {
      return this->_xsd_Algorithm_.get ();
    }

    SignatureMethodType::Algorithm::type& SignatureMethodType::
    Algorithm ()
    {
      return this->_xsd_Algorithm_.get ();
    }

    void SignatureMethodType::
    Algorithm (const Algorithm::type& Algorithm)
    {
      this->_xsd_Algorithm_.set (Algorithm);
    }

    void SignatureMethodType::
    Algorithm (::std::auto_ptr< Algorithm::type > Algorithm)
    {
      this->_xsd_Algorithm_.set (Algorithm);
    }


    // ReferenceType
    // 

    const ReferenceType::Transforms::container& ReferenceType::
    Transforms () const
    {
      return this->_xsd_Transforms_;
    }

    ReferenceType::Transforms::container& ReferenceType::
    Transforms ()
    {
      return this->_xsd_Transforms_;
    }

    void ReferenceType::
    Transforms (const Transforms::type& Transforms)
    {
      this->_xsd_Transforms_.set (Transforms);
    }

    void ReferenceType::
    Transforms (const Transforms::container& Transforms)
    {
      this->_xsd_Transforms_ = Transforms;
    }

    void ReferenceType::
    Transforms (::std::auto_ptr< Transforms::type > Transforms)
    {
      this->_xsd_Transforms_.set (Transforms);
    }

    const ReferenceType::DigestMethod::type& ReferenceType::
    DigestMethod () const
    {
      return this->_xsd_DigestMethod_.get ();
    }

    ReferenceType::DigestMethod::type& ReferenceType::
    DigestMethod ()
    {
      return this->_xsd_DigestMethod_.get ();
    }

    void ReferenceType::
    DigestMethod (const DigestMethod::type& DigestMethod)
    {
      this->_xsd_DigestMethod_.set (DigestMethod);
    }

    void ReferenceType::
    DigestMethod (::std::auto_ptr< DigestMethod::type > DigestMethod)
    {
      this->_xsd_DigestMethod_.set (DigestMethod);
    }

    const ReferenceType::DigestValue::type& ReferenceType::
    DigestValue () const
    {
      return this->_xsd_DigestValue_.get ();
    }

    ReferenceType::DigestValue::type& ReferenceType::
    DigestValue ()
    {
      return this->_xsd_DigestValue_.get ();
    }

    void ReferenceType::
    DigestValue (const DigestValue::type& DigestValue)
    {
      this->_xsd_DigestValue_.set (DigestValue);
    }

    void ReferenceType::
    DigestValue (::std::auto_ptr< DigestValue::type > DigestValue)
    {
      this->_xsd_DigestValue_.set (DigestValue);
    }

    const ReferenceType::Id::container& ReferenceType::
    Id () const
    {
      return this->_xsd_Id_;
    }

    ReferenceType::Id::container& ReferenceType::
    Id ()
    {
      return this->_xsd_Id_;
    }

    void ReferenceType::
    Id (const Id::type& Id)
    {
      this->_xsd_Id_.set (Id);
    }

    void ReferenceType::
    Id (const Id::container& Id)
    {
      this->_xsd_Id_ = Id;
    }

    void ReferenceType::
    Id (::std::auto_ptr< Id::type > Id)
    {
      this->_xsd_Id_.set (Id);
    }

    const ReferenceType::URI::container& ReferenceType::
    URI () const
    {
      return this->_xsd_URI_;
    }

    ReferenceType::URI::container& ReferenceType::
    URI ()
    {
      return this->_xsd_URI_;
    }

    void ReferenceType::
    URI (const URI::type& URI)
    {
      this->_xsd_URI_.set (URI);
    }

    void ReferenceType::
    URI (const URI::container& URI)
    {
      this->_xsd_URI_ = URI;
    }

    void ReferenceType::
    URI (::std::auto_ptr< URI::type > URI)
    {
      this->_xsd_URI_.set (URI);
    }

    const ReferenceType::Type::container& ReferenceType::
    Type () const
    {
      return this->_xsd_Type_;
    }

    ReferenceType::Type::container& ReferenceType::
    Type ()
    {
      return this->_xsd_Type_;
    }

    void ReferenceType::
    Type (const Type::type& Type)
    {
      this->_xsd_Type_.set (Type);
    }

    void ReferenceType::
    Type (const Type::container& Type)
    {
      this->_xsd_Type_ = Type;
    }

    void ReferenceType::
    Type (::std::auto_ptr< Type::type > Type)
    {
      this->_xsd_Type_.set (Type);
    }


    // TransformsType
    // 

    const TransformsType::Transform::container& TransformsType::
    Transform () const
    {
      return this->_xsd_Transform_;
    }

    TransformsType::Transform::container& TransformsType::
    Transform ()
    {
      return this->_xsd_Transform_;
    }

    void TransformsType::
    Transform (const Transform::container& Transform)
    {
      this->_xsd_Transform_ = Transform;
    }


    // TransformType
    // 

    const TransformType::XPath::container& TransformType::
    XPath () const
    {
      return this->_xsd_XPath_;
    }

    TransformType::XPath::container& TransformType::
    XPath ()
    {
      return this->_xsd_XPath_;
    }

    void TransformType::
    XPath (const XPath::container& XPath)
    {
      this->_xsd_XPath_ = XPath;
    }

    const TransformType::Algorithm::type& TransformType::
    Algorithm () const
    {
      return this->_xsd_Algorithm_.get ();
    }

    TransformType::Algorithm::type& TransformType::
    Algorithm ()
    {
      return this->_xsd_Algorithm_.get ();
    }

    void TransformType::
    Algorithm (const Algorithm::type& Algorithm)
    {
      this->_xsd_Algorithm_.set (Algorithm);
    }

    void TransformType::
    Algorithm (::std::auto_ptr< Algorithm::type > Algorithm)
    {
      this->_xsd_Algorithm_.set (Algorithm);
    }


    // DigestMethodType
    // 

    const DigestMethodType::Algorithm::type& DigestMethodType::
    Algorithm () const
    {
      return this->_xsd_Algorithm_.get ();
    }

    DigestMethodType::Algorithm::type& DigestMethodType::
    Algorithm ()
    {
      return this->_xsd_Algorithm_.get ();
    }

    void DigestMethodType::
    Algorithm (const Algorithm::type& Algorithm)
    {
      this->_xsd_Algorithm_.set (Algorithm);
    }

    void DigestMethodType::
    Algorithm (::std::auto_ptr< Algorithm::type > Algorithm)
    {
      this->_xsd_Algorithm_.set (Algorithm);
    }


    // DigestValueType
    // 


    // KeyInfoType
    // 

    const KeyInfoType::KeyName::container& KeyInfoType::
    KeyName () const
    {
      return this->_xsd_KeyName_;
    }

    KeyInfoType::KeyName::container& KeyInfoType::
    KeyName ()
    {
      return this->_xsd_KeyName_;
    }

    void KeyInfoType::
    KeyName (const KeyName::container& KeyName)
    {
      this->_xsd_KeyName_ = KeyName;
    }

    const KeyInfoType::KeyValue::container& KeyInfoType::
    KeyValue () const
    {
      return this->_xsd_KeyValue_;
    }

    KeyInfoType::KeyValue::container& KeyInfoType::
    KeyValue ()
    {
      return this->_xsd_KeyValue_;
    }

    void KeyInfoType::
    KeyValue (const KeyValue::container& KeyValue)
    {
      this->_xsd_KeyValue_ = KeyValue;
    }

    const KeyInfoType::RetrievalMethod::container& KeyInfoType::
    RetrievalMethod () const
    {
      return this->_xsd_RetrievalMethod_;
    }

    KeyInfoType::RetrievalMethod::container& KeyInfoType::
    RetrievalMethod ()
    {
      return this->_xsd_RetrievalMethod_;
    }

    void KeyInfoType::
    RetrievalMethod (const RetrievalMethod::container& RetrievalMethod)
    {
      this->_xsd_RetrievalMethod_ = RetrievalMethod;
    }

    const KeyInfoType::X509Data::container& KeyInfoType::
    X509Data () const
    {
      return this->_xsd_X509Data_;
    }

    KeyInfoType::X509Data::container& KeyInfoType::
    X509Data ()
    {
      return this->_xsd_X509Data_;
    }

    void KeyInfoType::
    X509Data (const X509Data::container& X509Data)
    {
      this->_xsd_X509Data_ = X509Data;
    }

    const KeyInfoType::PGPData::container& KeyInfoType::
    PGPData () const
    {
      return this->_xsd_PGPData_;
    }

    KeyInfoType::PGPData::container& KeyInfoType::
    PGPData ()
    {
      return this->_xsd_PGPData_;
    }

    void KeyInfoType::
    PGPData (const PGPData::container& PGPData)
    {
      this->_xsd_PGPData_ = PGPData;
    }

    const KeyInfoType::SPKIData::container& KeyInfoType::
    SPKIData () const
    {
      return this->_xsd_SPKIData_;
    }

    KeyInfoType::SPKIData::container& KeyInfoType::
    SPKIData ()
    {
      return this->_xsd_SPKIData_;
    }

    void KeyInfoType::
    SPKIData (const SPKIData::container& SPKIData)
    {
      this->_xsd_SPKIData_ = SPKIData;
    }

    const KeyInfoType::MgmtData::container& KeyInfoType::
    MgmtData () const
    {
      return this->_xsd_MgmtData_;
    }

    KeyInfoType::MgmtData::container& KeyInfoType::
    MgmtData ()
    {
      return this->_xsd_MgmtData_;
    }

    void KeyInfoType::
    MgmtData (const MgmtData::container& MgmtData)
    {
      this->_xsd_MgmtData_ = MgmtData;
    }

    const KeyInfoType::Id::container& KeyInfoType::
    Id () const
    {
      return this->_xsd_Id_;
    }

    KeyInfoType::Id::container& KeyInfoType::
    Id ()
    {
      return this->_xsd_Id_;
    }

    void KeyInfoType::
    Id (const Id::type& Id)
    {
      this->_xsd_Id_.set (Id);
    }

    void KeyInfoType::
    Id (const Id::container& Id)
    {
      this->_xsd_Id_ = Id;
    }

    void KeyInfoType::
    Id (::std::auto_ptr< Id::type > Id)
    {
      this->_xsd_Id_.set (Id);
    }


    // KeyValueType
    // 

    const KeyValueType::DSAKeyValue::container& KeyValueType::
    DSAKeyValue () const
    {
      return this->_xsd_DSAKeyValue_;
    }

    KeyValueType::DSAKeyValue::container& KeyValueType::
    DSAKeyValue ()
    {
      return this->_xsd_DSAKeyValue_;
    }

    void KeyValueType::
    DSAKeyValue (const DSAKeyValue::type& DSAKeyValue)
    {
      this->_xsd_DSAKeyValue_.set (DSAKeyValue);
    }

    void KeyValueType::
    DSAKeyValue (const DSAKeyValue::container& DSAKeyValue)
    {
      this->_xsd_DSAKeyValue_ = DSAKeyValue;
    }

    void KeyValueType::
    DSAKeyValue (::std::auto_ptr< DSAKeyValue::type > DSAKeyValue)
    {
      this->_xsd_DSAKeyValue_.set (DSAKeyValue);
    }

    const KeyValueType::RSAKeyValue::container& KeyValueType::
    RSAKeyValue () const
    {
      return this->_xsd_RSAKeyValue_;
    }

    KeyValueType::RSAKeyValue::container& KeyValueType::
    RSAKeyValue ()
    {
      return this->_xsd_RSAKeyValue_;
    }

    void KeyValueType::
    RSAKeyValue (const RSAKeyValue::type& RSAKeyValue)
    {
      this->_xsd_RSAKeyValue_.set (RSAKeyValue);
    }

    void KeyValueType::
    RSAKeyValue (const RSAKeyValue::container& RSAKeyValue)
    {
      this->_xsd_RSAKeyValue_ = RSAKeyValue;
    }

    void KeyValueType::
    RSAKeyValue (::std::auto_ptr< RSAKeyValue::type > RSAKeyValue)
    {
      this->_xsd_RSAKeyValue_.set (RSAKeyValue);
    }


    // RetrievalMethodType
    // 

    const RetrievalMethodType::Transforms::container& RetrievalMethodType::
    Transforms () const
    {
      return this->_xsd_Transforms_;
    }

    RetrievalMethodType::Transforms::container& RetrievalMethodType::
    Transforms ()
    {
      return this->_xsd_Transforms_;
    }

    void RetrievalMethodType::
    Transforms (const Transforms::type& Transforms)
    {
      this->_xsd_Transforms_.set (Transforms);
    }

    void RetrievalMethodType::
    Transforms (const Transforms::container& Transforms)
    {
      this->_xsd_Transforms_ = Transforms;
    }

    void RetrievalMethodType::
    Transforms (::std::auto_ptr< Transforms::type > Transforms)
    {
      this->_xsd_Transforms_.set (Transforms);
    }

    const RetrievalMethodType::URI::container& RetrievalMethodType::
    URI () const
    {
      return this->_xsd_URI_;
    }

    RetrievalMethodType::URI::container& RetrievalMethodType::
    URI ()
    {
      return this->_xsd_URI_;
    }

    void RetrievalMethodType::
    URI (const URI::type& URI)
    {
      this->_xsd_URI_.set (URI);
    }

    void RetrievalMethodType::
    URI (const URI::container& URI)
    {
      this->_xsd_URI_ = URI;
    }

    void RetrievalMethodType::
    URI (::std::auto_ptr< URI::type > URI)
    {
      this->_xsd_URI_.set (URI);
    }

    const RetrievalMethodType::Type::container& RetrievalMethodType::
    Type () const
    {
      return this->_xsd_Type_;
    }

    RetrievalMethodType::Type::container& RetrievalMethodType::
    Type ()
    {
      return this->_xsd_Type_;
    }

    void RetrievalMethodType::
    Type (const Type::type& Type)
    {
      this->_xsd_Type_.set (Type);
    }

    void RetrievalMethodType::
    Type (const Type::container& Type)
    {
      this->_xsd_Type_ = Type;
    }

    void RetrievalMethodType::
    Type (::std::auto_ptr< Type::type > Type)
    {
      this->_xsd_Type_.set (Type);
    }


    // X509DataType
    // 

    const X509DataType::X509IssuerSerial::container& X509DataType::
    X509IssuerSerial () const
    {
      return this->_xsd_X509IssuerSerial_;
    }

    X509DataType::X509IssuerSerial::container& X509DataType::
    X509IssuerSerial ()
    {
      return this->_xsd_X509IssuerSerial_;
    }

    void X509DataType::
    X509IssuerSerial (const X509IssuerSerial::container& X509IssuerSerial)
    {
      this->_xsd_X509IssuerSerial_ = X509IssuerSerial;
    }

    const X509DataType::X509SKI::container& X509DataType::
    X509SKI () const
    {
      return this->_xsd_X509SKI_;
    }

    X509DataType::X509SKI::container& X509DataType::
    X509SKI ()
    {
      return this->_xsd_X509SKI_;
    }

    void X509DataType::
    X509SKI (const X509SKI::container& X509SKI)
    {
      this->_xsd_X509SKI_ = X509SKI;
    }

    const X509DataType::X509SubjectName::container& X509DataType::
    X509SubjectName () const
    {
      return this->_xsd_X509SubjectName_;
    }

    X509DataType::X509SubjectName::container& X509DataType::
    X509SubjectName ()
    {
      return this->_xsd_X509SubjectName_;
    }

    void X509DataType::
    X509SubjectName (const X509SubjectName::container& X509SubjectName)
    {
      this->_xsd_X509SubjectName_ = X509SubjectName;
    }

    const X509DataType::X509Certificate::container& X509DataType::
    X509Certificate () const
    {
      return this->_xsd_X509Certificate_;
    }

    X509DataType::X509Certificate::container& X509DataType::
    X509Certificate ()
    {
      return this->_xsd_X509Certificate_;
    }

    void X509DataType::
    X509Certificate (const X509Certificate::container& X509Certificate)
    {
      this->_xsd_X509Certificate_ = X509Certificate;
    }

    const X509DataType::X509CRL::container& X509DataType::
    X509CRL () const
    {
      return this->_xsd_X509CRL_;
    }

    X509DataType::X509CRL::container& X509DataType::
    X509CRL ()
    {
      return this->_xsd_X509CRL_;
    }

    void X509DataType::
    X509CRL (const X509CRL::container& X509CRL)
    {
      this->_xsd_X509CRL_ = X509CRL;
    }


    // X509IssuerSerialType
    // 

    const X509IssuerSerialType::X509IssuerName::type& X509IssuerSerialType::
    X509IssuerName () const
    {
      return this->_xsd_X509IssuerName_.get ();
    }

    X509IssuerSerialType::X509IssuerName::type& X509IssuerSerialType::
    X509IssuerName ()
    {
      return this->_xsd_X509IssuerName_.get ();
    }

    void X509IssuerSerialType::
    X509IssuerName (const X509IssuerName::type& X509IssuerName)
    {
      this->_xsd_X509IssuerName_.set (X509IssuerName);
    }

    void X509IssuerSerialType::
    X509IssuerName (::std::auto_ptr< X509IssuerName::type > X509IssuerName)
    {
      this->_xsd_X509IssuerName_.set (X509IssuerName);
    }

    const X509IssuerSerialType::X509SerialNumber::type& X509IssuerSerialType::
    X509SerialNumber () const
    {
      return this->_xsd_X509SerialNumber_.get ();
    }

    X509IssuerSerialType::X509SerialNumber::type& X509IssuerSerialType::
    X509SerialNumber ()
    {
      return this->_xsd_X509SerialNumber_.get ();
    }

    void X509IssuerSerialType::
    X509SerialNumber (const X509SerialNumber::type& X509SerialNumber)
    {
      this->_xsd_X509SerialNumber_.set (X509SerialNumber);
    }


    // PGPDataType
    // 

    const PGPDataType::PGPKeyID::container& PGPDataType::
    PGPKeyID () const
    {
      return this->_xsd_PGPKeyID_;
    }

    PGPDataType::PGPKeyID::container& PGPDataType::
    PGPKeyID ()
    {
      return this->_xsd_PGPKeyID_;
    }

    void PGPDataType::
    PGPKeyID (const PGPKeyID::type& PGPKeyID)
    {
      this->_xsd_PGPKeyID_.set (PGPKeyID);
    }

    void PGPDataType::
    PGPKeyID (const PGPKeyID::container& PGPKeyID)
    {
      this->_xsd_PGPKeyID_ = PGPKeyID;
    }

    void PGPDataType::
    PGPKeyID (::std::auto_ptr< PGPKeyID::type > PGPKeyID)
    {
      this->_xsd_PGPKeyID_.set (PGPKeyID);
    }

    const PGPDataType::PGPKeyPacket::container& PGPDataType::
    PGPKeyPacket () const
    {
      return this->_xsd_PGPKeyPacket_;
    }

    PGPDataType::PGPKeyPacket::container& PGPDataType::
    PGPKeyPacket ()
    {
      return this->_xsd_PGPKeyPacket_;
    }

    void PGPDataType::
    PGPKeyPacket (const PGPKeyPacket::type& PGPKeyPacket)
    {
      this->_xsd_PGPKeyPacket_.set (PGPKeyPacket);
    }

    void PGPDataType::
    PGPKeyPacket (const PGPKeyPacket::container& PGPKeyPacket)
    {
      this->_xsd_PGPKeyPacket_ = PGPKeyPacket;
    }

    void PGPDataType::
    PGPKeyPacket (::std::auto_ptr< PGPKeyPacket::type > PGPKeyPacket)
    {
      this->_xsd_PGPKeyPacket_.set (PGPKeyPacket);
    }


    // SPKIDataType
    // 

    const SPKIDataType::SPKISexp::container& SPKIDataType::
    SPKISexp () const
    {
      return this->_xsd_SPKISexp_;
    }

    SPKIDataType::SPKISexp::container& SPKIDataType::
    SPKISexp ()
    {
      return this->_xsd_SPKISexp_;
    }

    void SPKIDataType::
    SPKISexp (const SPKISexp::container& SPKISexp)
    {
      this->_xsd_SPKISexp_ = SPKISexp;
    }


    // ObjectType
    // 

    const ObjectType::Id::container& ObjectType::
    Id () const
    {
      return this->_xsd_Id_;
    }

    ObjectType::Id::container& ObjectType::
    Id ()
    {
      return this->_xsd_Id_;
    }

    void ObjectType::
    Id (const Id::type& Id)
    {
      this->_xsd_Id_.set (Id);
    }

    void ObjectType::
    Id (const Id::container& Id)
    {
      this->_xsd_Id_ = Id;
    }

    void ObjectType::
    Id (::std::auto_ptr< Id::type > Id)
    {
      this->_xsd_Id_.set (Id);
    }

    const ObjectType::MimeType::container& ObjectType::
    MimeType () const
    {
      return this->_xsd_MimeType_;
    }

    ObjectType::MimeType::container& ObjectType::
    MimeType ()
    {
      return this->_xsd_MimeType_;
    }

    void ObjectType::
    MimeType (const MimeType::type& MimeType)
    {
      this->_xsd_MimeType_.set (MimeType);
    }

    void ObjectType::
    MimeType (const MimeType::container& MimeType)
    {
      this->_xsd_MimeType_ = MimeType;
    }

    void ObjectType::
    MimeType (::std::auto_ptr< MimeType::type > MimeType)
    {
      this->_xsd_MimeType_.set (MimeType);
    }

    const ObjectType::Encoding::container& ObjectType::
    Encoding () const
    {
      return this->_xsd_Encoding_;
    }

    ObjectType::Encoding::container& ObjectType::
    Encoding ()
    {
      return this->_xsd_Encoding_;
    }

    void ObjectType::
    Encoding (const Encoding::type& Encoding)
    {
      this->_xsd_Encoding_.set (Encoding);
    }

    void ObjectType::
    Encoding (const Encoding::container& Encoding)
    {
      this->_xsd_Encoding_ = Encoding;
    }

    void ObjectType::
    Encoding (::std::auto_ptr< Encoding::type > Encoding)
    {
      this->_xsd_Encoding_.set (Encoding);
    }


    // ManifestType
    // 

    const ManifestType::Reference::container& ManifestType::
    Reference () const
    {
      return this->_xsd_Reference_;
    }

    ManifestType::Reference::container& ManifestType::
    Reference ()
    {
      return this->_xsd_Reference_;
    }

    void ManifestType::
    Reference (const Reference::container& Reference)
    {
      this->_xsd_Reference_ = Reference;
    }

    const ManifestType::Id::container& ManifestType::
    Id () const
    {
      return this->_xsd_Id_;
    }

    ManifestType::Id::container& ManifestType::
    Id ()
    {
      return this->_xsd_Id_;
    }

    void ManifestType::
    Id (const Id::type& Id)
    {
      this->_xsd_Id_.set (Id);
    }

    void ManifestType::
    Id (const Id::container& Id)
    {
      this->_xsd_Id_ = Id;
    }

    void ManifestType::
    Id (::std::auto_ptr< Id::type > Id)
    {
      this->_xsd_Id_.set (Id);
    }


    // SignaturePropertiesType
    // 

    const SignaturePropertiesType::SignatureProperty::container& SignaturePropertiesType::
    SignatureProperty () const
    {
      return this->_xsd_SignatureProperty_;
    }

    SignaturePropertiesType::SignatureProperty::container& SignaturePropertiesType::
    SignatureProperty ()
    {
      return this->_xsd_SignatureProperty_;
    }

    void SignaturePropertiesType::
    SignatureProperty (const SignatureProperty::container& SignatureProperty)
    {
      this->_xsd_SignatureProperty_ = SignatureProperty;
    }

    const SignaturePropertiesType::Id::container& SignaturePropertiesType::
    Id () const
    {
      return this->_xsd_Id_;
    }

    SignaturePropertiesType::Id::container& SignaturePropertiesType::
    Id ()
    {
      return this->_xsd_Id_;
    }

    void SignaturePropertiesType::
    Id (const Id::type& Id)
    {
      this->_xsd_Id_.set (Id);
    }

    void SignaturePropertiesType::
    Id (const Id::container& Id)
    {
      this->_xsd_Id_ = Id;
    }

    void SignaturePropertiesType::
    Id (::std::auto_ptr< Id::type > Id)
    {
      this->_xsd_Id_.set (Id);
    }


    // SignaturePropertyType
    // 

    const SignaturePropertyType::Target::type& SignaturePropertyType::
    Target () const
    {
      return this->_xsd_Target_.get ();
    }

    SignaturePropertyType::Target::type& SignaturePropertyType::
    Target ()
    {
      return this->_xsd_Target_.get ();
    }

    void SignaturePropertyType::
    Target (const Target::type& Target)
    {
      this->_xsd_Target_.set (Target);
    }

    void SignaturePropertyType::
    Target (::std::auto_ptr< Target::type > Target)
    {
      this->_xsd_Target_.set (Target);
    }

    const SignaturePropertyType::Id::container& SignaturePropertyType::
    Id () const
    {
      return this->_xsd_Id_;
    }

    SignaturePropertyType::Id::container& SignaturePropertyType::
    Id ()
    {
      return this->_xsd_Id_;
    }

    void SignaturePropertyType::
    Id (const Id::type& Id)
    {
      this->_xsd_Id_.set (Id);
    }

    void SignaturePropertyType::
    Id (const Id::container& Id)
    {
      this->_xsd_Id_ = Id;
    }

    void SignaturePropertyType::
    Id (::std::auto_ptr< Id::type > Id)
    {
      this->_xsd_Id_.set (Id);
    }


    // HMACOutputLengthType
    // 


    // DSAKeyValueType
    // 

    const DSAKeyValueType::P::container& DSAKeyValueType::
    P () const
    {
      return this->_xsd_P_;
    }

    DSAKeyValueType::P::container& DSAKeyValueType::
    P ()
    {
      return this->_xsd_P_;
    }

    void DSAKeyValueType::
    P (const P::type& P)
    {
      this->_xsd_P_.set (P);
    }

    void DSAKeyValueType::
    P (const P::container& P)
    {
      this->_xsd_P_ = P;
    }

    void DSAKeyValueType::
    P (::std::auto_ptr< P::type > P)
    {
      this->_xsd_P_.set (P);
    }

    const DSAKeyValueType::Q::container& DSAKeyValueType::
    Q () const
    {
      return this->_xsd_Q_;
    }

    DSAKeyValueType::Q::container& DSAKeyValueType::
    Q ()
    {
      return this->_xsd_Q_;
    }

    void DSAKeyValueType::
    Q (const Q::type& Q)
    {
      this->_xsd_Q_.set (Q);
    }

    void DSAKeyValueType::
    Q (const Q::container& Q)
    {
      this->_xsd_Q_ = Q;
    }

    void DSAKeyValueType::
    Q (::std::auto_ptr< Q::type > Q)
    {
      this->_xsd_Q_.set (Q);
    }

    const DSAKeyValueType::G::container& DSAKeyValueType::
    G () const
    {
      return this->_xsd_G_;
    }

    DSAKeyValueType::G::container& DSAKeyValueType::
    G ()
    {
      return this->_xsd_G_;
    }

    void DSAKeyValueType::
    G (const G::type& G)
    {
      this->_xsd_G_.set (G);
    }

    void DSAKeyValueType::
    G (const G::container& G)
    {
      this->_xsd_G_ = G;
    }

    void DSAKeyValueType::
    G (::std::auto_ptr< G::type > G)
    {
      this->_xsd_G_.set (G);
    }

    const DSAKeyValueType::Y::type& DSAKeyValueType::
    Y () const
    {
      return this->_xsd_Y_.get ();
    }

    DSAKeyValueType::Y::type& DSAKeyValueType::
    Y ()
    {
      return this->_xsd_Y_.get ();
    }

    void DSAKeyValueType::
    Y (const Y::type& Y)
    {
      this->_xsd_Y_.set (Y);
    }

    void DSAKeyValueType::
    Y (::std::auto_ptr< Y::type > Y)
    {
      this->_xsd_Y_.set (Y);
    }

    const DSAKeyValueType::J::container& DSAKeyValueType::
    J () const
    {
      return this->_xsd_J_;
    }

    DSAKeyValueType::J::container& DSAKeyValueType::
    J ()
    {
      return this->_xsd_J_;
    }

    void DSAKeyValueType::
    J (const J::type& J)
    {
      this->_xsd_J_.set (J);
    }

    void DSAKeyValueType::
    J (const J::container& J)
    {
      this->_xsd_J_ = J;
    }

    void DSAKeyValueType::
    J (::std::auto_ptr< J::type > J)
    {
      this->_xsd_J_.set (J);
    }

    const DSAKeyValueType::Seed::container& DSAKeyValueType::
    Seed () const
    {
      return this->_xsd_Seed_;
    }

    DSAKeyValueType::Seed::container& DSAKeyValueType::
    Seed ()
    {
      return this->_xsd_Seed_;
    }

    void DSAKeyValueType::
    Seed (const Seed::type& Seed)
    {
      this->_xsd_Seed_.set (Seed);
    }

    void DSAKeyValueType::
    Seed (const Seed::container& Seed)
    {
      this->_xsd_Seed_ = Seed;
    }

    void DSAKeyValueType::
    Seed (::std::auto_ptr< Seed::type > Seed)
    {
      this->_xsd_Seed_.set (Seed);
    }

    const DSAKeyValueType::PgenCounter::container& DSAKeyValueType::
    PgenCounter () const
    {
      return this->_xsd_PgenCounter_;
    }

    DSAKeyValueType::PgenCounter::container& DSAKeyValueType::
    PgenCounter ()
    {
      return this->_xsd_PgenCounter_;
    }

    void DSAKeyValueType::
    PgenCounter (const PgenCounter::type& PgenCounter)
    {
      this->_xsd_PgenCounter_.set (PgenCounter);
    }

    void DSAKeyValueType::
    PgenCounter (const PgenCounter::container& PgenCounter)
    {
      this->_xsd_PgenCounter_ = PgenCounter;
    }

    void DSAKeyValueType::
    PgenCounter (::std::auto_ptr< PgenCounter::type > PgenCounter)
    {
      this->_xsd_PgenCounter_.set (PgenCounter);
    }


    // RSAKeyValueType
    // 

    const RSAKeyValueType::Modulus::type& RSAKeyValueType::
    Modulus () const
    {
      return this->_xsd_Modulus_.get ();
    }

    RSAKeyValueType::Modulus::type& RSAKeyValueType::
    Modulus ()
    {
      return this->_xsd_Modulus_.get ();
    }

    void RSAKeyValueType::
    Modulus (const Modulus::type& Modulus)
    {
      this->_xsd_Modulus_.set (Modulus);
    }

    void RSAKeyValueType::
    Modulus (::std::auto_ptr< Modulus::type > Modulus)
    {
      this->_xsd_Modulus_.set (Modulus);
    }

    const RSAKeyValueType::Exponent::type& RSAKeyValueType::
    Exponent () const
    {
      return this->_xsd_Exponent_.get ();
    }

    RSAKeyValueType::Exponent::type& RSAKeyValueType::
    Exponent ()
    {
      return this->_xsd_Exponent_.get ();
    }

    void RSAKeyValueType::
    Exponent (const Exponent::type& Exponent)
    {
      this->_xsd_Exponent_.set (Exponent);
    }

    void RSAKeyValueType::
    Exponent (::std::auto_ptr< Exponent::type > Exponent)
    {
      this->_xsd_Exponent_.set (Exponent);
    }
  }
}

#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/parser.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_factory_plate< 0, wchar_t >
  type_factory_plate_init;
}

namespace w3
{
  namespace xmldsig
  {
    // CryptoBinary
    //

    CryptoBinary::
    CryptoBinary ()
    : ::xml_schema::base64_binary ()
    {
    }

    CryptoBinary::
    CryptoBinary (const _xsd_CryptoBinary::base_& _xsd_CryptoBinary)
    : ::xml_schema::base64_binary (_xsd_CryptoBinary)
    {
    }

    CryptoBinary::
    CryptoBinary (const CryptoBinary& _xsd_CryptoBinary,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::base64_binary (_xsd_CryptoBinary, f, c)
    {
    }

    CryptoBinary::
    CryptoBinary (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::base64_binary (e, f, c)
    {
    }

    CryptoBinary::
    CryptoBinary (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::base64_binary (a, f, c)
    {
    }

    CryptoBinary::
    CryptoBinary (const ::std::basic_string< wchar_t >& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::base64_binary (s, e, f, c)
    {
    }

    CryptoBinary* CryptoBinary::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new CryptoBinary (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CryptoBinary >
    _xsd_CryptoBinary_type_factory_init (
      L"CryptoBinary http://www.w3.org/2000/09/xmldsig#");


    // SignatureType
    //

    SignatureType::
    SignatureType ()
    : ::xml_schema::type (),
    _xsd_SignedInfo_ (::xml_schema::flags (), this),
    _xsd_SignatureValue_ (::xml_schema::flags (), this),
    _xsd_KeyInfo_ (::xml_schema::flags (), this),
    _xsd_Object_ (::xml_schema::flags (), this),
    _xsd_Id_ (::xml_schema::flags (), this)
    {
    }

    SignatureType::
    SignatureType (const SignedInfo::type& _xsd_SignedInfo,
                   const SignatureValue::type& _xsd_SignatureValue)
    : ::xml_schema::type (),
    _xsd_SignedInfo_ (_xsd_SignedInfo,
                      ::xml_schema::flags (),
                      this),
    _xsd_SignatureValue_ (_xsd_SignatureValue,
                          ::xml_schema::flags (),
                          this),
    _xsd_KeyInfo_ (::xml_schema::flags (), this),
    _xsd_Object_ (::xml_schema::flags (), this),
    _xsd_Id_ (::xml_schema::flags (), this)
    {
    }

    SignatureType::
    SignatureType (const SignatureType& _xsd_SignatureType,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_SignatureType, f, c),
    _xsd_SignedInfo_ (_xsd_SignatureType._xsd_SignedInfo_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_SignatureValue_ (_xsd_SignatureType._xsd_SignatureValue_,
                          f | ::xml_schema::flags::not_root,
                          this),
    _xsd_KeyInfo_ (_xsd_SignatureType._xsd_KeyInfo_,
                   f | ::xml_schema::flags::not_root,
                   this),
    _xsd_Object_ (_xsd_SignatureType._xsd_Object_,
                  f | ::xml_schema::flags::not_root,
                  this),
    _xsd_Id_ (_xsd_SignatureType._xsd_Id_,
              f | ::xml_schema::flags::not_root,
              this)
    {
    }

    SignatureType::
    SignatureType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_SignedInfo_ (f | ::xml_schema::flags::not_root, this),
    _xsd_SignatureValue_ (f | ::xml_schema::flags::not_root, this),
    _xsd_KeyInfo_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Object_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Id_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void SignatureType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // SignedInfo
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< SignedInfo::type > r (
            tfm.create< SignedInfo::type > (
              L"SignedInfo",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_SignedInfo_.present ())
              continue;
            this->SignedInfo (r);
            continue;
          }
        }

        // SignatureValue
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< SignatureValue::type > r (
            tfm.create< SignatureValue::type > (
              L"SignatureValue",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_SignatureValue_.present ())
              continue;
            this->SignatureValue (r);
            continue;
          }
        }

        // KeyInfo
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< KeyInfo::type > r (
            tfm.create< KeyInfo::type > (
              L"KeyInfo",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->KeyInfo ())
              continue;
            this->KeyInfo (r);
            continue;
          }
        }

        // Object
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Object::type > r (
            tfm.create< Object::type > (
              L"Object",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->Object ().push_back (r);
            continue;
          }
        }
      }

      if (!_xsd_SignedInfo_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"SignedInfo",
          L"http://www.w3.org/2000/09/xmldsig#");
      }

      if (!_xsd_SignatureValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"SignatureValue",
          L"http://www.w3.org/2000/09/xmldsig#");
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Id" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Id::type > r (
            Id::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Id (r);
          continue;
        }
      }
    }

    SignatureType* SignatureType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new SignatureType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SignatureType >
    _xsd_SignatureType_type_factory_init (
      L"SignatureType http://www.w3.org/2000/09/xmldsig#");


    // SignatureValueType
    //

    SignatureValueType::
    SignatureValueType ()
    : ::xml_schema::base64_binary (),
    _xsd_Id_ (::xml_schema::flags (), this)
    {
    }

    SignatureValueType::
    SignatureValueType (const _xsd_SignatureValueType::base_& _xsd_SignatureValueType)
    : ::xml_schema::base64_binary (_xsd_SignatureValueType),
    _xsd_Id_ (::xml_schema::flags (), this)
    {
    }

    SignatureValueType::
    SignatureValueType (const SignatureValueType& _xsd_SignatureValueType,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
    : ::xml_schema::base64_binary (_xsd_SignatureValueType, f, c),
    _xsd_Id_ (_xsd_SignatureValueType._xsd_Id_,
              f | ::xml_schema::flags::not_root,
              this)
    {
    }

    SignatureValueType::
    SignatureValueType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
    : ::xml_schema::base64_binary (e, f, c),
    _xsd_Id_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void SignatureValueType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Id" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Id::type > r (
            Id::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Id (r);
          continue;
        }
      }
    }

    SignatureValueType* SignatureValueType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new SignatureValueType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SignatureValueType >
    _xsd_SignatureValueType_type_factory_init (
      L"SignatureValueType http://www.w3.org/2000/09/xmldsig#");


    // SignedInfoType
    //

    SignedInfoType::
    SignedInfoType ()
    : ::xml_schema::type (),
    _xsd_CanonicalizationMethod_ (::xml_schema::flags (), this),
    _xsd_SignatureMethod_ (::xml_schema::flags (), this),
    _xsd_Reference_ (::xml_schema::flags (), this),
    _xsd_Id_ (::xml_schema::flags (), this)
    {
    }

    SignedInfoType::
    SignedInfoType (const CanonicalizationMethod::type& _xsd_CanonicalizationMethod,
                    const SignatureMethod::type& _xsd_SignatureMethod)
    : ::xml_schema::type (),
    _xsd_CanonicalizationMethod_ (_xsd_CanonicalizationMethod,
                                  ::xml_schema::flags (),
                                  this),
    _xsd_SignatureMethod_ (_xsd_SignatureMethod,
                           ::xml_schema::flags (),
                           this),
    _xsd_Reference_ (::xml_schema::flags (), this),
    _xsd_Id_ (::xml_schema::flags (), this)
    {
    }

    SignedInfoType::
    SignedInfoType (const SignedInfoType& _xsd_SignedInfoType,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_SignedInfoType, f, c),
    _xsd_CanonicalizationMethod_ (_xsd_SignedInfoType._xsd_CanonicalizationMethod_,
                                  f | ::xml_schema::flags::not_root,
                                  this),
    _xsd_SignatureMethod_ (_xsd_SignedInfoType._xsd_SignatureMethod_,
                           f | ::xml_schema::flags::not_root,
                           this),
    _xsd_Reference_ (_xsd_SignedInfoType._xsd_Reference_,
                     f | ::xml_schema::flags::not_root,
                     this),
    _xsd_Id_ (_xsd_SignedInfoType._xsd_Id_,
              f | ::xml_schema::flags::not_root,
              this)
    {
    }

    SignedInfoType::
    SignedInfoType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_CanonicalizationMethod_ (f | ::xml_schema::flags::not_root, this),
    _xsd_SignatureMethod_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Reference_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Id_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void SignedInfoType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // CanonicalizationMethod
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< CanonicalizationMethod::type > r (
            tfm.create< CanonicalizationMethod::type > (
              L"CanonicalizationMethod",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_CanonicalizationMethod_.present ())
              continue;
            this->CanonicalizationMethod (r);
            continue;
          }
        }

        // SignatureMethod
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< SignatureMethod::type > r (
            tfm.create< SignatureMethod::type > (
              L"SignatureMethod",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_SignatureMethod_.present ())
              continue;
            this->SignatureMethod (r);
            continue;
          }
        }

        // Reference
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Reference::type > r (
            tfm.create< Reference::type > (
              L"Reference",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->Reference ().push_back (r);
            continue;
          }
        }
      }

      if (!_xsd_CanonicalizationMethod_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"CanonicalizationMethod",
          L"http://www.w3.org/2000/09/xmldsig#");
      }

      if (!_xsd_SignatureMethod_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"SignatureMethod",
          L"http://www.w3.org/2000/09/xmldsig#");
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Id" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Id::type > r (
            Id::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Id (r);
          continue;
        }
      }
    }

    SignedInfoType* SignedInfoType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new SignedInfoType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SignedInfoType >
    _xsd_SignedInfoType_type_factory_init (
      L"SignedInfoType http://www.w3.org/2000/09/xmldsig#");


    // CanonicalizationMethodType
    //

    CanonicalizationMethodType::
    CanonicalizationMethodType ()
    : ::xml_schema::type (),
    _xsd_Algorithm_ (::xml_schema::flags (), this)
    {
    }

    CanonicalizationMethodType::
    CanonicalizationMethodType (const Algorithm::type& _xsd_Algorithm)
    : ::xml_schema::type (),
    _xsd_Algorithm_ (_xsd_Algorithm,
                     ::xml_schema::flags (),
                     this)
    {
    }

    CanonicalizationMethodType::
    CanonicalizationMethodType (const CanonicalizationMethodType& _xsd_CanonicalizationMethodType,
                                ::xml_schema::flags f,
                                ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_CanonicalizationMethodType, f, c),
    _xsd_Algorithm_ (_xsd_CanonicalizationMethodType._xsd_Algorithm_,
                     f | ::xml_schema::flags::not_root,
                     this)
    {
    }

    CanonicalizationMethodType::
    CanonicalizationMethodType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Algorithm_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void CanonicalizationMethodType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Algorithm" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Algorithm::type > r (
            Algorithm::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Algorithm (r);
          continue;
        }
      }

      if (!_xsd_Algorithm_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Algorithm",
          L"");
      }
    }

    CanonicalizationMethodType* CanonicalizationMethodType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new CanonicalizationMethodType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CanonicalizationMethodType >
    _xsd_CanonicalizationMethodType_type_factory_init (
      L"CanonicalizationMethodType http://www.w3.org/2000/09/xmldsig#");


    // SignatureMethodType
    //

    SignatureMethodType::
    SignatureMethodType ()
    : ::xml_schema::type (),
    _xsd_HMACOutputLength_ (::xml_schema::flags (), this),
    _xsd_Algorithm_ (::xml_schema::flags (), this)
    {
    }

    SignatureMethodType::
    SignatureMethodType (const Algorithm::type& _xsd_Algorithm)
    : ::xml_schema::type (),
    _xsd_HMACOutputLength_ (::xml_schema::flags (), this),
    _xsd_Algorithm_ (_xsd_Algorithm,
                     ::xml_schema::flags (),
                     this)
    {
    }

    SignatureMethodType::
    SignatureMethodType (const SignatureMethodType& _xsd_SignatureMethodType,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_SignatureMethodType, f, c),
    _xsd_HMACOutputLength_ (_xsd_SignatureMethodType._xsd_HMACOutputLength_,
                            f | ::xml_schema::flags::not_root,
                            this),
    _xsd_Algorithm_ (_xsd_SignatureMethodType._xsd_Algorithm_,
                     f | ::xml_schema::flags::not_root,
                     this)
    {
    }

    SignatureMethodType::
    SignatureMethodType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_HMACOutputLength_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Algorithm_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void SignatureMethodType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // HMACOutputLength
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< HMACOutputLength::type > r (
            tfm.create< HMACOutputLength::type > (
              L"HMACOutputLength",
              L"http://www.w3.org/2000/09/xmldsig#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->HMACOutputLength ())
              continue;
            this->HMACOutputLength (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Algorithm" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Algorithm::type > r (
            Algorithm::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Algorithm (r);
          continue;
        }
      }

      if (!_xsd_Algorithm_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Algorithm",
          L"");
      }
    }

    SignatureMethodType* SignatureMethodType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new SignatureMethodType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SignatureMethodType >
    _xsd_SignatureMethodType_type_factory_init (
      L"SignatureMethodType http://www.w3.org/2000/09/xmldsig#");


    // ReferenceType
    //

    ReferenceType::
    ReferenceType ()
    : ::xml_schema::type (),
    _xsd_Transforms_ (::xml_schema::flags (), this),
    _xsd_DigestMethod_ (::xml_schema::flags (), this),
    _xsd_DigestValue_ (::xml_schema::flags (), this),
    _xsd_Id_ (::xml_schema::flags (), this),
    _xsd_URI_ (::xml_schema::flags (), this),
    _xsd_Type_ (::xml_schema::flags (), this)
    {
    }

    ReferenceType::
    ReferenceType (const DigestMethod::type& _xsd_DigestMethod,
                   const DigestValue::type& _xsd_DigestValue)
    : ::xml_schema::type (),
    _xsd_Transforms_ (::xml_schema::flags (), this),
    _xsd_DigestMethod_ (_xsd_DigestMethod,
                        ::xml_schema::flags (),
                        this),
    _xsd_DigestValue_ (_xsd_DigestValue,
                       ::xml_schema::flags (),
                       this),
    _xsd_Id_ (::xml_schema::flags (), this),
    _xsd_URI_ (::xml_schema::flags (), this),
    _xsd_Type_ (::xml_schema::flags (), this)
    {
    }

    ReferenceType::
    ReferenceType (const ReferenceType& _xsd_ReferenceType,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_ReferenceType, f, c),
    _xsd_Transforms_ (_xsd_ReferenceType._xsd_Transforms_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_DigestMethod_ (_xsd_ReferenceType._xsd_DigestMethod_,
                        f | ::xml_schema::flags::not_root,
                        this),
    _xsd_DigestValue_ (_xsd_ReferenceType._xsd_DigestValue_,
                       f | ::xml_schema::flags::not_root,
                       this),
    _xsd_Id_ (_xsd_ReferenceType._xsd_Id_,
              f | ::xml_schema::flags::not_root,
              this),
    _xsd_URI_ (_xsd_ReferenceType._xsd_URI_,
               f | ::xml_schema::flags::not_root,
               this),
    _xsd_Type_ (_xsd_ReferenceType._xsd_Type_,
                f | ::xml_schema::flags::not_root,
                this)
    {
    }

    ReferenceType::
    ReferenceType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Transforms_ (f | ::xml_schema::flags::not_root, this),
    _xsd_DigestMethod_ (f | ::xml_schema::flags::not_root, this),
    _xsd_DigestValue_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Id_ (f | ::xml_schema::flags::not_root, this),
    _xsd_URI_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Type_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void ReferenceType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Transforms
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Transforms::type > r (
            tfm.create< Transforms::type > (
              L"Transforms",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Transforms ())
              continue;
            this->Transforms (r);
            continue;
          }
        }

        // DigestMethod
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< DigestMethod::type > r (
            tfm.create< DigestMethod::type > (
              L"DigestMethod",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_DigestMethod_.present ())
              continue;
            this->DigestMethod (r);
            continue;
          }
        }

        // DigestValue
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< DigestValue::type > r (
            tfm.create< DigestValue::type > (
              L"DigestValue",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_DigestValue_.present ())
              continue;
            this->DigestValue (r);
            continue;
          }
        }
      }

      if (!_xsd_DigestMethod_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"DigestMethod",
          L"http://www.w3.org/2000/09/xmldsig#");
      }

      if (!_xsd_DigestValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"DigestValue",
          L"http://www.w3.org/2000/09/xmldsig#");
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Id" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Id::type > r (
            Id::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Id (r);
          continue;
        }

        if (a.name () == L"URI" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< URI::type > r (
            URI::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->URI (r);
          continue;
        }

        if (a.name () == L"Type" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Type::type > r (
            Type::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Type (r);
          continue;
        }
      }
    }

    ReferenceType* ReferenceType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ReferenceType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ReferenceType >
    _xsd_ReferenceType_type_factory_init (
      L"ReferenceType http://www.w3.org/2000/09/xmldsig#");


    // TransformsType
    //

    TransformsType::
    TransformsType ()
    : ::xml_schema::type (),
    _xsd_Transform_ (::xml_schema::flags (), this)
    {
    }

    TransformsType::
    TransformsType (const TransformsType& _xsd_TransformsType,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_TransformsType, f, c),
    _xsd_Transform_ (_xsd_TransformsType._xsd_Transform_,
                     f | ::xml_schema::flags::not_root,
                     this)
    {
    }

    TransformsType::
    TransformsType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Transform_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void TransformsType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Transform
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Transform::type > r (
            tfm.create< Transform::type > (
              L"Transform",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->Transform ().push_back (r);
            continue;
          }
        }
      }
    }

    TransformsType* TransformsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new TransformsType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, TransformsType >
    _xsd_TransformsType_type_factory_init (
      L"TransformsType http://www.w3.org/2000/09/xmldsig#");


    // TransformType
    //

    TransformType::
    TransformType ()
    : ::xml_schema::type (),
    _xsd_XPath_ (::xml_schema::flags (), this),
    _xsd_Algorithm_ (::xml_schema::flags (), this)
    {
    }

    TransformType::
    TransformType (const Algorithm::type& _xsd_Algorithm)
    : ::xml_schema::type (),
    _xsd_XPath_ (::xml_schema::flags (), this),
    _xsd_Algorithm_ (_xsd_Algorithm,
                     ::xml_schema::flags (),
                     this)
    {
    }

    TransformType::
    TransformType (const TransformType& _xsd_TransformType,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_TransformType, f, c),
    _xsd_XPath_ (_xsd_TransformType._xsd_XPath_,
                 f | ::xml_schema::flags::not_root,
                 this),
    _xsd_Algorithm_ (_xsd_TransformType._xsd_Algorithm_,
                     f | ::xml_schema::flags::not_root,
                     this)
    {
    }

    TransformType::
    TransformType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_XPath_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Algorithm_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void TransformType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // XPath
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< XPath::type > r (
            tfm.create< XPath::type > (
              L"XPath",
              L"http://www.w3.org/2000/09/xmldsig#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->XPath ().push_back (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Algorithm" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Algorithm::type > r (
            Algorithm::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Algorithm (r);
          continue;
        }
      }

      if (!_xsd_Algorithm_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Algorithm",
          L"");
      }
    }

    TransformType* TransformType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new TransformType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, TransformType >
    _xsd_TransformType_type_factory_init (
      L"TransformType http://www.w3.org/2000/09/xmldsig#");


    // DigestMethodType
    //

    DigestMethodType::
    DigestMethodType ()
    : ::xml_schema::type (),
    _xsd_Algorithm_ (::xml_schema::flags (), this)
    {
    }

    DigestMethodType::
    DigestMethodType (const Algorithm::type& _xsd_Algorithm)
    : ::xml_schema::type (),
    _xsd_Algorithm_ (_xsd_Algorithm,
                     ::xml_schema::flags (),
                     this)
    {
    }

    DigestMethodType::
    DigestMethodType (const DigestMethodType& _xsd_DigestMethodType,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_DigestMethodType, f, c),
    _xsd_Algorithm_ (_xsd_DigestMethodType._xsd_Algorithm_,
                     f | ::xml_schema::flags::not_root,
                     this)
    {
    }

    DigestMethodType::
    DigestMethodType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Algorithm_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void DigestMethodType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Algorithm" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Algorithm::type > r (
            Algorithm::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Algorithm (r);
          continue;
        }
      }

      if (!_xsd_Algorithm_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Algorithm",
          L"");
      }
    }

    DigestMethodType* DigestMethodType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new DigestMethodType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DigestMethodType >
    _xsd_DigestMethodType_type_factory_init (
      L"DigestMethodType http://www.w3.org/2000/09/xmldsig#");


    // DigestValueType
    //

    DigestValueType::
    DigestValueType ()
    : ::xml_schema::base64_binary ()
    {
    }

    DigestValueType::
    DigestValueType (const _xsd_DigestValueType::base_& _xsd_DigestValueType)
    : ::xml_schema::base64_binary (_xsd_DigestValueType)
    {
    }

    DigestValueType::
    DigestValueType (const DigestValueType& _xsd_DigestValueType,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::base64_binary (_xsd_DigestValueType, f, c)
    {
    }

    DigestValueType::
    DigestValueType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::base64_binary (e, f, c)
    {
    }

    DigestValueType::
    DigestValueType (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::base64_binary (a, f, c)
    {
    }

    DigestValueType::
    DigestValueType (const ::std::basic_string< wchar_t >& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::base64_binary (s, e, f, c)
    {
    }

    DigestValueType* DigestValueType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new DigestValueType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DigestValueType >
    _xsd_DigestValueType_type_factory_init (
      L"DigestValueType http://www.w3.org/2000/09/xmldsig#");


    // KeyInfoType
    //

    KeyInfoType::
    KeyInfoType ()
    : ::xml_schema::type (),
    _xsd_KeyName_ (::xml_schema::flags (), this),
    _xsd_KeyValue_ (::xml_schema::flags (), this),
    _xsd_RetrievalMethod_ (::xml_schema::flags (), this),
    _xsd_X509Data_ (::xml_schema::flags (), this),
    _xsd_PGPData_ (::xml_schema::flags (), this),
    _xsd_SPKIData_ (::xml_schema::flags (), this),
    _xsd_MgmtData_ (::xml_schema::flags (), this),
    _xsd_Id_ (::xml_schema::flags (), this)
    {
    }

    KeyInfoType::
    KeyInfoType (const KeyInfoType& _xsd_KeyInfoType,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_KeyInfoType, f, c),
    _xsd_KeyName_ (_xsd_KeyInfoType._xsd_KeyName_,
                   f | ::xml_schema::flags::not_root,
                   this),
    _xsd_KeyValue_ (_xsd_KeyInfoType._xsd_KeyValue_,
                    f | ::xml_schema::flags::not_root,
                    this),
    _xsd_RetrievalMethod_ (_xsd_KeyInfoType._xsd_RetrievalMethod_,
                           f | ::xml_schema::flags::not_root,
                           this),
    _xsd_X509Data_ (_xsd_KeyInfoType._xsd_X509Data_,
                    f | ::xml_schema::flags::not_root,
                    this),
    _xsd_PGPData_ (_xsd_KeyInfoType._xsd_PGPData_,
                   f | ::xml_schema::flags::not_root,
                   this),
    _xsd_SPKIData_ (_xsd_KeyInfoType._xsd_SPKIData_,
                    f | ::xml_schema::flags::not_root,
                    this),
    _xsd_MgmtData_ (_xsd_KeyInfoType._xsd_MgmtData_,
                    f | ::xml_schema::flags::not_root,
                    this),
    _xsd_Id_ (_xsd_KeyInfoType._xsd_Id_,
              f | ::xml_schema::flags::not_root,
              this)
    {
    }

    KeyInfoType::
    KeyInfoType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_KeyName_ (f | ::xml_schema::flags::not_root, this),
    _xsd_KeyValue_ (f | ::xml_schema::flags::not_root, this),
    _xsd_RetrievalMethod_ (f | ::xml_schema::flags::not_root, this),
    _xsd_X509Data_ (f | ::xml_schema::flags::not_root, this),
    _xsd_PGPData_ (f | ::xml_schema::flags::not_root, this),
    _xsd_SPKIData_ (f | ::xml_schema::flags::not_root, this),
    _xsd_MgmtData_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Id_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void KeyInfoType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // KeyName
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< KeyName::type > r (
            tfm.create< KeyName::type > (
              L"KeyName",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->KeyName ().push_back (r);
            continue;
          }
        }

        // KeyValue
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< KeyValue::type > r (
            tfm.create< KeyValue::type > (
              L"KeyValue",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->KeyValue ().push_back (r);
            continue;
          }
        }

        // RetrievalMethod
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< RetrievalMethod::type > r (
            tfm.create< RetrievalMethod::type > (
              L"RetrievalMethod",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->RetrievalMethod ().push_back (r);
            continue;
          }
        }

        // X509Data
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< X509Data::type > r (
            tfm.create< X509Data::type > (
              L"X509Data",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->X509Data ().push_back (r);
            continue;
          }
        }

        // PGPData
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< PGPData::type > r (
            tfm.create< PGPData::type > (
              L"PGPData",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->PGPData ().push_back (r);
            continue;
          }
        }

        // SPKIData
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< SPKIData::type > r (
            tfm.create< SPKIData::type > (
              L"SPKIData",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->SPKIData ().push_back (r);
            continue;
          }
        }

        // MgmtData
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< MgmtData::type > r (
            tfm.create< MgmtData::type > (
              L"MgmtData",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->MgmtData ().push_back (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Id" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Id::type > r (
            Id::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Id (r);
          continue;
        }
      }
    }

    KeyInfoType* KeyInfoType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new KeyInfoType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, KeyInfoType >
    _xsd_KeyInfoType_type_factory_init (
      L"KeyInfoType http://www.w3.org/2000/09/xmldsig#");


    // KeyValueType
    //

    KeyValueType::
    KeyValueType ()
    : ::xml_schema::type (),
    _xsd_DSAKeyValue_ (::xml_schema::flags (), this),
    _xsd_RSAKeyValue_ (::xml_schema::flags (), this)
    {
    }

    KeyValueType::
    KeyValueType (const KeyValueType& _xsd_KeyValueType,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_KeyValueType, f, c),
    _xsd_DSAKeyValue_ (_xsd_KeyValueType._xsd_DSAKeyValue_,
                       f | ::xml_schema::flags::not_root,
                       this),
    _xsd_RSAKeyValue_ (_xsd_KeyValueType._xsd_RSAKeyValue_,
                       f | ::xml_schema::flags::not_root,
                       this)
    {
    }

    KeyValueType::
    KeyValueType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_DSAKeyValue_ (f | ::xml_schema::flags::not_root, this),
    _xsd_RSAKeyValue_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void KeyValueType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // DSAKeyValue
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< DSAKeyValue::type > r (
            tfm.create< DSAKeyValue::type > (
              L"DSAKeyValue",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->DSAKeyValue ())
              continue;
            this->DSAKeyValue (r);
            continue;
          }
        }

        // RSAKeyValue
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< RSAKeyValue::type > r (
            tfm.create< RSAKeyValue::type > (
              L"RSAKeyValue",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->RSAKeyValue ())
              continue;
            this->RSAKeyValue (r);
            continue;
          }
        }
      }
    }

    KeyValueType* KeyValueType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new KeyValueType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, KeyValueType >
    _xsd_KeyValueType_type_factory_init (
      L"KeyValueType http://www.w3.org/2000/09/xmldsig#");


    // RetrievalMethodType
    //

    RetrievalMethodType::
    RetrievalMethodType ()
    : ::xml_schema::type (),
    _xsd_Transforms_ (::xml_schema::flags (), this),
    _xsd_URI_ (::xml_schema::flags (), this),
    _xsd_Type_ (::xml_schema::flags (), this)
    {
    }

    RetrievalMethodType::
    RetrievalMethodType (const RetrievalMethodType& _xsd_RetrievalMethodType,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_RetrievalMethodType, f, c),
    _xsd_Transforms_ (_xsd_RetrievalMethodType._xsd_Transforms_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_URI_ (_xsd_RetrievalMethodType._xsd_URI_,
               f | ::xml_schema::flags::not_root,
               this),
    _xsd_Type_ (_xsd_RetrievalMethodType._xsd_Type_,
                f | ::xml_schema::flags::not_root,
                this)
    {
    }

    RetrievalMethodType::
    RetrievalMethodType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Transforms_ (f | ::xml_schema::flags::not_root, this),
    _xsd_URI_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Type_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void RetrievalMethodType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Transforms
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Transforms::type > r (
            tfm.create< Transforms::type > (
              L"Transforms",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Transforms ())
              continue;
            this->Transforms (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"URI" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< URI::type > r (
            URI::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->URI (r);
          continue;
        }

        if (a.name () == L"Type" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Type::type > r (
            Type::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Type (r);
          continue;
        }
      }
    }

    RetrievalMethodType* RetrievalMethodType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new RetrievalMethodType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, RetrievalMethodType >
    _xsd_RetrievalMethodType_type_factory_init (
      L"RetrievalMethodType http://www.w3.org/2000/09/xmldsig#");


    // X509DataType
    //

    X509DataType::
    X509DataType ()
    : ::xml_schema::type (),
    _xsd_X509IssuerSerial_ (::xml_schema::flags (), this),
    _xsd_X509SKI_ (::xml_schema::flags (), this),
    _xsd_X509SubjectName_ (::xml_schema::flags (), this),
    _xsd_X509Certificate_ (::xml_schema::flags (), this),
    _xsd_X509CRL_ (::xml_schema::flags (), this)
    {
    }

    X509DataType::
    X509DataType (const X509DataType& _xsd_X509DataType,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_X509DataType, f, c),
    _xsd_X509IssuerSerial_ (_xsd_X509DataType._xsd_X509IssuerSerial_,
                            f | ::xml_schema::flags::not_root,
                            this),
    _xsd_X509SKI_ (_xsd_X509DataType._xsd_X509SKI_,
                   f | ::xml_schema::flags::not_root,
                   this),
    _xsd_X509SubjectName_ (_xsd_X509DataType._xsd_X509SubjectName_,
                           f | ::xml_schema::flags::not_root,
                           this),
    _xsd_X509Certificate_ (_xsd_X509DataType._xsd_X509Certificate_,
                           f | ::xml_schema::flags::not_root,
                           this),
    _xsd_X509CRL_ (_xsd_X509DataType._xsd_X509CRL_,
                   f | ::xml_schema::flags::not_root,
                   this)
    {
    }

    X509DataType::
    X509DataType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_X509IssuerSerial_ (f | ::xml_schema::flags::not_root, this),
    _xsd_X509SKI_ (f | ::xml_schema::flags::not_root, this),
    _xsd_X509SubjectName_ (f | ::xml_schema::flags::not_root, this),
    _xsd_X509Certificate_ (f | ::xml_schema::flags::not_root, this),
    _xsd_X509CRL_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void X509DataType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // X509IssuerSerial
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< X509IssuerSerial::type > r (
            tfm.create< X509IssuerSerial::type > (
              L"X509IssuerSerial",
              L"http://www.w3.org/2000/09/xmldsig#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->X509IssuerSerial ().push_back (r);
            continue;
          }
        }

        // X509SKI
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< X509SKI::type > r (
            tfm.create< X509SKI::type > (
              L"X509SKI",
              L"http://www.w3.org/2000/09/xmldsig#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->X509SKI ().push_back (r);
            continue;
          }
        }

        // X509SubjectName
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< X509SubjectName::type > r (
            tfm.create< X509SubjectName::type > (
              L"X509SubjectName",
              L"http://www.w3.org/2000/09/xmldsig#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->X509SubjectName ().push_back (r);
            continue;
          }
        }

        // X509Certificate
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< X509Certificate::type > r (
            tfm.create< X509Certificate::type > (
              L"X509Certificate",
              L"http://www.w3.org/2000/09/xmldsig#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->X509Certificate ().push_back (r);
            continue;
          }
        }

        // X509CRL
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< X509CRL::type > r (
            tfm.create< X509CRL::type > (
              L"X509CRL",
              L"http://www.w3.org/2000/09/xmldsig#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->X509CRL ().push_back (r);
            continue;
          }
        }
      }
    }

    X509DataType* X509DataType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new X509DataType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, X509DataType >
    _xsd_X509DataType_type_factory_init (
      L"X509DataType http://www.w3.org/2000/09/xmldsig#");


    // X509IssuerSerialType
    //

    X509IssuerSerialType::
    X509IssuerSerialType ()
    : ::xml_schema::type (),
    _xsd_X509IssuerName_ (::xml_schema::flags (), this),
    _xsd_X509SerialNumber_ (::xml_schema::flags (), this)
    {
    }

    X509IssuerSerialType::
    X509IssuerSerialType (const X509IssuerName::type& _xsd_X509IssuerName,
                          const X509SerialNumber::type& _xsd_X509SerialNumber)
    : ::xml_schema::type (),
    _xsd_X509IssuerName_ (_xsd_X509IssuerName,
                          ::xml_schema::flags (),
                          this),
    _xsd_X509SerialNumber_ (_xsd_X509SerialNumber,
                            ::xml_schema::flags (),
                            this)
    {
    }

    X509IssuerSerialType::
    X509IssuerSerialType (const X509IssuerSerialType& _xsd_X509IssuerSerialType,
                          ::xml_schema::flags f,
                          ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_X509IssuerSerialType, f, c),
    _xsd_X509IssuerName_ (_xsd_X509IssuerSerialType._xsd_X509IssuerName_,
                          f | ::xml_schema::flags::not_root,
                          this),
    _xsd_X509SerialNumber_ (_xsd_X509IssuerSerialType._xsd_X509SerialNumber_,
                            f | ::xml_schema::flags::not_root,
                            this)
    {
    }

    X509IssuerSerialType::
    X509IssuerSerialType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_X509IssuerName_ (f | ::xml_schema::flags::not_root, this),
    _xsd_X509SerialNumber_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void X509IssuerSerialType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // X509IssuerName
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< X509IssuerName::type > r (
            tfm.create< X509IssuerName::type > (
              L"X509IssuerName",
              L"http://www.w3.org/2000/09/xmldsig#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_X509IssuerName_.present ())
              continue;
            this->X509IssuerName (r);
            continue;
          }
        }

        // X509SerialNumber
        //
        {
          if (e.name () == L"X509SerialNumber" && e.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
          {
            if (_xsd_X509SerialNumber_.present ())
              continue;
            this->X509SerialNumber (
              X509SerialNumber::traits::create (
                e.dom_element (),
                f | ::xml_schema::flags::not_root,
                this));
            continue;
          }
        }
      }

      if (!_xsd_X509IssuerName_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"X509IssuerName",
          L"http://www.w3.org/2000/09/xmldsig#");
      }

      if (!_xsd_X509SerialNumber_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"X509SerialNumber",
          L"http://www.w3.org/2000/09/xmldsig#");
      }
    }

    X509IssuerSerialType* X509IssuerSerialType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new X509IssuerSerialType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, X509IssuerSerialType >
    _xsd_X509IssuerSerialType_type_factory_init (
      L"X509IssuerSerialType http://www.w3.org/2000/09/xmldsig#");


    // PGPDataType
    //

    PGPDataType::
    PGPDataType ()
    : ::xml_schema::type (),
    _xsd_PGPKeyID_ (::xml_schema::flags (), this),
    _xsd_PGPKeyPacket_ (::xml_schema::flags (), this)
    {
    }

    PGPDataType::
    PGPDataType (const PGPDataType& _xsd_PGPDataType,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_PGPDataType, f, c),
    _xsd_PGPKeyID_ (_xsd_PGPDataType._xsd_PGPKeyID_,
                    f | ::xml_schema::flags::not_root,
                    this),
    _xsd_PGPKeyPacket_ (_xsd_PGPDataType._xsd_PGPKeyPacket_,
                        f | ::xml_schema::flags::not_root,
                        this)
    {
    }

    PGPDataType::
    PGPDataType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_PGPKeyID_ (f | ::xml_schema::flags::not_root, this),
    _xsd_PGPKeyPacket_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void PGPDataType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // PGPKeyID
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< PGPKeyID::type > r (
            tfm.create< PGPKeyID::type > (
              L"PGPKeyID",
              L"http://www.w3.org/2000/09/xmldsig#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->PGPKeyID ())
              continue;
            this->PGPKeyID (r);
            continue;
          }
        }

        // PGPKeyPacket
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< PGPKeyPacket::type > r (
            tfm.create< PGPKeyPacket::type > (
              L"PGPKeyPacket",
              L"http://www.w3.org/2000/09/xmldsig#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->PGPKeyPacket ())
              continue;
            this->PGPKeyPacket (r);
            continue;
          }
        }
      }
    }

    PGPDataType* PGPDataType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new PGPDataType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, PGPDataType >
    _xsd_PGPDataType_type_factory_init (
      L"PGPDataType http://www.w3.org/2000/09/xmldsig#");


    // SPKIDataType
    //

    SPKIDataType::
    SPKIDataType ()
    : ::xml_schema::type (),
    _xsd_SPKISexp_ (::xml_schema::flags (), this)
    {
    }

    SPKIDataType::
    SPKIDataType (const SPKIDataType& _xsd_SPKIDataType,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_SPKIDataType, f, c),
    _xsd_SPKISexp_ (_xsd_SPKIDataType._xsd_SPKISexp_,
                    f | ::xml_schema::flags::not_root,
                    this)
    {
    }

    SPKIDataType::
    SPKIDataType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_SPKISexp_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void SPKIDataType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // SPKISexp
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< SPKISexp::type > r (
            tfm.create< SPKISexp::type > (
              L"SPKISexp",
              L"http://www.w3.org/2000/09/xmldsig#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->SPKISexp ().push_back (r);
            continue;
          }
        }
      }
    }

    SPKIDataType* SPKIDataType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new SPKIDataType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SPKIDataType >
    _xsd_SPKIDataType_type_factory_init (
      L"SPKIDataType http://www.w3.org/2000/09/xmldsig#");


    // ObjectType
    //

    ObjectType::
    ObjectType ()
    : ::xml_schema::type (),
    _xsd_Id_ (::xml_schema::flags (), this),
    _xsd_MimeType_ (::xml_schema::flags (), this),
    _xsd_Encoding_ (::xml_schema::flags (), this)
    {
    }

    ObjectType::
    ObjectType (const ObjectType& _xsd_ObjectType,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_ObjectType, f, c),
    _xsd_Id_ (_xsd_ObjectType._xsd_Id_,
              f | ::xml_schema::flags::not_root,
              this),
    _xsd_MimeType_ (_xsd_ObjectType._xsd_MimeType_,
                    f | ::xml_schema::flags::not_root,
                    this),
    _xsd_Encoding_ (_xsd_ObjectType._xsd_Encoding_,
                    f | ::xml_schema::flags::not_root,
                    this)
    {
    }

    ObjectType::
    ObjectType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Id_ (f | ::xml_schema::flags::not_root, this),
    _xsd_MimeType_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Encoding_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void ObjectType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Id" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Id::type > r (
            Id::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Id (r);
          continue;
        }

        if (a.name () == L"MimeType" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< MimeType::type > r (
            MimeType::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->MimeType (r);
          continue;
        }

        if (a.name () == L"Encoding" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Encoding::type > r (
            Encoding::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Encoding (r);
          continue;
        }
      }
    }

    ObjectType* ObjectType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ObjectType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ObjectType >
    _xsd_ObjectType_type_factory_init (
      L"ObjectType http://www.w3.org/2000/09/xmldsig#");


    // ManifestType
    //

    ManifestType::
    ManifestType ()
    : ::xml_schema::type (),
    _xsd_Reference_ (::xml_schema::flags (), this),
    _xsd_Id_ (::xml_schema::flags (), this)
    {
    }

    ManifestType::
    ManifestType (const ManifestType& _xsd_ManifestType,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_ManifestType, f, c),
    _xsd_Reference_ (_xsd_ManifestType._xsd_Reference_,
                     f | ::xml_schema::flags::not_root,
                     this),
    _xsd_Id_ (_xsd_ManifestType._xsd_Id_,
              f | ::xml_schema::flags::not_root,
              this)
    {
    }

    ManifestType::
    ManifestType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Reference_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Id_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void ManifestType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Reference
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Reference::type > r (
            tfm.create< Reference::type > (
              L"Reference",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->Reference ().push_back (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Id" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Id::type > r (
            Id::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Id (r);
          continue;
        }
      }
    }

    ManifestType* ManifestType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ManifestType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ManifestType >
    _xsd_ManifestType_type_factory_init (
      L"ManifestType http://www.w3.org/2000/09/xmldsig#");


    // SignaturePropertiesType
    //

    SignaturePropertiesType::
    SignaturePropertiesType ()
    : ::xml_schema::type (),
    _xsd_SignatureProperty_ (::xml_schema::flags (), this),
    _xsd_Id_ (::xml_schema::flags (), this)
    {
    }

    SignaturePropertiesType::
    SignaturePropertiesType (const SignaturePropertiesType& _xsd_SignaturePropertiesType,
                             ::xml_schema::flags f,
                             ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_SignaturePropertiesType, f, c),
    _xsd_SignatureProperty_ (_xsd_SignaturePropertiesType._xsd_SignatureProperty_,
                             f | ::xml_schema::flags::not_root,
                             this),
    _xsd_Id_ (_xsd_SignaturePropertiesType._xsd_Id_,
              f | ::xml_schema::flags::not_root,
              this)
    {
    }

    SignaturePropertiesType::
    SignaturePropertiesType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_SignatureProperty_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Id_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void SignaturePropertiesType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // SignatureProperty
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< SignatureProperty::type > r (
            tfm.create< SignatureProperty::type > (
              L"SignatureProperty",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->SignatureProperty ().push_back (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Id" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Id::type > r (
            Id::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Id (r);
          continue;
        }
      }
    }

    SignaturePropertiesType* SignaturePropertiesType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new SignaturePropertiesType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SignaturePropertiesType >
    _xsd_SignaturePropertiesType_type_factory_init (
      L"SignaturePropertiesType http://www.w3.org/2000/09/xmldsig#");


    // SignaturePropertyType
    //

    SignaturePropertyType::
    SignaturePropertyType ()
    : ::xml_schema::type (),
    _xsd_Target_ (::xml_schema::flags (), this),
    _xsd_Id_ (::xml_schema::flags (), this)
    {
    }

    SignaturePropertyType::
    SignaturePropertyType (const Target::type& _xsd_Target)
    : ::xml_schema::type (),
    _xsd_Target_ (_xsd_Target,
                  ::xml_schema::flags (),
                  this),
    _xsd_Id_ (::xml_schema::flags (), this)
    {
    }

    SignaturePropertyType::
    SignaturePropertyType (const SignaturePropertyType& _xsd_SignaturePropertyType,
                           ::xml_schema::flags f,
                           ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_SignaturePropertyType, f, c),
    _xsd_Target_ (_xsd_SignaturePropertyType._xsd_Target_,
                  f | ::xml_schema::flags::not_root,
                  this),
    _xsd_Id_ (_xsd_SignaturePropertyType._xsd_Id_,
              f | ::xml_schema::flags::not_root,
              this)
    {
    }

    SignaturePropertyType::
    SignaturePropertyType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Target_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Id_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void SignaturePropertyType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Target" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Target::type > r (
            Target::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Target (r);
          continue;
        }

        if (a.name () == L"Id" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Id::type > r (
            Id::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Id (r);
          continue;
        }
      }

      if (!_xsd_Target_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Target",
          L"");
      }
    }

    SignaturePropertyType* SignaturePropertyType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new SignaturePropertyType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SignaturePropertyType >
    _xsd_SignaturePropertyType_type_factory_init (
      L"SignaturePropertyType http://www.w3.org/2000/09/xmldsig#");


    // HMACOutputLengthType
    //

    HMACOutputLengthType::
    HMACOutputLengthType ()
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type > ()
    {
    }

    HMACOutputLengthType::
    HMACOutputLengthType (const _xsd_HMACOutputLengthType::base_& _xsd_HMACOutputLengthType)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type > (_xsd_HMACOutputLengthType)
    {
    }

    HMACOutputLengthType::
    HMACOutputLengthType (const HMACOutputLengthType& _xsd_HMACOutputLengthType,
                          ::xml_schema::flags f,
                          ::xml_schema::type* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type > (_xsd_HMACOutputLengthType, f, c)
    {
    }

    HMACOutputLengthType::
    HMACOutputLengthType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::type* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type > (e, f, c)
    {
    }

    HMACOutputLengthType::
    HMACOutputLengthType (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::type* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type > (a, f, c)
    {
    }

    HMACOutputLengthType::
    HMACOutputLengthType (const ::std::basic_string< wchar_t >& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::type* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type > (s, e, f, c)
    {
    }

    HMACOutputLengthType* HMACOutputLengthType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new HMACOutputLengthType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, HMACOutputLengthType >
    _xsd_HMACOutputLengthType_type_factory_init (
      L"HMACOutputLengthType http://www.w3.org/2000/09/xmldsig#");


    // DSAKeyValueType
    //

    DSAKeyValueType::
    DSAKeyValueType ()
    : ::xml_schema::type (),
    _xsd_P_ (::xml_schema::flags (), this),
    _xsd_Q_ (::xml_schema::flags (), this),
    _xsd_G_ (::xml_schema::flags (), this),
    _xsd_Y_ (::xml_schema::flags (), this),
    _xsd_J_ (::xml_schema::flags (), this),
    _xsd_Seed_ (::xml_schema::flags (), this),
    _xsd_PgenCounter_ (::xml_schema::flags (), this)
    {
    }

    DSAKeyValueType::
    DSAKeyValueType (const Y::type& _xsd_Y)
    : ::xml_schema::type (),
    _xsd_P_ (::xml_schema::flags (), this),
    _xsd_Q_ (::xml_schema::flags (), this),
    _xsd_G_ (::xml_schema::flags (), this),
    _xsd_Y_ (_xsd_Y,
             ::xml_schema::flags (),
             this),
    _xsd_J_ (::xml_schema::flags (), this),
    _xsd_Seed_ (::xml_schema::flags (), this),
    _xsd_PgenCounter_ (::xml_schema::flags (), this)
    {
    }

    DSAKeyValueType::
    DSAKeyValueType (const DSAKeyValueType& _xsd_DSAKeyValueType,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_DSAKeyValueType, f, c),
    _xsd_P_ (_xsd_DSAKeyValueType._xsd_P_,
             f | ::xml_schema::flags::not_root,
             this),
    _xsd_Q_ (_xsd_DSAKeyValueType._xsd_Q_,
             f | ::xml_schema::flags::not_root,
             this),
    _xsd_G_ (_xsd_DSAKeyValueType._xsd_G_,
             f | ::xml_schema::flags::not_root,
             this),
    _xsd_Y_ (_xsd_DSAKeyValueType._xsd_Y_,
             f | ::xml_schema::flags::not_root,
             this),
    _xsd_J_ (_xsd_DSAKeyValueType._xsd_J_,
             f | ::xml_schema::flags::not_root,
             this),
    _xsd_Seed_ (_xsd_DSAKeyValueType._xsd_Seed_,
                f | ::xml_schema::flags::not_root,
                this),
    _xsd_PgenCounter_ (_xsd_DSAKeyValueType._xsd_PgenCounter_,
                       f | ::xml_schema::flags::not_root,
                       this)
    {
    }

    DSAKeyValueType::
    DSAKeyValueType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_P_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Q_ (f | ::xml_schema::flags::not_root, this),
    _xsd_G_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Y_ (f | ::xml_schema::flags::not_root, this),
    _xsd_J_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Seed_ (f | ::xml_schema::flags::not_root, this),
    _xsd_PgenCounter_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void DSAKeyValueType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // P
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< P::type > r (
            tfm.create< P::type > (
              L"P",
              L"http://www.w3.org/2000/09/xmldsig#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->P ())
              continue;
            this->P (r);
            continue;
          }
        }

        // Q
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Q::type > r (
            tfm.create< Q::type > (
              L"Q",
              L"http://www.w3.org/2000/09/xmldsig#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Q ())
              continue;
            this->Q (r);
            continue;
          }
        }

        // G
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< G::type > r (
            tfm.create< G::type > (
              L"G",
              L"http://www.w3.org/2000/09/xmldsig#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->G ())
              continue;
            this->G (r);
            continue;
          }
        }

        // Y
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Y::type > r (
            tfm.create< Y::type > (
              L"Y",
              L"http://www.w3.org/2000/09/xmldsig#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_Y_.present ())
              continue;
            this->Y (r);
            continue;
          }
        }

        // J
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< J::type > r (
            tfm.create< J::type > (
              L"J",
              L"http://www.w3.org/2000/09/xmldsig#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->J ())
              continue;
            this->J (r);
            continue;
          }
        }

        // Seed
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Seed::type > r (
            tfm.create< Seed::type > (
              L"Seed",
              L"http://www.w3.org/2000/09/xmldsig#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Seed ())
              continue;
            this->Seed (r);
            continue;
          }
        }

        // PgenCounter
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< PgenCounter::type > r (
            tfm.create< PgenCounter::type > (
              L"PgenCounter",
              L"http://www.w3.org/2000/09/xmldsig#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->PgenCounter ())
              continue;
            this->PgenCounter (r);
            continue;
          }
        }
      }

      if (!_xsd_Y_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Y",
          L"http://www.w3.org/2000/09/xmldsig#");
      }
    }

    DSAKeyValueType* DSAKeyValueType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new DSAKeyValueType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DSAKeyValueType >
    _xsd_DSAKeyValueType_type_factory_init (
      L"DSAKeyValueType http://www.w3.org/2000/09/xmldsig#");


    // RSAKeyValueType
    //

    RSAKeyValueType::
    RSAKeyValueType ()
    : ::xml_schema::type (),
    _xsd_Modulus_ (::xml_schema::flags (), this),
    _xsd_Exponent_ (::xml_schema::flags (), this)
    {
    }

    RSAKeyValueType::
    RSAKeyValueType (const Modulus::type& _xsd_Modulus,
                     const Exponent::type& _xsd_Exponent)
    : ::xml_schema::type (),
    _xsd_Modulus_ (_xsd_Modulus,
                   ::xml_schema::flags (),
                   this),
    _xsd_Exponent_ (_xsd_Exponent,
                    ::xml_schema::flags (),
                    this)
    {
    }

    RSAKeyValueType::
    RSAKeyValueType (const RSAKeyValueType& _xsd_RSAKeyValueType,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_RSAKeyValueType, f, c),
    _xsd_Modulus_ (_xsd_RSAKeyValueType._xsd_Modulus_,
                   f | ::xml_schema::flags::not_root,
                   this),
    _xsd_Exponent_ (_xsd_RSAKeyValueType._xsd_Exponent_,
                    f | ::xml_schema::flags::not_root,
                    this)
    {
    }

    RSAKeyValueType::
    RSAKeyValueType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Modulus_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Exponent_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void RSAKeyValueType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Modulus
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Modulus::type > r (
            tfm.create< Modulus::type > (
              L"Modulus",
              L"http://www.w3.org/2000/09/xmldsig#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_Modulus_.present ())
              continue;
            this->Modulus (r);
            continue;
          }
        }

        // Exponent
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Exponent::type > r (
            tfm.create< Exponent::type > (
              L"Exponent",
              L"http://www.w3.org/2000/09/xmldsig#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_Exponent_.present ())
              continue;
            this->Exponent (r);
            continue;
          }
        }
      }

      if (!_xsd_Modulus_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Modulus",
          L"http://www.w3.org/2000/09/xmldsig#");
      }

      if (!_xsd_Exponent_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Exponent",
          L"http://www.w3.org/2000/09/xmldsig#");
      }
    }

    RSAKeyValueType* RSAKeyValueType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new RSAKeyValueType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, RSAKeyValueType >
    _xsd_RSAKeyValueType_type_factory_init (
      L"RSAKeyValueType http://www.w3.org/2000/09/xmldsig#");
  }
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace w3
{
  namespace xmldsig
  {
    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (const ::std::basic_string< wchar_t >& u,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::Signature (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (const ::std::basic_string< wchar_t >& u,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::Signature (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (const ::std::basic_string< wchar_t >& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::Signature (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (::std::istream& is,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Signature (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (::std::istream& is,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Signature (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Signature (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Signature (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Signature (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Signature (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (const ::xercesc::DOMInputSource& i,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::Signature (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (const ::xercesc::DOMInputSource& i,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::Signature (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (const ::xercesc::DOMInputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::Signature (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmldsig::SignatureType > r (
        tfm.create< ::w3::xmldsig::SignatureType > (
          L"Signature",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Signature",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (const ::std::basic_string< wchar_t >& u,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::SignatureValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (const ::std::basic_string< wchar_t >& u,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::SignatureValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (const ::std::basic_string< wchar_t >& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::SignatureValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureValue (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (::std::istream& is,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (::std::istream& is,
                    const ::std::basic_string< wchar_t >& sid,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureValue (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (::std::istream& is,
                    const ::std::basic_string< wchar_t >& sid,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (::std::istream& is,
                    const ::std::basic_string< wchar_t >& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (const ::xercesc::DOMInputSource& i,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::SignatureValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (const ::xercesc::DOMInputSource& i,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::SignatureValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (const ::xercesc::DOMInputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::SignatureValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmldsig::SignatureValueType > r (
        tfm.create< ::w3::xmldsig::SignatureValueType > (
          L"SignatureValue",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"SignatureValue",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (const ::std::basic_string< wchar_t >& u,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::SignedInfo (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (const ::std::basic_string< wchar_t >& u,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::SignedInfo (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (const ::std::basic_string< wchar_t >& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::SignedInfo (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (::std::istream& is,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignedInfo (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (::std::istream& is,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignedInfo (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignedInfo (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignedInfo (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignedInfo (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignedInfo (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (const ::xercesc::DOMInputSource& i,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::SignedInfo (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (const ::xercesc::DOMInputSource& i,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::SignedInfo (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (const ::xercesc::DOMInputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::SignedInfo (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmldsig::SignedInfoType > r (
        tfm.create< ::w3::xmldsig::SignedInfoType > (
          L"SignedInfo",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"SignedInfo",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (const ::std::basic_string< wchar_t >& u,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::CanonicalizationMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (const ::std::basic_string< wchar_t >& u,
                            ::xsd::cxx::xml::error_handler< wchar_t >& h,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::CanonicalizationMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (const ::std::basic_string< wchar_t >& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::CanonicalizationMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::CanonicalizationMethod (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (::std::istream& is,
                            ::xsd::cxx::xml::error_handler< wchar_t >& h,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::CanonicalizationMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::CanonicalizationMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (::std::istream& is,
                            const ::std::basic_string< wchar_t >& sid,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::CanonicalizationMethod (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (::std::istream& is,
                            const ::std::basic_string< wchar_t >& sid,
                            ::xsd::cxx::xml::error_handler< wchar_t >& h,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::CanonicalizationMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (::std::istream& is,
                            const ::std::basic_string< wchar_t >& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::CanonicalizationMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (const ::xercesc::DOMInputSource& i,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::CanonicalizationMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (const ::xercesc::DOMInputSource& i,
                            ::xsd::cxx::xml::error_handler< wchar_t >& h,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::CanonicalizationMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (const ::xercesc::DOMInputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::CanonicalizationMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType > r (
        tfm.create< ::w3::xmldsig::CanonicalizationMethodType > (
          L"CanonicalizationMethod",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"CanonicalizationMethod",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (const ::std::basic_string< wchar_t >& u,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::SignatureMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (const ::std::basic_string< wchar_t >& u,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::SignatureMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (const ::std::basic_string< wchar_t >& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::SignatureMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureMethod (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (::std::istream& is,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureMethod (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (const ::xercesc::DOMInputSource& i,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::SignatureMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (const ::xercesc::DOMInputSource& i,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::SignatureMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (const ::xercesc::DOMInputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::SignatureMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType > r (
        tfm.create< ::w3::xmldsig::SignatureMethodType > (
          L"SignatureMethod",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"SignatureMethod",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (const ::std::basic_string< wchar_t >& u,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::Reference (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (const ::std::basic_string< wchar_t >& u,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::Reference (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (const ::std::basic_string< wchar_t >& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::Reference (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (::std::istream& is,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Reference (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (::std::istream& is,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Reference (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Reference (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Reference (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Reference (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Reference (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (const ::xercesc::DOMInputSource& i,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::Reference (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (const ::xercesc::DOMInputSource& i,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::Reference (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (const ::xercesc::DOMInputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::Reference (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmldsig::ReferenceType > r (
        tfm.create< ::w3::xmldsig::ReferenceType > (
          L"Reference",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Reference",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (const ::std::basic_string< wchar_t >& u,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::Transforms (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (const ::std::basic_string< wchar_t >& u,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::Transforms (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (const ::std::basic_string< wchar_t >& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::Transforms (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (::std::istream& is,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Transforms (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (::std::istream& is,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Transforms (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Transforms (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Transforms (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Transforms (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Transforms (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (const ::xercesc::DOMInputSource& i,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::Transforms (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (const ::xercesc::DOMInputSource& i,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::Transforms (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (const ::xercesc::DOMInputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::Transforms (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmldsig::TransformsType > r (
        tfm.create< ::w3::xmldsig::TransformsType > (
          L"Transforms",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Transforms",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (const ::std::basic_string< wchar_t >& u,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::Transform (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (const ::std::basic_string< wchar_t >& u,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::Transform (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (const ::std::basic_string< wchar_t >& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::Transform (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (::std::istream& is,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Transform (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (::std::istream& is,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Transform (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Transform (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Transform (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Transform (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Transform (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (const ::xercesc::DOMInputSource& i,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::Transform (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (const ::xercesc::DOMInputSource& i,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::Transform (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (const ::xercesc::DOMInputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::Transform (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmldsig::TransformType > r (
        tfm.create< ::w3::xmldsig::TransformType > (
          L"Transform",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Transform",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (const ::std::basic_string< wchar_t >& u,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::DigestMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (const ::std::basic_string< wchar_t >& u,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::DigestMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (const ::std::basic_string< wchar_t >& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::DigestMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DigestMethod (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (::std::istream& is,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DigestMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DigestMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DigestMethod (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DigestMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DigestMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (const ::xercesc::DOMInputSource& i,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::DigestMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (const ::xercesc::DOMInputSource& i,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::DigestMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (const ::xercesc::DOMInputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::DigestMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmldsig::DigestMethodType > r (
        tfm.create< ::w3::xmldsig::DigestMethodType > (
          L"DigestMethod",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"DigestMethod",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (const ::std::basic_string< wchar_t >& u,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::DigestValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (const ::std::basic_string< wchar_t >& u,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::DigestValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (const ::std::basic_string< wchar_t >& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::DigestValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DigestValue (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (::std::istream& is,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DigestValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DigestValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DigestValue (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DigestValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DigestValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (const ::xercesc::DOMInputSource& i,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::DigestValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (const ::xercesc::DOMInputSource& i,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::DigestValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (const ::xercesc::DOMInputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::DigestValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmldsig::DigestValueType > r (
        tfm.create< ::w3::xmldsig::DigestValueType > (
          L"DigestValue",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"DigestValue",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (const ::std::basic_string< wchar_t >& u,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::KeyInfo (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (const ::std::basic_string< wchar_t >& u,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::KeyInfo (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (const ::std::basic_string< wchar_t >& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::KeyInfo (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (::std::istream& is,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyInfo (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (::std::istream& is,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyInfo (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyInfo (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyInfo (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyInfo (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyInfo (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (const ::xercesc::DOMInputSource& i,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::KeyInfo (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (const ::xercesc::DOMInputSource& i,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::KeyInfo (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (const ::xercesc::DOMInputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::KeyInfo (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmldsig::KeyInfoType > r (
        tfm.create< ::w3::xmldsig::KeyInfoType > (
          L"KeyInfo",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"KeyInfo",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (const ::std::basic_string< wchar_t >& u,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::KeyName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (const ::std::basic_string< wchar_t >& u,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::KeyName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (const ::std::basic_string< wchar_t >& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::KeyName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (::std::istream& is,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyName (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (::std::istream& is,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyName (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (const ::xercesc::DOMInputSource& i,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::KeyName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (const ::xercesc::DOMInputSource& i,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::KeyName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (const ::xercesc::DOMInputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::KeyName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::string > r (
        tfm.create< ::xml_schema::string > (
          L"KeyName",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"KeyName",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (const ::std::basic_string< wchar_t >& u,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::MgmtData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (const ::std::basic_string< wchar_t >& u,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::MgmtData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (const ::std::basic_string< wchar_t >& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::MgmtData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (::std::istream& is,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::MgmtData (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (::std::istream& is,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::MgmtData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::MgmtData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::MgmtData (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::MgmtData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::MgmtData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (const ::xercesc::DOMInputSource& i,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::MgmtData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (const ::xercesc::DOMInputSource& i,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::MgmtData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (const ::xercesc::DOMInputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::MgmtData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::string > r (
        tfm.create< ::xml_schema::string > (
          L"MgmtData",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"MgmtData",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (const ::std::basic_string< wchar_t >& u,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::KeyValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (const ::std::basic_string< wchar_t >& u,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::KeyValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (const ::std::basic_string< wchar_t >& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::KeyValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (::std::istream& is,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyValue (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (::std::istream& is,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyValue (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (const ::xercesc::DOMInputSource& i,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::KeyValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (const ::xercesc::DOMInputSource& i,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::KeyValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (const ::xercesc::DOMInputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::KeyValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmldsig::KeyValueType > r (
        tfm.create< ::w3::xmldsig::KeyValueType > (
          L"KeyValue",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"KeyValue",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (const ::std::basic_string< wchar_t >& u,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::RetrievalMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (const ::std::basic_string< wchar_t >& u,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::RetrievalMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (const ::std::basic_string< wchar_t >& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::RetrievalMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::RetrievalMethod (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (::std::istream& is,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::RetrievalMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::RetrievalMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::RetrievalMethod (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::RetrievalMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::RetrievalMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (const ::xercesc::DOMInputSource& i,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::RetrievalMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (const ::xercesc::DOMInputSource& i,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::RetrievalMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (const ::xercesc::DOMInputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::RetrievalMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType > r (
        tfm.create< ::w3::xmldsig::RetrievalMethodType > (
          L"RetrievalMethod",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"RetrievalMethod",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (const ::std::basic_string< wchar_t >& u,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::X509Data (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (const ::std::basic_string< wchar_t >& u,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::X509Data (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (const ::std::basic_string< wchar_t >& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::X509Data (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (::std::istream& is,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::X509Data (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (::std::istream& is,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::X509Data (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::X509Data (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::X509Data (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::X509Data (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::X509Data (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (const ::xercesc::DOMInputSource& i,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::X509Data (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (const ::xercesc::DOMInputSource& i,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::X509Data (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (const ::xercesc::DOMInputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::X509Data (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmldsig::X509DataType > r (
        tfm.create< ::w3::xmldsig::X509DataType > (
          L"X509Data",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"X509Data",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (const ::std::basic_string< wchar_t >& u,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::PGPData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (const ::std::basic_string< wchar_t >& u,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::PGPData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (const ::std::basic_string< wchar_t >& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::PGPData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (::std::istream& is,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::PGPData (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (::std::istream& is,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::PGPData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::PGPData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::PGPData (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::PGPData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::PGPData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (const ::xercesc::DOMInputSource& i,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::PGPData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (const ::xercesc::DOMInputSource& i,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::PGPData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (const ::xercesc::DOMInputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::PGPData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmldsig::PGPDataType > r (
        tfm.create< ::w3::xmldsig::PGPDataType > (
          L"PGPData",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"PGPData",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (const ::std::basic_string< wchar_t >& u,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::SPKIData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (const ::std::basic_string< wchar_t >& u,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::SPKIData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (const ::std::basic_string< wchar_t >& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::SPKIData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (::std::istream& is,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SPKIData (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (::std::istream& is,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SPKIData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SPKIData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SPKIData (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SPKIData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SPKIData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (const ::xercesc::DOMInputSource& i,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::SPKIData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (const ::xercesc::DOMInputSource& i,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::SPKIData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (const ::xercesc::DOMInputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::SPKIData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmldsig::SPKIDataType > r (
        tfm.create< ::w3::xmldsig::SPKIDataType > (
          L"SPKIData",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"SPKIData",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (const ::std::basic_string< wchar_t >& u,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::Object (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (const ::std::basic_string< wchar_t >& u,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::Object (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (const ::std::basic_string< wchar_t >& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::Object (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (::std::istream& is,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Object (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (::std::istream& is,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Object (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Object (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (::std::istream& is,
            const ::std::basic_string< wchar_t >& sid,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Object (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (::std::istream& is,
            const ::std::basic_string< wchar_t >& sid,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Object (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (::std::istream& is,
            const ::std::basic_string< wchar_t >& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Object (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (const ::xercesc::DOMInputSource& i,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::Object (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (const ::xercesc::DOMInputSource& i,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::Object (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (const ::xercesc::DOMInputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::Object (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmldsig::ObjectType > r (
        tfm.create< ::w3::xmldsig::ObjectType > (
          L"Object",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Object",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (const ::std::basic_string< wchar_t >& u,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::Manifest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (const ::std::basic_string< wchar_t >& u,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::Manifest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (const ::std::basic_string< wchar_t >& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::Manifest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (::std::istream& is,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Manifest (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (::std::istream& is,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Manifest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Manifest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Manifest (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Manifest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Manifest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (const ::xercesc::DOMInputSource& i,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::Manifest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (const ::xercesc::DOMInputSource& i,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::Manifest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (const ::xercesc::DOMInputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::Manifest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmldsig::ManifestType > r (
        tfm.create< ::w3::xmldsig::ManifestType > (
          L"Manifest",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Manifest",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (const ::std::basic_string< wchar_t >& u,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::SignatureProperties (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (const ::std::basic_string< wchar_t >& u,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::SignatureProperties (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (const ::std::basic_string< wchar_t >& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::SignatureProperties (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureProperties (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (::std::istream& is,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureProperties (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureProperties (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (::std::istream& is,
                         const ::std::basic_string< wchar_t >& sid,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureProperties (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (::std::istream& is,
                         const ::std::basic_string< wchar_t >& sid,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureProperties (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (::std::istream& is,
                         const ::std::basic_string< wchar_t >& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureProperties (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (const ::xercesc::DOMInputSource& i,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::SignatureProperties (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (const ::xercesc::DOMInputSource& i,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::SignatureProperties (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (const ::xercesc::DOMInputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::SignatureProperties (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType > r (
        tfm.create< ::w3::xmldsig::SignaturePropertiesType > (
          L"SignatureProperties",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"SignatureProperties",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (const ::std::basic_string< wchar_t >& u,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::SignatureProperty (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (const ::std::basic_string< wchar_t >& u,
                       ::xsd::cxx::xml::error_handler< wchar_t >& h,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::SignatureProperty (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (const ::std::basic_string< wchar_t >& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::SignatureProperty (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureProperty (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (::std::istream& is,
                       ::xsd::cxx::xml::error_handler< wchar_t >& h,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureProperty (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureProperty (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (::std::istream& is,
                       const ::std::basic_string< wchar_t >& sid,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureProperty (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (::std::istream& is,
                       const ::std::basic_string< wchar_t >& sid,
                       ::xsd::cxx::xml::error_handler< wchar_t >& h,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureProperty (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (::std::istream& is,
                       const ::std::basic_string< wchar_t >& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureProperty (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (const ::xercesc::DOMInputSource& i,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::SignatureProperty (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (const ::xercesc::DOMInputSource& i,
                       ::xsd::cxx::xml::error_handler< wchar_t >& h,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::SignatureProperty (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (const ::xercesc::DOMInputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::SignatureProperty (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType > r (
        tfm.create< ::w3::xmldsig::SignaturePropertyType > (
          L"SignatureProperty",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"SignatureProperty",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (const ::std::basic_string< wchar_t >& u,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::DSAKeyValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (const ::std::basic_string< wchar_t >& u,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::DSAKeyValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (const ::std::basic_string< wchar_t >& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::DSAKeyValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DSAKeyValue (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (::std::istream& is,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DSAKeyValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DSAKeyValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DSAKeyValue (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DSAKeyValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DSAKeyValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (const ::xercesc::DOMInputSource& i,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::DSAKeyValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (const ::xercesc::DOMInputSource& i,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::DSAKeyValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (const ::xercesc::DOMInputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::DSAKeyValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType > r (
        tfm.create< ::w3::xmldsig::DSAKeyValueType > (
          L"DSAKeyValue",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"DSAKeyValue",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (const ::std::basic_string< wchar_t >& u,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::RSAKeyValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (const ::std::basic_string< wchar_t >& u,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::RSAKeyValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (const ::std::basic_string< wchar_t >& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::RSAKeyValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::RSAKeyValue (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (::std::istream& is,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::RSAKeyValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::RSAKeyValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::RSAKeyValue (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::RSAKeyValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::RSAKeyValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (const ::xercesc::DOMInputSource& i,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmldsig::RSAKeyValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (const ::xercesc::DOMInputSource& i,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::RSAKeyValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (const ::xercesc::DOMInputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmldsig::RSAKeyValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType > r (
        tfm.create< ::w3::xmldsig::RSAKeyValueType > (
          L"RSAKeyValue",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"RSAKeyValue",
        L"http://www.w3.org/2000/09/xmldsig#");
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/serialization.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_serializer_plate< 0, wchar_t >
  type_serializer_plate_init;
}

namespace w3
{
  namespace xmldsig
  {
    void
    operator<< (::xercesc::DOMElement& e,
                const CryptoBinary& i)
    {
      e << static_cast< const ::xml_schema::base64_binary& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,
                const CryptoBinary& i)
    {
      a << static_cast< const ::xml_schema::base64_binary& > (i);
    }

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >& l,
                const CryptoBinary& i)
    {
      l << static_cast< const ::xml_schema::base64_binary& > (i);
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CryptoBinary >
    _xsd_CryptoBinary_type_serializer_init (
      L"CryptoBinary",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    Signature (::xercesc::DOMDocument& d,
               const ::w3::xmldsig::SignatureType& s,
               ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmldsig::SignatureType > (
        L"Signature",
        L"http://www.w3.org/2000/09/xmldsig#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Signature (const ::w3::xmldsig::SignatureType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmldsig::SignatureType > (
            L"Signature",
            L"http://www.w3.org/2000/09/xmldsig#",
            m,
            s,
            f));
        ::w3::xmldsig::Signature (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Signature (::xercesc::XMLFormatTarget& t,
               const ::w3::xmldsig::SignatureType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Signature (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Signature (::xercesc::XMLFormatTarget& t,
               const ::w3::xmldsig::SignatureType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Signature (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Signature (::xercesc::XMLFormatTarget& t,
               const ::w3::xmldsig::SignatureType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Signature (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Signature (::std::ostream& o,
               const ::w3::xmldsig::SignatureType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Signature (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Signature (::std::ostream& o,
               const ::w3::xmldsig::SignatureType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Signature (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Signature (::std::ostream& o,
               const ::w3::xmldsig::SignatureType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Signature (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const SignatureType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< SignatureType::SignedInfo::type > (
          L"SignedInfo",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          i.SignedInfo ());
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< SignatureType::SignatureValue::type > (
          L"SignatureValue",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          i.SignatureValue ());
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.KeyInfo ())
        {
          tsm.serialize< SignatureType::KeyInfo::type > (
            L"KeyInfo",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *i.KeyInfo ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (SignatureType::Object::const_iterator
             b (i.Object ().begin ()), n (i.Object ().end ());
             b != n; ++b)
        {
          tsm.serialize< SignatureType::Object::type > (
            L"Object",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *b);
        }
      }

      if (i.Id ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Id",
          e);

        a.dom_attribute () << *i.Id ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SignatureType >
    _xsd_SignatureType_type_serializer_init (
      L"SignatureType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    SignatureValue (::xercesc::DOMDocument& d,
                    const ::w3::xmldsig::SignatureValueType& s,
                    ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmldsig::SignatureValueType > (
        L"SignatureValue",
        L"http://www.w3.org/2000/09/xmldsig#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SignatureValue (const ::w3::xmldsig::SignatureValueType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmldsig::SignatureValueType > (
            L"SignatureValue",
            L"http://www.w3.org/2000/09/xmldsig#",
            m,
            s,
            f));
        ::w3::xmldsig::SignatureValue (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    SignatureValue (::xercesc::XMLFormatTarget& t,
                    const ::w3::xmldsig::SignatureValueType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SignatureValue (::xercesc::XMLFormatTarget& t,
                    const ::w3::xmldsig::SignatureValueType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureValue (::xercesc::XMLFormatTarget& t,
                    const ::w3::xmldsig::SignatureValueType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureValue (::std::ostream& o,
                    const ::w3::xmldsig::SignatureValueType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SignatureValue (::std::ostream& o,
                    const ::w3::xmldsig::SignatureValueType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureValue (::std::ostream& o,
                    const ::w3::xmldsig::SignatureValueType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const SignatureValueType& i)
    {
      e << static_cast< const ::xml_schema::base64_binary& > (i);

      if (i.Id ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Id",
          e);

        a.dom_attribute () << *i.Id ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SignatureValueType >
    _xsd_SignatureValueType_type_serializer_init (
      L"SignatureValueType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    SignedInfo (::xercesc::DOMDocument& d,
                const ::w3::xmldsig::SignedInfoType& s,
                ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmldsig::SignedInfoType > (
        L"SignedInfo",
        L"http://www.w3.org/2000/09/xmldsig#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SignedInfo (const ::w3::xmldsig::SignedInfoType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmldsig::SignedInfoType > (
            L"SignedInfo",
            L"http://www.w3.org/2000/09/xmldsig#",
            m,
            s,
            f));
        ::w3::xmldsig::SignedInfo (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    SignedInfo (::xercesc::XMLFormatTarget& t,
                const ::w3::xmldsig::SignedInfoType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignedInfo (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SignedInfo (::xercesc::XMLFormatTarget& t,
                const ::w3::xmldsig::SignedInfoType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignedInfo (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignedInfo (::xercesc::XMLFormatTarget& t,
                const ::w3::xmldsig::SignedInfoType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignedInfo (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignedInfo (::std::ostream& o,
                const ::w3::xmldsig::SignedInfoType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignedInfo (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SignedInfo (::std::ostream& o,
                const ::w3::xmldsig::SignedInfoType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignedInfo (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignedInfo (::std::ostream& o,
                const ::w3::xmldsig::SignedInfoType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignedInfo (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const SignedInfoType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< SignedInfoType::CanonicalizationMethod::type > (
          L"CanonicalizationMethod",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          i.CanonicalizationMethod ());
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< SignedInfoType::SignatureMethod::type > (
          L"SignatureMethod",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          i.SignatureMethod ());
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (SignedInfoType::Reference::const_iterator
             b (i.Reference ().begin ()), n (i.Reference ().end ());
             b != n; ++b)
        {
          tsm.serialize< SignedInfoType::Reference::type > (
            L"Reference",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *b);
        }
      }

      if (i.Id ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Id",
          e);

        a.dom_attribute () << *i.Id ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SignedInfoType >
    _xsd_SignedInfoType_type_serializer_init (
      L"SignedInfoType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    CanonicalizationMethod (::xercesc::DOMDocument& d,
                            const ::w3::xmldsig::CanonicalizationMethodType& s,
                            ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmldsig::CanonicalizationMethodType > (
        L"CanonicalizationMethod",
        L"http://www.w3.org/2000/09/xmldsig#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    CanonicalizationMethod (const ::w3::xmldsig::CanonicalizationMethodType& s,
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                            ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmldsig::CanonicalizationMethodType > (
            L"CanonicalizationMethod",
            L"http://www.w3.org/2000/09/xmldsig#",
            m,
            s,
            f));
        ::w3::xmldsig::CanonicalizationMethod (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    CanonicalizationMethod (::xercesc::XMLFormatTarget& t,
                            const ::w3::xmldsig::CanonicalizationMethodType& s,
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                            const ::std::basic_string< wchar_t >& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::CanonicalizationMethod (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    CanonicalizationMethod (::xercesc::XMLFormatTarget& t,
                            const ::w3::xmldsig::CanonicalizationMethodType& s,
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                            ::xsd::cxx::xml::error_handler< wchar_t >& h,
                            const ::std::basic_string< wchar_t >& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::CanonicalizationMethod (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    CanonicalizationMethod (::xercesc::XMLFormatTarget& t,
                            const ::w3::xmldsig::CanonicalizationMethodType& s,
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                            ::xercesc::DOMErrorHandler& h,
                            const ::std::basic_string< wchar_t >& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::CanonicalizationMethod (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    CanonicalizationMethod (::std::ostream& o,
                            const ::w3::xmldsig::CanonicalizationMethodType& s,
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                            const ::std::basic_string< wchar_t >& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::CanonicalizationMethod (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    CanonicalizationMethod (::std::ostream& o,
                            const ::w3::xmldsig::CanonicalizationMethodType& s,
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                            ::xsd::cxx::xml::error_handler< wchar_t >& h,
                            const ::std::basic_string< wchar_t >& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::CanonicalizationMethod (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    CanonicalizationMethod (::std::ostream& o,
                            const ::w3::xmldsig::CanonicalizationMethodType& s,
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                            ::xercesc::DOMErrorHandler& h,
                            const ::std::basic_string< wchar_t >& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::CanonicalizationMethod (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const CanonicalizationMethodType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Algorithm",
          e);

        a.dom_attribute () << i.Algorithm ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CanonicalizationMethodType >
    _xsd_CanonicalizationMethodType_type_serializer_init (
      L"CanonicalizationMethodType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    SignatureMethod (::xercesc::DOMDocument& d,
                     const ::w3::xmldsig::SignatureMethodType& s,
                     ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmldsig::SignatureMethodType > (
        L"SignatureMethod",
        L"http://www.w3.org/2000/09/xmldsig#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SignatureMethod (const ::w3::xmldsig::SignatureMethodType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmldsig::SignatureMethodType > (
            L"SignatureMethod",
            L"http://www.w3.org/2000/09/xmldsig#",
            m,
            s,
            f));
        ::w3::xmldsig::SignatureMethod (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    SignatureMethod (::xercesc::XMLFormatTarget& t,
                     const ::w3::xmldsig::SignatureMethodType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureMethod (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SignatureMethod (::xercesc::XMLFormatTarget& t,
                     const ::w3::xmldsig::SignatureMethodType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureMethod (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureMethod (::xercesc::XMLFormatTarget& t,
                     const ::w3::xmldsig::SignatureMethodType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureMethod (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureMethod (::std::ostream& o,
                     const ::w3::xmldsig::SignatureMethodType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureMethod (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SignatureMethod (::std::ostream& o,
                     const ::w3::xmldsig::SignatureMethodType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureMethod (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureMethod (::std::ostream& o,
                     const ::w3::xmldsig::SignatureMethodType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureMethod (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const SignatureMethodType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.HMACOutputLength ())
        {
          tsm.serialize< SignatureMethodType::HMACOutputLength::type > (
            L"HMACOutputLength",
            L"http://www.w3.org/2000/09/xmldsig#",
            false,
            true,
            e,
            *i.HMACOutputLength ());
        }
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Algorithm",
          e);

        a.dom_attribute () << i.Algorithm ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SignatureMethodType >
    _xsd_SignatureMethodType_type_serializer_init (
      L"SignatureMethodType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    Reference (::xercesc::DOMDocument& d,
               const ::w3::xmldsig::ReferenceType& s,
               ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmldsig::ReferenceType > (
        L"Reference",
        L"http://www.w3.org/2000/09/xmldsig#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Reference (const ::w3::xmldsig::ReferenceType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmldsig::ReferenceType > (
            L"Reference",
            L"http://www.w3.org/2000/09/xmldsig#",
            m,
            s,
            f));
        ::w3::xmldsig::Reference (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Reference (::xercesc::XMLFormatTarget& t,
               const ::w3::xmldsig::ReferenceType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Reference (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Reference (::xercesc::XMLFormatTarget& t,
               const ::w3::xmldsig::ReferenceType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Reference (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Reference (::xercesc::XMLFormatTarget& t,
               const ::w3::xmldsig::ReferenceType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Reference (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Reference (::std::ostream& o,
               const ::w3::xmldsig::ReferenceType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Reference (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Reference (::std::ostream& o,
               const ::w3::xmldsig::ReferenceType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Reference (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Reference (::std::ostream& o,
               const ::w3::xmldsig::ReferenceType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Reference (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ReferenceType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Transforms ())
        {
          tsm.serialize< ReferenceType::Transforms::type > (
            L"Transforms",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *i.Transforms ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< ReferenceType::DigestMethod::type > (
          L"DigestMethod",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          i.DigestMethod ());
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< ReferenceType::DigestValue::type > (
          L"DigestValue",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          i.DigestValue ());
      }

      if (i.Id ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Id",
          e);

        a.dom_attribute () << *i.Id ();
      }

      if (i.URI ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"URI",
          e);

        a.dom_attribute () << *i.URI ();
      }

      if (i.Type ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Type",
          e);

        a.dom_attribute () << *i.Type ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ReferenceType >
    _xsd_ReferenceType_type_serializer_init (
      L"ReferenceType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    Transforms (::xercesc::DOMDocument& d,
                const ::w3::xmldsig::TransformsType& s,
                ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmldsig::TransformsType > (
        L"Transforms",
        L"http://www.w3.org/2000/09/xmldsig#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Transforms (const ::w3::xmldsig::TransformsType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmldsig::TransformsType > (
            L"Transforms",
            L"http://www.w3.org/2000/09/xmldsig#",
            m,
            s,
            f));
        ::w3::xmldsig::Transforms (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Transforms (::xercesc::XMLFormatTarget& t,
                const ::w3::xmldsig::TransformsType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Transforms (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Transforms (::xercesc::XMLFormatTarget& t,
                const ::w3::xmldsig::TransformsType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Transforms (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Transforms (::xercesc::XMLFormatTarget& t,
                const ::w3::xmldsig::TransformsType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Transforms (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Transforms (::std::ostream& o,
                const ::w3::xmldsig::TransformsType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Transforms (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Transforms (::std::ostream& o,
                const ::w3::xmldsig::TransformsType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Transforms (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Transforms (::std::ostream& o,
                const ::w3::xmldsig::TransformsType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Transforms (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const TransformsType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (TransformsType::Transform::const_iterator
             b (i.Transform ().begin ()), n (i.Transform ().end ());
             b != n; ++b)
        {
          tsm.serialize< TransformsType::Transform::type > (
            L"Transform",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *b);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, TransformsType >
    _xsd_TransformsType_type_serializer_init (
      L"TransformsType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    Transform (::xercesc::DOMDocument& d,
               const ::w3::xmldsig::TransformType& s,
               ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmldsig::TransformType > (
        L"Transform",
        L"http://www.w3.org/2000/09/xmldsig#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Transform (const ::w3::xmldsig::TransformType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmldsig::TransformType > (
            L"Transform",
            L"http://www.w3.org/2000/09/xmldsig#",
            m,
            s,
            f));
        ::w3::xmldsig::Transform (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Transform (::xercesc::XMLFormatTarget& t,
               const ::w3::xmldsig::TransformType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Transform (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Transform (::xercesc::XMLFormatTarget& t,
               const ::w3::xmldsig::TransformType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Transform (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Transform (::xercesc::XMLFormatTarget& t,
               const ::w3::xmldsig::TransformType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Transform (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Transform (::std::ostream& o,
               const ::w3::xmldsig::TransformType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Transform (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Transform (::std::ostream& o,
               const ::w3::xmldsig::TransformType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Transform (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Transform (::std::ostream& o,
               const ::w3::xmldsig::TransformType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Transform (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const TransformType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (TransformType::XPath::const_iterator
             b (i.XPath ().begin ()), n (i.XPath ().end ());
             b != n; ++b)
        {
          tsm.serialize< TransformType::XPath::type > (
            L"XPath",
            L"http://www.w3.org/2000/09/xmldsig#",
            false,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Algorithm",
          e);

        a.dom_attribute () << i.Algorithm ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, TransformType >
    _xsd_TransformType_type_serializer_init (
      L"TransformType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    DigestMethod (::xercesc::DOMDocument& d,
                  const ::w3::xmldsig::DigestMethodType& s,
                  ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmldsig::DigestMethodType > (
        L"DigestMethod",
        L"http://www.w3.org/2000/09/xmldsig#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    DigestMethod (const ::w3::xmldsig::DigestMethodType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmldsig::DigestMethodType > (
            L"DigestMethod",
            L"http://www.w3.org/2000/09/xmldsig#",
            m,
            s,
            f));
        ::w3::xmldsig::DigestMethod (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    DigestMethod (::xercesc::XMLFormatTarget& t,
                  const ::w3::xmldsig::DigestMethodType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DigestMethod (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    DigestMethod (::xercesc::XMLFormatTarget& t,
                  const ::w3::xmldsig::DigestMethodType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DigestMethod (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    DigestMethod (::xercesc::XMLFormatTarget& t,
                  const ::w3::xmldsig::DigestMethodType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DigestMethod (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    DigestMethod (::std::ostream& o,
                  const ::w3::xmldsig::DigestMethodType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DigestMethod (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    DigestMethod (::std::ostream& o,
                  const ::w3::xmldsig::DigestMethodType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DigestMethod (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    DigestMethod (::std::ostream& o,
                  const ::w3::xmldsig::DigestMethodType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DigestMethod (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const DigestMethodType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Algorithm",
          e);

        a.dom_attribute () << i.Algorithm ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DigestMethodType >
    _xsd_DigestMethodType_type_serializer_init (
      L"DigestMethodType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    DigestValue (::xercesc::DOMDocument& d,
                 const ::w3::xmldsig::DigestValueType& s,
                 ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmldsig::DigestValueType > (
        L"DigestValue",
        L"http://www.w3.org/2000/09/xmldsig#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    DigestValue (const ::w3::xmldsig::DigestValueType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmldsig::DigestValueType > (
            L"DigestValue",
            L"http://www.w3.org/2000/09/xmldsig#",
            m,
            s,
            f));
        ::w3::xmldsig::DigestValue (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    DigestValue (::xercesc::XMLFormatTarget& t,
                 const ::w3::xmldsig::DigestValueType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DigestValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    DigestValue (::xercesc::XMLFormatTarget& t,
                 const ::w3::xmldsig::DigestValueType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DigestValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    DigestValue (::xercesc::XMLFormatTarget& t,
                 const ::w3::xmldsig::DigestValueType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DigestValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    DigestValue (::std::ostream& o,
                 const ::w3::xmldsig::DigestValueType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DigestValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    DigestValue (::std::ostream& o,
                 const ::w3::xmldsig::DigestValueType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DigestValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    DigestValue (::std::ostream& o,
                 const ::w3::xmldsig::DigestValueType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DigestValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const DigestValueType& i)
    {
      e << static_cast< const ::xml_schema::base64_binary& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,
                const DigestValueType& i)
    {
      a << static_cast< const ::xml_schema::base64_binary& > (i);
    }

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >& l,
                const DigestValueType& i)
    {
      l << static_cast< const ::xml_schema::base64_binary& > (i);
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DigestValueType >
    _xsd_DigestValueType_type_serializer_init (
      L"DigestValueType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    KeyInfo (::xercesc::DOMDocument& d,
             const ::w3::xmldsig::KeyInfoType& s,
             ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmldsig::KeyInfoType > (
        L"KeyInfo",
        L"http://www.w3.org/2000/09/xmldsig#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    KeyInfo (const ::w3::xmldsig::KeyInfoType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmldsig::KeyInfoType > (
            L"KeyInfo",
            L"http://www.w3.org/2000/09/xmldsig#",
            m,
            s,
            f));
        ::w3::xmldsig::KeyInfo (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    KeyInfo (::xercesc::XMLFormatTarget& t,
             const ::w3::xmldsig::KeyInfoType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyInfo (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    KeyInfo (::xercesc::XMLFormatTarget& t,
             const ::w3::xmldsig::KeyInfoType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyInfo (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyInfo (::xercesc::XMLFormatTarget& t,
             const ::w3::xmldsig::KeyInfoType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyInfo (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyInfo (::std::ostream& o,
             const ::w3::xmldsig::KeyInfoType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyInfo (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    KeyInfo (::std::ostream& o,
             const ::w3::xmldsig::KeyInfoType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyInfo (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyInfo (::std::ostream& o,
             const ::w3::xmldsig::KeyInfoType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyInfo (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const KeyInfoType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (KeyInfoType::KeyName::const_iterator
             b (i.KeyName ().begin ()), n (i.KeyName ().end ());
             b != n; ++b)
        {
          tsm.serialize< KeyInfoType::KeyName::type > (
            L"KeyName",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (KeyInfoType::KeyValue::const_iterator
             b (i.KeyValue ().begin ()), n (i.KeyValue ().end ());
             b != n; ++b)
        {
          tsm.serialize< KeyInfoType::KeyValue::type > (
            L"KeyValue",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (KeyInfoType::RetrievalMethod::const_iterator
             b (i.RetrievalMethod ().begin ()), n (i.RetrievalMethod ().end ());
             b != n; ++b)
        {
          tsm.serialize< KeyInfoType::RetrievalMethod::type > (
            L"RetrievalMethod",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (KeyInfoType::X509Data::const_iterator
             b (i.X509Data ().begin ()), n (i.X509Data ().end ());
             b != n; ++b)
        {
          tsm.serialize< KeyInfoType::X509Data::type > (
            L"X509Data",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (KeyInfoType::PGPData::const_iterator
             b (i.PGPData ().begin ()), n (i.PGPData ().end ());
             b != n; ++b)
        {
          tsm.serialize< KeyInfoType::PGPData::type > (
            L"PGPData",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (KeyInfoType::SPKIData::const_iterator
             b (i.SPKIData ().begin ()), n (i.SPKIData ().end ());
             b != n; ++b)
        {
          tsm.serialize< KeyInfoType::SPKIData::type > (
            L"SPKIData",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (KeyInfoType::MgmtData::const_iterator
             b (i.MgmtData ().begin ()), n (i.MgmtData ().end ());
             b != n; ++b)
        {
          tsm.serialize< KeyInfoType::MgmtData::type > (
            L"MgmtData",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *b);
        }
      }

      if (i.Id ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Id",
          e);

        a.dom_attribute () << *i.Id ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, KeyInfoType >
    _xsd_KeyInfoType_type_serializer_init (
      L"KeyInfoType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    KeyName (::xercesc::DOMDocument& d,
             const ::xml_schema::string& s,
             ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::xml_schema::string > (
        L"KeyName",
        L"http://www.w3.org/2000/09/xmldsig#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    KeyName (const ::xml_schema::string& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::xml_schema::string > (
            L"KeyName",
            L"http://www.w3.org/2000/09/xmldsig#",
            m,
            s,
            f));
        ::w3::xmldsig::KeyName (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    KeyName (::xercesc::XMLFormatTarget& t,
             const ::xml_schema::string& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyName (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    KeyName (::xercesc::XMLFormatTarget& t,
             const ::xml_schema::string& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyName (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyName (::xercesc::XMLFormatTarget& t,
             const ::xml_schema::string& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyName (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyName (::std::ostream& o,
             const ::xml_schema::string& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyName (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    KeyName (::std::ostream& o,
             const ::xml_schema::string& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyName (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyName (::std::ostream& o,
             const ::xml_schema::string& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyName (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    MgmtData (::xercesc::DOMDocument& d,
              const ::xml_schema::string& s,
              ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::xml_schema::string > (
        L"MgmtData",
        L"http://www.w3.org/2000/09/xmldsig#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    MgmtData (const ::xml_schema::string& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::xml_schema::string > (
            L"MgmtData",
            L"http://www.w3.org/2000/09/xmldsig#",
            m,
            s,
            f));
        ::w3::xmldsig::MgmtData (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    MgmtData (::xercesc::XMLFormatTarget& t,
              const ::xml_schema::string& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::MgmtData (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    MgmtData (::xercesc::XMLFormatTarget& t,
              const ::xml_schema::string& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::MgmtData (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    MgmtData (::xercesc::XMLFormatTarget& t,
              const ::xml_schema::string& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::MgmtData (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    MgmtData (::std::ostream& o,
              const ::xml_schema::string& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::MgmtData (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    MgmtData (::std::ostream& o,
              const ::xml_schema::string& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::MgmtData (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    MgmtData (::std::ostream& o,
              const ::xml_schema::string& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::MgmtData (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyValue (::xercesc::DOMDocument& d,
              const ::w3::xmldsig::KeyValueType& s,
              ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmldsig::KeyValueType > (
        L"KeyValue",
        L"http://www.w3.org/2000/09/xmldsig#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    KeyValue (const ::w3::xmldsig::KeyValueType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmldsig::KeyValueType > (
            L"KeyValue",
            L"http://www.w3.org/2000/09/xmldsig#",
            m,
            s,
            f));
        ::w3::xmldsig::KeyValue (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    KeyValue (::xercesc::XMLFormatTarget& t,
              const ::w3::xmldsig::KeyValueType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    KeyValue (::xercesc::XMLFormatTarget& t,
              const ::w3::xmldsig::KeyValueType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyValue (::xercesc::XMLFormatTarget& t,
              const ::w3::xmldsig::KeyValueType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyValue (::std::ostream& o,
              const ::w3::xmldsig::KeyValueType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    KeyValue (::std::ostream& o,
              const ::w3::xmldsig::KeyValueType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyValue (::std::ostream& o,
              const ::w3::xmldsig::KeyValueType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const KeyValueType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.DSAKeyValue ())
        {
          tsm.serialize< KeyValueType::DSAKeyValue::type > (
            L"DSAKeyValue",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *i.DSAKeyValue ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.RSAKeyValue ())
        {
          tsm.serialize< KeyValueType::RSAKeyValue::type > (
            L"RSAKeyValue",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *i.RSAKeyValue ());
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, KeyValueType >
    _xsd_KeyValueType_type_serializer_init (
      L"KeyValueType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    RetrievalMethod (::xercesc::DOMDocument& d,
                     const ::w3::xmldsig::RetrievalMethodType& s,
                     ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmldsig::RetrievalMethodType > (
        L"RetrievalMethod",
        L"http://www.w3.org/2000/09/xmldsig#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    RetrievalMethod (const ::w3::xmldsig::RetrievalMethodType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmldsig::RetrievalMethodType > (
            L"RetrievalMethod",
            L"http://www.w3.org/2000/09/xmldsig#",
            m,
            s,
            f));
        ::w3::xmldsig::RetrievalMethod (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    RetrievalMethod (::xercesc::XMLFormatTarget& t,
                     const ::w3::xmldsig::RetrievalMethodType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::RetrievalMethod (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    RetrievalMethod (::xercesc::XMLFormatTarget& t,
                     const ::w3::xmldsig::RetrievalMethodType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::RetrievalMethod (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RetrievalMethod (::xercesc::XMLFormatTarget& t,
                     const ::w3::xmldsig::RetrievalMethodType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::RetrievalMethod (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RetrievalMethod (::std::ostream& o,
                     const ::w3::xmldsig::RetrievalMethodType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::RetrievalMethod (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    RetrievalMethod (::std::ostream& o,
                     const ::w3::xmldsig::RetrievalMethodType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::RetrievalMethod (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RetrievalMethod (::std::ostream& o,
                     const ::w3::xmldsig::RetrievalMethodType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::RetrievalMethod (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const RetrievalMethodType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Transforms ())
        {
          tsm.serialize< RetrievalMethodType::Transforms::type > (
            L"Transforms",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *i.Transforms ());
        }
      }

      if (i.URI ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"URI",
          e);

        a.dom_attribute () << *i.URI ();
      }

      if (i.Type ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Type",
          e);

        a.dom_attribute () << *i.Type ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, RetrievalMethodType >
    _xsd_RetrievalMethodType_type_serializer_init (
      L"RetrievalMethodType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    X509Data (::xercesc::DOMDocument& d,
              const ::w3::xmldsig::X509DataType& s,
              ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmldsig::X509DataType > (
        L"X509Data",
        L"http://www.w3.org/2000/09/xmldsig#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    X509Data (const ::w3::xmldsig::X509DataType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmldsig::X509DataType > (
            L"X509Data",
            L"http://www.w3.org/2000/09/xmldsig#",
            m,
            s,
            f));
        ::w3::xmldsig::X509Data (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    X509Data (::xercesc::XMLFormatTarget& t,
              const ::w3::xmldsig::X509DataType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::X509Data (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    X509Data (::xercesc::XMLFormatTarget& t,
              const ::w3::xmldsig::X509DataType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::X509Data (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    X509Data (::xercesc::XMLFormatTarget& t,
              const ::w3::xmldsig::X509DataType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::X509Data (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    X509Data (::std::ostream& o,
              const ::w3::xmldsig::X509DataType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::X509Data (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    X509Data (::std::ostream& o,
              const ::w3::xmldsig::X509DataType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::X509Data (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    X509Data (::std::ostream& o,
              const ::w3::xmldsig::X509DataType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::X509Data (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const X509DataType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (X509DataType::X509IssuerSerial::const_iterator
             b (i.X509IssuerSerial ().begin ()), n (i.X509IssuerSerial ().end ());
             b != n; ++b)
        {
          tsm.serialize< X509DataType::X509IssuerSerial::type > (
            L"X509IssuerSerial",
            L"http://www.w3.org/2000/09/xmldsig#",
            false,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (X509DataType::X509SKI::const_iterator
             b (i.X509SKI ().begin ()), n (i.X509SKI ().end ());
             b != n; ++b)
        {
          tsm.serialize< X509DataType::X509SKI::type > (
            L"X509SKI",
            L"http://www.w3.org/2000/09/xmldsig#",
            false,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (X509DataType::X509SubjectName::const_iterator
             b (i.X509SubjectName ().begin ()), n (i.X509SubjectName ().end ());
             b != n; ++b)
        {
          tsm.serialize< X509DataType::X509SubjectName::type > (
            L"X509SubjectName",
            L"http://www.w3.org/2000/09/xmldsig#",
            false,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (X509DataType::X509Certificate::const_iterator
             b (i.X509Certificate ().begin ()), n (i.X509Certificate ().end ());
             b != n; ++b)
        {
          tsm.serialize< X509DataType::X509Certificate::type > (
            L"X509Certificate",
            L"http://www.w3.org/2000/09/xmldsig#",
            false,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (X509DataType::X509CRL::const_iterator
             b (i.X509CRL ().begin ()), n (i.X509CRL ().end ());
             b != n; ++b)
        {
          tsm.serialize< X509DataType::X509CRL::type > (
            L"X509CRL",
            L"http://www.w3.org/2000/09/xmldsig#",
            false,
            true,
            e,
            *b);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, X509DataType >
    _xsd_X509DataType_type_serializer_init (
      L"X509DataType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    operator<< (::xercesc::DOMElement& e,
                const X509IssuerSerialType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< X509IssuerSerialType::X509IssuerName::type > (
          L"X509IssuerName",
          L"http://www.w3.org/2000/09/xmldsig#",
          false,
          true,
          e,
          i.X509IssuerName ());
      }

      {
        ::xsd::cxx::xml::dom::element< wchar_t > s (
          L"X509SerialNumber",
          L"http://www.w3.org/2000/09/xmldsig#",
          e);
        s.dom_element () << i.X509SerialNumber ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, X509IssuerSerialType >
    _xsd_X509IssuerSerialType_type_serializer_init (
      L"X509IssuerSerialType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    PGPData (::xercesc::DOMDocument& d,
             const ::w3::xmldsig::PGPDataType& s,
             ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmldsig::PGPDataType > (
        L"PGPData",
        L"http://www.w3.org/2000/09/xmldsig#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    PGPData (const ::w3::xmldsig::PGPDataType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmldsig::PGPDataType > (
            L"PGPData",
            L"http://www.w3.org/2000/09/xmldsig#",
            m,
            s,
            f));
        ::w3::xmldsig::PGPData (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    PGPData (::xercesc::XMLFormatTarget& t,
             const ::w3::xmldsig::PGPDataType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::PGPData (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    PGPData (::xercesc::XMLFormatTarget& t,
             const ::w3::xmldsig::PGPDataType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::PGPData (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    PGPData (::xercesc::XMLFormatTarget& t,
             const ::w3::xmldsig::PGPDataType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::PGPData (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    PGPData (::std::ostream& o,
             const ::w3::xmldsig::PGPDataType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::PGPData (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    PGPData (::std::ostream& o,
             const ::w3::xmldsig::PGPDataType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::PGPData (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    PGPData (::std::ostream& o,
             const ::w3::xmldsig::PGPDataType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::PGPData (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const PGPDataType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.PGPKeyID ())
        {
          tsm.serialize< PGPDataType::PGPKeyID::type > (
            L"PGPKeyID",
            L"http://www.w3.org/2000/09/xmldsig#",
            false,
            true,
            e,
            *i.PGPKeyID ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.PGPKeyPacket ())
        {
          tsm.serialize< PGPDataType::PGPKeyPacket::type > (
            L"PGPKeyPacket",
            L"http://www.w3.org/2000/09/xmldsig#",
            false,
            true,
            e,
            *i.PGPKeyPacket ());
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, PGPDataType >
    _xsd_PGPDataType_type_serializer_init (
      L"PGPDataType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    SPKIData (::xercesc::DOMDocument& d,
              const ::w3::xmldsig::SPKIDataType& s,
              ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmldsig::SPKIDataType > (
        L"SPKIData",
        L"http://www.w3.org/2000/09/xmldsig#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SPKIData (const ::w3::xmldsig::SPKIDataType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmldsig::SPKIDataType > (
            L"SPKIData",
            L"http://www.w3.org/2000/09/xmldsig#",
            m,
            s,
            f));
        ::w3::xmldsig::SPKIData (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    SPKIData (::xercesc::XMLFormatTarget& t,
              const ::w3::xmldsig::SPKIDataType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SPKIData (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SPKIData (::xercesc::XMLFormatTarget& t,
              const ::w3::xmldsig::SPKIDataType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SPKIData (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SPKIData (::xercesc::XMLFormatTarget& t,
              const ::w3::xmldsig::SPKIDataType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SPKIData (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SPKIData (::std::ostream& o,
              const ::w3::xmldsig::SPKIDataType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SPKIData (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SPKIData (::std::ostream& o,
              const ::w3::xmldsig::SPKIDataType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SPKIData (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SPKIData (::std::ostream& o,
              const ::w3::xmldsig::SPKIDataType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SPKIData (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const SPKIDataType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (SPKIDataType::SPKISexp::const_iterator
             b (i.SPKISexp ().begin ()), n (i.SPKISexp ().end ());
             b != n; ++b)
        {
          tsm.serialize< SPKIDataType::SPKISexp::type > (
            L"SPKISexp",
            L"http://www.w3.org/2000/09/xmldsig#",
            false,
            true,
            e,
            *b);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SPKIDataType >
    _xsd_SPKIDataType_type_serializer_init (
      L"SPKIDataType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    Object (::xercesc::DOMDocument& d,
            const ::w3::xmldsig::ObjectType& s,
            ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmldsig::ObjectType > (
        L"Object",
        L"http://www.w3.org/2000/09/xmldsig#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Object (const ::w3::xmldsig::ObjectType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmldsig::ObjectType > (
            L"Object",
            L"http://www.w3.org/2000/09/xmldsig#",
            m,
            s,
            f));
        ::w3::xmldsig::Object (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Object (::xercesc::XMLFormatTarget& t,
            const ::w3::xmldsig::ObjectType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Object (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Object (::xercesc::XMLFormatTarget& t,
            const ::w3::xmldsig::ObjectType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Object (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Object (::xercesc::XMLFormatTarget& t,
            const ::w3::xmldsig::ObjectType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Object (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Object (::std::ostream& o,
            const ::w3::xmldsig::ObjectType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Object (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Object (::std::ostream& o,
            const ::w3::xmldsig::ObjectType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Object (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Object (::std::ostream& o,
            const ::w3::xmldsig::ObjectType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Object (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ObjectType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      if (i.Id ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Id",
          e);

        a.dom_attribute () << *i.Id ();
      }

      if (i.MimeType ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"MimeType",
          e);

        a.dom_attribute () << *i.MimeType ();
      }

      if (i.Encoding ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Encoding",
          e);

        a.dom_attribute () << *i.Encoding ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ObjectType >
    _xsd_ObjectType_type_serializer_init (
      L"ObjectType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    Manifest (::xercesc::DOMDocument& d,
              const ::w3::xmldsig::ManifestType& s,
              ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmldsig::ManifestType > (
        L"Manifest",
        L"http://www.w3.org/2000/09/xmldsig#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Manifest (const ::w3::xmldsig::ManifestType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmldsig::ManifestType > (
            L"Manifest",
            L"http://www.w3.org/2000/09/xmldsig#",
            m,
            s,
            f));
        ::w3::xmldsig::Manifest (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Manifest (::xercesc::XMLFormatTarget& t,
              const ::w3::xmldsig::ManifestType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Manifest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Manifest (::xercesc::XMLFormatTarget& t,
              const ::w3::xmldsig::ManifestType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Manifest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Manifest (::xercesc::XMLFormatTarget& t,
              const ::w3::xmldsig::ManifestType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Manifest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Manifest (::std::ostream& o,
              const ::w3::xmldsig::ManifestType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Manifest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Manifest (::std::ostream& o,
              const ::w3::xmldsig::ManifestType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Manifest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Manifest (::std::ostream& o,
              const ::w3::xmldsig::ManifestType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Manifest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ManifestType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (ManifestType::Reference::const_iterator
             b (i.Reference ().begin ()), n (i.Reference ().end ());
             b != n; ++b)
        {
          tsm.serialize< ManifestType::Reference::type > (
            L"Reference",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *b);
        }
      }

      if (i.Id ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Id",
          e);

        a.dom_attribute () << *i.Id ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ManifestType >
    _xsd_ManifestType_type_serializer_init (
      L"ManifestType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    SignatureProperties (::xercesc::DOMDocument& d,
                         const ::w3::xmldsig::SignaturePropertiesType& s,
                         ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmldsig::SignaturePropertiesType > (
        L"SignatureProperties",
        L"http://www.w3.org/2000/09/xmldsig#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SignatureProperties (const ::w3::xmldsig::SignaturePropertiesType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmldsig::SignaturePropertiesType > (
            L"SignatureProperties",
            L"http://www.w3.org/2000/09/xmldsig#",
            m,
            s,
            f));
        ::w3::xmldsig::SignatureProperties (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    SignatureProperties (::xercesc::XMLFormatTarget& t,
                         const ::w3::xmldsig::SignaturePropertiesType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureProperties (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SignatureProperties (::xercesc::XMLFormatTarget& t,
                         const ::w3::xmldsig::SignaturePropertiesType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureProperties (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureProperties (::xercesc::XMLFormatTarget& t,
                         const ::w3::xmldsig::SignaturePropertiesType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xercesc::DOMErrorHandler& h,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureProperties (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureProperties (::std::ostream& o,
                         const ::w3::xmldsig::SignaturePropertiesType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureProperties (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SignatureProperties (::std::ostream& o,
                         const ::w3::xmldsig::SignaturePropertiesType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureProperties (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureProperties (::std::ostream& o,
                         const ::w3::xmldsig::SignaturePropertiesType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xercesc::DOMErrorHandler& h,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureProperties (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const SignaturePropertiesType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (SignaturePropertiesType::SignatureProperty::const_iterator
             b (i.SignatureProperty ().begin ()), n (i.SignatureProperty ().end ());
             b != n; ++b)
        {
          tsm.serialize< SignaturePropertiesType::SignatureProperty::type > (
            L"SignatureProperty",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *b);
        }
      }

      if (i.Id ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Id",
          e);

        a.dom_attribute () << *i.Id ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SignaturePropertiesType >
    _xsd_SignaturePropertiesType_type_serializer_init (
      L"SignaturePropertiesType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    SignatureProperty (::xercesc::DOMDocument& d,
                       const ::w3::xmldsig::SignaturePropertyType& s,
                       ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmldsig::SignaturePropertyType > (
        L"SignatureProperty",
        L"http://www.w3.org/2000/09/xmldsig#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SignatureProperty (const ::w3::xmldsig::SignaturePropertyType& s,
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                       ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmldsig::SignaturePropertyType > (
            L"SignatureProperty",
            L"http://www.w3.org/2000/09/xmldsig#",
            m,
            s,
            f));
        ::w3::xmldsig::SignatureProperty (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    SignatureProperty (::xercesc::XMLFormatTarget& t,
                       const ::w3::xmldsig::SignaturePropertyType& s,
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                       const ::std::basic_string< wchar_t >& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureProperty (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SignatureProperty (::xercesc::XMLFormatTarget& t,
                       const ::w3::xmldsig::SignaturePropertyType& s,
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                       ::xsd::cxx::xml::error_handler< wchar_t >& h,
                       const ::std::basic_string< wchar_t >& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureProperty (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureProperty (::xercesc::XMLFormatTarget& t,
                       const ::w3::xmldsig::SignaturePropertyType& s,
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                       ::xercesc::DOMErrorHandler& h,
                       const ::std::basic_string< wchar_t >& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureProperty (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureProperty (::std::ostream& o,
                       const ::w3::xmldsig::SignaturePropertyType& s,
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                       const ::std::basic_string< wchar_t >& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureProperty (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SignatureProperty (::std::ostream& o,
                       const ::w3::xmldsig::SignaturePropertyType& s,
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                       ::xsd::cxx::xml::error_handler< wchar_t >& h,
                       const ::std::basic_string< wchar_t >& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureProperty (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureProperty (::std::ostream& o,
                       const ::w3::xmldsig::SignaturePropertyType& s,
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                       ::xercesc::DOMErrorHandler& h,
                       const ::std::basic_string< wchar_t >& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureProperty (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const SignaturePropertyType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Target",
          e);

        a.dom_attribute () << i.Target ();
      }

      if (i.Id ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Id",
          e);

        a.dom_attribute () << *i.Id ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SignaturePropertyType >
    _xsd_SignaturePropertyType_type_serializer_init (
      L"SignaturePropertyType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    operator<< (::xercesc::DOMElement& e,
                const HMACOutputLengthType& i)
    {
      e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type >& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,
                const HMACOutputLengthType& i)
    {
      a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type >& > (i);
    }

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >& l,
                const HMACOutputLengthType& i)
    {
      l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type >& > (i);
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, HMACOutputLengthType >
    _xsd_HMACOutputLengthType_type_serializer_init (
      L"HMACOutputLengthType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    DSAKeyValue (::xercesc::DOMDocument& d,
                 const ::w3::xmldsig::DSAKeyValueType& s,
                 ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmldsig::DSAKeyValueType > (
        L"DSAKeyValue",
        L"http://www.w3.org/2000/09/xmldsig#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    DSAKeyValue (const ::w3::xmldsig::DSAKeyValueType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmldsig::DSAKeyValueType > (
            L"DSAKeyValue",
            L"http://www.w3.org/2000/09/xmldsig#",
            m,
            s,
            f));
        ::w3::xmldsig::DSAKeyValue (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    DSAKeyValue (::xercesc::XMLFormatTarget& t,
                 const ::w3::xmldsig::DSAKeyValueType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DSAKeyValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    DSAKeyValue (::xercesc::XMLFormatTarget& t,
                 const ::w3::xmldsig::DSAKeyValueType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DSAKeyValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    DSAKeyValue (::xercesc::XMLFormatTarget& t,
                 const ::w3::xmldsig::DSAKeyValueType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DSAKeyValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    DSAKeyValue (::std::ostream& o,
                 const ::w3::xmldsig::DSAKeyValueType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DSAKeyValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    DSAKeyValue (::std::ostream& o,
                 const ::w3::xmldsig::DSAKeyValueType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DSAKeyValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    DSAKeyValue (::std::ostream& o,
                 const ::w3::xmldsig::DSAKeyValueType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DSAKeyValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const DSAKeyValueType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.P ())
        {
          tsm.serialize< DSAKeyValueType::P::type > (
            L"P",
            L"http://www.w3.org/2000/09/xmldsig#",
            false,
            true,
            e,
            *i.P ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Q ())
        {
          tsm.serialize< DSAKeyValueType::Q::type > (
            L"Q",
            L"http://www.w3.org/2000/09/xmldsig#",
            false,
            true,
            e,
            *i.Q ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.G ())
        {
          tsm.serialize< DSAKeyValueType::G::type > (
            L"G",
            L"http://www.w3.org/2000/09/xmldsig#",
            false,
            true,
            e,
            *i.G ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< DSAKeyValueType::Y::type > (
          L"Y",
          L"http://www.w3.org/2000/09/xmldsig#",
          false,
          true,
          e,
          i.Y ());
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.J ())
        {
          tsm.serialize< DSAKeyValueType::J::type > (
            L"J",
            L"http://www.w3.org/2000/09/xmldsig#",
            false,
            true,
            e,
            *i.J ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Seed ())
        {
          tsm.serialize< DSAKeyValueType::Seed::type > (
            L"Seed",
            L"http://www.w3.org/2000/09/xmldsig#",
            false,
            true,
            e,
            *i.Seed ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.PgenCounter ())
        {
          tsm.serialize< DSAKeyValueType::PgenCounter::type > (
            L"PgenCounter",
            L"http://www.w3.org/2000/09/xmldsig#",
            false,
            true,
            e,
            *i.PgenCounter ());
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DSAKeyValueType >
    _xsd_DSAKeyValueType_type_serializer_init (
      L"DSAKeyValueType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    RSAKeyValue (::xercesc::DOMDocument& d,
                 const ::w3::xmldsig::RSAKeyValueType& s,
                 ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmldsig::RSAKeyValueType > (
        L"RSAKeyValue",
        L"http://www.w3.org/2000/09/xmldsig#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    RSAKeyValue (const ::w3::xmldsig::RSAKeyValueType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmldsig::RSAKeyValueType > (
            L"RSAKeyValue",
            L"http://www.w3.org/2000/09/xmldsig#",
            m,
            s,
            f));
        ::w3::xmldsig::RSAKeyValue (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    RSAKeyValue (::xercesc::XMLFormatTarget& t,
                 const ::w3::xmldsig::RSAKeyValueType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::RSAKeyValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    RSAKeyValue (::xercesc::XMLFormatTarget& t,
                 const ::w3::xmldsig::RSAKeyValueType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::RSAKeyValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RSAKeyValue (::xercesc::XMLFormatTarget& t,
                 const ::w3::xmldsig::RSAKeyValueType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::RSAKeyValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RSAKeyValue (::std::ostream& o,
                 const ::w3::xmldsig::RSAKeyValueType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::RSAKeyValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    RSAKeyValue (::std::ostream& o,
                 const ::w3::xmldsig::RSAKeyValueType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::RSAKeyValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RSAKeyValue (::std::ostream& o,
                 const ::w3::xmldsig::RSAKeyValueType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::RSAKeyValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const RSAKeyValueType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< RSAKeyValueType::Modulus::type > (
          L"Modulus",
          L"http://www.w3.org/2000/09/xmldsig#",
          false,
          true,
          e,
          i.Modulus ());
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< RSAKeyValueType::Exponent::type > (
          L"Exponent",
          L"http://www.w3.org/2000/09/xmldsig#",
          false,
          true,
          e,
          i.Exponent ());
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, RSAKeyValueType >
    _xsd_RSAKeyValueType_type_serializer_init (
      L"RSAKeyValueType",
      L"http://www.w3.org/2000/09/xmldsig#");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

