// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

#ifndef LXACML_SCHEMA_SAML_PROTOCOL_HXX
#define LXACML_SCHEMA_SAML_PROTOCOL_HXX

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 2030100L)
#error XSD runtime version mismatch
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include "xsd/xml-schema.hxx"

// Forward declarations.
//
namespace middleware
{
  namespace lxacmlSAMLProtocolSchema
  {
    class LXACMLAuthzDecisionQueryType;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include "saml-schema-protocol-2.0.hxx"

#include "lxacml-schema.hxx"

#include "lxacml-schema-context.hxx"

namespace middleware
{
  namespace lxacmlSAMLProtocolSchema
  {
    class LXACMLAuthzDecisionQueryType: public ::saml2::protocol::RequestAbstractType
    {
      public:

      struct _xsd_LXACMLAuthzDecisionQueryType
      {
        typedef ::saml2::protocol::RequestAbstractType base_;
      };

      // Request
      // 
      public:
      struct Request
      {
        typedef ::middleware::lxacmlContextSchema::RequestType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Request::type&
      Request () const;

      Request::type&
      Request ();

      void
      Request (const Request::type&);

      void
      Request (::std::auto_ptr< Request::type >);

      // InputContextOnly
      // 
      public:
      struct InputContextOnly
      {
        typedef ::xml_schema::boolean type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;

        static const type&
        default_value ();

        private:
        static const type default_value_;
      };

      const InputContextOnly::type&
      InputContextOnly () const;

      InputContextOnly::type&
      InputContextOnly ();

      void
      InputContextOnly (const InputContextOnly::type&);

      // ReturnContext
      // 
      public:
      struct ReturnContext
      {
        typedef ::xml_schema::boolean type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;

        static const type&
        default_value ();

        private:
        static const type default_value_;
      };

      const ReturnContext::type&
      ReturnContext () const;

      ReturnContext::type&
      ReturnContext ();

      void
      ReturnContext (const ReturnContext::type&);

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_LXACMLAuthzDecisionQueryType::base_::ID;
      using _xsd_LXACMLAuthzDecisionQueryType::base_::Version;
      using _xsd_LXACMLAuthzDecisionQueryType::base_::IssueInstant;
#endif

      // Constructors.
      //
      public:
      LXACMLAuthzDecisionQueryType ();

      LXACMLAuthzDecisionQueryType (const ID::type&,
                                    const Version::type&,
                                    const IssueInstant::type&,
                                    const Request::type&);

      LXACMLAuthzDecisionQueryType (const ::xercesc::DOMElement&,
                                    ::xml_schema::flags = 0,
                                    ::xml_schema::type* = 0);

      LXACMLAuthzDecisionQueryType (const LXACMLAuthzDecisionQueryType&,
                                    ::xml_schema::flags = 0,
                                    ::xml_schema::type* = 0);

      virtual LXACMLAuthzDecisionQueryType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< Request::type > _xsd_Request_;
      ::xsd::cxx::tree::one< InputContextOnly::type > _xsd_InputContextOnly_;
      ::xsd::cxx::tree::one< ReturnContext::type > _xsd_ReturnContext_;
    };
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMInputSource.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace middleware
{
  namespace lxacmlSAMLProtocolSchema
  {
    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (const ::std::basic_string< wchar_t >&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (const ::std::basic_string< wchar_t >&,
                              ::xsd::cxx::xml::error_handler< wchar_t >&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (const ::std::basic_string< wchar_t >&,
                              ::xercesc::DOMErrorHandler&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (::std::istream&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (::std::istream&,
                              ::xsd::cxx::xml::error_handler< wchar_t >&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (::std::istream&,
                              ::xercesc::DOMErrorHandler&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (::std::istream&,
                              const ::std::basic_string< wchar_t >& id,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (::std::istream&,
                              const ::std::basic_string< wchar_t >& id,
                              ::xsd::cxx::xml::error_handler< wchar_t >&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (::std::istream&,
                              const ::std::basic_string< wchar_t >& id,
                              ::xercesc::DOMErrorHandler&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (const ::xercesc::DOMInputSource&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (const ::xercesc::DOMInputSource&,
                              ::xsd::cxx::xml::error_handler< wchar_t >&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (const ::xercesc::DOMInputSource&,
                              ::xercesc::DOMErrorHandler&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (const ::xercesc::DOMDocument&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());
  }
}

#include <iosfwd> // std::ostream&

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace middleware
{
  namespace lxacmlSAMLProtocolSchema
  {
    // Serialize to an existing DOM instance.
    //
    void
    LXACMLAuthzDecisionQuery (::xercesc::DOMDocument&,
                              const ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType&,
                              ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    LXACMLAuthzDecisionQuery (const ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType&, 
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                              ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    LXACMLAuthzDecisionQuery (::xercesc::XMLFormatTarget&,
                              const ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType&, 
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                              const ::std::basic_string< wchar_t >& = L"UTF-8",
                              ::xml_schema::flags = 0);


    void
    LXACMLAuthzDecisionQuery (::xercesc::XMLFormatTarget&,
                              const ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType&, 
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                              ::xsd::cxx::xml::error_handler< wchar_t >&,
                              const ::std::basic_string< wchar_t >& = L"UTF-8",
                              ::xml_schema::flags = 0);

    void
    LXACMLAuthzDecisionQuery (::xercesc::XMLFormatTarget&,
                              const ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType&, 
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                              ::xercesc::DOMErrorHandler&,
                              const ::std::basic_string< wchar_t >& = L"UTF-8",
                              ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    LXACMLAuthzDecisionQuery (::std::ostream&,
                              const ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType&, 
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                              const ::std::basic_string< wchar_t >& = L"UTF-8",
                              ::xml_schema::flags = 0);


    void
    LXACMLAuthzDecisionQuery (::std::ostream&,
                              const ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType&, 
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                              ::xsd::cxx::xml::error_handler< wchar_t >&,
                              const ::std::basic_string< wchar_t >& = L"UTF-8",
                              ::xml_schema::flags = 0);

    void
    LXACMLAuthzDecisionQuery (::std::ostream&,
                              const ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType&, 
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                              ::xercesc::DOMErrorHandler&,
                              const ::std::basic_string< wchar_t >& = L"UTF-8",
                              ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const LXACMLAuthzDecisionQueryType&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // LXACML_SCHEMA_SAML_PROTOCOL_HXX
