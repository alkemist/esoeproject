// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

#ifndef XMLDSIG_CORE_SCHEMA_HXX
#define XMLDSIG_CORE_SCHEMA_HXX

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 2030100L)
#error XSD runtime version mismatch
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include "xsd/xml-schema.hxx"

// Forward declarations.
//
namespace w3
{
  namespace xmldsig
  {
    class CryptoBinary;
    class SignatureType;
    class SignatureValueType;
    class SignedInfoType;
    class CanonicalizationMethodType;
    class SignatureMethodType;
    class ReferenceType;
    class TransformsType;
    class TransformType;
    class DigestMethodType;
    class DigestValueType;
    class KeyInfoType;
    class KeyValueType;
    class RetrievalMethodType;
    class X509DataType;
    class X509IssuerSerialType;
    class PGPDataType;
    class SPKIDataType;
    class ObjectType;
    class ManifestType;
    class SignaturePropertiesType;
    class SignaturePropertyType;
    class HMACOutputLengthType;
    class DSAKeyValueType;
    class RSAKeyValueType;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

namespace w3
{
  namespace xmldsig
  {
    class CryptoBinary: public ::xml_schema::base64_binary
    {
      public:

      struct _xsd_CryptoBinary
      {
        typedef ::xml_schema::base64_binary base_;
      };

      // Constructors.
      //
      public:
      CryptoBinary ();

      CryptoBinary (const _xsd_CryptoBinary::base_& );

      CryptoBinary (const ::xercesc::DOMElement&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      CryptoBinary (const ::xercesc::DOMAttr&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      CryptoBinary (const ::std::basic_string< wchar_t >&,
                    const ::xercesc::DOMElement*,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      CryptoBinary (const CryptoBinary&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      virtual CryptoBinary*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;
    };

    class SignatureType: public ::xml_schema::type
    {
      public:

      struct _xsd_SignatureType
      {
        typedef ::xml_schema::type base_;
      };

      // SignedInfo
      // 
      public:
      struct SignedInfo
      {
        typedef ::w3::xmldsig::SignedInfoType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const SignedInfo::type&
      SignedInfo () const;

      SignedInfo::type&
      SignedInfo ();

      void
      SignedInfo (const SignedInfo::type&);

      void
      SignedInfo (::std::auto_ptr< SignedInfo::type >);

      // SignatureValue
      // 
      public:
      struct SignatureValue
      {
        typedef ::w3::xmldsig::SignatureValueType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const SignatureValue::type&
      SignatureValue () const;

      SignatureValue::type&
      SignatureValue ();

      void
      SignatureValue (const SignatureValue::type&);

      void
      SignatureValue (::std::auto_ptr< SignatureValue::type >);

      // KeyInfo
      // 
      public:
      struct KeyInfo
      {
        typedef ::w3::xmldsig::KeyInfoType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const KeyInfo::container&
      KeyInfo () const;

      KeyInfo::container&
      KeyInfo ();

      void
      KeyInfo (const KeyInfo::type&);

      void
      KeyInfo (const KeyInfo::container&);

      void
      KeyInfo (::std::auto_ptr< KeyInfo::type >);

      // Object
      // 
      public:
      struct Object
      {
        typedef ::w3::xmldsig::ObjectType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Object::container&
      Object () const;

      Object::container&
      Object ();

      void
      Object (const Object::container&);

      // Id
      // 
      public:
      struct Id
      {
        typedef ::xml_schema::id type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Id::container&
      Id () const;

      Id::container&
      Id ();

      void
      Id (const Id::type&);

      void
      Id (const Id::container&);

      void
      Id (::std::auto_ptr< Id::type >);

      // Constructors.
      //
      public:
      SignatureType ();

      SignatureType (const SignedInfo::type&,
                     const SignatureValue::type&);

      SignatureType (const ::xercesc::DOMElement&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      SignatureType (const SignatureType&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      virtual SignatureType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< SignedInfo::type > _xsd_SignedInfo_;
      ::xsd::cxx::tree::one< SignatureValue::type > _xsd_SignatureValue_;
      ::xsd::cxx::tree::optional< KeyInfo::type > _xsd_KeyInfo_;
      ::xsd::cxx::tree::sequence< Object::type > _xsd_Object_;
      ::xsd::cxx::tree::optional< Id::type > _xsd_Id_;
    };

    class SignatureValueType: public ::xml_schema::base64_binary
    {
      public:

      struct _xsd_SignatureValueType
      {
        typedef ::xml_schema::base64_binary base_;
      };

      // Id
      // 
      public:
      struct Id
      {
        typedef ::xml_schema::id type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Id::container&
      Id () const;

      Id::container&
      Id ();

      void
      Id (const Id::type&);

      void
      Id (const Id::container&);

      void
      Id (::std::auto_ptr< Id::type >);

      // Constructors.
      //
      public:
      SignatureValueType ();

      SignatureValueType (const _xsd_SignatureValueType::base_& );

      SignatureValueType (const ::xercesc::DOMElement&,
                          ::xml_schema::flags = 0,
                          ::xml_schema::type* = 0);

      SignatureValueType (const SignatureValueType&,
                          ::xml_schema::flags = 0,
                          ::xml_schema::type* = 0);

      virtual SignatureValueType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< Id::type > _xsd_Id_;
    };

    class SignedInfoType: public ::xml_schema::type
    {
      public:

      struct _xsd_SignedInfoType
      {
        typedef ::xml_schema::type base_;
      };

      // CanonicalizationMethod
      // 
      public:
      struct CanonicalizationMethod
      {
        typedef ::w3::xmldsig::CanonicalizationMethodType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const CanonicalizationMethod::type&
      CanonicalizationMethod () const;

      CanonicalizationMethod::type&
      CanonicalizationMethod ();

      void
      CanonicalizationMethod (const CanonicalizationMethod::type&);

      void
      CanonicalizationMethod (::std::auto_ptr< CanonicalizationMethod::type >);

      // SignatureMethod
      // 
      public:
      struct SignatureMethod
      {
        typedef ::w3::xmldsig::SignatureMethodType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const SignatureMethod::type&
      SignatureMethod () const;

      SignatureMethod::type&
      SignatureMethod ();

      void
      SignatureMethod (const SignatureMethod::type&);

      void
      SignatureMethod (::std::auto_ptr< SignatureMethod::type >);

      // Reference
      // 
      public:
      struct Reference
      {
        typedef ::w3::xmldsig::ReferenceType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Reference::container&
      Reference () const;

      Reference::container&
      Reference ();

      void
      Reference (const Reference::container&);

      // Id
      // 
      public:
      struct Id
      {
        typedef ::xml_schema::id type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Id::container&
      Id () const;

      Id::container&
      Id ();

      void
      Id (const Id::type&);

      void
      Id (const Id::container&);

      void
      Id (::std::auto_ptr< Id::type >);

      // Constructors.
      //
      public:
      SignedInfoType ();

      SignedInfoType (const CanonicalizationMethod::type&,
                      const SignatureMethod::type&);

      SignedInfoType (const ::xercesc::DOMElement&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      SignedInfoType (const SignedInfoType&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      virtual SignedInfoType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< CanonicalizationMethod::type > _xsd_CanonicalizationMethod_;
      ::xsd::cxx::tree::one< SignatureMethod::type > _xsd_SignatureMethod_;
      ::xsd::cxx::tree::sequence< Reference::type > _xsd_Reference_;
      ::xsd::cxx::tree::optional< Id::type > _xsd_Id_;
    };

    class CanonicalizationMethodType: public ::xml_schema::type
    {
      public:

      struct _xsd_CanonicalizationMethodType
      {
        typedef ::xml_schema::type base_;
      };

      // Algorithm
      // 
      public:
      struct Algorithm
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Algorithm::type&
      Algorithm () const;

      Algorithm::type&
      Algorithm ();

      void
      Algorithm (const Algorithm::type&);

      void
      Algorithm (::std::auto_ptr< Algorithm::type >);

      // Constructors.
      //
      public:
      CanonicalizationMethodType ();

      CanonicalizationMethodType (const Algorithm::type&);

      CanonicalizationMethodType (const ::xercesc::DOMElement&,
                                  ::xml_schema::flags = 0,
                                  ::xml_schema::type* = 0);

      CanonicalizationMethodType (const CanonicalizationMethodType&,
                                  ::xml_schema::flags = 0,
                                  ::xml_schema::type* = 0);

      virtual CanonicalizationMethodType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< Algorithm::type > _xsd_Algorithm_;
    };

    class SignatureMethodType: public ::xml_schema::type
    {
      public:

      struct _xsd_SignatureMethodType
      {
        typedef ::xml_schema::type base_;
      };

      // HMACOutputLength
      // 
      public:
      struct HMACOutputLength
      {
        typedef ::w3::xmldsig::HMACOutputLengthType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const HMACOutputLength::container&
      HMACOutputLength () const;

      HMACOutputLength::container&
      HMACOutputLength ();

      void
      HMACOutputLength (const HMACOutputLength::type&);

      void
      HMACOutputLength (const HMACOutputLength::container&);

      void
      HMACOutputLength (::std::auto_ptr< HMACOutputLength::type >);

      // Algorithm
      // 
      public:
      struct Algorithm
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Algorithm::type&
      Algorithm () const;

      Algorithm::type&
      Algorithm ();

      void
      Algorithm (const Algorithm::type&);

      void
      Algorithm (::std::auto_ptr< Algorithm::type >);

      // Constructors.
      //
      public:
      SignatureMethodType ();

      SignatureMethodType (const Algorithm::type&);

      SignatureMethodType (const ::xercesc::DOMElement&,
                           ::xml_schema::flags = 0,
                           ::xml_schema::type* = 0);

      SignatureMethodType (const SignatureMethodType&,
                           ::xml_schema::flags = 0,
                           ::xml_schema::type* = 0);

      virtual SignatureMethodType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< HMACOutputLength::type > _xsd_HMACOutputLength_;
      ::xsd::cxx::tree::one< Algorithm::type > _xsd_Algorithm_;
    };

    class ReferenceType: public ::xml_schema::type
    {
      public:

      struct _xsd_ReferenceType
      {
        typedef ::xml_schema::type base_;
      };

      // Transforms
      // 
      public:
      struct Transforms
      {
        typedef ::w3::xmldsig::TransformsType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Transforms::container&
      Transforms () const;

      Transforms::container&
      Transforms ();

      void
      Transforms (const Transforms::type&);

      void
      Transforms (const Transforms::container&);

      void
      Transforms (::std::auto_ptr< Transforms::type >);

      // DigestMethod
      // 
      public:
      struct DigestMethod
      {
        typedef ::w3::xmldsig::DigestMethodType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const DigestMethod::type&
      DigestMethod () const;

      DigestMethod::type&
      DigestMethod ();

      void
      DigestMethod (const DigestMethod::type&);

      void
      DigestMethod (::std::auto_ptr< DigestMethod::type >);

      // DigestValue
      // 
      public:
      struct DigestValue
      {
        typedef ::w3::xmldsig::DigestValueType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const DigestValue::type&
      DigestValue () const;

      DigestValue::type&
      DigestValue ();

      void
      DigestValue (const DigestValue::type&);

      void
      DigestValue (::std::auto_ptr< DigestValue::type >);

      // Id
      // 
      public:
      struct Id
      {
        typedef ::xml_schema::id type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Id::container&
      Id () const;

      Id::container&
      Id ();

      void
      Id (const Id::type&);

      void
      Id (const Id::container&);

      void
      Id (::std::auto_ptr< Id::type >);

      // URI
      // 
      public:
      struct URI
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const URI::container&
      URI () const;

      URI::container&
      URI ();

      void
      URI (const URI::type&);

      void
      URI (const URI::container&);

      void
      URI (::std::auto_ptr< URI::type >);

      // Type
      // 
      public:
      struct Type
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Type::container&
      Type () const;

      Type::container&
      Type ();

      void
      Type (const Type::type&);

      void
      Type (const Type::container&);

      void
      Type (::std::auto_ptr< Type::type >);

      // Constructors.
      //
      public:
      ReferenceType ();

      ReferenceType (const DigestMethod::type&,
                     const DigestValue::type&);

      ReferenceType (const ::xercesc::DOMElement&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      ReferenceType (const ReferenceType&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      virtual ReferenceType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< Transforms::type > _xsd_Transforms_;
      ::xsd::cxx::tree::one< DigestMethod::type > _xsd_DigestMethod_;
      ::xsd::cxx::tree::one< DigestValue::type > _xsd_DigestValue_;
      ::xsd::cxx::tree::optional< Id::type > _xsd_Id_;
      ::xsd::cxx::tree::optional< URI::type > _xsd_URI_;
      ::xsd::cxx::tree::optional< Type::type > _xsd_Type_;
    };

    class TransformsType: public ::xml_schema::type
    {
      public:

      struct _xsd_TransformsType
      {
        typedef ::xml_schema::type base_;
      };

      // Transform
      // 
      public:
      struct Transform
      {
        typedef ::w3::xmldsig::TransformType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Transform::container&
      Transform () const;

      Transform::container&
      Transform ();

      void
      Transform (const Transform::container&);

      // Constructors.
      //
      public:
      TransformsType ();

      TransformsType (const ::xercesc::DOMElement&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      TransformsType (const TransformsType&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      virtual TransformsType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< Transform::type > _xsd_Transform_;
    };

    class TransformType: public ::xml_schema::type
    {
      public:

      struct _xsd_TransformType
      {
        typedef ::xml_schema::type base_;
      };

      // XPath
      // 
      public:
      struct XPath
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const XPath::container&
      XPath () const;

      XPath::container&
      XPath ();

      void
      XPath (const XPath::container&);

      // Algorithm
      // 
      public:
      struct Algorithm
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Algorithm::type&
      Algorithm () const;

      Algorithm::type&
      Algorithm ();

      void
      Algorithm (const Algorithm::type&);

      void
      Algorithm (::std::auto_ptr< Algorithm::type >);

      // Constructors.
      //
      public:
      TransformType ();

      TransformType (const Algorithm::type&);

      TransformType (const ::xercesc::DOMElement&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      TransformType (const TransformType&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      virtual TransformType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< XPath::type > _xsd_XPath_;
      ::xsd::cxx::tree::one< Algorithm::type > _xsd_Algorithm_;
    };

    class DigestMethodType: public ::xml_schema::type
    {
      public:

      struct _xsd_DigestMethodType
      {
        typedef ::xml_schema::type base_;
      };

      // Algorithm
      // 
      public:
      struct Algorithm
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Algorithm::type&
      Algorithm () const;

      Algorithm::type&
      Algorithm ();

      void
      Algorithm (const Algorithm::type&);

      void
      Algorithm (::std::auto_ptr< Algorithm::type >);

      // Constructors.
      //
      public:
      DigestMethodType ();

      DigestMethodType (const Algorithm::type&);

      DigestMethodType (const ::xercesc::DOMElement&,
                        ::xml_schema::flags = 0,
                        ::xml_schema::type* = 0);

      DigestMethodType (const DigestMethodType&,
                        ::xml_schema::flags = 0,
                        ::xml_schema::type* = 0);

      virtual DigestMethodType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< Algorithm::type > _xsd_Algorithm_;
    };

    class DigestValueType: public ::xml_schema::base64_binary
    {
      public:

      struct _xsd_DigestValueType
      {
        typedef ::xml_schema::base64_binary base_;
      };

      // Constructors.
      //
      public:
      DigestValueType ();

      DigestValueType (const _xsd_DigestValueType::base_& );

      DigestValueType (const ::xercesc::DOMElement&,
                       ::xml_schema::flags = 0,
                       ::xml_schema::type* = 0);

      DigestValueType (const ::xercesc::DOMAttr&,
                       ::xml_schema::flags = 0,
                       ::xml_schema::type* = 0);

      DigestValueType (const ::std::basic_string< wchar_t >&,
                       const ::xercesc::DOMElement*,
                       ::xml_schema::flags = 0,
                       ::xml_schema::type* = 0);

      DigestValueType (const DigestValueType&,
                       ::xml_schema::flags = 0,
                       ::xml_schema::type* = 0);

      virtual DigestValueType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;
    };

    class KeyInfoType: public ::xml_schema::type
    {
      public:

      struct _xsd_KeyInfoType
      {
        typedef ::xml_schema::type base_;
      };

      // KeyName
      // 
      public:
      struct KeyName
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const KeyName::container&
      KeyName () const;

      KeyName::container&
      KeyName ();

      void
      KeyName (const KeyName::container&);

      // KeyValue
      // 
      public:
      struct KeyValue
      {
        typedef ::w3::xmldsig::KeyValueType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const KeyValue::container&
      KeyValue () const;

      KeyValue::container&
      KeyValue ();

      void
      KeyValue (const KeyValue::container&);

      // RetrievalMethod
      // 
      public:
      struct RetrievalMethod
      {
        typedef ::w3::xmldsig::RetrievalMethodType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const RetrievalMethod::container&
      RetrievalMethod () const;

      RetrievalMethod::container&
      RetrievalMethod ();

      void
      RetrievalMethod (const RetrievalMethod::container&);

      // X509Data
      // 
      public:
      struct X509Data
      {
        typedef ::w3::xmldsig::X509DataType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const X509Data::container&
      X509Data () const;

      X509Data::container&
      X509Data ();

      void
      X509Data (const X509Data::container&);

      // PGPData
      // 
      public:
      struct PGPData
      {
        typedef ::w3::xmldsig::PGPDataType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const PGPData::container&
      PGPData () const;

      PGPData::container&
      PGPData ();

      void
      PGPData (const PGPData::container&);

      // SPKIData
      // 
      public:
      struct SPKIData
      {
        typedef ::w3::xmldsig::SPKIDataType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const SPKIData::container&
      SPKIData () const;

      SPKIData::container&
      SPKIData ();

      void
      SPKIData (const SPKIData::container&);

      // MgmtData
      // 
      public:
      struct MgmtData
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const MgmtData::container&
      MgmtData () const;

      MgmtData::container&
      MgmtData ();

      void
      MgmtData (const MgmtData::container&);

      // Id
      // 
      public:
      struct Id
      {
        typedef ::xml_schema::id type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Id::container&
      Id () const;

      Id::container&
      Id ();

      void
      Id (const Id::type&);

      void
      Id (const Id::container&);

      void
      Id (::std::auto_ptr< Id::type >);

      // Constructors.
      //
      public:
      KeyInfoType ();

      KeyInfoType (const ::xercesc::DOMElement&,
                   ::xml_schema::flags = 0,
                   ::xml_schema::type* = 0);

      KeyInfoType (const KeyInfoType&,
                   ::xml_schema::flags = 0,
                   ::xml_schema::type* = 0);

      virtual KeyInfoType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< KeyName::type > _xsd_KeyName_;
      ::xsd::cxx::tree::sequence< KeyValue::type > _xsd_KeyValue_;
      ::xsd::cxx::tree::sequence< RetrievalMethod::type > _xsd_RetrievalMethod_;
      ::xsd::cxx::tree::sequence< X509Data::type > _xsd_X509Data_;
      ::xsd::cxx::tree::sequence< PGPData::type > _xsd_PGPData_;
      ::xsd::cxx::tree::sequence< SPKIData::type > _xsd_SPKIData_;
      ::xsd::cxx::tree::sequence< MgmtData::type > _xsd_MgmtData_;
      ::xsd::cxx::tree::optional< Id::type > _xsd_Id_;
    };

    class KeyValueType: public ::xml_schema::type
    {
      public:

      struct _xsd_KeyValueType
      {
        typedef ::xml_schema::type base_;
      };

      // DSAKeyValue
      // 
      public:
      struct DSAKeyValue
      {
        typedef ::w3::xmldsig::DSAKeyValueType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const DSAKeyValue::container&
      DSAKeyValue () const;

      DSAKeyValue::container&
      DSAKeyValue ();

      void
      DSAKeyValue (const DSAKeyValue::type&);

      void
      DSAKeyValue (const DSAKeyValue::container&);

      void
      DSAKeyValue (::std::auto_ptr< DSAKeyValue::type >);

      // RSAKeyValue
      // 
      public:
      struct RSAKeyValue
      {
        typedef ::w3::xmldsig::RSAKeyValueType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const RSAKeyValue::container&
      RSAKeyValue () const;

      RSAKeyValue::container&
      RSAKeyValue ();

      void
      RSAKeyValue (const RSAKeyValue::type&);

      void
      RSAKeyValue (const RSAKeyValue::container&);

      void
      RSAKeyValue (::std::auto_ptr< RSAKeyValue::type >);

      // Constructors.
      //
      public:
      KeyValueType ();

      KeyValueType (const ::xercesc::DOMElement&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      KeyValueType (const KeyValueType&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      virtual KeyValueType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< DSAKeyValue::type > _xsd_DSAKeyValue_;
      ::xsd::cxx::tree::optional< RSAKeyValue::type > _xsd_RSAKeyValue_;
    };

    class RetrievalMethodType: public ::xml_schema::type
    {
      public:

      struct _xsd_RetrievalMethodType
      {
        typedef ::xml_schema::type base_;
      };

      // Transforms
      // 
      public:
      struct Transforms
      {
        typedef ::w3::xmldsig::TransformsType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Transforms::container&
      Transforms () const;

      Transforms::container&
      Transforms ();

      void
      Transforms (const Transforms::type&);

      void
      Transforms (const Transforms::container&);

      void
      Transforms (::std::auto_ptr< Transforms::type >);

      // URI
      // 
      public:
      struct URI
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const URI::container&
      URI () const;

      URI::container&
      URI ();

      void
      URI (const URI::type&);

      void
      URI (const URI::container&);

      void
      URI (::std::auto_ptr< URI::type >);

      // Type
      // 
      public:
      struct Type
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Type::container&
      Type () const;

      Type::container&
      Type ();

      void
      Type (const Type::type&);

      void
      Type (const Type::container&);

      void
      Type (::std::auto_ptr< Type::type >);

      // Constructors.
      //
      public:
      RetrievalMethodType ();

      RetrievalMethodType (const ::xercesc::DOMElement&,
                           ::xml_schema::flags = 0,
                           ::xml_schema::type* = 0);

      RetrievalMethodType (const RetrievalMethodType&,
                           ::xml_schema::flags = 0,
                           ::xml_schema::type* = 0);

      virtual RetrievalMethodType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< Transforms::type > _xsd_Transforms_;
      ::xsd::cxx::tree::optional< URI::type > _xsd_URI_;
      ::xsd::cxx::tree::optional< Type::type > _xsd_Type_;
    };

    class X509DataType: public ::xml_schema::type
    {
      public:

      struct _xsd_X509DataType
      {
        typedef ::xml_schema::type base_;
      };

      // X509IssuerSerial
      // 
      public:
      struct X509IssuerSerial
      {
        typedef ::w3::xmldsig::X509IssuerSerialType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const X509IssuerSerial::container&
      X509IssuerSerial () const;

      X509IssuerSerial::container&
      X509IssuerSerial ();

      void
      X509IssuerSerial (const X509IssuerSerial::container&);

      // X509SKI
      // 
      public:
      struct X509SKI
      {
        typedef ::xml_schema::base64_binary type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const X509SKI::container&
      X509SKI () const;

      X509SKI::container&
      X509SKI ();

      void
      X509SKI (const X509SKI::container&);

      // X509SubjectName
      // 
      public:
      struct X509SubjectName
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const X509SubjectName::container&
      X509SubjectName () const;

      X509SubjectName::container&
      X509SubjectName ();

      void
      X509SubjectName (const X509SubjectName::container&);

      // X509Certificate
      // 
      public:
      struct X509Certificate
      {
        typedef ::xml_schema::base64_binary type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const X509Certificate::container&
      X509Certificate () const;

      X509Certificate::container&
      X509Certificate ();

      void
      X509Certificate (const X509Certificate::container&);

      // X509CRL
      // 
      public:
      struct X509CRL
      {
        typedef ::xml_schema::base64_binary type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const X509CRL::container&
      X509CRL () const;

      X509CRL::container&
      X509CRL ();

      void
      X509CRL (const X509CRL::container&);

      // Constructors.
      //
      public:
      X509DataType ();

      X509DataType (const ::xercesc::DOMElement&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      X509DataType (const X509DataType&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      virtual X509DataType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< X509IssuerSerial::type > _xsd_X509IssuerSerial_;
      ::xsd::cxx::tree::sequence< X509SKI::type > _xsd_X509SKI_;
      ::xsd::cxx::tree::sequence< X509SubjectName::type > _xsd_X509SubjectName_;
      ::xsd::cxx::tree::sequence< X509Certificate::type > _xsd_X509Certificate_;
      ::xsd::cxx::tree::sequence< X509CRL::type > _xsd_X509CRL_;
    };

    class X509IssuerSerialType: public ::xml_schema::type
    {
      public:

      struct _xsd_X509IssuerSerialType
      {
        typedef ::xml_schema::type base_;
      };

      // X509IssuerName
      // 
      public:
      struct X509IssuerName
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const X509IssuerName::type&
      X509IssuerName () const;

      X509IssuerName::type&
      X509IssuerName ();

      void
      X509IssuerName (const X509IssuerName::type&);

      void
      X509IssuerName (::std::auto_ptr< X509IssuerName::type >);

      // X509SerialNumber
      // 
      public:
      struct X509SerialNumber
      {
        typedef ::xml_schema::integer type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const X509SerialNumber::type&
      X509SerialNumber () const;

      X509SerialNumber::type&
      X509SerialNumber ();

      void
      X509SerialNumber (const X509SerialNumber::type&);

      // Constructors.
      //
      public:
      X509IssuerSerialType ();

      X509IssuerSerialType (const X509IssuerName::type&,
                            const X509SerialNumber::type&);

      X509IssuerSerialType (const ::xercesc::DOMElement&,
                            ::xml_schema::flags = 0,
                            ::xml_schema::type* = 0);

      X509IssuerSerialType (const X509IssuerSerialType&,
                            ::xml_schema::flags = 0,
                            ::xml_schema::type* = 0);

      virtual X509IssuerSerialType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< X509IssuerName::type > _xsd_X509IssuerName_;
      ::xsd::cxx::tree::one< X509SerialNumber::type > _xsd_X509SerialNumber_;
    };

    class PGPDataType: public ::xml_schema::type
    {
      public:

      struct _xsd_PGPDataType
      {
        typedef ::xml_schema::type base_;
      };

      // PGPKeyID
      // 
      public:
      struct PGPKeyID
      {
        typedef ::xml_schema::base64_binary type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const PGPKeyID::container&
      PGPKeyID () const;

      PGPKeyID::container&
      PGPKeyID ();

      void
      PGPKeyID (const PGPKeyID::type&);

      void
      PGPKeyID (const PGPKeyID::container&);

      void
      PGPKeyID (::std::auto_ptr< PGPKeyID::type >);

      // PGPKeyPacket
      // 
      public:
      struct PGPKeyPacket
      {
        typedef ::xml_schema::base64_binary type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const PGPKeyPacket::container&
      PGPKeyPacket () const;

      PGPKeyPacket::container&
      PGPKeyPacket ();

      void
      PGPKeyPacket (const PGPKeyPacket::type&);

      void
      PGPKeyPacket (const PGPKeyPacket::container&);

      void
      PGPKeyPacket (::std::auto_ptr< PGPKeyPacket::type >);

      // Constructors.
      //
      public:
      PGPDataType ();

      PGPDataType (const ::xercesc::DOMElement&,
                   ::xml_schema::flags = 0,
                   ::xml_schema::type* = 0);

      PGPDataType (const PGPDataType&,
                   ::xml_schema::flags = 0,
                   ::xml_schema::type* = 0);

      virtual PGPDataType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< PGPKeyID::type > _xsd_PGPKeyID_;
      ::xsd::cxx::tree::optional< PGPKeyPacket::type > _xsd_PGPKeyPacket_;
    };

    class SPKIDataType: public ::xml_schema::type
    {
      public:

      struct _xsd_SPKIDataType
      {
        typedef ::xml_schema::type base_;
      };

      // SPKISexp
      // 
      public:
      struct SPKISexp
      {
        typedef ::xml_schema::base64_binary type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const SPKISexp::container&
      SPKISexp () const;

      SPKISexp::container&
      SPKISexp ();

      void
      SPKISexp (const SPKISexp::container&);

      // Constructors.
      //
      public:
      SPKIDataType ();

      SPKIDataType (const ::xercesc::DOMElement&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      SPKIDataType (const SPKIDataType&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      virtual SPKIDataType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< SPKISexp::type > _xsd_SPKISexp_;
    };

    class ObjectType: public ::xml_schema::type
    {
      public:

      struct _xsd_ObjectType
      {
        typedef ::xml_schema::type base_;
      };

      // Id
      // 
      public:
      struct Id
      {
        typedef ::xml_schema::id type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Id::container&
      Id () const;

      Id::container&
      Id ();

      void
      Id (const Id::type&);

      void
      Id (const Id::container&);

      void
      Id (::std::auto_ptr< Id::type >);

      // MimeType
      // 
      public:
      struct MimeType
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const MimeType::container&
      MimeType () const;

      MimeType::container&
      MimeType ();

      void
      MimeType (const MimeType::type&);

      void
      MimeType (const MimeType::container&);

      void
      MimeType (::std::auto_ptr< MimeType::type >);

      // Encoding
      // 
      public:
      struct Encoding
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Encoding::container&
      Encoding () const;

      Encoding::container&
      Encoding ();

      void
      Encoding (const Encoding::type&);

      void
      Encoding (const Encoding::container&);

      void
      Encoding (::std::auto_ptr< Encoding::type >);

      // Constructors.
      //
      public:
      ObjectType ();

      ObjectType (const ::xercesc::DOMElement&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      ObjectType (const ObjectType&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      virtual ObjectType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< Id::type > _xsd_Id_;
      ::xsd::cxx::tree::optional< MimeType::type > _xsd_MimeType_;
      ::xsd::cxx::tree::optional< Encoding::type > _xsd_Encoding_;
    };

    class ManifestType: public ::xml_schema::type
    {
      public:

      struct _xsd_ManifestType
      {
        typedef ::xml_schema::type base_;
      };

      // Reference
      // 
      public:
      struct Reference
      {
        typedef ::w3::xmldsig::ReferenceType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Reference::container&
      Reference () const;

      Reference::container&
      Reference ();

      void
      Reference (const Reference::container&);

      // Id
      // 
      public:
      struct Id
      {
        typedef ::xml_schema::id type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Id::container&
      Id () const;

      Id::container&
      Id ();

      void
      Id (const Id::type&);

      void
      Id (const Id::container&);

      void
      Id (::std::auto_ptr< Id::type >);

      // Constructors.
      //
      public:
      ManifestType ();

      ManifestType (const ::xercesc::DOMElement&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      ManifestType (const ManifestType&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      virtual ManifestType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< Reference::type > _xsd_Reference_;
      ::xsd::cxx::tree::optional< Id::type > _xsd_Id_;
    };

    class SignaturePropertiesType: public ::xml_schema::type
    {
      public:

      struct _xsd_SignaturePropertiesType
      {
        typedef ::xml_schema::type base_;
      };

      // SignatureProperty
      // 
      public:
      struct SignatureProperty
      {
        typedef ::w3::xmldsig::SignaturePropertyType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const SignatureProperty::container&
      SignatureProperty () const;

      SignatureProperty::container&
      SignatureProperty ();

      void
      SignatureProperty (const SignatureProperty::container&);

      // Id
      // 
      public:
      struct Id
      {
        typedef ::xml_schema::id type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Id::container&
      Id () const;

      Id::container&
      Id ();

      void
      Id (const Id::type&);

      void
      Id (const Id::container&);

      void
      Id (::std::auto_ptr< Id::type >);

      // Constructors.
      //
      public:
      SignaturePropertiesType ();

      SignaturePropertiesType (const ::xercesc::DOMElement&,
                               ::xml_schema::flags = 0,
                               ::xml_schema::type* = 0);

      SignaturePropertiesType (const SignaturePropertiesType&,
                               ::xml_schema::flags = 0,
                               ::xml_schema::type* = 0);

      virtual SignaturePropertiesType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< SignatureProperty::type > _xsd_SignatureProperty_;
      ::xsd::cxx::tree::optional< Id::type > _xsd_Id_;
    };

    class SignaturePropertyType: public ::xml_schema::type
    {
      public:

      struct _xsd_SignaturePropertyType
      {
        typedef ::xml_schema::type base_;
      };

      // Target
      // 
      public:
      struct Target
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Target::type&
      Target () const;

      Target::type&
      Target ();

      void
      Target (const Target::type&);

      void
      Target (::std::auto_ptr< Target::type >);

      // Id
      // 
      public:
      struct Id
      {
        typedef ::xml_schema::id type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Id::container&
      Id () const;

      Id::container&
      Id ();

      void
      Id (const Id::type&);

      void
      Id (const Id::container&);

      void
      Id (::std::auto_ptr< Id::type >);

      // Constructors.
      //
      public:
      SignaturePropertyType ();

      SignaturePropertyType (const Target::type&);

      SignaturePropertyType (const ::xercesc::DOMElement&,
                             ::xml_schema::flags = 0,
                             ::xml_schema::type* = 0);

      SignaturePropertyType (const SignaturePropertyType&,
                             ::xml_schema::flags = 0,
                             ::xml_schema::type* = 0);

      virtual SignaturePropertyType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< Target::type > _xsd_Target_;
      ::xsd::cxx::tree::optional< Id::type > _xsd_Id_;
    };

    class HMACOutputLengthType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type >
    {
      public:

      struct _xsd_HMACOutputLengthType
      {
        typedef ::xml_schema::integer base_;
      };

      // Constructors.
      //
      public:
      HMACOutputLengthType ();

      HMACOutputLengthType (const _xsd_HMACOutputLengthType::base_& );

      HMACOutputLengthType (const ::xercesc::DOMElement&,
                            ::xml_schema::flags = 0,
                            ::xml_schema::type* = 0);

      HMACOutputLengthType (const ::xercesc::DOMAttr&,
                            ::xml_schema::flags = 0,
                            ::xml_schema::type* = 0);

      HMACOutputLengthType (const ::std::basic_string< wchar_t >&,
                            const ::xercesc::DOMElement*,
                            ::xml_schema::flags = 0,
                            ::xml_schema::type* = 0);

      HMACOutputLengthType (const HMACOutputLengthType&,
                            ::xml_schema::flags = 0,
                            ::xml_schema::type* = 0);

      virtual HMACOutputLengthType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;
    };

    class DSAKeyValueType: public ::xml_schema::type
    {
      public:

      struct _xsd_DSAKeyValueType
      {
        typedef ::xml_schema::type base_;
      };

      // P
      // 
      public:
      struct P
      {
        typedef ::w3::xmldsig::CryptoBinary type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const P::container&
      P () const;

      P::container&
      P ();

      void
      P (const P::type&);

      void
      P (const P::container&);

      void
      P (::std::auto_ptr< P::type >);

      // Q
      // 
      public:
      struct Q
      {
        typedef ::w3::xmldsig::CryptoBinary type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Q::container&
      Q () const;

      Q::container&
      Q ();

      void
      Q (const Q::type&);

      void
      Q (const Q::container&);

      void
      Q (::std::auto_ptr< Q::type >);

      // G
      // 
      public:
      struct G
      {
        typedef ::w3::xmldsig::CryptoBinary type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const G::container&
      G () const;

      G::container&
      G ();

      void
      G (const G::type&);

      void
      G (const G::container&);

      void
      G (::std::auto_ptr< G::type >);

      // Y
      // 
      public:
      struct Y
      {
        typedef ::w3::xmldsig::CryptoBinary type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Y::type&
      Y () const;

      Y::type&
      Y ();

      void
      Y (const Y::type&);

      void
      Y (::std::auto_ptr< Y::type >);

      // J
      // 
      public:
      struct J
      {
        typedef ::w3::xmldsig::CryptoBinary type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const J::container&
      J () const;

      J::container&
      J ();

      void
      J (const J::type&);

      void
      J (const J::container&);

      void
      J (::std::auto_ptr< J::type >);

      // Seed
      // 
      public:
      struct Seed
      {
        typedef ::w3::xmldsig::CryptoBinary type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Seed::container&
      Seed () const;

      Seed::container&
      Seed ();

      void
      Seed (const Seed::type&);

      void
      Seed (const Seed::container&);

      void
      Seed (::std::auto_ptr< Seed::type >);

      // PgenCounter
      // 
      public:
      struct PgenCounter
      {
        typedef ::w3::xmldsig::CryptoBinary type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const PgenCounter::container&
      PgenCounter () const;

      PgenCounter::container&
      PgenCounter ();

      void
      PgenCounter (const PgenCounter::type&);

      void
      PgenCounter (const PgenCounter::container&);

      void
      PgenCounter (::std::auto_ptr< PgenCounter::type >);

      // Constructors.
      //
      public:
      DSAKeyValueType ();

      DSAKeyValueType (const Y::type&);

      DSAKeyValueType (const ::xercesc::DOMElement&,
                       ::xml_schema::flags = 0,
                       ::xml_schema::type* = 0);

      DSAKeyValueType (const DSAKeyValueType&,
                       ::xml_schema::flags = 0,
                       ::xml_schema::type* = 0);

      virtual DSAKeyValueType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< P::type > _xsd_P_;
      ::xsd::cxx::tree::optional< Q::type > _xsd_Q_;
      ::xsd::cxx::tree::optional< G::type > _xsd_G_;
      ::xsd::cxx::tree::one< Y::type > _xsd_Y_;
      ::xsd::cxx::tree::optional< J::type > _xsd_J_;
      ::xsd::cxx::tree::optional< Seed::type > _xsd_Seed_;
      ::xsd::cxx::tree::optional< PgenCounter::type > _xsd_PgenCounter_;
    };

    class RSAKeyValueType: public ::xml_schema::type
    {
      public:

      struct _xsd_RSAKeyValueType
      {
        typedef ::xml_schema::type base_;
      };

      // Modulus
      // 
      public:
      struct Modulus
      {
        typedef ::w3::xmldsig::CryptoBinary type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Modulus::type&
      Modulus () const;

      Modulus::type&
      Modulus ();

      void
      Modulus (const Modulus::type&);

      void
      Modulus (::std::auto_ptr< Modulus::type >);

      // Exponent
      // 
      public:
      struct Exponent
      {
        typedef ::w3::xmldsig::CryptoBinary type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Exponent::type&
      Exponent () const;

      Exponent::type&
      Exponent ();

      void
      Exponent (const Exponent::type&);

      void
      Exponent (::std::auto_ptr< Exponent::type >);

      // Constructors.
      //
      public:
      RSAKeyValueType ();

      RSAKeyValueType (const Modulus::type&,
                       const Exponent::type&);

      RSAKeyValueType (const ::xercesc::DOMElement&,
                       ::xml_schema::flags = 0,
                       ::xml_schema::type* = 0);

      RSAKeyValueType (const RSAKeyValueType&,
                       ::xml_schema::flags = 0,
                       ::xml_schema::type* = 0);

      virtual RSAKeyValueType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< Modulus::type > _xsd_Modulus_;
      ::xsd::cxx::tree::one< Exponent::type > _xsd_Exponent_;
    };
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMInputSource.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace w3
{
  namespace xmldsig
  {
    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (const ::std::basic_string< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (const ::std::basic_string< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (const ::std::basic_string< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (::std::istream&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (::std::istream&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (::std::istream&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (const ::xercesc::DOMInputSource&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (const ::xercesc::DOMInputSource&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (const ::xercesc::DOMInputSource&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (const ::xercesc::DOMDocument&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (const ::std::basic_string< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (const ::std::basic_string< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (const ::std::basic_string< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (::std::istream&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (::std::istream&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (::std::istream&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (const ::xercesc::DOMInputSource&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (const ::xercesc::DOMInputSource&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (const ::xercesc::DOMInputSource&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (const ::xercesc::DOMDocument&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (const ::std::basic_string< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (const ::std::basic_string< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (const ::std::basic_string< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (::std::istream&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (::std::istream&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (::std::istream&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (const ::xercesc::DOMInputSource&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (const ::xercesc::DOMInputSource&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (const ::xercesc::DOMInputSource&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (const ::xercesc::DOMDocument&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (const ::std::basic_string< wchar_t >&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (const ::std::basic_string< wchar_t >&,
                            ::xsd::cxx::xml::error_handler< wchar_t >&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (const ::std::basic_string< wchar_t >&,
                            ::xercesc::DOMErrorHandler&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (::std::istream&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (::std::istream&,
                            ::xsd::cxx::xml::error_handler< wchar_t >&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (::std::istream&,
                            ::xercesc::DOMErrorHandler&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (::std::istream&,
                            const ::std::basic_string< wchar_t >& id,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (::std::istream&,
                            const ::std::basic_string< wchar_t >& id,
                            ::xsd::cxx::xml::error_handler< wchar_t >&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (::std::istream&,
                            const ::std::basic_string< wchar_t >& id,
                            ::xercesc::DOMErrorHandler&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (const ::xercesc::DOMInputSource&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (const ::xercesc::DOMInputSource&,
                            ::xsd::cxx::xml::error_handler< wchar_t >&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (const ::xercesc::DOMInputSource&,
                            ::xercesc::DOMErrorHandler&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (const ::xercesc::DOMDocument&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (const ::std::basic_string< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (const ::std::basic_string< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (const ::std::basic_string< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (::std::istream&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (::std::istream&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (::std::istream&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (const ::xercesc::DOMInputSource&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (const ::xercesc::DOMInputSource&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (const ::xercesc::DOMInputSource&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (const ::xercesc::DOMDocument&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (const ::std::basic_string< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (const ::std::basic_string< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (const ::std::basic_string< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (::std::istream&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (::std::istream&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (::std::istream&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (const ::xercesc::DOMInputSource&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (const ::xercesc::DOMInputSource&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (const ::xercesc::DOMInputSource&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (const ::xercesc::DOMDocument&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (const ::std::basic_string< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (const ::std::basic_string< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (const ::std::basic_string< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (::std::istream&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (::std::istream&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (::std::istream&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (const ::xercesc::DOMInputSource&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (const ::xercesc::DOMInputSource&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (const ::xercesc::DOMInputSource&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (const ::xercesc::DOMDocument&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (const ::std::basic_string< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (const ::std::basic_string< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (const ::std::basic_string< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (::std::istream&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (::std::istream&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (::std::istream&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (const ::xercesc::DOMInputSource&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (const ::xercesc::DOMInputSource&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (const ::xercesc::DOMInputSource&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (const ::xercesc::DOMDocument&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (const ::std::basic_string< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (const ::std::basic_string< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (const ::std::basic_string< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (::std::istream&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (::std::istream&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (::std::istream&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (const ::xercesc::DOMInputSource&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (const ::xercesc::DOMInputSource&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (const ::xercesc::DOMInputSource&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (const ::xercesc::DOMDocument&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (const ::std::basic_string< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (const ::std::basic_string< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (const ::std::basic_string< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (::std::istream&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (::std::istream&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (::std::istream&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (const ::xercesc::DOMInputSource&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (const ::xercesc::DOMInputSource&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (const ::xercesc::DOMInputSource&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (const ::xercesc::DOMDocument&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (const ::std::basic_string< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (const ::std::basic_string< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (const ::std::basic_string< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (::std::istream&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (::std::istream&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (::std::istream&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (const ::xercesc::DOMInputSource&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (const ::xercesc::DOMInputSource&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (const ::xercesc::DOMInputSource&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (const ::xercesc::DOMDocument&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (const ::std::basic_string< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (const ::std::basic_string< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (const ::std::basic_string< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (::std::istream&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (::std::istream&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (::std::istream&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::string >
    KeyName (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (const ::xercesc::DOMInputSource&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (const ::xercesc::DOMInputSource&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (const ::xercesc::DOMInputSource&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (const ::xercesc::DOMDocument&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (const ::std::basic_string< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (const ::std::basic_string< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (const ::std::basic_string< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (::std::istream&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (::std::istream&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (::std::istream&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (const ::xercesc::DOMInputSource&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (const ::xercesc::DOMInputSource&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (const ::xercesc::DOMInputSource&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (const ::xercesc::DOMDocument&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (const ::std::basic_string< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (const ::std::basic_string< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (const ::std::basic_string< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (::std::istream&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (::std::istream&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (::std::istream&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (const ::xercesc::DOMInputSource&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (const ::xercesc::DOMInputSource&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (const ::xercesc::DOMInputSource&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (const ::xercesc::DOMDocument&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (const ::std::basic_string< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (const ::std::basic_string< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (const ::std::basic_string< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (::std::istream&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (::std::istream&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (::std::istream&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (const ::xercesc::DOMInputSource&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (const ::xercesc::DOMInputSource&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (const ::xercesc::DOMInputSource&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (const ::xercesc::DOMDocument&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (const ::std::basic_string< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (const ::std::basic_string< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (const ::std::basic_string< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (::std::istream&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (::std::istream&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (::std::istream&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (const ::xercesc::DOMInputSource&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (const ::xercesc::DOMInputSource&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (const ::xercesc::DOMInputSource&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (const ::xercesc::DOMDocument&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (const ::std::basic_string< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (const ::std::basic_string< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (const ::std::basic_string< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (::std::istream&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (::std::istream&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (::std::istream&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (const ::xercesc::DOMInputSource&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (const ::xercesc::DOMInputSource&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (const ::xercesc::DOMInputSource&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (const ::xercesc::DOMDocument&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (const ::std::basic_string< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (const ::std::basic_string< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (const ::std::basic_string< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (::std::istream&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (::std::istream&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (::std::istream&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (const ::xercesc::DOMInputSource&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (const ::xercesc::DOMInputSource&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (const ::xercesc::DOMInputSource&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (const ::xercesc::DOMDocument&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (const ::std::basic_string< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (const ::std::basic_string< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (const ::std::basic_string< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (::std::istream&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (::std::istream&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (::std::istream&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (const ::xercesc::DOMInputSource&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (const ::xercesc::DOMInputSource&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (const ::xercesc::DOMInputSource&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (const ::xercesc::DOMDocument&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (const ::std::basic_string< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (const ::std::basic_string< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (const ::std::basic_string< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (::std::istream&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (::std::istream&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (::std::istream&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (const ::xercesc::DOMInputSource&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (const ::xercesc::DOMInputSource&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (const ::xercesc::DOMInputSource&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (const ::xercesc::DOMDocument&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (const ::std::basic_string< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (const ::std::basic_string< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (const ::std::basic_string< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (::std::istream&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (::std::istream&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (::std::istream&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (const ::xercesc::DOMInputSource&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (const ::xercesc::DOMInputSource&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (const ::xercesc::DOMInputSource&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (const ::xercesc::DOMDocument&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (const ::std::basic_string< wchar_t >&,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (const ::std::basic_string< wchar_t >&,
                       ::xsd::cxx::xml::error_handler< wchar_t >&,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (const ::std::basic_string< wchar_t >&,
                       ::xercesc::DOMErrorHandler&,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (::std::istream&,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (::std::istream&,
                       ::xsd::cxx::xml::error_handler< wchar_t >&,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (::std::istream&,
                       ::xercesc::DOMErrorHandler&,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (::std::istream&,
                       const ::std::basic_string< wchar_t >& id,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (::std::istream&,
                       const ::std::basic_string< wchar_t >& id,
                       ::xsd::cxx::xml::error_handler< wchar_t >&,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (::std::istream&,
                       const ::std::basic_string< wchar_t >& id,
                       ::xercesc::DOMErrorHandler&,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (const ::xercesc::DOMInputSource&,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (const ::xercesc::DOMInputSource&,
                       ::xsd::cxx::xml::error_handler< wchar_t >&,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (const ::xercesc::DOMInputSource&,
                       ::xercesc::DOMErrorHandler&,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (const ::xercesc::DOMDocument&,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (const ::std::basic_string< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (const ::std::basic_string< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (const ::std::basic_string< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (::std::istream&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (::std::istream&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (::std::istream&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (const ::xercesc::DOMInputSource&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (const ::xercesc::DOMInputSource&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (const ::xercesc::DOMInputSource&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (const ::xercesc::DOMDocument&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (const ::std::basic_string< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (const ::std::basic_string< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (const ::std::basic_string< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (::std::istream&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (::std::istream&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (::std::istream&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (const ::xercesc::DOMInputSource&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (const ::xercesc::DOMInputSource&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (const ::xercesc::DOMInputSource&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (const ::xercesc::DOMDocument&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());
  }
}

#include <iosfwd> // std::ostream&

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace w3
{
  namespace xmldsig
  {
    void
    operator<< (::xercesc::DOMElement&,
                const CryptoBinary&);

    void
    operator<< (::xercesc::DOMAttr&,
                const CryptoBinary&);

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                const CryptoBinary&);

    // Serialize to an existing DOM instance.
    //
    void
    Signature (::xercesc::DOMDocument&,
               const ::w3::xmldsig::SignatureType&,
               ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Signature (const ::w3::xmldsig::SignatureType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Signature (::xercesc::XMLFormatTarget&,
               const ::w3::xmldsig::SignatureType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    Signature (::xercesc::XMLFormatTarget&,
               const ::w3::xmldsig::SignatureType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    Signature (::xercesc::XMLFormatTarget&,
               const ::w3::xmldsig::SignatureType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Signature (::std::ostream&,
               const ::w3::xmldsig::SignatureType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    Signature (::std::ostream&,
               const ::w3::xmldsig::SignatureType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    Signature (::std::ostream&,
               const ::w3::xmldsig::SignatureType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const SignatureType&);

    // Serialize to an existing DOM instance.
    //
    void
    SignatureValue (::xercesc::DOMDocument&,
                    const ::w3::xmldsig::SignatureValueType&,
                    ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SignatureValue (const ::w3::xmldsig::SignatureValueType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    SignatureValue (::xercesc::XMLFormatTarget&,
                    const ::w3::xmldsig::SignatureValueType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    SignatureValue (::xercesc::XMLFormatTarget&,
                    const ::w3::xmldsig::SignatureValueType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);

    void
    SignatureValue (::xercesc::XMLFormatTarget&,
                    const ::w3::xmldsig::SignatureValueType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    SignatureValue (::std::ostream&,
                    const ::w3::xmldsig::SignatureValueType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    SignatureValue (::std::ostream&,
                    const ::w3::xmldsig::SignatureValueType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);

    void
    SignatureValue (::std::ostream&,
                    const ::w3::xmldsig::SignatureValueType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const SignatureValueType&);

    // Serialize to an existing DOM instance.
    //
    void
    SignedInfo (::xercesc::DOMDocument&,
                const ::w3::xmldsig::SignedInfoType&,
                ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SignedInfo (const ::w3::xmldsig::SignedInfoType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    SignedInfo (::xercesc::XMLFormatTarget&,
                const ::w3::xmldsig::SignedInfoType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    SignedInfo (::xercesc::XMLFormatTarget&,
                const ::w3::xmldsig::SignedInfoType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);

    void
    SignedInfo (::xercesc::XMLFormatTarget&,
                const ::w3::xmldsig::SignedInfoType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    SignedInfo (::std::ostream&,
                const ::w3::xmldsig::SignedInfoType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    SignedInfo (::std::ostream&,
                const ::w3::xmldsig::SignedInfoType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);

    void
    SignedInfo (::std::ostream&,
                const ::w3::xmldsig::SignedInfoType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const SignedInfoType&);

    // Serialize to an existing DOM instance.
    //
    void
    CanonicalizationMethod (::xercesc::DOMDocument&,
                            const ::w3::xmldsig::CanonicalizationMethodType&,
                            ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    CanonicalizationMethod (const ::w3::xmldsig::CanonicalizationMethodType&, 
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                            ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    CanonicalizationMethod (::xercesc::XMLFormatTarget&,
                            const ::w3::xmldsig::CanonicalizationMethodType&, 
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                            const ::std::basic_string< wchar_t >& = L"UTF-8",
                            ::xml_schema::flags = 0);


    void
    CanonicalizationMethod (::xercesc::XMLFormatTarget&,
                            const ::w3::xmldsig::CanonicalizationMethodType&, 
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                            ::xsd::cxx::xml::error_handler< wchar_t >&,
                            const ::std::basic_string< wchar_t >& = L"UTF-8",
                            ::xml_schema::flags = 0);

    void
    CanonicalizationMethod (::xercesc::XMLFormatTarget&,
                            const ::w3::xmldsig::CanonicalizationMethodType&, 
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                            ::xercesc::DOMErrorHandler&,
                            const ::std::basic_string< wchar_t >& = L"UTF-8",
                            ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    CanonicalizationMethod (::std::ostream&,
                            const ::w3::xmldsig::CanonicalizationMethodType&, 
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                            const ::std::basic_string< wchar_t >& = L"UTF-8",
                            ::xml_schema::flags = 0);


    void
    CanonicalizationMethod (::std::ostream&,
                            const ::w3::xmldsig::CanonicalizationMethodType&, 
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                            ::xsd::cxx::xml::error_handler< wchar_t >&,
                            const ::std::basic_string< wchar_t >& = L"UTF-8",
                            ::xml_schema::flags = 0);

    void
    CanonicalizationMethod (::std::ostream&,
                            const ::w3::xmldsig::CanonicalizationMethodType&, 
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                            ::xercesc::DOMErrorHandler&,
                            const ::std::basic_string< wchar_t >& = L"UTF-8",
                            ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const CanonicalizationMethodType&);

    // Serialize to an existing DOM instance.
    //
    void
    SignatureMethod (::xercesc::DOMDocument&,
                     const ::w3::xmldsig::SignatureMethodType&,
                     ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SignatureMethod (const ::w3::xmldsig::SignatureMethodType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    SignatureMethod (::xercesc::XMLFormatTarget&,
                     const ::w3::xmldsig::SignatureMethodType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    SignatureMethod (::xercesc::XMLFormatTarget&,
                     const ::w3::xmldsig::SignatureMethodType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);

    void
    SignatureMethod (::xercesc::XMLFormatTarget&,
                     const ::w3::xmldsig::SignatureMethodType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    SignatureMethod (::std::ostream&,
                     const ::w3::xmldsig::SignatureMethodType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    SignatureMethod (::std::ostream&,
                     const ::w3::xmldsig::SignatureMethodType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);

    void
    SignatureMethod (::std::ostream&,
                     const ::w3::xmldsig::SignatureMethodType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const SignatureMethodType&);

    // Serialize to an existing DOM instance.
    //
    void
    Reference (::xercesc::DOMDocument&,
               const ::w3::xmldsig::ReferenceType&,
               ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Reference (const ::w3::xmldsig::ReferenceType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Reference (::xercesc::XMLFormatTarget&,
               const ::w3::xmldsig::ReferenceType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    Reference (::xercesc::XMLFormatTarget&,
               const ::w3::xmldsig::ReferenceType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    Reference (::xercesc::XMLFormatTarget&,
               const ::w3::xmldsig::ReferenceType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Reference (::std::ostream&,
               const ::w3::xmldsig::ReferenceType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    Reference (::std::ostream&,
               const ::w3::xmldsig::ReferenceType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    Reference (::std::ostream&,
               const ::w3::xmldsig::ReferenceType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ReferenceType&);

    // Serialize to an existing DOM instance.
    //
    void
    Transforms (::xercesc::DOMDocument&,
                const ::w3::xmldsig::TransformsType&,
                ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Transforms (const ::w3::xmldsig::TransformsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Transforms (::xercesc::XMLFormatTarget&,
                const ::w3::xmldsig::TransformsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    Transforms (::xercesc::XMLFormatTarget&,
                const ::w3::xmldsig::TransformsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);

    void
    Transforms (::xercesc::XMLFormatTarget&,
                const ::w3::xmldsig::TransformsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Transforms (::std::ostream&,
                const ::w3::xmldsig::TransformsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    Transforms (::std::ostream&,
                const ::w3::xmldsig::TransformsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);

    void
    Transforms (::std::ostream&,
                const ::w3::xmldsig::TransformsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const TransformsType&);

    // Serialize to an existing DOM instance.
    //
    void
    Transform (::xercesc::DOMDocument&,
               const ::w3::xmldsig::TransformType&,
               ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Transform (const ::w3::xmldsig::TransformType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Transform (::xercesc::XMLFormatTarget&,
               const ::w3::xmldsig::TransformType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    Transform (::xercesc::XMLFormatTarget&,
               const ::w3::xmldsig::TransformType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    Transform (::xercesc::XMLFormatTarget&,
               const ::w3::xmldsig::TransformType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Transform (::std::ostream&,
               const ::w3::xmldsig::TransformType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    Transform (::std::ostream&,
               const ::w3::xmldsig::TransformType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    Transform (::std::ostream&,
               const ::w3::xmldsig::TransformType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const TransformType&);

    // Serialize to an existing DOM instance.
    //
    void
    DigestMethod (::xercesc::DOMDocument&,
                  const ::w3::xmldsig::DigestMethodType&,
                  ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    DigestMethod (const ::w3::xmldsig::DigestMethodType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    DigestMethod (::xercesc::XMLFormatTarget&,
                  const ::w3::xmldsig::DigestMethodType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    DigestMethod (::xercesc::XMLFormatTarget&,
                  const ::w3::xmldsig::DigestMethodType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);

    void
    DigestMethod (::xercesc::XMLFormatTarget&,
                  const ::w3::xmldsig::DigestMethodType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    DigestMethod (::std::ostream&,
                  const ::w3::xmldsig::DigestMethodType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    DigestMethod (::std::ostream&,
                  const ::w3::xmldsig::DigestMethodType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);

    void
    DigestMethod (::std::ostream&,
                  const ::w3::xmldsig::DigestMethodType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const DigestMethodType&);

    // Serialize to an existing DOM instance.
    //
    void
    DigestValue (::xercesc::DOMDocument&,
                 const ::w3::xmldsig::DigestValueType&,
                 ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    DigestValue (const ::w3::xmldsig::DigestValueType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    DigestValue (::xercesc::XMLFormatTarget&,
                 const ::w3::xmldsig::DigestValueType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    DigestValue (::xercesc::XMLFormatTarget&,
                 const ::w3::xmldsig::DigestValueType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);

    void
    DigestValue (::xercesc::XMLFormatTarget&,
                 const ::w3::xmldsig::DigestValueType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    DigestValue (::std::ostream&,
                 const ::w3::xmldsig::DigestValueType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    DigestValue (::std::ostream&,
                 const ::w3::xmldsig::DigestValueType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);

    void
    DigestValue (::std::ostream&,
                 const ::w3::xmldsig::DigestValueType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const DigestValueType&);

    void
    operator<< (::xercesc::DOMAttr&,
                const DigestValueType&);

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                const DigestValueType&);

    // Serialize to an existing DOM instance.
    //
    void
    KeyInfo (::xercesc::DOMDocument&,
             const ::w3::xmldsig::KeyInfoType&,
             ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    KeyInfo (const ::w3::xmldsig::KeyInfoType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    KeyInfo (::xercesc::XMLFormatTarget&,
             const ::w3::xmldsig::KeyInfoType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    KeyInfo (::xercesc::XMLFormatTarget&,
             const ::w3::xmldsig::KeyInfoType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);

    void
    KeyInfo (::xercesc::XMLFormatTarget&,
             const ::w3::xmldsig::KeyInfoType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    KeyInfo (::std::ostream&,
             const ::w3::xmldsig::KeyInfoType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    KeyInfo (::std::ostream&,
             const ::w3::xmldsig::KeyInfoType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);

    void
    KeyInfo (::std::ostream&,
             const ::w3::xmldsig::KeyInfoType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const KeyInfoType&);

    // Serialize to an existing DOM instance.
    //
    void
    KeyName (::xercesc::DOMDocument&,
             const ::xml_schema::string&,
             ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    KeyName (const ::xml_schema::string&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    KeyName (::xercesc::XMLFormatTarget&,
             const ::xml_schema::string&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    KeyName (::xercesc::XMLFormatTarget&,
             const ::xml_schema::string&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);

    void
    KeyName (::xercesc::XMLFormatTarget&,
             const ::xml_schema::string&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    KeyName (::std::ostream&,
             const ::xml_schema::string&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    KeyName (::std::ostream&,
             const ::xml_schema::string&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);

    void
    KeyName (::std::ostream&,
             const ::xml_schema::string&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    MgmtData (::xercesc::DOMDocument&,
              const ::xml_schema::string&,
              ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    MgmtData (const ::xml_schema::string&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    MgmtData (::xercesc::XMLFormatTarget&,
              const ::xml_schema::string&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    MgmtData (::xercesc::XMLFormatTarget&,
              const ::xml_schema::string&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    MgmtData (::xercesc::XMLFormatTarget&,
              const ::xml_schema::string&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    MgmtData (::std::ostream&,
              const ::xml_schema::string&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    MgmtData (::std::ostream&,
              const ::xml_schema::string&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    MgmtData (::std::ostream&,
              const ::xml_schema::string&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    KeyValue (::xercesc::DOMDocument&,
              const ::w3::xmldsig::KeyValueType&,
              ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    KeyValue (const ::w3::xmldsig::KeyValueType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    KeyValue (::xercesc::XMLFormatTarget&,
              const ::w3::xmldsig::KeyValueType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    KeyValue (::xercesc::XMLFormatTarget&,
              const ::w3::xmldsig::KeyValueType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    KeyValue (::xercesc::XMLFormatTarget&,
              const ::w3::xmldsig::KeyValueType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    KeyValue (::std::ostream&,
              const ::w3::xmldsig::KeyValueType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    KeyValue (::std::ostream&,
              const ::w3::xmldsig::KeyValueType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    KeyValue (::std::ostream&,
              const ::w3::xmldsig::KeyValueType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const KeyValueType&);

    // Serialize to an existing DOM instance.
    //
    void
    RetrievalMethod (::xercesc::DOMDocument&,
                     const ::w3::xmldsig::RetrievalMethodType&,
                     ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    RetrievalMethod (const ::w3::xmldsig::RetrievalMethodType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    RetrievalMethod (::xercesc::XMLFormatTarget&,
                     const ::w3::xmldsig::RetrievalMethodType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    RetrievalMethod (::xercesc::XMLFormatTarget&,
                     const ::w3::xmldsig::RetrievalMethodType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);

    void
    RetrievalMethod (::xercesc::XMLFormatTarget&,
                     const ::w3::xmldsig::RetrievalMethodType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    RetrievalMethod (::std::ostream&,
                     const ::w3::xmldsig::RetrievalMethodType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    RetrievalMethod (::std::ostream&,
                     const ::w3::xmldsig::RetrievalMethodType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);

    void
    RetrievalMethod (::std::ostream&,
                     const ::w3::xmldsig::RetrievalMethodType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const RetrievalMethodType&);

    // Serialize to an existing DOM instance.
    //
    void
    X509Data (::xercesc::DOMDocument&,
              const ::w3::xmldsig::X509DataType&,
              ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    X509Data (const ::w3::xmldsig::X509DataType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    X509Data (::xercesc::XMLFormatTarget&,
              const ::w3::xmldsig::X509DataType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    X509Data (::xercesc::XMLFormatTarget&,
              const ::w3::xmldsig::X509DataType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    X509Data (::xercesc::XMLFormatTarget&,
              const ::w3::xmldsig::X509DataType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    X509Data (::std::ostream&,
              const ::w3::xmldsig::X509DataType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    X509Data (::std::ostream&,
              const ::w3::xmldsig::X509DataType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    X509Data (::std::ostream&,
              const ::w3::xmldsig::X509DataType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const X509DataType&);

    void
    operator<< (::xercesc::DOMElement&,
                const X509IssuerSerialType&);

    // Serialize to an existing DOM instance.
    //
    void
    PGPData (::xercesc::DOMDocument&,
             const ::w3::xmldsig::PGPDataType&,
             ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    PGPData (const ::w3::xmldsig::PGPDataType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    PGPData (::xercesc::XMLFormatTarget&,
             const ::w3::xmldsig::PGPDataType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    PGPData (::xercesc::XMLFormatTarget&,
             const ::w3::xmldsig::PGPDataType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);

    void
    PGPData (::xercesc::XMLFormatTarget&,
             const ::w3::xmldsig::PGPDataType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    PGPData (::std::ostream&,
             const ::w3::xmldsig::PGPDataType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    PGPData (::std::ostream&,
             const ::w3::xmldsig::PGPDataType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);

    void
    PGPData (::std::ostream&,
             const ::w3::xmldsig::PGPDataType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const PGPDataType&);

    // Serialize to an existing DOM instance.
    //
    void
    SPKIData (::xercesc::DOMDocument&,
              const ::w3::xmldsig::SPKIDataType&,
              ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SPKIData (const ::w3::xmldsig::SPKIDataType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    SPKIData (::xercesc::XMLFormatTarget&,
              const ::w3::xmldsig::SPKIDataType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    SPKIData (::xercesc::XMLFormatTarget&,
              const ::w3::xmldsig::SPKIDataType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    SPKIData (::xercesc::XMLFormatTarget&,
              const ::w3::xmldsig::SPKIDataType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    SPKIData (::std::ostream&,
              const ::w3::xmldsig::SPKIDataType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    SPKIData (::std::ostream&,
              const ::w3::xmldsig::SPKIDataType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    SPKIData (::std::ostream&,
              const ::w3::xmldsig::SPKIDataType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const SPKIDataType&);

    // Serialize to an existing DOM instance.
    //
    void
    Object (::xercesc::DOMDocument&,
            const ::w3::xmldsig::ObjectType&,
            ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Object (const ::w3::xmldsig::ObjectType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Object (::xercesc::XMLFormatTarget&,
            const ::w3::xmldsig::ObjectType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    Object (::xercesc::XMLFormatTarget&,
            const ::w3::xmldsig::ObjectType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    Object (::xercesc::XMLFormatTarget&,
            const ::w3::xmldsig::ObjectType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Object (::std::ostream&,
            const ::w3::xmldsig::ObjectType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    Object (::std::ostream&,
            const ::w3::xmldsig::ObjectType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    Object (::std::ostream&,
            const ::w3::xmldsig::ObjectType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ObjectType&);

    // Serialize to an existing DOM instance.
    //
    void
    Manifest (::xercesc::DOMDocument&,
              const ::w3::xmldsig::ManifestType&,
              ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Manifest (const ::w3::xmldsig::ManifestType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Manifest (::xercesc::XMLFormatTarget&,
              const ::w3::xmldsig::ManifestType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    Manifest (::xercesc::XMLFormatTarget&,
              const ::w3::xmldsig::ManifestType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    Manifest (::xercesc::XMLFormatTarget&,
              const ::w3::xmldsig::ManifestType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Manifest (::std::ostream&,
              const ::w3::xmldsig::ManifestType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    Manifest (::std::ostream&,
              const ::w3::xmldsig::ManifestType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    Manifest (::std::ostream&,
              const ::w3::xmldsig::ManifestType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ManifestType&);

    // Serialize to an existing DOM instance.
    //
    void
    SignatureProperties (::xercesc::DOMDocument&,
                         const ::w3::xmldsig::SignaturePropertiesType&,
                         ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SignatureProperties (const ::w3::xmldsig::SignaturePropertiesType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    SignatureProperties (::xercesc::XMLFormatTarget&,
                         const ::w3::xmldsig::SignaturePropertiesType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    void
    SignatureProperties (::xercesc::XMLFormatTarget&,
                         const ::w3::xmldsig::SignaturePropertiesType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);

    void
    SignatureProperties (::xercesc::XMLFormatTarget&,
                         const ::w3::xmldsig::SignaturePropertiesType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    SignatureProperties (::std::ostream&,
                         const ::w3::xmldsig::SignaturePropertiesType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    void
    SignatureProperties (::std::ostream&,
                         const ::w3::xmldsig::SignaturePropertiesType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);

    void
    SignatureProperties (::std::ostream&,
                         const ::w3::xmldsig::SignaturePropertiesType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const SignaturePropertiesType&);

    // Serialize to an existing DOM instance.
    //
    void
    SignatureProperty (::xercesc::DOMDocument&,
                       const ::w3::xmldsig::SignaturePropertyType&,
                       ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SignatureProperty (const ::w3::xmldsig::SignaturePropertyType&, 
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                       ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    SignatureProperty (::xercesc::XMLFormatTarget&,
                       const ::w3::xmldsig::SignaturePropertyType&, 
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                       const ::std::basic_string< wchar_t >& = L"UTF-8",
                       ::xml_schema::flags = 0);


    void
    SignatureProperty (::xercesc::XMLFormatTarget&,
                       const ::w3::xmldsig::SignaturePropertyType&, 
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                       ::xsd::cxx::xml::error_handler< wchar_t >&,
                       const ::std::basic_string< wchar_t >& = L"UTF-8",
                       ::xml_schema::flags = 0);

    void
    SignatureProperty (::xercesc::XMLFormatTarget&,
                       const ::w3::xmldsig::SignaturePropertyType&, 
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                       ::xercesc::DOMErrorHandler&,
                       const ::std::basic_string< wchar_t >& = L"UTF-8",
                       ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    SignatureProperty (::std::ostream&,
                       const ::w3::xmldsig::SignaturePropertyType&, 
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                       const ::std::basic_string< wchar_t >& = L"UTF-8",
                       ::xml_schema::flags = 0);


    void
    SignatureProperty (::std::ostream&,
                       const ::w3::xmldsig::SignaturePropertyType&, 
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                       ::xsd::cxx::xml::error_handler< wchar_t >&,
                       const ::std::basic_string< wchar_t >& = L"UTF-8",
                       ::xml_schema::flags = 0);

    void
    SignatureProperty (::std::ostream&,
                       const ::w3::xmldsig::SignaturePropertyType&, 
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                       ::xercesc::DOMErrorHandler&,
                       const ::std::basic_string< wchar_t >& = L"UTF-8",
                       ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const SignaturePropertyType&);

    void
    operator<< (::xercesc::DOMElement&,
                const HMACOutputLengthType&);

    void
    operator<< (::xercesc::DOMAttr&,
                const HMACOutputLengthType&);

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                const HMACOutputLengthType&);

    // Serialize to an existing DOM instance.
    //
    void
    DSAKeyValue (::xercesc::DOMDocument&,
                 const ::w3::xmldsig::DSAKeyValueType&,
                 ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    DSAKeyValue (const ::w3::xmldsig::DSAKeyValueType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    DSAKeyValue (::xercesc::XMLFormatTarget&,
                 const ::w3::xmldsig::DSAKeyValueType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    DSAKeyValue (::xercesc::XMLFormatTarget&,
                 const ::w3::xmldsig::DSAKeyValueType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);

    void
    DSAKeyValue (::xercesc::XMLFormatTarget&,
                 const ::w3::xmldsig::DSAKeyValueType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    DSAKeyValue (::std::ostream&,
                 const ::w3::xmldsig::DSAKeyValueType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    DSAKeyValue (::std::ostream&,
                 const ::w3::xmldsig::DSAKeyValueType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);

    void
    DSAKeyValue (::std::ostream&,
                 const ::w3::xmldsig::DSAKeyValueType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const DSAKeyValueType&);

    // Serialize to an existing DOM instance.
    //
    void
    RSAKeyValue (::xercesc::DOMDocument&,
                 const ::w3::xmldsig::RSAKeyValueType&,
                 ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    RSAKeyValue (const ::w3::xmldsig::RSAKeyValueType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    RSAKeyValue (::xercesc::XMLFormatTarget&,
                 const ::w3::xmldsig::RSAKeyValueType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    RSAKeyValue (::xercesc::XMLFormatTarget&,
                 const ::w3::xmldsig::RSAKeyValueType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);

    void
    RSAKeyValue (::xercesc::XMLFormatTarget&,
                 const ::w3::xmldsig::RSAKeyValueType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    RSAKeyValue (::std::ostream&,
                 const ::w3::xmldsig::RSAKeyValueType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    RSAKeyValue (::std::ostream&,
                 const ::w3::xmldsig::RSAKeyValueType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);

    void
    RSAKeyValue (::std::ostream&,
                 const ::w3::xmldsig::RSAKeyValueType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const RSAKeyValueType&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // XMLDSIG_CORE_SCHEMA_HXX
