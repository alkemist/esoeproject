// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "delegated-schema-saml-protocol.hxx"

namespace middleware
{
  namespace DelegatedProtocolSchema
  {
    // RegisterPrincipalRequestType
    // 

    const RegisterPrincipalRequestType::principalAuthnIdentifier::type& RegisterPrincipalRequestType::
    principalAuthnIdentifier () const
    {
      return this->_xsd_principalAuthnIdentifier_.get ();
    }

    RegisterPrincipalRequestType::principalAuthnIdentifier::type& RegisterPrincipalRequestType::
    principalAuthnIdentifier ()
    {
      return this->_xsd_principalAuthnIdentifier_.get ();
    }

    void RegisterPrincipalRequestType::
    principalAuthnIdentifier (const principalAuthnIdentifier::type& principalAuthnIdentifier)
    {
      this->_xsd_principalAuthnIdentifier_.set (principalAuthnIdentifier);
    }

    void RegisterPrincipalRequestType::
    principalAuthnIdentifier (::std::auto_ptr< principalAuthnIdentifier::type > principalAuthnIdentifier)
    {
      this->_xsd_principalAuthnIdentifier_.set (principalAuthnIdentifier);
    }

    const RegisterPrincipalRequestType::Attribute::container& RegisterPrincipalRequestType::
    Attribute () const
    {
      return this->_xsd_Attribute_;
    }

    RegisterPrincipalRequestType::Attribute::container& RegisterPrincipalRequestType::
    Attribute ()
    {
      return this->_xsd_Attribute_;
    }

    void RegisterPrincipalRequestType::
    Attribute (const Attribute::container& Attribute)
    {
      this->_xsd_Attribute_ = Attribute;
    }

    const RegisterPrincipalRequestType::EncryptedAttribute::container& RegisterPrincipalRequestType::
    EncryptedAttribute () const
    {
      return this->_xsd_EncryptedAttribute_;
    }

    RegisterPrincipalRequestType::EncryptedAttribute::container& RegisterPrincipalRequestType::
    EncryptedAttribute ()
    {
      return this->_xsd_EncryptedAttribute_;
    }

    void RegisterPrincipalRequestType::
    EncryptedAttribute (const EncryptedAttribute::container& EncryptedAttribute)
    {
      this->_xsd_EncryptedAttribute_ = EncryptedAttribute;
    }

    const RegisterPrincipalRequestType::Source::type& RegisterPrincipalRequestType::
    Source () const
    {
      return this->_xsd_Source_.get ();
    }

    RegisterPrincipalRequestType::Source::type& RegisterPrincipalRequestType::
    Source ()
    {
      return this->_xsd_Source_.get ();
    }

    void RegisterPrincipalRequestType::
    Source (const Source::type& Source)
    {
      this->_xsd_Source_.set (Source);
    }

    void RegisterPrincipalRequestType::
    Source (::std::auto_ptr< Source::type > Source)
    {
      this->_xsd_Source_.set (Source);
    }


    // RegisterPrincipalResponseType
    // 

    const RegisterPrincipalResponseType::sessionIdentifier::container& RegisterPrincipalResponseType::
    sessionIdentifier () const
    {
      return this->_xsd_sessionIdentifier_;
    }

    RegisterPrincipalResponseType::sessionIdentifier::container& RegisterPrincipalResponseType::
    sessionIdentifier ()
    {
      return this->_xsd_sessionIdentifier_;
    }

    void RegisterPrincipalResponseType::
    sessionIdentifier (const sessionIdentifier::type& sessionIdentifier)
    {
      this->_xsd_sessionIdentifier_.set (sessionIdentifier);
    }

    void RegisterPrincipalResponseType::
    sessionIdentifier (const sessionIdentifier::container& sessionIdentifier)
    {
      this->_xsd_sessionIdentifier_ = sessionIdentifier;
    }

    void RegisterPrincipalResponseType::
    sessionIdentifier (::std::auto_ptr< sessionIdentifier::type > sessionIdentifier)
    {
      this->_xsd_sessionIdentifier_.set (sessionIdentifier);
    }
  }
}

#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/parser.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_factory_plate< 0, wchar_t >
  type_factory_plate_init;
}

namespace middleware
{
  namespace DelegatedProtocolSchema
  {
    // RegisterPrincipalRequestType
    //

    RegisterPrincipalRequestType::
    RegisterPrincipalRequestType ()
    : ::saml2::protocol::RequestAbstractType (),
    _xsd_principalAuthnIdentifier_ (::xml_schema::flags (), this),
    _xsd_Attribute_ (::xml_schema::flags (), this),
    _xsd_EncryptedAttribute_ (::xml_schema::flags (), this),
    _xsd_Source_ (::xml_schema::flags (), this)
    {
    }

    RegisterPrincipalRequestType::
    RegisterPrincipalRequestType (const ID::type& _xsd_ID,
                                  const Version::type& _xsd_Version,
                                  const IssueInstant::type& _xsd_IssueInstant,
                                  const principalAuthnIdentifier::type& _xsd_principalAuthnIdentifier,
                                  const Source::type& _xsd_Source)
    : ::saml2::protocol::RequestAbstractType (_xsd_ID,
                                              _xsd_Version,
                                              _xsd_IssueInstant),
    _xsd_principalAuthnIdentifier_ (_xsd_principalAuthnIdentifier,
                                    ::xml_schema::flags (),
                                    this),
    _xsd_Attribute_ (::xml_schema::flags (), this),
    _xsd_EncryptedAttribute_ (::xml_schema::flags (), this),
    _xsd_Source_ (_xsd_Source,
                  ::xml_schema::flags (),
                  this)
    {
    }

    RegisterPrincipalRequestType::
    RegisterPrincipalRequestType (const RegisterPrincipalRequestType& _xsd_RegisterPrincipalRequestType,
                                  ::xml_schema::flags f,
                                  ::xml_schema::type* c)
    : ::saml2::protocol::RequestAbstractType (_xsd_RegisterPrincipalRequestType, f, c),
    _xsd_principalAuthnIdentifier_ (_xsd_RegisterPrincipalRequestType._xsd_principalAuthnIdentifier_,
                                    f | ::xml_schema::flags::not_root,
                                    this),
    _xsd_Attribute_ (_xsd_RegisterPrincipalRequestType._xsd_Attribute_,
                     f | ::xml_schema::flags::not_root,
                     this),
    _xsd_EncryptedAttribute_ (_xsd_RegisterPrincipalRequestType._xsd_EncryptedAttribute_,
                              f | ::xml_schema::flags::not_root,
                              this),
    _xsd_Source_ (_xsd_RegisterPrincipalRequestType._xsd_Source_,
                  f | ::xml_schema::flags::not_root,
                  this)
    {
    }

    RegisterPrincipalRequestType::
    RegisterPrincipalRequestType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::type* c)
    : ::saml2::protocol::RequestAbstractType (e, f, c),
    _xsd_principalAuthnIdentifier_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Attribute_ (f | ::xml_schema::flags::not_root, this),
    _xsd_EncryptedAttribute_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Source_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void RegisterPrincipalRequestType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // principalAuthnIdentifier
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< principalAuthnIdentifier::type > r (
            tfm.create< principalAuthnIdentifier::type > (
              L"principalAuthnIdentifier",
              L"http://www.qut.com/middleware/DelegatedProtocolSchema",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_principalAuthnIdentifier_.present ())
              continue;
            this->principalAuthnIdentifier (r);
            continue;
          }
        }

        // Attribute
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Attribute::type > r (
            tfm.create< Attribute::type > (
              L"Attribute",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->Attribute ().push_back (r);
            continue;
          }
        }

        // EncryptedAttribute
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< EncryptedAttribute::type > r (
            tfm.create< EncryptedAttribute::type > (
              L"EncryptedAttribute",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->EncryptedAttribute ().push_back (r);
            continue;
          }
        }
      }

      if (!_xsd_principalAuthnIdentifier_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"principalAuthnIdentifier",
          L"http://www.qut.com/middleware/DelegatedProtocolSchema");
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Source" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Source::type > r (
            Source::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Source (r);
          continue;
        }
      }

      if (!_xsd_Source_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Source",
          L"");
      }
    }

    RegisterPrincipalRequestType* RegisterPrincipalRequestType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new RegisterPrincipalRequestType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, RegisterPrincipalRequestType >
    _xsd_RegisterPrincipalRequestType_type_factory_init (
      L"RegisterPrincipalRequestType http://www.qut.com/middleware/DelegatedProtocolSchema");


    // RegisterPrincipalResponseType
    //

    RegisterPrincipalResponseType::
    RegisterPrincipalResponseType ()
    : ::saml2::protocol::StatusResponseType (),
    _xsd_sessionIdentifier_ (::xml_schema::flags (), this)
    {
    }

    RegisterPrincipalResponseType::
    RegisterPrincipalResponseType (const Status::type& _xsd_Status,
                                   const ID::type& _xsd_ID,
                                   const Version::type& _xsd_Version,
                                   const IssueInstant::type& _xsd_IssueInstant)
    : ::saml2::protocol::StatusResponseType (_xsd_Status,
                                             _xsd_ID,
                                             _xsd_Version,
                                             _xsd_IssueInstant),
    _xsd_sessionIdentifier_ (::xml_schema::flags (), this)
    {
    }

    RegisterPrincipalResponseType::
    RegisterPrincipalResponseType (const RegisterPrincipalResponseType& _xsd_RegisterPrincipalResponseType,
                                   ::xml_schema::flags f,
                                   ::xml_schema::type* c)
    : ::saml2::protocol::StatusResponseType (_xsd_RegisterPrincipalResponseType, f, c),
    _xsd_sessionIdentifier_ (_xsd_RegisterPrincipalResponseType._xsd_sessionIdentifier_,
                             f | ::xml_schema::flags::not_root,
                             this)
    {
    }

    RegisterPrincipalResponseType::
    RegisterPrincipalResponseType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::type* c)
    : ::saml2::protocol::StatusResponseType (e, f, c),
    _xsd_sessionIdentifier_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void RegisterPrincipalResponseType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // sessionIdentifier
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< sessionIdentifier::type > r (
            tfm.create< sessionIdentifier::type > (
              L"sessionIdentifier",
              L"http://www.qut.com/middleware/DelegatedProtocolSchema",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->sessionIdentifier ())
              continue;
            this->sessionIdentifier (r);
            continue;
          }
        }
      }
    }

    RegisterPrincipalResponseType* RegisterPrincipalResponseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new RegisterPrincipalResponseType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, RegisterPrincipalResponseType >
    _xsd_RegisterPrincipalResponseType_type_factory_init (
      L"RegisterPrincipalResponseType http://www.qut.com/middleware/DelegatedProtocolSchema");
  }
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace middleware
{
  namespace DelegatedProtocolSchema
  {
    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (const ::std::basic_string< wchar_t >& u,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (const ::std::basic_string< wchar_t >& u,
                              ::xsd::cxx::xml::error_handler< wchar_t >& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (const ::std::basic_string< wchar_t >& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (::std::istream& is,
                              ::xsd::cxx::xml::error_handler< wchar_t >& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (::std::istream& is,
                              const ::std::basic_string< wchar_t >& sid,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (::std::istream& is,
                              const ::std::basic_string< wchar_t >& sid,
                              ::xsd::cxx::xml::error_handler< wchar_t >& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (::std::istream& is,
                              const ::std::basic_string< wchar_t >& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (const ::xercesc::DOMInputSource& i,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (const ::xercesc::DOMInputSource& i,
                              ::xsd::cxx::xml::error_handler< wchar_t >& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (const ::xercesc::DOMInputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType > r (
        tfm.create< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType > (
          L"RegisterPrincipalRequest",
          L"http://www.qut.com/middleware/DelegatedProtocolSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"RegisterPrincipalRequest",
        L"http://www.qut.com/middleware/DelegatedProtocolSchema");
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (const ::std::basic_string< wchar_t >& u,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (const ::std::basic_string< wchar_t >& u,
                               ::xsd::cxx::xml::error_handler< wchar_t >& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (const ::std::basic_string< wchar_t >& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (::std::istream& is,
                               ::xsd::cxx::xml::error_handler< wchar_t >& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (::std::istream& is,
                               const ::std::basic_string< wchar_t >& sid,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (::std::istream& is,
                               const ::std::basic_string< wchar_t >& sid,
                               ::xsd::cxx::xml::error_handler< wchar_t >& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (::std::istream& is,
                               const ::std::basic_string< wchar_t >& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (const ::xercesc::DOMInputSource& i,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (const ::xercesc::DOMInputSource& i,
                               ::xsd::cxx::xml::error_handler< wchar_t >& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (const ::xercesc::DOMInputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType > r (
        tfm.create< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType > (
          L"RegisterPrincipalResponse",
          L"http://www.qut.com/middleware/DelegatedProtocolSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"RegisterPrincipalResponse",
        L"http://www.qut.com/middleware/DelegatedProtocolSchema");
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/serialization.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_serializer_plate< 0, wchar_t >
  type_serializer_plate_init;
}

namespace middleware
{
  namespace DelegatedProtocolSchema
  {
    void
    RegisterPrincipalRequest (::xercesc::DOMDocument& d,
                              const ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType& s,
                              ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType > (
        L"RegisterPrincipalRequest",
        L"http://www.qut.com/middleware/DelegatedProtocolSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    RegisterPrincipalRequest (const ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType > (
            L"RegisterPrincipalRequest",
            L"http://www.qut.com/middleware/DelegatedProtocolSchema",
            m,
            s,
            f));
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    RegisterPrincipalRequest (::xercesc::XMLFormatTarget& t,
                              const ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              const ::std::basic_string< wchar_t >& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    RegisterPrincipalRequest (::xercesc::XMLFormatTarget& t,
                              const ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              ::xsd::cxx::xml::error_handler< wchar_t >& h,
                              const ::std::basic_string< wchar_t >& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RegisterPrincipalRequest (::xercesc::XMLFormatTarget& t,
                              const ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              ::xercesc::DOMErrorHandler& h,
                              const ::std::basic_string< wchar_t >& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RegisterPrincipalRequest (::std::ostream& o,
                              const ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              const ::std::basic_string< wchar_t >& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    RegisterPrincipalRequest (::std::ostream& o,
                              const ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              ::xsd::cxx::xml::error_handler< wchar_t >& h,
                              const ::std::basic_string< wchar_t >& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RegisterPrincipalRequest (::std::ostream& o,
                              const ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              ::xercesc::DOMErrorHandler& h,
                              const ::std::basic_string< wchar_t >& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const RegisterPrincipalRequestType& i)
    {
      e << static_cast< const ::saml2::protocol::RequestAbstractType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< RegisterPrincipalRequestType::principalAuthnIdentifier::type > (
          L"principalAuthnIdentifier",
          L"http://www.qut.com/middleware/DelegatedProtocolSchema",
          false,
          true,
          e,
          i.principalAuthnIdentifier ());
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (RegisterPrincipalRequestType::Attribute::const_iterator
             b (i.Attribute ().begin ()), n (i.Attribute ().end ());
             b != n; ++b)
        {
          tsm.serialize< RegisterPrincipalRequestType::Attribute::type > (
            L"Attribute",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (RegisterPrincipalRequestType::EncryptedAttribute::const_iterator
             b (i.EncryptedAttribute ().begin ()), n (i.EncryptedAttribute ().end ());
             b != n; ++b)
        {
          tsm.serialize< RegisterPrincipalRequestType::EncryptedAttribute::type > (
            L"EncryptedAttribute",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Source",
          e);

        a.dom_attribute () << i.Source ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, RegisterPrincipalRequestType >
    _xsd_RegisterPrincipalRequestType_type_serializer_init (
      L"RegisterPrincipalRequestType",
      L"http://www.qut.com/middleware/DelegatedProtocolSchema");


    void
    RegisterPrincipalResponse (::xercesc::DOMDocument& d,
                               const ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType& s,
                               ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType > (
        L"RegisterPrincipalResponse",
        L"http://www.qut.com/middleware/DelegatedProtocolSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    RegisterPrincipalResponse (const ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType > (
            L"RegisterPrincipalResponse",
            L"http://www.qut.com/middleware/DelegatedProtocolSchema",
            m,
            s,
            f));
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    RegisterPrincipalResponse (::xercesc::XMLFormatTarget& t,
                               const ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               const ::std::basic_string< wchar_t >& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    RegisterPrincipalResponse (::xercesc::XMLFormatTarget& t,
                               const ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               ::xsd::cxx::xml::error_handler< wchar_t >& h,
                               const ::std::basic_string< wchar_t >& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RegisterPrincipalResponse (::xercesc::XMLFormatTarget& t,
                               const ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               ::xercesc::DOMErrorHandler& h,
                               const ::std::basic_string< wchar_t >& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RegisterPrincipalResponse (::std::ostream& o,
                               const ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               const ::std::basic_string< wchar_t >& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    RegisterPrincipalResponse (::std::ostream& o,
                               const ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               ::xsd::cxx::xml::error_handler< wchar_t >& h,
                               const ::std::basic_string< wchar_t >& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RegisterPrincipalResponse (::std::ostream& o,
                               const ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               ::xercesc::DOMErrorHandler& h,
                               const ::std::basic_string< wchar_t >& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const RegisterPrincipalResponseType& i)
    {
      e << static_cast< const ::saml2::protocol::StatusResponseType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.sessionIdentifier ())
        {
          tsm.serialize< RegisterPrincipalResponseType::sessionIdentifier::type > (
            L"sessionIdentifier",
            L"http://www.qut.com/middleware/DelegatedProtocolSchema",
            false,
            true,
            e,
            *i.sessionIdentifier ());
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, RegisterPrincipalResponseType >
    _xsd_RegisterPrincipalResponseType_type_serializer_init (
      L"RegisterPrincipalResponseType",
      L"http://www.qut.com/middleware/DelegatedProtocolSchema");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

