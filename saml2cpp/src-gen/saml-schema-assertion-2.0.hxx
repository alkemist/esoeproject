// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

#ifndef SAML_SCHEMA_ASSERTION_2_0_HXX
#define SAML_SCHEMA_ASSERTION_2_0_HXX

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 2030100L)
#error XSD runtime version mismatch
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include "xsd/xml-schema.hxx"

// Forward declarations.
//
namespace saml2
{
  namespace assertion
  {
    class BaseIDAbstractType;
    class NameIDType;
    class EncryptedElementType;
    class AssertionType;
    class SubjectType;
    class SubjectConfirmationType;
    class SubjectConfirmationDataType;
    class KeyInfoConfirmationDataType;
    class ConditionsType;
    class ConditionAbstractType;
    class AudienceRestrictionType;
    class OneTimeUseType;
    class ProxyRestrictionType;
    class AdviceType;
    class StatementAbstractType;
    class AuthnStatementType;
    class SubjectLocalityType;
    class AuthnContextType;
    class AuthzDecisionStatementType;
    class DecisionType;
    class ActionType;
    class EvidenceType;
    class AttributeStatementType;
    class AttributeType;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include "xmldsig-core-schema.hxx"

#include "xenc-schema.hxx"

namespace saml2
{
  namespace assertion
  {
    class BaseIDAbstractType: public ::xml_schema::type
    {
      public:

      struct _xsd_BaseIDAbstractType
      {
        typedef ::xml_schema::type base_;
      };

      // NameQualifier
      // 
      public:
      struct NameQualifier
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const NameQualifier::container&
      NameQualifier () const;

      NameQualifier::container&
      NameQualifier ();

      void
      NameQualifier (const NameQualifier::type&);

      void
      NameQualifier (const NameQualifier::container&);

      void
      NameQualifier (::std::auto_ptr< NameQualifier::type >);

      // SPNameQualifier
      // 
      public:
      struct SPNameQualifier
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const SPNameQualifier::container&
      SPNameQualifier () const;

      SPNameQualifier::container&
      SPNameQualifier ();

      void
      SPNameQualifier (const SPNameQualifier::type&);

      void
      SPNameQualifier (const SPNameQualifier::container&);

      void
      SPNameQualifier (::std::auto_ptr< SPNameQualifier::type >);

      // Constructors.
      //
      public:
      BaseIDAbstractType ();

      BaseIDAbstractType (const ::xercesc::DOMElement&,
                          ::xml_schema::flags = 0,
                          ::xml_schema::type* = 0);

      BaseIDAbstractType (const BaseIDAbstractType&,
                          ::xml_schema::flags = 0,
                          ::xml_schema::type* = 0);

      virtual BaseIDAbstractType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< NameQualifier::type > _xsd_NameQualifier_;
      ::xsd::cxx::tree::optional< SPNameQualifier::type > _xsd_SPNameQualifier_;
    };

    class NameIDType: public ::xml_schema::string
    {
      public:

      struct _xsd_NameIDType
      {
        typedef ::xml_schema::string base_;
      };

      // NameQualifier
      // 
      public:
      struct NameQualifier
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const NameQualifier::container&
      NameQualifier () const;

      NameQualifier::container&
      NameQualifier ();

      void
      NameQualifier (const NameQualifier::type&);

      void
      NameQualifier (const NameQualifier::container&);

      void
      NameQualifier (::std::auto_ptr< NameQualifier::type >);

      // SPNameQualifier
      // 
      public:
      struct SPNameQualifier
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const SPNameQualifier::container&
      SPNameQualifier () const;

      SPNameQualifier::container&
      SPNameQualifier ();

      void
      SPNameQualifier (const SPNameQualifier::type&);

      void
      SPNameQualifier (const SPNameQualifier::container&);

      void
      SPNameQualifier (::std::auto_ptr< SPNameQualifier::type >);

      // Format
      // 
      public:
      struct Format
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Format::container&
      Format () const;

      Format::container&
      Format ();

      void
      Format (const Format::type&);

      void
      Format (const Format::container&);

      void
      Format (::std::auto_ptr< Format::type >);

      // SPProvidedID
      // 
      public:
      struct SPProvidedID
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const SPProvidedID::container&
      SPProvidedID () const;

      SPProvidedID::container&
      SPProvidedID ();

      void
      SPProvidedID (const SPProvidedID::type&);

      void
      SPProvidedID (const SPProvidedID::container&);

      void
      SPProvidedID (::std::auto_ptr< SPProvidedID::type >);

      // Constructors.
      //
      public:
      NameIDType ();

      NameIDType (const _xsd_NameIDType::base_& );

      NameIDType (const ::xercesc::DOMElement&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      NameIDType (const NameIDType&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      virtual NameIDType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< NameQualifier::type > _xsd_NameQualifier_;
      ::xsd::cxx::tree::optional< SPNameQualifier::type > _xsd_SPNameQualifier_;
      ::xsd::cxx::tree::optional< Format::type > _xsd_Format_;
      ::xsd::cxx::tree::optional< SPProvidedID::type > _xsd_SPProvidedID_;
    };

    class EncryptedElementType: public ::xml_schema::type
    {
      public:

      struct _xsd_EncryptedElementType
      {
        typedef ::xml_schema::type base_;
      };

      // EncryptedData
      // 
      public:
      struct EncryptedData
      {
        typedef ::w3::xmlenc::EncryptedDataType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const EncryptedData::type&
      EncryptedData () const;

      EncryptedData::type&
      EncryptedData ();

      void
      EncryptedData (const EncryptedData::type&);

      void
      EncryptedData (::std::auto_ptr< EncryptedData::type >);

      // EncryptedKey
      // 
      public:
      struct EncryptedKey
      {
        typedef ::w3::xmlenc::EncryptedKeyType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const EncryptedKey::container&
      EncryptedKey () const;

      EncryptedKey::container&
      EncryptedKey ();

      void
      EncryptedKey (const EncryptedKey::container&);

      // Constructors.
      //
      public:
      EncryptedElementType ();

      EncryptedElementType (const EncryptedData::type&);

      EncryptedElementType (const ::xercesc::DOMElement&,
                            ::xml_schema::flags = 0,
                            ::xml_schema::type* = 0);

      EncryptedElementType (const EncryptedElementType&,
                            ::xml_schema::flags = 0,
                            ::xml_schema::type* = 0);

      virtual EncryptedElementType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< EncryptedData::type > _xsd_EncryptedData_;
      ::xsd::cxx::tree::sequence< EncryptedKey::type > _xsd_EncryptedKey_;
    };

    class AssertionType: public ::xml_schema::type
    {
      public:

      struct _xsd_AssertionType
      {
        typedef ::xml_schema::type base_;
      };

      // Issuer
      // 
      public:
      struct Issuer
      {
        typedef ::saml2::assertion::NameIDType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Issuer::type&
      Issuer () const;

      Issuer::type&
      Issuer ();

      void
      Issuer (const Issuer::type&);

      void
      Issuer (::std::auto_ptr< Issuer::type >);

      // Signature
      // 
      public:
      struct Signature
      {
        typedef ::w3::xmldsig::SignatureType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Signature::container&
      Signature () const;

      Signature::container&
      Signature ();

      void
      Signature (const Signature::type&);

      void
      Signature (const Signature::container&);

      void
      Signature (::std::auto_ptr< Signature::type >);

      // Subject
      // 
      public:
      struct Subject
      {
        typedef ::saml2::assertion::SubjectType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Subject::container&
      Subject () const;

      Subject::container&
      Subject ();

      void
      Subject (const Subject::type&);

      void
      Subject (const Subject::container&);

      void
      Subject (::std::auto_ptr< Subject::type >);

      // Conditions
      // 
      public:
      struct Conditions
      {
        typedef ::saml2::assertion::ConditionsType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Conditions::container&
      Conditions () const;

      Conditions::container&
      Conditions ();

      void
      Conditions (const Conditions::type&);

      void
      Conditions (const Conditions::container&);

      void
      Conditions (::std::auto_ptr< Conditions::type >);

      // Advice
      // 
      public:
      struct Advice
      {
        typedef ::saml2::assertion::AdviceType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Advice::container&
      Advice () const;

      Advice::container&
      Advice ();

      void
      Advice (const Advice::type&);

      void
      Advice (const Advice::container&);

      void
      Advice (::std::auto_ptr< Advice::type >);

      // Statement
      // 
      public:
      struct Statement
      {
        typedef ::saml2::assertion::StatementAbstractType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Statement::container&
      Statement () const;

      Statement::container&
      Statement ();

      void
      Statement (const Statement::container&);

      // AuthnStatement
      // 
      public:
      struct AuthnStatement
      {
        typedef ::saml2::assertion::AuthnStatementType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AuthnStatement::container&
      AuthnStatement () const;

      AuthnStatement::container&
      AuthnStatement ();

      void
      AuthnStatement (const AuthnStatement::container&);

      // AuthzDecisionStatement
      // 
      public:
      struct AuthzDecisionStatement
      {
        typedef ::saml2::assertion::AuthzDecisionStatementType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AuthzDecisionStatement::container&
      AuthzDecisionStatement () const;

      AuthzDecisionStatement::container&
      AuthzDecisionStatement ();

      void
      AuthzDecisionStatement (const AuthzDecisionStatement::container&);

      // AttributeStatement
      // 
      public:
      struct AttributeStatement
      {
        typedef ::saml2::assertion::AttributeStatementType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AttributeStatement::container&
      AttributeStatement () const;

      AttributeStatement::container&
      AttributeStatement ();

      void
      AttributeStatement (const AttributeStatement::container&);

      // Version
      // 
      public:
      struct Version
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Version::type&
      Version () const;

      Version::type&
      Version ();

      void
      Version (const Version::type&);

      void
      Version (::std::auto_ptr< Version::type >);

      // ID
      // 
      public:
      struct ID
      {
        typedef ::xml_schema::id type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const ID::type&
      ID () const;

      ID::type&
      ID ();

      void
      ID (const ID::type&);

      void
      ID (::std::auto_ptr< ID::type >);

      // IssueInstant
      // 
      public:
      struct IssueInstant
      {
        typedef ::xml_schema::date_time type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const IssueInstant::type&
      IssueInstant () const;

      IssueInstant::type&
      IssueInstant ();

      void
      IssueInstant (const IssueInstant::type&);

      void
      IssueInstant (::std::auto_ptr< IssueInstant::type >);

      // Constructors.
      //
      public:
      AssertionType ();

      AssertionType (const Issuer::type&,
                     const Version::type&,
                     const ID::type&,
                     const IssueInstant::type&);

      AssertionType (const ::xercesc::DOMElement&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      AssertionType (const AssertionType&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      virtual AssertionType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< Issuer::type > _xsd_Issuer_;
      ::xsd::cxx::tree::optional< Signature::type > _xsd_Signature_;
      ::xsd::cxx::tree::optional< Subject::type > _xsd_Subject_;
      ::xsd::cxx::tree::optional< Conditions::type > _xsd_Conditions_;
      ::xsd::cxx::tree::optional< Advice::type > _xsd_Advice_;
      ::xsd::cxx::tree::sequence< Statement::type > _xsd_Statement_;
      ::xsd::cxx::tree::sequence< AuthnStatement::type > _xsd_AuthnStatement_;
      ::xsd::cxx::tree::sequence< AuthzDecisionStatement::type > _xsd_AuthzDecisionStatement_;
      ::xsd::cxx::tree::sequence< AttributeStatement::type > _xsd_AttributeStatement_;
      ::xsd::cxx::tree::one< Version::type > _xsd_Version_;
      ::xsd::cxx::tree::one< ID::type > _xsd_ID_;
      ::xsd::cxx::tree::one< IssueInstant::type > _xsd_IssueInstant_;
    };

    class SubjectType: public ::xml_schema::type
    {
      public:

      struct _xsd_SubjectType
      {
        typedef ::xml_schema::type base_;
      };

      // BaseID
      // 
      public:
      struct BaseID
      {
        typedef ::saml2::assertion::BaseIDAbstractType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const BaseID::container&
      BaseID () const;

      BaseID::container&
      BaseID ();

      void
      BaseID (const BaseID::type&);

      void
      BaseID (const BaseID::container&);

      void
      BaseID (::std::auto_ptr< BaseID::type >);

      // NameID
      // 
      public:
      struct NameID
      {
        typedef ::saml2::assertion::NameIDType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const NameID::container&
      NameID () const;

      NameID::container&
      NameID ();

      void
      NameID (const NameID::type&);

      void
      NameID (const NameID::container&);

      void
      NameID (::std::auto_ptr< NameID::type >);

      // EncryptedID
      // 
      public:
      struct EncryptedID
      {
        typedef ::saml2::assertion::EncryptedElementType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const EncryptedID::container&
      EncryptedID () const;

      EncryptedID::container&
      EncryptedID ();

      void
      EncryptedID (const EncryptedID::type&);

      void
      EncryptedID (const EncryptedID::container&);

      void
      EncryptedID (::std::auto_ptr< EncryptedID::type >);

      // SubjectConfirmation
      // 
      public:
      struct SubjectConfirmation
      {
        typedef ::saml2::assertion::SubjectConfirmationType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const SubjectConfirmation::container&
      SubjectConfirmation () const;

      SubjectConfirmation::container&
      SubjectConfirmation ();

      void
      SubjectConfirmation (const SubjectConfirmation::container&);

      // Constructors.
      //
      public:
      SubjectType ();

      SubjectType (const ::xercesc::DOMElement&,
                   ::xml_schema::flags = 0,
                   ::xml_schema::type* = 0);

      SubjectType (const SubjectType&,
                   ::xml_schema::flags = 0,
                   ::xml_schema::type* = 0);

      virtual SubjectType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< BaseID::type > _xsd_BaseID_;
      ::xsd::cxx::tree::optional< NameID::type > _xsd_NameID_;
      ::xsd::cxx::tree::optional< EncryptedID::type > _xsd_EncryptedID_;
      ::xsd::cxx::tree::sequence< SubjectConfirmation::type > _xsd_SubjectConfirmation_;
    };

    class SubjectConfirmationType: public ::xml_schema::type
    {
      public:

      struct _xsd_SubjectConfirmationType
      {
        typedef ::xml_schema::type base_;
      };

      // BaseID
      // 
      public:
      struct BaseID
      {
        typedef ::saml2::assertion::BaseIDAbstractType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const BaseID::container&
      BaseID () const;

      BaseID::container&
      BaseID ();

      void
      BaseID (const BaseID::type&);

      void
      BaseID (const BaseID::container&);

      void
      BaseID (::std::auto_ptr< BaseID::type >);

      // NameID
      // 
      public:
      struct NameID
      {
        typedef ::saml2::assertion::NameIDType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const NameID::container&
      NameID () const;

      NameID::container&
      NameID ();

      void
      NameID (const NameID::type&);

      void
      NameID (const NameID::container&);

      void
      NameID (::std::auto_ptr< NameID::type >);

      // EncryptedID
      // 
      public:
      struct EncryptedID
      {
        typedef ::saml2::assertion::EncryptedElementType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const EncryptedID::container&
      EncryptedID () const;

      EncryptedID::container&
      EncryptedID ();

      void
      EncryptedID (const EncryptedID::type&);

      void
      EncryptedID (const EncryptedID::container&);

      void
      EncryptedID (::std::auto_ptr< EncryptedID::type >);

      // SubjectConfirmationData
      // 
      public:
      struct SubjectConfirmationData
      {
        typedef ::saml2::assertion::SubjectConfirmationDataType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const SubjectConfirmationData::container&
      SubjectConfirmationData () const;

      SubjectConfirmationData::container&
      SubjectConfirmationData ();

      void
      SubjectConfirmationData (const SubjectConfirmationData::type&);

      void
      SubjectConfirmationData (const SubjectConfirmationData::container&);

      void
      SubjectConfirmationData (::std::auto_ptr< SubjectConfirmationData::type >);

      // Method
      // 
      public:
      struct Method
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Method::type&
      Method () const;

      Method::type&
      Method ();

      void
      Method (const Method::type&);

      void
      Method (::std::auto_ptr< Method::type >);

      // Constructors.
      //
      public:
      SubjectConfirmationType ();

      SubjectConfirmationType (const Method::type&);

      SubjectConfirmationType (const ::xercesc::DOMElement&,
                               ::xml_schema::flags = 0,
                               ::xml_schema::type* = 0);

      SubjectConfirmationType (const SubjectConfirmationType&,
                               ::xml_schema::flags = 0,
                               ::xml_schema::type* = 0);

      virtual SubjectConfirmationType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< BaseID::type > _xsd_BaseID_;
      ::xsd::cxx::tree::optional< NameID::type > _xsd_NameID_;
      ::xsd::cxx::tree::optional< EncryptedID::type > _xsd_EncryptedID_;
      ::xsd::cxx::tree::optional< SubjectConfirmationData::type > _xsd_SubjectConfirmationData_;
      ::xsd::cxx::tree::one< Method::type > _xsd_Method_;
    };

    class SubjectConfirmationDataType: public ::xml_schema::type
    {
      public:

      struct _xsd_SubjectConfirmationDataType
      {
        typedef ::xml_schema::type base_;
      };

      // NotBefore
      // 
      public:
      struct NotBefore
      {
        typedef ::xml_schema::date_time type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const NotBefore::container&
      NotBefore () const;

      NotBefore::container&
      NotBefore ();

      void
      NotBefore (const NotBefore::type&);

      void
      NotBefore (const NotBefore::container&);

      void
      NotBefore (::std::auto_ptr< NotBefore::type >);

      // NotOnOrAfter
      // 
      public:
      struct NotOnOrAfter
      {
        typedef ::xml_schema::date_time type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const NotOnOrAfter::container&
      NotOnOrAfter () const;

      NotOnOrAfter::container&
      NotOnOrAfter ();

      void
      NotOnOrAfter (const NotOnOrAfter::type&);

      void
      NotOnOrAfter (const NotOnOrAfter::container&);

      void
      NotOnOrAfter (::std::auto_ptr< NotOnOrAfter::type >);

      // Recipient
      // 
      public:
      struct Recipient
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Recipient::container&
      Recipient () const;

      Recipient::container&
      Recipient ();

      void
      Recipient (const Recipient::type&);

      void
      Recipient (const Recipient::container&);

      void
      Recipient (::std::auto_ptr< Recipient::type >);

      // InResponseTo
      // 
      public:
      struct InResponseTo
      {
        typedef ::xml_schema::ncname type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const InResponseTo::container&
      InResponseTo () const;

      InResponseTo::container&
      InResponseTo ();

      void
      InResponseTo (const InResponseTo::type&);

      void
      InResponseTo (const InResponseTo::container&);

      void
      InResponseTo (::std::auto_ptr< InResponseTo::type >);

      // Address
      // 
      public:
      struct Address
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Address::container&
      Address () const;

      Address::container&
      Address ();

      void
      Address (const Address::type&);

      void
      Address (const Address::container&);

      void
      Address (::std::auto_ptr< Address::type >);

      // Constructors.
      //
      public:
      SubjectConfirmationDataType ();

      SubjectConfirmationDataType (const _xsd_SubjectConfirmationDataType::base_& );

      SubjectConfirmationDataType (const ::xercesc::DOMElement&,
                                   ::xml_schema::flags = 0,
                                   ::xml_schema::type* = 0);

      SubjectConfirmationDataType (const SubjectConfirmationDataType&,
                                   ::xml_schema::flags = 0,
                                   ::xml_schema::type* = 0);

      virtual SubjectConfirmationDataType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< NotBefore::type > _xsd_NotBefore_;
      ::xsd::cxx::tree::optional< NotOnOrAfter::type > _xsd_NotOnOrAfter_;
      ::xsd::cxx::tree::optional< Recipient::type > _xsd_Recipient_;
      ::xsd::cxx::tree::optional< InResponseTo::type > _xsd_InResponseTo_;
      ::xsd::cxx::tree::optional< Address::type > _xsd_Address_;
    };

    class KeyInfoConfirmationDataType: public ::saml2::assertion::SubjectConfirmationDataType
    {
      public:

      struct _xsd_KeyInfoConfirmationDataType
      {
        typedef ::saml2::assertion::SubjectConfirmationDataType base_;
      };

      // Constructors.
      //
      public:
      KeyInfoConfirmationDataType ();

      KeyInfoConfirmationDataType (const _xsd_KeyInfoConfirmationDataType::base_& );

      KeyInfoConfirmationDataType (const ::xercesc::DOMElement&,
                                   ::xml_schema::flags = 0,
                                   ::xml_schema::type* = 0);

      KeyInfoConfirmationDataType (const KeyInfoConfirmationDataType&,
                                   ::xml_schema::flags = 0,
                                   ::xml_schema::type* = 0);

      virtual KeyInfoConfirmationDataType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;
    };

    class ConditionsType: public ::xml_schema::type
    {
      public:

      struct _xsd_ConditionsType
      {
        typedef ::xml_schema::type base_;
      };

      // Condition
      // 
      public:
      struct Condition
      {
        typedef ::saml2::assertion::ConditionAbstractType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Condition::container&
      Condition () const;

      Condition::container&
      Condition ();

      void
      Condition (const Condition::container&);

      // AudienceRestriction
      // 
      public:
      struct AudienceRestriction
      {
        typedef ::saml2::assertion::AudienceRestrictionType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AudienceRestriction::container&
      AudienceRestriction () const;

      AudienceRestriction::container&
      AudienceRestriction ();

      void
      AudienceRestriction (const AudienceRestriction::container&);

      // OneTimeUse
      // 
      public:
      struct OneTimeUse
      {
        typedef ::saml2::assertion::OneTimeUseType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const OneTimeUse::container&
      OneTimeUse () const;

      OneTimeUse::container&
      OneTimeUse ();

      void
      OneTimeUse (const OneTimeUse::container&);

      // ProxyRestriction
      // 
      public:
      struct ProxyRestriction
      {
        typedef ::saml2::assertion::ProxyRestrictionType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const ProxyRestriction::container&
      ProxyRestriction () const;

      ProxyRestriction::container&
      ProxyRestriction ();

      void
      ProxyRestriction (const ProxyRestriction::container&);

      // NotBefore
      // 
      public:
      struct NotBefore
      {
        typedef ::xml_schema::date_time type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const NotBefore::container&
      NotBefore () const;

      NotBefore::container&
      NotBefore ();

      void
      NotBefore (const NotBefore::type&);

      void
      NotBefore (const NotBefore::container&);

      void
      NotBefore (::std::auto_ptr< NotBefore::type >);

      // NotOnOrAfter
      // 
      public:
      struct NotOnOrAfter
      {
        typedef ::xml_schema::date_time type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const NotOnOrAfter::container&
      NotOnOrAfter () const;

      NotOnOrAfter::container&
      NotOnOrAfter ();

      void
      NotOnOrAfter (const NotOnOrAfter::type&);

      void
      NotOnOrAfter (const NotOnOrAfter::container&);

      void
      NotOnOrAfter (::std::auto_ptr< NotOnOrAfter::type >);

      // Constructors.
      //
      public:
      ConditionsType ();

      ConditionsType (const ::xercesc::DOMElement&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      ConditionsType (const ConditionsType&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      virtual ConditionsType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< Condition::type > _xsd_Condition_;
      ::xsd::cxx::tree::sequence< AudienceRestriction::type > _xsd_AudienceRestriction_;
      ::xsd::cxx::tree::sequence< OneTimeUse::type > _xsd_OneTimeUse_;
      ::xsd::cxx::tree::sequence< ProxyRestriction::type > _xsd_ProxyRestriction_;
      ::xsd::cxx::tree::optional< NotBefore::type > _xsd_NotBefore_;
      ::xsd::cxx::tree::optional< NotOnOrAfter::type > _xsd_NotOnOrAfter_;
    };

    class ConditionAbstractType: public ::xml_schema::type
    {
      public:

      struct _xsd_ConditionAbstractType
      {
        typedef ::xml_schema::type base_;
      };

      // Constructors.
      //
      public:
      ConditionAbstractType ();

      ConditionAbstractType (const ::xercesc::DOMElement&,
                             ::xml_schema::flags = 0,
                             ::xml_schema::type* = 0);

      ConditionAbstractType (const ::xercesc::DOMAttr&,
                             ::xml_schema::flags = 0,
                             ::xml_schema::type* = 0);

      ConditionAbstractType (const ::std::basic_string< wchar_t >&,
                             const ::xercesc::DOMElement*,
                             ::xml_schema::flags = 0,
                             ::xml_schema::type* = 0);

      ConditionAbstractType (const ConditionAbstractType&,
                             ::xml_schema::flags = 0,
                             ::xml_schema::type* = 0);

      virtual ConditionAbstractType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;
    };

    class AudienceRestrictionType: public ::saml2::assertion::ConditionAbstractType
    {
      public:

      struct _xsd_AudienceRestrictionType
      {
        typedef ::saml2::assertion::ConditionAbstractType base_;
      };

      // Audience
      // 
      public:
      struct Audience
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Audience::container&
      Audience () const;

      Audience::container&
      Audience ();

      void
      Audience (const Audience::container&);

      // Constructors.
      //
      public:
      AudienceRestrictionType ();

      AudienceRestrictionType (const ::xercesc::DOMElement&,
                               ::xml_schema::flags = 0,
                               ::xml_schema::type* = 0);

      AudienceRestrictionType (const AudienceRestrictionType&,
                               ::xml_schema::flags = 0,
                               ::xml_schema::type* = 0);

      virtual AudienceRestrictionType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< Audience::type > _xsd_Audience_;
    };

    class OneTimeUseType: public ::saml2::assertion::ConditionAbstractType
    {
      public:

      struct _xsd_OneTimeUseType
      {
        typedef ::saml2::assertion::ConditionAbstractType base_;
      };

      // Constructors.
      //
      public:
      OneTimeUseType ();

      OneTimeUseType (const ::xercesc::DOMElement&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      OneTimeUseType (const ::xercesc::DOMAttr&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      OneTimeUseType (const ::std::basic_string< wchar_t >&,
                      const ::xercesc::DOMElement*,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      OneTimeUseType (const OneTimeUseType&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      virtual OneTimeUseType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;
    };

    class ProxyRestrictionType: public ::saml2::assertion::ConditionAbstractType
    {
      public:

      struct _xsd_ProxyRestrictionType
      {
        typedef ::saml2::assertion::ConditionAbstractType base_;
      };

      // Audience
      // 
      public:
      struct Audience
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Audience::container&
      Audience () const;

      Audience::container&
      Audience ();

      void
      Audience (const Audience::container&);

      // Count
      // 
      public:
      struct Count
      {
        typedef ::xml_schema::non_negative_integer type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Count::container&
      Count () const;

      Count::container&
      Count ();

      void
      Count (const Count::type&);

      void
      Count (const Count::container&);

      // Constructors.
      //
      public:
      ProxyRestrictionType ();

      ProxyRestrictionType (const ::xercesc::DOMElement&,
                            ::xml_schema::flags = 0,
                            ::xml_schema::type* = 0);

      ProxyRestrictionType (const ProxyRestrictionType&,
                            ::xml_schema::flags = 0,
                            ::xml_schema::type* = 0);

      virtual ProxyRestrictionType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< Audience::type > _xsd_Audience_;
      ::xsd::cxx::tree::optional< Count::type > _xsd_Count_;
    };

    class AdviceType: public ::xml_schema::type
    {
      public:

      struct _xsd_AdviceType
      {
        typedef ::xml_schema::type base_;
      };

      // AssertionIDRef
      // 
      public:
      struct AssertionIDRef
      {
        typedef ::xml_schema::ncname type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AssertionIDRef::container&
      AssertionIDRef () const;

      AssertionIDRef::container&
      AssertionIDRef ();

      void
      AssertionIDRef (const AssertionIDRef::container&);

      // AssertionURIRef
      // 
      public:
      struct AssertionURIRef
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AssertionURIRef::container&
      AssertionURIRef () const;

      AssertionURIRef::container&
      AssertionURIRef ();

      void
      AssertionURIRef (const AssertionURIRef::container&);

      // Assertion
      // 
      public:
      struct Assertion
      {
        typedef ::saml2::assertion::AssertionType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Assertion::container&
      Assertion () const;

      Assertion::container&
      Assertion ();

      void
      Assertion (const Assertion::container&);

      // EncryptedAssertion
      // 
      public:
      struct EncryptedAssertion
      {
        typedef ::saml2::assertion::EncryptedElementType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const EncryptedAssertion::container&
      EncryptedAssertion () const;

      EncryptedAssertion::container&
      EncryptedAssertion ();

      void
      EncryptedAssertion (const EncryptedAssertion::container&);

      // Constructors.
      //
      public:
      AdviceType ();

      AdviceType (const ::xercesc::DOMElement&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      AdviceType (const AdviceType&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      virtual AdviceType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< AssertionIDRef::type > _xsd_AssertionIDRef_;
      ::xsd::cxx::tree::sequence< AssertionURIRef::type > _xsd_AssertionURIRef_;
      ::xsd::cxx::tree::sequence< Assertion::type > _xsd_Assertion_;
      ::xsd::cxx::tree::sequence< EncryptedAssertion::type > _xsd_EncryptedAssertion_;
    };

    class StatementAbstractType: public ::xml_schema::type
    {
      public:

      struct _xsd_StatementAbstractType
      {
        typedef ::xml_schema::type base_;
      };

      // Constructors.
      //
      public:
      StatementAbstractType ();

      StatementAbstractType (const ::xercesc::DOMElement&,
                             ::xml_schema::flags = 0,
                             ::xml_schema::type* = 0);

      StatementAbstractType (const ::xercesc::DOMAttr&,
                             ::xml_schema::flags = 0,
                             ::xml_schema::type* = 0);

      StatementAbstractType (const ::std::basic_string< wchar_t >&,
                             const ::xercesc::DOMElement*,
                             ::xml_schema::flags = 0,
                             ::xml_schema::type* = 0);

      StatementAbstractType (const StatementAbstractType&,
                             ::xml_schema::flags = 0,
                             ::xml_schema::type* = 0);

      virtual StatementAbstractType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;
    };

    class AuthnStatementType: public ::saml2::assertion::StatementAbstractType
    {
      public:

      struct _xsd_AuthnStatementType
      {
        typedef ::saml2::assertion::StatementAbstractType base_;
      };

      // SubjectLocality
      // 
      public:
      struct SubjectLocality
      {
        typedef ::saml2::assertion::SubjectLocalityType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const SubjectLocality::container&
      SubjectLocality () const;

      SubjectLocality::container&
      SubjectLocality ();

      void
      SubjectLocality (const SubjectLocality::type&);

      void
      SubjectLocality (const SubjectLocality::container&);

      void
      SubjectLocality (::std::auto_ptr< SubjectLocality::type >);

      // AuthnContext
      // 
      public:
      struct AuthnContext
      {
        typedef ::saml2::assertion::AuthnContextType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const AuthnContext::type&
      AuthnContext () const;

      AuthnContext::type&
      AuthnContext ();

      void
      AuthnContext (const AuthnContext::type&);

      void
      AuthnContext (::std::auto_ptr< AuthnContext::type >);

      // AuthnInstant
      // 
      public:
      struct AuthnInstant
      {
        typedef ::xml_schema::date_time type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const AuthnInstant::type&
      AuthnInstant () const;

      AuthnInstant::type&
      AuthnInstant ();

      void
      AuthnInstant (const AuthnInstant::type&);

      void
      AuthnInstant (::std::auto_ptr< AuthnInstant::type >);

      // SessionIndex
      // 
      public:
      struct SessionIndex
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const SessionIndex::container&
      SessionIndex () const;

      SessionIndex::container&
      SessionIndex ();

      void
      SessionIndex (const SessionIndex::type&);

      void
      SessionIndex (const SessionIndex::container&);

      void
      SessionIndex (::std::auto_ptr< SessionIndex::type >);

      // SessionNotOnOrAfter
      // 
      public:
      struct SessionNotOnOrAfter
      {
        typedef ::xml_schema::date_time type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const SessionNotOnOrAfter::container&
      SessionNotOnOrAfter () const;

      SessionNotOnOrAfter::container&
      SessionNotOnOrAfter ();

      void
      SessionNotOnOrAfter (const SessionNotOnOrAfter::type&);

      void
      SessionNotOnOrAfter (const SessionNotOnOrAfter::container&);

      void
      SessionNotOnOrAfter (::std::auto_ptr< SessionNotOnOrAfter::type >);

      // Constructors.
      //
      public:
      AuthnStatementType ();

      AuthnStatementType (const AuthnContext::type&,
                          const AuthnInstant::type&);

      AuthnStatementType (const ::xercesc::DOMElement&,
                          ::xml_schema::flags = 0,
                          ::xml_schema::type* = 0);

      AuthnStatementType (const AuthnStatementType&,
                          ::xml_schema::flags = 0,
                          ::xml_schema::type* = 0);

      virtual AuthnStatementType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< SubjectLocality::type > _xsd_SubjectLocality_;
      ::xsd::cxx::tree::one< AuthnContext::type > _xsd_AuthnContext_;
      ::xsd::cxx::tree::one< AuthnInstant::type > _xsd_AuthnInstant_;
      ::xsd::cxx::tree::optional< SessionIndex::type > _xsd_SessionIndex_;
      ::xsd::cxx::tree::optional< SessionNotOnOrAfter::type > _xsd_SessionNotOnOrAfter_;
    };

    class SubjectLocalityType: public ::xml_schema::type
    {
      public:

      struct _xsd_SubjectLocalityType
      {
        typedef ::xml_schema::type base_;
      };

      // Address
      // 
      public:
      struct Address
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Address::container&
      Address () const;

      Address::container&
      Address ();

      void
      Address (const Address::type&);

      void
      Address (const Address::container&);

      void
      Address (::std::auto_ptr< Address::type >);

      // DNSName
      // 
      public:
      struct DNSName
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const DNSName::container&
      DNSName () const;

      DNSName::container&
      DNSName ();

      void
      DNSName (const DNSName::type&);

      void
      DNSName (const DNSName::container&);

      void
      DNSName (::std::auto_ptr< DNSName::type >);

      // Constructors.
      //
      public:
      SubjectLocalityType ();

      SubjectLocalityType (const ::xercesc::DOMElement&,
                           ::xml_schema::flags = 0,
                           ::xml_schema::type* = 0);

      SubjectLocalityType (const SubjectLocalityType&,
                           ::xml_schema::flags = 0,
                           ::xml_schema::type* = 0);

      virtual SubjectLocalityType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< Address::type > _xsd_Address_;
      ::xsd::cxx::tree::optional< DNSName::type > _xsd_DNSName_;
    };

    class AuthnContextType: public ::xml_schema::type
    {
      public:

      struct _xsd_AuthnContextType
      {
        typedef ::xml_schema::type base_;
      };

      // AuthnContextClassRef
      // 
      public:
      struct AuthnContextClassRef
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const AuthnContextClassRef::container&
      AuthnContextClassRef () const;

      AuthnContextClassRef::container&
      AuthnContextClassRef ();

      void
      AuthnContextClassRef (const AuthnContextClassRef::type&);

      void
      AuthnContextClassRef (const AuthnContextClassRef::container&);

      void
      AuthnContextClassRef (::std::auto_ptr< AuthnContextClassRef::type >);

      // AuthnContextDecl
      // 
      public:
      struct AuthnContextDecl
      {
        typedef ::xml_schema::type type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const AuthnContextDecl::container&
      AuthnContextDecl () const;

      AuthnContextDecl::container&
      AuthnContextDecl ();

      void
      AuthnContextDecl (const AuthnContextDecl::type&);

      void
      AuthnContextDecl (const AuthnContextDecl::container&);

      void
      AuthnContextDecl (::std::auto_ptr< AuthnContextDecl::type >);

      // AuthnContextDeclRef
      // 
      public:
      struct AuthnContextDeclRef
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const AuthnContextDeclRef::container&
      AuthnContextDeclRef () const;

      AuthnContextDeclRef::container&
      AuthnContextDeclRef ();

      void
      AuthnContextDeclRef (const AuthnContextDeclRef::type&);

      void
      AuthnContextDeclRef (const AuthnContextDeclRef::container&);

      void
      AuthnContextDeclRef (::std::auto_ptr< AuthnContextDeclRef::type >);

      // AuthenticatingAuthority
      // 
      public:
      struct AuthenticatingAuthority
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AuthenticatingAuthority::container&
      AuthenticatingAuthority () const;

      AuthenticatingAuthority::container&
      AuthenticatingAuthority ();

      void
      AuthenticatingAuthority (const AuthenticatingAuthority::container&);

      // Constructors.
      //
      public:
      AuthnContextType ();

      AuthnContextType (const ::xercesc::DOMElement&,
                        ::xml_schema::flags = 0,
                        ::xml_schema::type* = 0);

      AuthnContextType (const AuthnContextType&,
                        ::xml_schema::flags = 0,
                        ::xml_schema::type* = 0);

      virtual AuthnContextType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< AuthnContextClassRef::type > _xsd_AuthnContextClassRef_;
      ::xsd::cxx::tree::optional< AuthnContextDecl::type > _xsd_AuthnContextDecl_;
      ::xsd::cxx::tree::optional< AuthnContextDeclRef::type > _xsd_AuthnContextDeclRef_;
      ::xsd::cxx::tree::sequence< AuthenticatingAuthority::type > _xsd_AuthenticatingAuthority_;
    };

    class AuthzDecisionStatementType: public ::saml2::assertion::StatementAbstractType
    {
      public:

      struct _xsd_AuthzDecisionStatementType
      {
        typedef ::saml2::assertion::StatementAbstractType base_;
      };

      // Action
      // 
      public:
      struct Action
      {
        typedef ::saml2::assertion::ActionType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Action::container&
      Action () const;

      Action::container&
      Action ();

      void
      Action (const Action::container&);

      // Evidence
      // 
      public:
      struct Evidence
      {
        typedef ::saml2::assertion::EvidenceType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Evidence::container&
      Evidence () const;

      Evidence::container&
      Evidence ();

      void
      Evidence (const Evidence::type&);

      void
      Evidence (const Evidence::container&);

      void
      Evidence (::std::auto_ptr< Evidence::type >);

      // Resource
      // 
      public:
      struct Resource
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Resource::type&
      Resource () const;

      Resource::type&
      Resource ();

      void
      Resource (const Resource::type&);

      void
      Resource (::std::auto_ptr< Resource::type >);

      // Decision
      // 
      public:
      struct Decision
      {
        typedef ::saml2::assertion::DecisionType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Decision::type&
      Decision () const;

      Decision::type&
      Decision ();

      void
      Decision (const Decision::type&);

      void
      Decision (::std::auto_ptr< Decision::type >);

      // Constructors.
      //
      public:
      AuthzDecisionStatementType ();

      AuthzDecisionStatementType (const Resource::type&,
                                  const Decision::type&);

      AuthzDecisionStatementType (const ::xercesc::DOMElement&,
                                  ::xml_schema::flags = 0,
                                  ::xml_schema::type* = 0);

      AuthzDecisionStatementType (const AuthzDecisionStatementType&,
                                  ::xml_schema::flags = 0,
                                  ::xml_schema::type* = 0);

      virtual AuthzDecisionStatementType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< Action::type > _xsd_Action_;
      ::xsd::cxx::tree::optional< Evidence::type > _xsd_Evidence_;
      ::xsd::cxx::tree::one< Resource::type > _xsd_Resource_;
      ::xsd::cxx::tree::one< Decision::type > _xsd_Decision_;
    };

    class DecisionType: public ::xml_schema::string
    {
      public:
      enum _xsd_DecisionType
      {
        Permit,
        Deny,
        Indeterminate
      };

      DecisionType ();

      DecisionType (_xsd_DecisionType);

      DecisionType (const ::xml_schema::string&);

      DecisionType (const ::xercesc::DOMElement&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      DecisionType (const ::xercesc::DOMAttr&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      DecisionType (const ::std::basic_string< wchar_t >&,
                    const ::xercesc::DOMElement*,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      DecisionType (const DecisionType&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      virtual DecisionType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      DecisionType&
      operator= (_xsd_DecisionType);

      virtual
      operator _xsd_DecisionType () const
      {
        return _xsd_DecisionType_convert ();
      }

      protected:
      _xsd_DecisionType
      _xsd_DecisionType_convert () const;

      public:
      static const wchar_t* const _xsd_DecisionType_literals_[3];
      static const _xsd_DecisionType _xsd_DecisionType_indexes_[3];
    };

    class ActionType: public ::xml_schema::string
    {
      public:

      struct _xsd_ActionType
      {
        typedef ::xml_schema::string base_;
      };

      // Namespace
      // 
      public:
      struct Namespace
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Namespace::type&
      Namespace () const;

      Namespace::type&
      Namespace ();

      void
      Namespace (const Namespace::type&);

      void
      Namespace (::std::auto_ptr< Namespace::type >);

      // Constructors.
      //
      public:
      ActionType ();

      ActionType (const _xsd_ActionType::base_& ,
                  const Namespace::type&);

      ActionType (const ::xercesc::DOMElement&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      ActionType (const ActionType&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      virtual ActionType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< Namespace::type > _xsd_Namespace_;
    };

    class EvidenceType: public ::xml_schema::type
    {
      public:

      struct _xsd_EvidenceType
      {
        typedef ::xml_schema::type base_;
      };

      // AssertionIDRef
      // 
      public:
      struct AssertionIDRef
      {
        typedef ::xml_schema::ncname type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AssertionIDRef::container&
      AssertionIDRef () const;

      AssertionIDRef::container&
      AssertionIDRef ();

      void
      AssertionIDRef (const AssertionIDRef::container&);

      // AssertionURIRef
      // 
      public:
      struct AssertionURIRef
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AssertionURIRef::container&
      AssertionURIRef () const;

      AssertionURIRef::container&
      AssertionURIRef ();

      void
      AssertionURIRef (const AssertionURIRef::container&);

      // Assertion
      // 
      public:
      struct Assertion
      {
        typedef ::saml2::assertion::AssertionType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Assertion::container&
      Assertion () const;

      Assertion::container&
      Assertion ();

      void
      Assertion (const Assertion::container&);

      // EncryptedAssertion
      // 
      public:
      struct EncryptedAssertion
      {
        typedef ::saml2::assertion::EncryptedElementType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const EncryptedAssertion::container&
      EncryptedAssertion () const;

      EncryptedAssertion::container&
      EncryptedAssertion ();

      void
      EncryptedAssertion (const EncryptedAssertion::container&);

      // Constructors.
      //
      public:
      EvidenceType ();

      EvidenceType (const ::xercesc::DOMElement&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      EvidenceType (const EvidenceType&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      virtual EvidenceType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< AssertionIDRef::type > _xsd_AssertionIDRef_;
      ::xsd::cxx::tree::sequence< AssertionURIRef::type > _xsd_AssertionURIRef_;
      ::xsd::cxx::tree::sequence< Assertion::type > _xsd_Assertion_;
      ::xsd::cxx::tree::sequence< EncryptedAssertion::type > _xsd_EncryptedAssertion_;
    };

    class AttributeStatementType: public ::saml2::assertion::StatementAbstractType
    {
      public:

      struct _xsd_AttributeStatementType
      {
        typedef ::saml2::assertion::StatementAbstractType base_;
      };

      // Attribute
      // 
      public:
      struct Attribute
      {
        typedef ::saml2::assertion::AttributeType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Attribute::container&
      Attribute () const;

      Attribute::container&
      Attribute ();

      void
      Attribute (const Attribute::container&);

      // EncryptedAttribute
      // 
      public:
      struct EncryptedAttribute
      {
        typedef ::saml2::assertion::EncryptedElementType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const EncryptedAttribute::container&
      EncryptedAttribute () const;

      EncryptedAttribute::container&
      EncryptedAttribute ();

      void
      EncryptedAttribute (const EncryptedAttribute::container&);

      // Constructors.
      //
      public:
      AttributeStatementType ();

      AttributeStatementType (const ::xercesc::DOMElement&,
                              ::xml_schema::flags = 0,
                              ::xml_schema::type* = 0);

      AttributeStatementType (const AttributeStatementType&,
                              ::xml_schema::flags = 0,
                              ::xml_schema::type* = 0);

      virtual AttributeStatementType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< Attribute::type > _xsd_Attribute_;
      ::xsd::cxx::tree::sequence< EncryptedAttribute::type > _xsd_EncryptedAttribute_;
    };

    class AttributeType: public ::xml_schema::type
    {
      public:

      struct _xsd_AttributeType
      {
        typedef ::xml_schema::type base_;
      };

      // AttributeValue
      // 
      public:
      struct AttributeValue
      {
        typedef ::xml_schema::type type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AttributeValue::container&
      AttributeValue () const;

      AttributeValue::container&
      AttributeValue ();

      void
      AttributeValue (const AttributeValue::container&);

      // Name
      // 
      public:
      struct Name
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Name::type&
      Name () const;

      Name::type&
      Name ();

      void
      Name (const Name::type&);

      void
      Name (::std::auto_ptr< Name::type >);

      // NameFormat
      // 
      public:
      struct NameFormat
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const NameFormat::container&
      NameFormat () const;

      NameFormat::container&
      NameFormat ();

      void
      NameFormat (const NameFormat::type&);

      void
      NameFormat (const NameFormat::container&);

      void
      NameFormat (::std::auto_ptr< NameFormat::type >);

      // FriendlyName
      // 
      public:
      struct FriendlyName
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const FriendlyName::container&
      FriendlyName () const;

      FriendlyName::container&
      FriendlyName ();

      void
      FriendlyName (const FriendlyName::type&);

      void
      FriendlyName (const FriendlyName::container&);

      void
      FriendlyName (::std::auto_ptr< FriendlyName::type >);

      // Constructors.
      //
      public:
      AttributeType ();

      AttributeType (const Name::type&);

      AttributeType (const ::xercesc::DOMElement&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      AttributeType (const AttributeType&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      virtual AttributeType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< AttributeValue::type > _xsd_AttributeValue_;
      ::xsd::cxx::tree::one< Name::type > _xsd_Name_;
      ::xsd::cxx::tree::optional< NameFormat::type > _xsd_NameFormat_;
      ::xsd::cxx::tree::optional< FriendlyName::type > _xsd_FriendlyName_;
    };
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMInputSource.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace saml2
{
  namespace assertion
  {
    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (const ::std::basic_string< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (const ::std::basic_string< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (const ::std::basic_string< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (::std::istream&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (::std::istream&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (::std::istream&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (const ::xercesc::DOMInputSource&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (const ::xercesc::DOMInputSource&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (const ::xercesc::DOMInputSource&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (const ::xercesc::DOMDocument&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (const ::std::basic_string< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (const ::std::basic_string< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (const ::std::basic_string< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (::std::istream&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (::std::istream&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (::std::istream&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (const ::xercesc::DOMInputSource&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (const ::xercesc::DOMInputSource&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (const ::xercesc::DOMInputSource&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (const ::xercesc::DOMDocument&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (const ::std::basic_string< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (const ::std::basic_string< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (const ::std::basic_string< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (::std::istream&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (::std::istream&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (::std::istream&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (const ::xercesc::DOMInputSource&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (const ::xercesc::DOMInputSource&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (const ::xercesc::DOMInputSource&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (const ::xercesc::DOMDocument&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (const ::std::basic_string< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (const ::std::basic_string< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (const ::std::basic_string< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (::std::istream&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (::std::istream&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (::std::istream&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (const ::xercesc::DOMInputSource&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (const ::xercesc::DOMInputSource&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (const ::xercesc::DOMInputSource&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (const ::xercesc::DOMDocument&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (const ::std::basic_string< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (const ::std::basic_string< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (const ::std::basic_string< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (::std::istream&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (::std::istream&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (::std::istream&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (const ::xercesc::DOMInputSource&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (const ::xercesc::DOMInputSource&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (const ::xercesc::DOMInputSource&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (const ::xercesc::DOMDocument&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (const ::std::basic_string< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (const ::std::basic_string< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (const ::std::basic_string< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (::std::istream&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (::std::istream&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (::std::istream&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (const ::xercesc::DOMInputSource&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (const ::xercesc::DOMInputSource&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (const ::xercesc::DOMInputSource&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (const ::xercesc::DOMDocument&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (const ::std::basic_string< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (const ::std::basic_string< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (const ::std::basic_string< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (::std::istream&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (::std::istream&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (::std::istream&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (const ::xercesc::DOMInputSource&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (const ::xercesc::DOMInputSource&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (const ::xercesc::DOMInputSource&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (const ::xercesc::DOMDocument&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (const ::std::basic_string< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (const ::std::basic_string< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (const ::std::basic_string< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (::std::istream&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (::std::istream&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (::std::istream&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (const ::xercesc::DOMInputSource&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (const ::xercesc::DOMInputSource&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (const ::xercesc::DOMInputSource&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (const ::xercesc::DOMDocument&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (const ::std::basic_string< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (const ::std::basic_string< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (const ::std::basic_string< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (::std::istream&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (::std::istream&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (::std::istream&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (const ::xercesc::DOMInputSource&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (const ::xercesc::DOMInputSource&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (const ::xercesc::DOMInputSource&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (const ::xercesc::DOMDocument&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (const ::std::basic_string< wchar_t >&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (const ::std::basic_string< wchar_t >&,
                             ::xsd::cxx::xml::error_handler< wchar_t >&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (const ::std::basic_string< wchar_t >&,
                             ::xercesc::DOMErrorHandler&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (::std::istream&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (::std::istream&,
                             ::xsd::cxx::xml::error_handler< wchar_t >&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (::std::istream&,
                             ::xercesc::DOMErrorHandler&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (::std::istream&,
                             const ::std::basic_string< wchar_t >& id,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (::std::istream&,
                             const ::std::basic_string< wchar_t >& id,
                             ::xsd::cxx::xml::error_handler< wchar_t >&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (::std::istream&,
                             const ::std::basic_string< wchar_t >& id,
                             ::xercesc::DOMErrorHandler&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (const ::xercesc::DOMInputSource&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (const ::xercesc::DOMInputSource&,
                             ::xsd::cxx::xml::error_handler< wchar_t >&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (const ::xercesc::DOMInputSource&,
                             ::xercesc::DOMErrorHandler&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (const ::xercesc::DOMDocument&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (const ::std::basic_string< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (const ::std::basic_string< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (const ::std::basic_string< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (::std::istream&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (::std::istream&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (::std::istream&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (const ::xercesc::DOMInputSource&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (const ::xercesc::DOMInputSource&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (const ::xercesc::DOMInputSource&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (const ::xercesc::DOMDocument&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (const ::std::basic_string< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (const ::std::basic_string< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (const ::std::basic_string< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (::std::istream&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (::std::istream&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (::std::istream&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (const ::xercesc::DOMInputSource&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (const ::xercesc::DOMInputSource&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (const ::xercesc::DOMInputSource&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (const ::xercesc::DOMDocument&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (const ::std::basic_string< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (const ::std::basic_string< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (const ::std::basic_string< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (::std::istream&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (::std::istream&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (::std::istream&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (const ::xercesc::DOMInputSource&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (const ::xercesc::DOMInputSource&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (const ::xercesc::DOMInputSource&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (const ::xercesc::DOMDocument&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (const ::std::basic_string< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (const ::std::basic_string< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (const ::std::basic_string< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (::std::istream&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (::std::istream&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (::std::istream&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::uri >
    Audience (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (const ::xercesc::DOMInputSource&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (const ::xercesc::DOMInputSource&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (const ::xercesc::DOMInputSource&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (const ::xercesc::DOMDocument&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (const ::std::basic_string< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (const ::std::basic_string< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (const ::std::basic_string< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (::std::istream&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (::std::istream&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (::std::istream&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (const ::xercesc::DOMInputSource&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (const ::xercesc::DOMInputSource&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (const ::xercesc::DOMInputSource&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (const ::xercesc::DOMDocument&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (const ::std::basic_string< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (const ::std::basic_string< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (const ::std::basic_string< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (::std::istream&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (::std::istream&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (::std::istream&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (const ::xercesc::DOMInputSource&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (const ::xercesc::DOMInputSource&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (const ::xercesc::DOMInputSource&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (const ::xercesc::DOMDocument&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (const ::std::basic_string< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (const ::std::basic_string< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (const ::std::basic_string< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (::std::istream&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (::std::istream&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (::std::istream&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (const ::xercesc::DOMInputSource&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (const ::xercesc::DOMInputSource&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (const ::xercesc::DOMInputSource&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (const ::xercesc::DOMDocument&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (const ::std::basic_string< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (const ::std::basic_string< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (const ::std::basic_string< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (::std::istream&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (::std::istream&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (::std::istream&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (const ::xercesc::DOMInputSource&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (const ::xercesc::DOMInputSource&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (const ::xercesc::DOMInputSource&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (const ::xercesc::DOMDocument&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (const ::std::basic_string< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (const ::std::basic_string< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (const ::std::basic_string< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (::std::istream&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (::std::istream&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (::std::istream&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (const ::xercesc::DOMInputSource&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (const ::xercesc::DOMInputSource&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (const ::xercesc::DOMInputSource&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (const ::xercesc::DOMDocument&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (const ::std::basic_string< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (const ::std::basic_string< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (const ::std::basic_string< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (::std::istream&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (::std::istream&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (::std::istream&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (const ::xercesc::DOMInputSource&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (const ::xercesc::DOMInputSource&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (const ::xercesc::DOMInputSource&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (const ::xercesc::DOMDocument&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (const ::std::basic_string< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (const ::std::basic_string< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (const ::std::basic_string< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (::std::istream&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (::std::istream&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (::std::istream&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (const ::xercesc::DOMInputSource&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (const ::xercesc::DOMInputSource&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (const ::xercesc::DOMInputSource&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (const ::xercesc::DOMDocument&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (const ::std::basic_string< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (const ::std::basic_string< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (const ::std::basic_string< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (::std::istream&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (::std::istream&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (::std::istream&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (const ::xercesc::DOMInputSource&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (const ::xercesc::DOMInputSource&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (const ::xercesc::DOMInputSource&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (const ::xercesc::DOMDocument&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (const ::std::basic_string< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (const ::std::basic_string< wchar_t >&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (const ::std::basic_string< wchar_t >&,
                          ::xercesc::DOMErrorHandler&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (::std::istream&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (::std::istream&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (::std::istream&,
                          ::xercesc::DOMErrorHandler&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (::std::istream&,
                          const ::std::basic_string< wchar_t >& id,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (::std::istream&,
                          const ::std::basic_string< wchar_t >& id,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (::std::istream&,
                          const ::std::basic_string< wchar_t >& id,
                          ::xercesc::DOMErrorHandler&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (const ::xercesc::DOMInputSource&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (const ::xercesc::DOMInputSource&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (const ::xercesc::DOMInputSource&,
                          ::xercesc::DOMErrorHandler&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (const ::xercesc::DOMDocument&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (const ::std::basic_string< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (const ::std::basic_string< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (const ::std::basic_string< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (::std::istream&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (::std::istream&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (::std::istream&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (const ::xercesc::DOMInputSource&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (const ::xercesc::DOMInputSource&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (const ::xercesc::DOMInputSource&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (const ::xercesc::DOMDocument&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (const ::std::basic_string< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (const ::std::basic_string< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (const ::std::basic_string< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (::std::istream&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (::std::istream&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (::std::istream&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (const ::xercesc::DOMInputSource&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (const ::xercesc::DOMInputSource&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (const ::xercesc::DOMInputSource&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (const ::xercesc::DOMDocument&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (const ::std::basic_string< wchar_t >&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (const ::std::basic_string< wchar_t >&,
                             ::xsd::cxx::xml::error_handler< wchar_t >&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (const ::std::basic_string< wchar_t >&,
                             ::xercesc::DOMErrorHandler&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (::std::istream&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (::std::istream&,
                             ::xsd::cxx::xml::error_handler< wchar_t >&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (::std::istream&,
                             ::xercesc::DOMErrorHandler&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (::std::istream&,
                             const ::std::basic_string< wchar_t >& id,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (::std::istream&,
                             const ::std::basic_string< wchar_t >& id,
                             ::xsd::cxx::xml::error_handler< wchar_t >&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (::std::istream&,
                             const ::std::basic_string< wchar_t >& id,
                             ::xercesc::DOMErrorHandler&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (const ::xercesc::DOMInputSource&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (const ::xercesc::DOMInputSource&,
                             ::xsd::cxx::xml::error_handler< wchar_t >&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (const ::xercesc::DOMInputSource&,
                             ::xercesc::DOMErrorHandler&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (const ::xercesc::DOMDocument&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (const ::std::basic_string< wchar_t >&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (const ::std::basic_string< wchar_t >&,
                            ::xsd::cxx::xml::error_handler< wchar_t >&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (const ::std::basic_string< wchar_t >&,
                            ::xercesc::DOMErrorHandler&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (::std::istream&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (::std::istream&,
                            ::xsd::cxx::xml::error_handler< wchar_t >&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (::std::istream&,
                            ::xercesc::DOMErrorHandler&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (::std::istream&,
                            const ::std::basic_string< wchar_t >& id,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (::std::istream&,
                            const ::std::basic_string< wchar_t >& id,
                            ::xsd::cxx::xml::error_handler< wchar_t >&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (::std::istream&,
                            const ::std::basic_string< wchar_t >& id,
                            ::xercesc::DOMErrorHandler&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (const ::xercesc::DOMInputSource&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (const ::xercesc::DOMInputSource&,
                            ::xsd::cxx::xml::error_handler< wchar_t >&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (const ::xercesc::DOMInputSource&,
                            ::xercesc::DOMErrorHandler&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (const ::xercesc::DOMDocument&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (const ::std::basic_string< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (const ::std::basic_string< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (const ::std::basic_string< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (::std::istream&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (::std::istream&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (::std::istream&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (const ::xercesc::DOMInputSource&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (const ::xercesc::DOMInputSource&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (const ::xercesc::DOMInputSource&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (const ::xercesc::DOMDocument&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (const ::std::basic_string< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (const ::std::basic_string< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (const ::std::basic_string< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (::std::istream&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (::std::istream&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (::std::istream&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (const ::xercesc::DOMInputSource&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (const ::xercesc::DOMInputSource&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (const ::xercesc::DOMInputSource&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (const ::xercesc::DOMDocument&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (const ::std::basic_string< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (const ::std::basic_string< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (const ::std::basic_string< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (::std::istream&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (::std::istream&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (::std::istream&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (const ::xercesc::DOMInputSource&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (const ::xercesc::DOMInputSource&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (const ::xercesc::DOMInputSource&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (const ::xercesc::DOMDocument&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (const ::std::basic_string< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (const ::std::basic_string< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (const ::std::basic_string< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (::std::istream&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (::std::istream&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (::std::istream&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (const ::xercesc::DOMInputSource&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (const ::xercesc::DOMInputSource&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (const ::xercesc::DOMInputSource&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (const ::xercesc::DOMDocument&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (const ::std::basic_string< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (const ::std::basic_string< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (const ::std::basic_string< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (::std::istream&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (::std::istream&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (::std::istream&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (const ::xercesc::DOMInputSource&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (const ::xercesc::DOMInputSource&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (const ::xercesc::DOMInputSource&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (const ::xercesc::DOMDocument&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (const ::std::basic_string< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (const ::std::basic_string< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (const ::std::basic_string< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (::std::istream&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (::std::istream&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (::std::istream&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (const ::xercesc::DOMInputSource&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (const ::xercesc::DOMInputSource&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (const ::xercesc::DOMInputSource&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (const ::xercesc::DOMDocument&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());
  }
}

#include <iosfwd> // std::ostream&

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace saml2
{
  namespace assertion
  {
    // Serialize to an existing DOM instance.
    //
    void
    BaseID (::xercesc::DOMDocument&,
            const ::saml2::assertion::BaseIDAbstractType&,
            ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    BaseID (const ::saml2::assertion::BaseIDAbstractType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    BaseID (::xercesc::XMLFormatTarget&,
            const ::saml2::assertion::BaseIDAbstractType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    BaseID (::xercesc::XMLFormatTarget&,
            const ::saml2::assertion::BaseIDAbstractType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    BaseID (::xercesc::XMLFormatTarget&,
            const ::saml2::assertion::BaseIDAbstractType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    BaseID (::std::ostream&,
            const ::saml2::assertion::BaseIDAbstractType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    BaseID (::std::ostream&,
            const ::saml2::assertion::BaseIDAbstractType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    BaseID (::std::ostream&,
            const ::saml2::assertion::BaseIDAbstractType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const BaseIDAbstractType&);

    // Serialize to an existing DOM instance.
    //
    void
    NameID (::xercesc::DOMDocument&,
            const ::saml2::assertion::NameIDType&,
            ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    NameID (const ::saml2::assertion::NameIDType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    NameID (::xercesc::XMLFormatTarget&,
            const ::saml2::assertion::NameIDType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    NameID (::xercesc::XMLFormatTarget&,
            const ::saml2::assertion::NameIDType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    NameID (::xercesc::XMLFormatTarget&,
            const ::saml2::assertion::NameIDType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    NameID (::std::ostream&,
            const ::saml2::assertion::NameIDType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    NameID (::std::ostream&,
            const ::saml2::assertion::NameIDType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    NameID (::std::ostream&,
            const ::saml2::assertion::NameIDType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const NameIDType&);

    void
    operator<< (::xercesc::DOMElement&,
                const EncryptedElementType&);

    // Serialize to an existing DOM instance.
    //
    void
    EncryptedID (::xercesc::DOMDocument&,
                 const ::saml2::assertion::EncryptedElementType&,
                 ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    EncryptedID (const ::saml2::assertion::EncryptedElementType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    EncryptedID (::xercesc::XMLFormatTarget&,
                 const ::saml2::assertion::EncryptedElementType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    EncryptedID (::xercesc::XMLFormatTarget&,
                 const ::saml2::assertion::EncryptedElementType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);

    void
    EncryptedID (::xercesc::XMLFormatTarget&,
                 const ::saml2::assertion::EncryptedElementType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    EncryptedID (::std::ostream&,
                 const ::saml2::assertion::EncryptedElementType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    EncryptedID (::std::ostream&,
                 const ::saml2::assertion::EncryptedElementType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);

    void
    EncryptedID (::std::ostream&,
                 const ::saml2::assertion::EncryptedElementType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    Issuer (::xercesc::DOMDocument&,
            const ::saml2::assertion::NameIDType&,
            ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Issuer (const ::saml2::assertion::NameIDType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Issuer (::xercesc::XMLFormatTarget&,
            const ::saml2::assertion::NameIDType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    Issuer (::xercesc::XMLFormatTarget&,
            const ::saml2::assertion::NameIDType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    Issuer (::xercesc::XMLFormatTarget&,
            const ::saml2::assertion::NameIDType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Issuer (::std::ostream&,
            const ::saml2::assertion::NameIDType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    Issuer (::std::ostream&,
            const ::saml2::assertion::NameIDType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    Issuer (::std::ostream&,
            const ::saml2::assertion::NameIDType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    AssertionIDRef (::xercesc::DOMDocument&,
                    const ::xml_schema::ncname&,
                    ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AssertionIDRef (const ::xml_schema::ncname&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AssertionIDRef (::xercesc::XMLFormatTarget&,
                    const ::xml_schema::ncname&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    AssertionIDRef (::xercesc::XMLFormatTarget&,
                    const ::xml_schema::ncname&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);

    void
    AssertionIDRef (::xercesc::XMLFormatTarget&,
                    const ::xml_schema::ncname&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AssertionIDRef (::std::ostream&,
                    const ::xml_schema::ncname&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    AssertionIDRef (::std::ostream&,
                    const ::xml_schema::ncname&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);

    void
    AssertionIDRef (::std::ostream&,
                    const ::xml_schema::ncname&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    AssertionURIRef (::xercesc::DOMDocument&,
                     const ::xml_schema::uri&,
                     ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AssertionURIRef (const ::xml_schema::uri&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AssertionURIRef (::xercesc::XMLFormatTarget&,
                     const ::xml_schema::uri&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    AssertionURIRef (::xercesc::XMLFormatTarget&,
                     const ::xml_schema::uri&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);

    void
    AssertionURIRef (::xercesc::XMLFormatTarget&,
                     const ::xml_schema::uri&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AssertionURIRef (::std::ostream&,
                     const ::xml_schema::uri&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    AssertionURIRef (::std::ostream&,
                     const ::xml_schema::uri&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);

    void
    AssertionURIRef (::std::ostream&,
                     const ::xml_schema::uri&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    Assertion (::xercesc::DOMDocument&,
               const ::saml2::assertion::AssertionType&,
               ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Assertion (const ::saml2::assertion::AssertionType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Assertion (::xercesc::XMLFormatTarget&,
               const ::saml2::assertion::AssertionType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    Assertion (::xercesc::XMLFormatTarget&,
               const ::saml2::assertion::AssertionType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    Assertion (::xercesc::XMLFormatTarget&,
               const ::saml2::assertion::AssertionType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Assertion (::std::ostream&,
               const ::saml2::assertion::AssertionType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    Assertion (::std::ostream&,
               const ::saml2::assertion::AssertionType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    Assertion (::std::ostream&,
               const ::saml2::assertion::AssertionType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const AssertionType&);

    // Serialize to an existing DOM instance.
    //
    void
    Subject (::xercesc::DOMDocument&,
             const ::saml2::assertion::SubjectType&,
             ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Subject (const ::saml2::assertion::SubjectType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Subject (::xercesc::XMLFormatTarget&,
             const ::saml2::assertion::SubjectType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    Subject (::xercesc::XMLFormatTarget&,
             const ::saml2::assertion::SubjectType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);

    void
    Subject (::xercesc::XMLFormatTarget&,
             const ::saml2::assertion::SubjectType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Subject (::std::ostream&,
             const ::saml2::assertion::SubjectType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    Subject (::std::ostream&,
             const ::saml2::assertion::SubjectType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);

    void
    Subject (::std::ostream&,
             const ::saml2::assertion::SubjectType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const SubjectType&);

    // Serialize to an existing DOM instance.
    //
    void
    SubjectConfirmation (::xercesc::DOMDocument&,
                         const ::saml2::assertion::SubjectConfirmationType&,
                         ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SubjectConfirmation (const ::saml2::assertion::SubjectConfirmationType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    SubjectConfirmation (::xercesc::XMLFormatTarget&,
                         const ::saml2::assertion::SubjectConfirmationType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    void
    SubjectConfirmation (::xercesc::XMLFormatTarget&,
                         const ::saml2::assertion::SubjectConfirmationType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);

    void
    SubjectConfirmation (::xercesc::XMLFormatTarget&,
                         const ::saml2::assertion::SubjectConfirmationType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    SubjectConfirmation (::std::ostream&,
                         const ::saml2::assertion::SubjectConfirmationType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    void
    SubjectConfirmation (::std::ostream&,
                         const ::saml2::assertion::SubjectConfirmationType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);

    void
    SubjectConfirmation (::std::ostream&,
                         const ::saml2::assertion::SubjectConfirmationType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const SubjectConfirmationType&);

    // Serialize to an existing DOM instance.
    //
    void
    SubjectConfirmationData (::xercesc::DOMDocument&,
                             const ::saml2::assertion::SubjectConfirmationDataType&,
                             ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SubjectConfirmationData (const ::saml2::assertion::SubjectConfirmationDataType&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    SubjectConfirmationData (::xercesc::XMLFormatTarget&,
                             const ::saml2::assertion::SubjectConfirmationDataType&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             const ::std::basic_string< wchar_t >& = L"UTF-8",
                             ::xml_schema::flags = 0);


    void
    SubjectConfirmationData (::xercesc::XMLFormatTarget&,
                             const ::saml2::assertion::SubjectConfirmationDataType&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             ::xsd::cxx::xml::error_handler< wchar_t >&,
                             const ::std::basic_string< wchar_t >& = L"UTF-8",
                             ::xml_schema::flags = 0);

    void
    SubjectConfirmationData (::xercesc::XMLFormatTarget&,
                             const ::saml2::assertion::SubjectConfirmationDataType&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             ::xercesc::DOMErrorHandler&,
                             const ::std::basic_string< wchar_t >& = L"UTF-8",
                             ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    SubjectConfirmationData (::std::ostream&,
                             const ::saml2::assertion::SubjectConfirmationDataType&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             const ::std::basic_string< wchar_t >& = L"UTF-8",
                             ::xml_schema::flags = 0);


    void
    SubjectConfirmationData (::std::ostream&,
                             const ::saml2::assertion::SubjectConfirmationDataType&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             ::xsd::cxx::xml::error_handler< wchar_t >&,
                             const ::std::basic_string< wchar_t >& = L"UTF-8",
                             ::xml_schema::flags = 0);

    void
    SubjectConfirmationData (::std::ostream&,
                             const ::saml2::assertion::SubjectConfirmationDataType&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             ::xercesc::DOMErrorHandler&,
                             const ::std::basic_string< wchar_t >& = L"UTF-8",
                             ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const SubjectConfirmationDataType&);

    void
    operator<< (::xercesc::DOMElement&,
                const KeyInfoConfirmationDataType&);

    // Serialize to an existing DOM instance.
    //
    void
    Conditions (::xercesc::DOMDocument&,
                const ::saml2::assertion::ConditionsType&,
                ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Conditions (const ::saml2::assertion::ConditionsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Conditions (::xercesc::XMLFormatTarget&,
                const ::saml2::assertion::ConditionsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    Conditions (::xercesc::XMLFormatTarget&,
                const ::saml2::assertion::ConditionsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);

    void
    Conditions (::xercesc::XMLFormatTarget&,
                const ::saml2::assertion::ConditionsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Conditions (::std::ostream&,
                const ::saml2::assertion::ConditionsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    Conditions (::std::ostream&,
                const ::saml2::assertion::ConditionsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);

    void
    Conditions (::std::ostream&,
                const ::saml2::assertion::ConditionsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ConditionsType&);

    // Serialize to an existing DOM instance.
    //
    void
    Condition (::xercesc::DOMDocument&,
               const ::saml2::assertion::ConditionAbstractType&,
               ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Condition (const ::saml2::assertion::ConditionAbstractType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Condition (::xercesc::XMLFormatTarget&,
               const ::saml2::assertion::ConditionAbstractType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    Condition (::xercesc::XMLFormatTarget&,
               const ::saml2::assertion::ConditionAbstractType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    Condition (::xercesc::XMLFormatTarget&,
               const ::saml2::assertion::ConditionAbstractType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Condition (::std::ostream&,
               const ::saml2::assertion::ConditionAbstractType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    Condition (::std::ostream&,
               const ::saml2::assertion::ConditionAbstractType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    Condition (::std::ostream&,
               const ::saml2::assertion::ConditionAbstractType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ConditionAbstractType&);

    void
    operator<< (::xercesc::DOMAttr&,
                const ConditionAbstractType&);

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                const ConditionAbstractType&);

    // Serialize to an existing DOM instance.
    //
    void
    AudienceRestriction (::xercesc::DOMDocument&,
                         const ::saml2::assertion::AudienceRestrictionType&,
                         ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AudienceRestriction (const ::saml2::assertion::AudienceRestrictionType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AudienceRestriction (::xercesc::XMLFormatTarget&,
                         const ::saml2::assertion::AudienceRestrictionType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    void
    AudienceRestriction (::xercesc::XMLFormatTarget&,
                         const ::saml2::assertion::AudienceRestrictionType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);

    void
    AudienceRestriction (::xercesc::XMLFormatTarget&,
                         const ::saml2::assertion::AudienceRestrictionType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AudienceRestriction (::std::ostream&,
                         const ::saml2::assertion::AudienceRestrictionType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    void
    AudienceRestriction (::std::ostream&,
                         const ::saml2::assertion::AudienceRestrictionType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);

    void
    AudienceRestriction (::std::ostream&,
                         const ::saml2::assertion::AudienceRestrictionType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const AudienceRestrictionType&);

    // Serialize to an existing DOM instance.
    //
    void
    Audience (::xercesc::DOMDocument&,
              const ::xml_schema::uri&,
              ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Audience (const ::xml_schema::uri&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Audience (::xercesc::XMLFormatTarget&,
              const ::xml_schema::uri&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    Audience (::xercesc::XMLFormatTarget&,
              const ::xml_schema::uri&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    Audience (::xercesc::XMLFormatTarget&,
              const ::xml_schema::uri&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Audience (::std::ostream&,
              const ::xml_schema::uri&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    Audience (::std::ostream&,
              const ::xml_schema::uri&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    Audience (::std::ostream&,
              const ::xml_schema::uri&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    OneTimeUse (::xercesc::DOMDocument&,
                const ::saml2::assertion::OneTimeUseType&,
                ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    OneTimeUse (const ::saml2::assertion::OneTimeUseType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    OneTimeUse (::xercesc::XMLFormatTarget&,
                const ::saml2::assertion::OneTimeUseType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    OneTimeUse (::xercesc::XMLFormatTarget&,
                const ::saml2::assertion::OneTimeUseType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);

    void
    OneTimeUse (::xercesc::XMLFormatTarget&,
                const ::saml2::assertion::OneTimeUseType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    OneTimeUse (::std::ostream&,
                const ::saml2::assertion::OneTimeUseType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    OneTimeUse (::std::ostream&,
                const ::saml2::assertion::OneTimeUseType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);

    void
    OneTimeUse (::std::ostream&,
                const ::saml2::assertion::OneTimeUseType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const OneTimeUseType&);

    void
    operator<< (::xercesc::DOMAttr&,
                const OneTimeUseType&);

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                const OneTimeUseType&);

    // Serialize to an existing DOM instance.
    //
    void
    ProxyRestriction (::xercesc::DOMDocument&,
                      const ::saml2::assertion::ProxyRestrictionType&,
                      ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ProxyRestriction (const ::saml2::assertion::ProxyRestrictionType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    ProxyRestriction (::xercesc::XMLFormatTarget&,
                      const ::saml2::assertion::ProxyRestrictionType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    void
    ProxyRestriction (::xercesc::XMLFormatTarget&,
                      const ::saml2::assertion::ProxyRestrictionType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);

    void
    ProxyRestriction (::xercesc::XMLFormatTarget&,
                      const ::saml2::assertion::ProxyRestrictionType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    ProxyRestriction (::std::ostream&,
                      const ::saml2::assertion::ProxyRestrictionType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    void
    ProxyRestriction (::std::ostream&,
                      const ::saml2::assertion::ProxyRestrictionType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);

    void
    ProxyRestriction (::std::ostream&,
                      const ::saml2::assertion::ProxyRestrictionType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ProxyRestrictionType&);

    // Serialize to an existing DOM instance.
    //
    void
    Advice (::xercesc::DOMDocument&,
            const ::saml2::assertion::AdviceType&,
            ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Advice (const ::saml2::assertion::AdviceType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Advice (::xercesc::XMLFormatTarget&,
            const ::saml2::assertion::AdviceType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    Advice (::xercesc::XMLFormatTarget&,
            const ::saml2::assertion::AdviceType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    Advice (::xercesc::XMLFormatTarget&,
            const ::saml2::assertion::AdviceType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Advice (::std::ostream&,
            const ::saml2::assertion::AdviceType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    Advice (::std::ostream&,
            const ::saml2::assertion::AdviceType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    Advice (::std::ostream&,
            const ::saml2::assertion::AdviceType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const AdviceType&);

    // Serialize to an existing DOM instance.
    //
    void
    EncryptedAssertion (::xercesc::DOMDocument&,
                        const ::saml2::assertion::EncryptedElementType&,
                        ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    EncryptedAssertion (const ::saml2::assertion::EncryptedElementType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    EncryptedAssertion (::xercesc::XMLFormatTarget&,
                        const ::saml2::assertion::EncryptedElementType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    void
    EncryptedAssertion (::xercesc::XMLFormatTarget&,
                        const ::saml2::assertion::EncryptedElementType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);

    void
    EncryptedAssertion (::xercesc::XMLFormatTarget&,
                        const ::saml2::assertion::EncryptedElementType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    EncryptedAssertion (::std::ostream&,
                        const ::saml2::assertion::EncryptedElementType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    void
    EncryptedAssertion (::std::ostream&,
                        const ::saml2::assertion::EncryptedElementType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);

    void
    EncryptedAssertion (::std::ostream&,
                        const ::saml2::assertion::EncryptedElementType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    Statement (::xercesc::DOMDocument&,
               const ::saml2::assertion::StatementAbstractType&,
               ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Statement (const ::saml2::assertion::StatementAbstractType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Statement (::xercesc::XMLFormatTarget&,
               const ::saml2::assertion::StatementAbstractType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    Statement (::xercesc::XMLFormatTarget&,
               const ::saml2::assertion::StatementAbstractType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    Statement (::xercesc::XMLFormatTarget&,
               const ::saml2::assertion::StatementAbstractType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Statement (::std::ostream&,
               const ::saml2::assertion::StatementAbstractType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    Statement (::std::ostream&,
               const ::saml2::assertion::StatementAbstractType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    Statement (::std::ostream&,
               const ::saml2::assertion::StatementAbstractType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const StatementAbstractType&);

    void
    operator<< (::xercesc::DOMAttr&,
                const StatementAbstractType&);

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                const StatementAbstractType&);

    // Serialize to an existing DOM instance.
    //
    void
    AuthnStatement (::xercesc::DOMDocument&,
                    const ::saml2::assertion::AuthnStatementType&,
                    ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthnStatement (const ::saml2::assertion::AuthnStatementType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AuthnStatement (::xercesc::XMLFormatTarget&,
                    const ::saml2::assertion::AuthnStatementType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    AuthnStatement (::xercesc::XMLFormatTarget&,
                    const ::saml2::assertion::AuthnStatementType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);

    void
    AuthnStatement (::xercesc::XMLFormatTarget&,
                    const ::saml2::assertion::AuthnStatementType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AuthnStatement (::std::ostream&,
                    const ::saml2::assertion::AuthnStatementType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    AuthnStatement (::std::ostream&,
                    const ::saml2::assertion::AuthnStatementType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);

    void
    AuthnStatement (::std::ostream&,
                    const ::saml2::assertion::AuthnStatementType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const AuthnStatementType&);

    // Serialize to an existing DOM instance.
    //
    void
    SubjectLocality (::xercesc::DOMDocument&,
                     const ::saml2::assertion::SubjectLocalityType&,
                     ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SubjectLocality (const ::saml2::assertion::SubjectLocalityType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    SubjectLocality (::xercesc::XMLFormatTarget&,
                     const ::saml2::assertion::SubjectLocalityType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    SubjectLocality (::xercesc::XMLFormatTarget&,
                     const ::saml2::assertion::SubjectLocalityType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);

    void
    SubjectLocality (::xercesc::XMLFormatTarget&,
                     const ::saml2::assertion::SubjectLocalityType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    SubjectLocality (::std::ostream&,
                     const ::saml2::assertion::SubjectLocalityType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    SubjectLocality (::std::ostream&,
                     const ::saml2::assertion::SubjectLocalityType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);

    void
    SubjectLocality (::std::ostream&,
                     const ::saml2::assertion::SubjectLocalityType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const SubjectLocalityType&);

    // Serialize to an existing DOM instance.
    //
    void
    AuthnContext (::xercesc::DOMDocument&,
                  const ::saml2::assertion::AuthnContextType&,
                  ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthnContext (const ::saml2::assertion::AuthnContextType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AuthnContext (::xercesc::XMLFormatTarget&,
                  const ::saml2::assertion::AuthnContextType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    AuthnContext (::xercesc::XMLFormatTarget&,
                  const ::saml2::assertion::AuthnContextType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);

    void
    AuthnContext (::xercesc::XMLFormatTarget&,
                  const ::saml2::assertion::AuthnContextType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AuthnContext (::std::ostream&,
                  const ::saml2::assertion::AuthnContextType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    AuthnContext (::std::ostream&,
                  const ::saml2::assertion::AuthnContextType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);

    void
    AuthnContext (::std::ostream&,
                  const ::saml2::assertion::AuthnContextType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const AuthnContextType&);

    // Serialize to an existing DOM instance.
    //
    void
    AuthnContextClassRef (::xercesc::DOMDocument&,
                          const ::xml_schema::uri&,
                          ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthnContextClassRef (const ::xml_schema::uri&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AuthnContextClassRef (::xercesc::XMLFormatTarget&,
                          const ::xml_schema::uri&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);


    void
    AuthnContextClassRef (::xercesc::XMLFormatTarget&,
                          const ::xml_schema::uri&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);

    void
    AuthnContextClassRef (::xercesc::XMLFormatTarget&,
                          const ::xml_schema::uri&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xercesc::DOMErrorHandler&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AuthnContextClassRef (::std::ostream&,
                          const ::xml_schema::uri&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);


    void
    AuthnContextClassRef (::std::ostream&,
                          const ::xml_schema::uri&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);

    void
    AuthnContextClassRef (::std::ostream&,
                          const ::xml_schema::uri&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xercesc::DOMErrorHandler&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    AuthnContextDeclRef (::xercesc::DOMDocument&,
                         const ::xml_schema::uri&,
                         ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthnContextDeclRef (const ::xml_schema::uri&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AuthnContextDeclRef (::xercesc::XMLFormatTarget&,
                         const ::xml_schema::uri&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    void
    AuthnContextDeclRef (::xercesc::XMLFormatTarget&,
                         const ::xml_schema::uri&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);

    void
    AuthnContextDeclRef (::xercesc::XMLFormatTarget&,
                         const ::xml_schema::uri&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AuthnContextDeclRef (::std::ostream&,
                         const ::xml_schema::uri&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    void
    AuthnContextDeclRef (::std::ostream&,
                         const ::xml_schema::uri&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);

    void
    AuthnContextDeclRef (::std::ostream&,
                         const ::xml_schema::uri&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    AuthnContextDecl (::xercesc::DOMDocument&,
                      const ::xml_schema::type&,
                      ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthnContextDecl (const ::xml_schema::type&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AuthnContextDecl (::xercesc::XMLFormatTarget&,
                      const ::xml_schema::type&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    void
    AuthnContextDecl (::xercesc::XMLFormatTarget&,
                      const ::xml_schema::type&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);

    void
    AuthnContextDecl (::xercesc::XMLFormatTarget&,
                      const ::xml_schema::type&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AuthnContextDecl (::std::ostream&,
                      const ::xml_schema::type&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    void
    AuthnContextDecl (::std::ostream&,
                      const ::xml_schema::type&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);

    void
    AuthnContextDecl (::std::ostream&,
                      const ::xml_schema::type&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    AuthenticatingAuthority (::xercesc::DOMDocument&,
                             const ::xml_schema::uri&,
                             ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthenticatingAuthority (const ::xml_schema::uri&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AuthenticatingAuthority (::xercesc::XMLFormatTarget&,
                             const ::xml_schema::uri&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             const ::std::basic_string< wchar_t >& = L"UTF-8",
                             ::xml_schema::flags = 0);


    void
    AuthenticatingAuthority (::xercesc::XMLFormatTarget&,
                             const ::xml_schema::uri&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             ::xsd::cxx::xml::error_handler< wchar_t >&,
                             const ::std::basic_string< wchar_t >& = L"UTF-8",
                             ::xml_schema::flags = 0);

    void
    AuthenticatingAuthority (::xercesc::XMLFormatTarget&,
                             const ::xml_schema::uri&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             ::xercesc::DOMErrorHandler&,
                             const ::std::basic_string< wchar_t >& = L"UTF-8",
                             ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AuthenticatingAuthority (::std::ostream&,
                             const ::xml_schema::uri&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             const ::std::basic_string< wchar_t >& = L"UTF-8",
                             ::xml_schema::flags = 0);


    void
    AuthenticatingAuthority (::std::ostream&,
                             const ::xml_schema::uri&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             ::xsd::cxx::xml::error_handler< wchar_t >&,
                             const ::std::basic_string< wchar_t >& = L"UTF-8",
                             ::xml_schema::flags = 0);

    void
    AuthenticatingAuthority (::std::ostream&,
                             const ::xml_schema::uri&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             ::xercesc::DOMErrorHandler&,
                             const ::std::basic_string< wchar_t >& = L"UTF-8",
                             ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    AuthzDecisionStatement (::xercesc::DOMDocument&,
                            const ::saml2::assertion::AuthzDecisionStatementType&,
                            ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthzDecisionStatement (const ::saml2::assertion::AuthzDecisionStatementType&, 
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                            ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AuthzDecisionStatement (::xercesc::XMLFormatTarget&,
                            const ::saml2::assertion::AuthzDecisionStatementType&, 
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                            const ::std::basic_string< wchar_t >& = L"UTF-8",
                            ::xml_schema::flags = 0);


    void
    AuthzDecisionStatement (::xercesc::XMLFormatTarget&,
                            const ::saml2::assertion::AuthzDecisionStatementType&, 
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                            ::xsd::cxx::xml::error_handler< wchar_t >&,
                            const ::std::basic_string< wchar_t >& = L"UTF-8",
                            ::xml_schema::flags = 0);

    void
    AuthzDecisionStatement (::xercesc::XMLFormatTarget&,
                            const ::saml2::assertion::AuthzDecisionStatementType&, 
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                            ::xercesc::DOMErrorHandler&,
                            const ::std::basic_string< wchar_t >& = L"UTF-8",
                            ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AuthzDecisionStatement (::std::ostream&,
                            const ::saml2::assertion::AuthzDecisionStatementType&, 
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                            const ::std::basic_string< wchar_t >& = L"UTF-8",
                            ::xml_schema::flags = 0);


    void
    AuthzDecisionStatement (::std::ostream&,
                            const ::saml2::assertion::AuthzDecisionStatementType&, 
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                            ::xsd::cxx::xml::error_handler< wchar_t >&,
                            const ::std::basic_string< wchar_t >& = L"UTF-8",
                            ::xml_schema::flags = 0);

    void
    AuthzDecisionStatement (::std::ostream&,
                            const ::saml2::assertion::AuthzDecisionStatementType&, 
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                            ::xercesc::DOMErrorHandler&,
                            const ::std::basic_string< wchar_t >& = L"UTF-8",
                            ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const AuthzDecisionStatementType&);

    void
    operator<< (::xercesc::DOMElement&,
                DecisionType);

    void
    operator<< (::xercesc::DOMAttr&,
                DecisionType);

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                DecisionType);

    // Serialize to an existing DOM instance.
    //
    void
    Action (::xercesc::DOMDocument&,
            const ::saml2::assertion::ActionType&,
            ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Action (const ::saml2::assertion::ActionType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Action (::xercesc::XMLFormatTarget&,
            const ::saml2::assertion::ActionType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    Action (::xercesc::XMLFormatTarget&,
            const ::saml2::assertion::ActionType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    Action (::xercesc::XMLFormatTarget&,
            const ::saml2::assertion::ActionType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Action (::std::ostream&,
            const ::saml2::assertion::ActionType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    Action (::std::ostream&,
            const ::saml2::assertion::ActionType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    Action (::std::ostream&,
            const ::saml2::assertion::ActionType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ActionType&);

    // Serialize to an existing DOM instance.
    //
    void
    Evidence (::xercesc::DOMDocument&,
              const ::saml2::assertion::EvidenceType&,
              ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Evidence (const ::saml2::assertion::EvidenceType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Evidence (::xercesc::XMLFormatTarget&,
              const ::saml2::assertion::EvidenceType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    Evidence (::xercesc::XMLFormatTarget&,
              const ::saml2::assertion::EvidenceType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    Evidence (::xercesc::XMLFormatTarget&,
              const ::saml2::assertion::EvidenceType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Evidence (::std::ostream&,
              const ::saml2::assertion::EvidenceType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    Evidence (::std::ostream&,
              const ::saml2::assertion::EvidenceType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    Evidence (::std::ostream&,
              const ::saml2::assertion::EvidenceType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const EvidenceType&);

    // Serialize to an existing DOM instance.
    //
    void
    AttributeStatement (::xercesc::DOMDocument&,
                        const ::saml2::assertion::AttributeStatementType&,
                        ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeStatement (const ::saml2::assertion::AttributeStatementType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AttributeStatement (::xercesc::XMLFormatTarget&,
                        const ::saml2::assertion::AttributeStatementType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    void
    AttributeStatement (::xercesc::XMLFormatTarget&,
                        const ::saml2::assertion::AttributeStatementType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);

    void
    AttributeStatement (::xercesc::XMLFormatTarget&,
                        const ::saml2::assertion::AttributeStatementType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AttributeStatement (::std::ostream&,
                        const ::saml2::assertion::AttributeStatementType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    void
    AttributeStatement (::std::ostream&,
                        const ::saml2::assertion::AttributeStatementType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);

    void
    AttributeStatement (::std::ostream&,
                        const ::saml2::assertion::AttributeStatementType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const AttributeStatementType&);

    // Serialize to an existing DOM instance.
    //
    void
    Attribute (::xercesc::DOMDocument&,
               const ::saml2::assertion::AttributeType&,
               ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Attribute (const ::saml2::assertion::AttributeType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Attribute (::xercesc::XMLFormatTarget&,
               const ::saml2::assertion::AttributeType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    Attribute (::xercesc::XMLFormatTarget&,
               const ::saml2::assertion::AttributeType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    Attribute (::xercesc::XMLFormatTarget&,
               const ::saml2::assertion::AttributeType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Attribute (::std::ostream&,
               const ::saml2::assertion::AttributeType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    Attribute (::std::ostream&,
               const ::saml2::assertion::AttributeType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    Attribute (::std::ostream&,
               const ::saml2::assertion::AttributeType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const AttributeType&);

    // Serialize to an existing DOM instance.
    //
    void
    AttributeValue (::xercesc::DOMDocument&,
                    const ::xml_schema::type&,
                    ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeValue (const ::xml_schema::type&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AttributeValue (::xercesc::XMLFormatTarget&,
                    const ::xml_schema::type&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    AttributeValue (::xercesc::XMLFormatTarget&,
                    const ::xml_schema::type&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);

    void
    AttributeValue (::xercesc::XMLFormatTarget&,
                    const ::xml_schema::type&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AttributeValue (::std::ostream&,
                    const ::xml_schema::type&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    AttributeValue (::std::ostream&,
                    const ::xml_schema::type&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);

    void
    AttributeValue (::std::ostream&,
                    const ::xml_schema::type&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    EncryptedAttribute (::xercesc::DOMDocument&,
                        const ::saml2::assertion::EncryptedElementType&,
                        ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    EncryptedAttribute (const ::saml2::assertion::EncryptedElementType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    EncryptedAttribute (::xercesc::XMLFormatTarget&,
                        const ::saml2::assertion::EncryptedElementType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    void
    EncryptedAttribute (::xercesc::XMLFormatTarget&,
                        const ::saml2::assertion::EncryptedElementType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);

    void
    EncryptedAttribute (::xercesc::XMLFormatTarget&,
                        const ::saml2::assertion::EncryptedElementType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    EncryptedAttribute (::std::ostream&,
                        const ::saml2::assertion::EncryptedElementType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    void
    EncryptedAttribute (::std::ostream&,
                        const ::saml2::assertion::EncryptedElementType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);

    void
    EncryptedAttribute (::std::ostream&,
                        const ::saml2::assertion::EncryptedElementType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SAML_SCHEMA_ASSERTION_2_0_HXX
