// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "lxacml-schema-saml-assertion.hxx"

namespace middleware
{
  namespace lxacmlSAMLAssertionSchema
  {
    // LXACMLAuthzDecisionStatementType
    // 

    const LXACMLAuthzDecisionStatementType::Response::type& LXACMLAuthzDecisionStatementType::
    Response () const
    {
      return this->_xsd_Response_.get ();
    }

    LXACMLAuthzDecisionStatementType::Response::type& LXACMLAuthzDecisionStatementType::
    Response ()
    {
      return this->_xsd_Response_.get ();
    }

    void LXACMLAuthzDecisionStatementType::
    Response (const Response::type& Response)
    {
      this->_xsd_Response_.set (Response);
    }

    void LXACMLAuthzDecisionStatementType::
    Response (::std::auto_ptr< Response::type > Response)
    {
      this->_xsd_Response_.set (Response);
    }

    const LXACMLAuthzDecisionStatementType::Request::container& LXACMLAuthzDecisionStatementType::
    Request () const
    {
      return this->_xsd_Request_;
    }

    LXACMLAuthzDecisionStatementType::Request::container& LXACMLAuthzDecisionStatementType::
    Request ()
    {
      return this->_xsd_Request_;
    }

    void LXACMLAuthzDecisionStatementType::
    Request (const Request::type& Request)
    {
      this->_xsd_Request_.set (Request);
    }

    void LXACMLAuthzDecisionStatementType::
    Request (const Request::container& Request)
    {
      this->_xsd_Request_ = Request;
    }

    void LXACMLAuthzDecisionStatementType::
    Request (::std::auto_ptr< Request::type > Request)
    {
      this->_xsd_Request_.set (Request);
    }


    // LXACMLPolicyStatementType
    // 

    const LXACMLPolicyStatementType::Policy::container& LXACMLPolicyStatementType::
    Policy () const
    {
      return this->_xsd_Policy_;
    }

    LXACMLPolicyStatementType::Policy::container& LXACMLPolicyStatementType::
    Policy ()
    {
      return this->_xsd_Policy_;
    }

    void LXACMLPolicyStatementType::
    Policy (const Policy::container& Policy)
    {
      this->_xsd_Policy_ = Policy;
    }

    const LXACMLPolicyStatementType::PolicySet::container& LXACMLPolicyStatementType::
    PolicySet () const
    {
      return this->_xsd_PolicySet_;
    }

    LXACMLPolicyStatementType::PolicySet::container& LXACMLPolicyStatementType::
    PolicySet ()
    {
      return this->_xsd_PolicySet_;
    }

    void LXACMLPolicyStatementType::
    PolicySet (const PolicySet::container& PolicySet)
    {
      this->_xsd_PolicySet_ = PolicySet;
    }
  }
}

#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/parser.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_factory_plate< 0, wchar_t >
  type_factory_plate_init;
}

namespace middleware
{
  namespace lxacmlSAMLAssertionSchema
  {
    // LXACMLAuthzDecisionStatementType
    //

    LXACMLAuthzDecisionStatementType::
    LXACMLAuthzDecisionStatementType ()
    : ::saml2::assertion::StatementAbstractType (),
    _xsd_Response_ (::xml_schema::flags (), this),
    _xsd_Request_ (::xml_schema::flags (), this)
    {
    }

    LXACMLAuthzDecisionStatementType::
    LXACMLAuthzDecisionStatementType (const Response::type& _xsd_Response)
    : ::saml2::assertion::StatementAbstractType (),
    _xsd_Response_ (_xsd_Response,
                    ::xml_schema::flags (),
                    this),
    _xsd_Request_ (::xml_schema::flags (), this)
    {
    }

    LXACMLAuthzDecisionStatementType::
    LXACMLAuthzDecisionStatementType (const LXACMLAuthzDecisionStatementType& _xsd_LXACMLAuthzDecisionStatementType,
                                      ::xml_schema::flags f,
                                      ::xml_schema::type* c)
    : ::saml2::assertion::StatementAbstractType (_xsd_LXACMLAuthzDecisionStatementType, f, c),
    _xsd_Response_ (_xsd_LXACMLAuthzDecisionStatementType._xsd_Response_,
                    f | ::xml_schema::flags::not_root,
                    this),
    _xsd_Request_ (_xsd_LXACMLAuthzDecisionStatementType._xsd_Request_,
                   f | ::xml_schema::flags::not_root,
                   this)
    {
    }

    LXACMLAuthzDecisionStatementType::
    LXACMLAuthzDecisionStatementType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::type* c)
    : ::saml2::assertion::StatementAbstractType (e, f, c),
    _xsd_Response_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Request_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void LXACMLAuthzDecisionStatementType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Response
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Response::type > r (
            tfm.create< Response::type > (
              L"Response",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_Response_.present ())
              continue;
            this->Response (r);
            continue;
          }
        }

        // Request
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Request::type > r (
            tfm.create< Request::type > (
              L"Request",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Request ())
              continue;
            this->Request (r);
            continue;
          }
        }
      }

      if (!_xsd_Response_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Response",
          L"http://www.qut.com/middleware/lxacmlContextSchema");
      }
    }

    LXACMLAuthzDecisionStatementType* LXACMLAuthzDecisionStatementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new LXACMLAuthzDecisionStatementType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, LXACMLAuthzDecisionStatementType >
    _xsd_LXACMLAuthzDecisionStatementType_type_factory_init (
      L"LXACMLAuthzDecisionStatementType http://www.qut.com/middleware/lxacmlSAMLAssertionSchema");


    // LXACMLPolicyStatementType
    //

    LXACMLPolicyStatementType::
    LXACMLPolicyStatementType ()
    : ::saml2::assertion::StatementAbstractType (),
    _xsd_Policy_ (::xml_schema::flags (), this),
    _xsd_PolicySet_ (::xml_schema::flags (), this)
    {
    }

    LXACMLPolicyStatementType::
    LXACMLPolicyStatementType (const LXACMLPolicyStatementType& _xsd_LXACMLPolicyStatementType,
                               ::xml_schema::flags f,
                               ::xml_schema::type* c)
    : ::saml2::assertion::StatementAbstractType (_xsd_LXACMLPolicyStatementType, f, c),
    _xsd_Policy_ (_xsd_LXACMLPolicyStatementType._xsd_Policy_,
                  f | ::xml_schema::flags::not_root,
                  this),
    _xsd_PolicySet_ (_xsd_LXACMLPolicyStatementType._xsd_PolicySet_,
                     f | ::xml_schema::flags::not_root,
                     this)
    {
    }

    LXACMLPolicyStatementType::
    LXACMLPolicyStatementType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::type* c)
    : ::saml2::assertion::StatementAbstractType (e, f, c),
    _xsd_Policy_ (f | ::xml_schema::flags::not_root, this),
    _xsd_PolicySet_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void LXACMLPolicyStatementType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Policy
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Policy::type > r (
            tfm.create< Policy::type > (
              L"Policy",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->Policy ().push_back (r);
            continue;
          }
        }

        // PolicySet
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< PolicySet::type > r (
            tfm.create< PolicySet::type > (
              L"PolicySet",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->PolicySet ().push_back (r);
            continue;
          }
        }
      }
    }

    LXACMLPolicyStatementType* LXACMLPolicyStatementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new LXACMLPolicyStatementType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, LXACMLPolicyStatementType >
    _xsd_LXACMLPolicyStatementType_type_factory_init (
      L"LXACMLPolicyStatementType http://www.qut.com/middleware/lxacmlSAMLAssertionSchema");
  }
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace middleware
{
  namespace lxacmlSAMLAssertionSchema
  {
    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::std::basic_string< wchar_t >& u,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::std::basic_string< wchar_t >& u,
                                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::std::basic_string< wchar_t >& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::std::istream& is,
                                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::std::istream& is,
                                  const ::std::basic_string< wchar_t >& sid,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::std::istream& is,
                                  const ::std::basic_string< wchar_t >& sid,
                                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::std::istream& is,
                                  const ::std::basic_string< wchar_t >& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::xercesc::DOMInputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::xercesc::DOMInputSource& i,
                                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::xercesc::DOMInputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType > r (
        tfm.create< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType > (
          L"LXACMLAuthzDecisionStatement",
          L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"LXACMLAuthzDecisionStatement",
        L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::std::basic_string< wchar_t >& u,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::std::basic_string< wchar_t >& u,
                           ::xsd::cxx::xml::error_handler< wchar_t >& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::std::basic_string< wchar_t >& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::std::istream& is,
                           ::xsd::cxx::xml::error_handler< wchar_t >& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::std::istream& is,
                           const ::std::basic_string< wchar_t >& sid,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::std::istream& is,
                           const ::std::basic_string< wchar_t >& sid,
                           ::xsd::cxx::xml::error_handler< wchar_t >& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::std::istream& is,
                           const ::std::basic_string< wchar_t >& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::xercesc::DOMInputSource& i,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::xercesc::DOMInputSource& i,
                           ::xsd::cxx::xml::error_handler< wchar_t >& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::xercesc::DOMInputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType > r (
        tfm.create< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType > (
          L"LXACMLPolicyStatement",
          L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"LXACMLPolicyStatement",
        L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema");
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/serialization.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_serializer_plate< 0, wchar_t >
  type_serializer_plate_init;
}

namespace middleware
{
  namespace lxacmlSAMLAssertionSchema
  {
    void
    LXACMLAuthzDecisionStatement (::xercesc::DOMDocument& d,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType& s,
                                  ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType > (
        L"LXACMLAuthzDecisionStatement",
        L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    LXACMLAuthzDecisionStatement (const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType& s,
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                  ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType > (
            L"LXACMLAuthzDecisionStatement",
            L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema",
            m,
            s,
            f));
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    LXACMLAuthzDecisionStatement (::xercesc::XMLFormatTarget& t,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType& s,
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                  const ::std::basic_string< wchar_t >& e,
                                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    LXACMLAuthzDecisionStatement (::xercesc::XMLFormatTarget& t,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType& s,
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                  const ::std::basic_string< wchar_t >& e,
                                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLAuthzDecisionStatement (::xercesc::XMLFormatTarget& t,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType& s,
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                  ::xercesc::DOMErrorHandler& h,
                                  const ::std::basic_string< wchar_t >& e,
                                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLAuthzDecisionStatement (::std::ostream& o,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType& s,
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                  const ::std::basic_string< wchar_t >& e,
                                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    LXACMLAuthzDecisionStatement (::std::ostream& o,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType& s,
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                  const ::std::basic_string< wchar_t >& e,
                                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLAuthzDecisionStatement (::std::ostream& o,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType& s,
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                  ::xercesc::DOMErrorHandler& h,
                                  const ::std::basic_string< wchar_t >& e,
                                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const LXACMLAuthzDecisionStatementType& i)
    {
      e << static_cast< const ::saml2::assertion::StatementAbstractType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< LXACMLAuthzDecisionStatementType::Response::type > (
          L"Response",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          true,
          true,
          e,
          i.Response ());
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Request ())
        {
          tsm.serialize< LXACMLAuthzDecisionStatementType::Request::type > (
            L"Request",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            true,
            true,
            e,
            *i.Request ());
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, LXACMLAuthzDecisionStatementType >
    _xsd_LXACMLAuthzDecisionStatementType_type_serializer_init (
      L"LXACMLAuthzDecisionStatementType",
      L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema");


    void
    LXACMLPolicyStatement (::xercesc::DOMDocument& d,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType& s,
                           ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType > (
        L"LXACMLPolicyStatement",
        L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    LXACMLPolicyStatement (const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType > (
            L"LXACMLPolicyStatement",
            L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema",
            m,
            s,
            f));
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    LXACMLPolicyStatement (::xercesc::XMLFormatTarget& t,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           const ::std::basic_string< wchar_t >& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    LXACMLPolicyStatement (::xercesc::XMLFormatTarget& t,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           ::xsd::cxx::xml::error_handler< wchar_t >& h,
                           const ::std::basic_string< wchar_t >& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLPolicyStatement (::xercesc::XMLFormatTarget& t,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           ::xercesc::DOMErrorHandler& h,
                           const ::std::basic_string< wchar_t >& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLPolicyStatement (::std::ostream& o,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           const ::std::basic_string< wchar_t >& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    LXACMLPolicyStatement (::std::ostream& o,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           ::xsd::cxx::xml::error_handler< wchar_t >& h,
                           const ::std::basic_string< wchar_t >& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLPolicyStatement (::std::ostream& o,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           ::xercesc::DOMErrorHandler& h,
                           const ::std::basic_string< wchar_t >& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const LXACMLPolicyStatementType& i)
    {
      e << static_cast< const ::saml2::assertion::StatementAbstractType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (LXACMLPolicyStatementType::Policy::const_iterator
             b (i.Policy ().begin ()), n (i.Policy ().end ());
             b != n; ++b)
        {
          tsm.serialize< LXACMLPolicyStatementType::Policy::type > (
            L"Policy",
            L"http://www.qut.com/middleware/lxacmlSchema",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (LXACMLPolicyStatementType::PolicySet::const_iterator
             b (i.PolicySet ().begin ()), n (i.PolicySet ().end ());
             b != n; ++b)
        {
          tsm.serialize< LXACMLPolicyStatementType::PolicySet::type > (
            L"PolicySet",
            L"http://www.qut.com/middleware/lxacmlSchema",
            true,
            true,
            e,
            *b);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, LXACMLPolicyStatementType >
    _xsd_LXACMLPolicyStatementType_type_serializer_init (
      L"LXACMLPolicyStatementType",
      L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

