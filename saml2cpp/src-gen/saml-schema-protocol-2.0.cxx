// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "saml-schema-protocol-2.0.hxx"

namespace saml2
{
  namespace protocol
  {
    // RequestAbstractType
    // 

    const RequestAbstractType::Issuer::container& RequestAbstractType::
    Issuer () const
    {
      return this->_xsd_Issuer_;
    }

    RequestAbstractType::Issuer::container& RequestAbstractType::
    Issuer ()
    {
      return this->_xsd_Issuer_;
    }

    void RequestAbstractType::
    Issuer (const Issuer::type& Issuer)
    {
      this->_xsd_Issuer_.set (Issuer);
    }

    void RequestAbstractType::
    Issuer (const Issuer::container& Issuer)
    {
      this->_xsd_Issuer_ = Issuer;
    }

    void RequestAbstractType::
    Issuer (::std::auto_ptr< Issuer::type > Issuer)
    {
      this->_xsd_Issuer_.set (Issuer);
    }

    const RequestAbstractType::Signature::container& RequestAbstractType::
    Signature () const
    {
      return this->_xsd_Signature_;
    }

    RequestAbstractType::Signature::container& RequestAbstractType::
    Signature ()
    {
      return this->_xsd_Signature_;
    }

    void RequestAbstractType::
    Signature (const Signature::type& Signature)
    {
      this->_xsd_Signature_.set (Signature);
    }

    void RequestAbstractType::
    Signature (const Signature::container& Signature)
    {
      this->_xsd_Signature_ = Signature;
    }

    void RequestAbstractType::
    Signature (::std::auto_ptr< Signature::type > Signature)
    {
      this->_xsd_Signature_.set (Signature);
    }

    const RequestAbstractType::Extensions::container& RequestAbstractType::
    Extensions () const
    {
      return this->_xsd_Extensions_;
    }

    RequestAbstractType::Extensions::container& RequestAbstractType::
    Extensions ()
    {
      return this->_xsd_Extensions_;
    }

    void RequestAbstractType::
    Extensions (const Extensions::type& Extensions)
    {
      this->_xsd_Extensions_.set (Extensions);
    }

    void RequestAbstractType::
    Extensions (const Extensions::container& Extensions)
    {
      this->_xsd_Extensions_ = Extensions;
    }

    void RequestAbstractType::
    Extensions (::std::auto_ptr< Extensions::type > Extensions)
    {
      this->_xsd_Extensions_.set (Extensions);
    }

    const RequestAbstractType::ID::type& RequestAbstractType::
    ID () const
    {
      return this->_xsd_ID_.get ();
    }

    RequestAbstractType::ID::type& RequestAbstractType::
    ID ()
    {
      return this->_xsd_ID_.get ();
    }

    void RequestAbstractType::
    ID (const ID::type& ID)
    {
      this->_xsd_ID_.set (ID);
    }

    void RequestAbstractType::
    ID (::std::auto_ptr< ID::type > ID)
    {
      this->_xsd_ID_.set (ID);
    }

    const RequestAbstractType::Version::type& RequestAbstractType::
    Version () const
    {
      return this->_xsd_Version_.get ();
    }

    RequestAbstractType::Version::type& RequestAbstractType::
    Version ()
    {
      return this->_xsd_Version_.get ();
    }

    void RequestAbstractType::
    Version (const Version::type& Version)
    {
      this->_xsd_Version_.set (Version);
    }

    void RequestAbstractType::
    Version (::std::auto_ptr< Version::type > Version)
    {
      this->_xsd_Version_.set (Version);
    }

    const RequestAbstractType::IssueInstant::type& RequestAbstractType::
    IssueInstant () const
    {
      return this->_xsd_IssueInstant_.get ();
    }

    RequestAbstractType::IssueInstant::type& RequestAbstractType::
    IssueInstant ()
    {
      return this->_xsd_IssueInstant_.get ();
    }

    void RequestAbstractType::
    IssueInstant (const IssueInstant::type& IssueInstant)
    {
      this->_xsd_IssueInstant_.set (IssueInstant);
    }

    void RequestAbstractType::
    IssueInstant (::std::auto_ptr< IssueInstant::type > IssueInstant)
    {
      this->_xsd_IssueInstant_.set (IssueInstant);
    }

    const RequestAbstractType::Destination::container& RequestAbstractType::
    Destination () const
    {
      return this->_xsd_Destination_;
    }

    RequestAbstractType::Destination::container& RequestAbstractType::
    Destination ()
    {
      return this->_xsd_Destination_;
    }

    void RequestAbstractType::
    Destination (const Destination::type& Destination)
    {
      this->_xsd_Destination_.set (Destination);
    }

    void RequestAbstractType::
    Destination (const Destination::container& Destination)
    {
      this->_xsd_Destination_ = Destination;
    }

    void RequestAbstractType::
    Destination (::std::auto_ptr< Destination::type > Destination)
    {
      this->_xsd_Destination_.set (Destination);
    }

    const RequestAbstractType::Consent::container& RequestAbstractType::
    Consent () const
    {
      return this->_xsd_Consent_;
    }

    RequestAbstractType::Consent::container& RequestAbstractType::
    Consent ()
    {
      return this->_xsd_Consent_;
    }

    void RequestAbstractType::
    Consent (const Consent::type& Consent)
    {
      this->_xsd_Consent_.set (Consent);
    }

    void RequestAbstractType::
    Consent (const Consent::container& Consent)
    {
      this->_xsd_Consent_ = Consent;
    }

    void RequestAbstractType::
    Consent (::std::auto_ptr< Consent::type > Consent)
    {
      this->_xsd_Consent_.set (Consent);
    }


    // ExtensionsType
    // 


    // StatusResponseType
    // 

    const StatusResponseType::Issuer::container& StatusResponseType::
    Issuer () const
    {
      return this->_xsd_Issuer_;
    }

    StatusResponseType::Issuer::container& StatusResponseType::
    Issuer ()
    {
      return this->_xsd_Issuer_;
    }

    void StatusResponseType::
    Issuer (const Issuer::type& Issuer)
    {
      this->_xsd_Issuer_.set (Issuer);
    }

    void StatusResponseType::
    Issuer (const Issuer::container& Issuer)
    {
      this->_xsd_Issuer_ = Issuer;
    }

    void StatusResponseType::
    Issuer (::std::auto_ptr< Issuer::type > Issuer)
    {
      this->_xsd_Issuer_.set (Issuer);
    }

    const StatusResponseType::Signature::container& StatusResponseType::
    Signature () const
    {
      return this->_xsd_Signature_;
    }

    StatusResponseType::Signature::container& StatusResponseType::
    Signature ()
    {
      return this->_xsd_Signature_;
    }

    void StatusResponseType::
    Signature (const Signature::type& Signature)
    {
      this->_xsd_Signature_.set (Signature);
    }

    void StatusResponseType::
    Signature (const Signature::container& Signature)
    {
      this->_xsd_Signature_ = Signature;
    }

    void StatusResponseType::
    Signature (::std::auto_ptr< Signature::type > Signature)
    {
      this->_xsd_Signature_.set (Signature);
    }

    const StatusResponseType::Extensions::container& StatusResponseType::
    Extensions () const
    {
      return this->_xsd_Extensions_;
    }

    StatusResponseType::Extensions::container& StatusResponseType::
    Extensions ()
    {
      return this->_xsd_Extensions_;
    }

    void StatusResponseType::
    Extensions (const Extensions::type& Extensions)
    {
      this->_xsd_Extensions_.set (Extensions);
    }

    void StatusResponseType::
    Extensions (const Extensions::container& Extensions)
    {
      this->_xsd_Extensions_ = Extensions;
    }

    void StatusResponseType::
    Extensions (::std::auto_ptr< Extensions::type > Extensions)
    {
      this->_xsd_Extensions_.set (Extensions);
    }

    const StatusResponseType::Status::type& StatusResponseType::
    Status () const
    {
      return this->_xsd_Status_.get ();
    }

    StatusResponseType::Status::type& StatusResponseType::
    Status ()
    {
      return this->_xsd_Status_.get ();
    }

    void StatusResponseType::
    Status (const Status::type& Status)
    {
      this->_xsd_Status_.set (Status);
    }

    void StatusResponseType::
    Status (::std::auto_ptr< Status::type > Status)
    {
      this->_xsd_Status_.set (Status);
    }

    const StatusResponseType::ID::type& StatusResponseType::
    ID () const
    {
      return this->_xsd_ID_.get ();
    }

    StatusResponseType::ID::type& StatusResponseType::
    ID ()
    {
      return this->_xsd_ID_.get ();
    }

    void StatusResponseType::
    ID (const ID::type& ID)
    {
      this->_xsd_ID_.set (ID);
    }

    void StatusResponseType::
    ID (::std::auto_ptr< ID::type > ID)
    {
      this->_xsd_ID_.set (ID);
    }

    const StatusResponseType::InResponseTo::container& StatusResponseType::
    InResponseTo () const
    {
      return this->_xsd_InResponseTo_;
    }

    StatusResponseType::InResponseTo::container& StatusResponseType::
    InResponseTo ()
    {
      return this->_xsd_InResponseTo_;
    }

    void StatusResponseType::
    InResponseTo (const InResponseTo::type& InResponseTo)
    {
      this->_xsd_InResponseTo_.set (InResponseTo);
    }

    void StatusResponseType::
    InResponseTo (const InResponseTo::container& InResponseTo)
    {
      this->_xsd_InResponseTo_ = InResponseTo;
    }

    void StatusResponseType::
    InResponseTo (::std::auto_ptr< InResponseTo::type > InResponseTo)
    {
      this->_xsd_InResponseTo_.set (InResponseTo);
    }

    const StatusResponseType::Version::type& StatusResponseType::
    Version () const
    {
      return this->_xsd_Version_.get ();
    }

    StatusResponseType::Version::type& StatusResponseType::
    Version ()
    {
      return this->_xsd_Version_.get ();
    }

    void StatusResponseType::
    Version (const Version::type& Version)
    {
      this->_xsd_Version_.set (Version);
    }

    void StatusResponseType::
    Version (::std::auto_ptr< Version::type > Version)
    {
      this->_xsd_Version_.set (Version);
    }

    const StatusResponseType::IssueInstant::type& StatusResponseType::
    IssueInstant () const
    {
      return this->_xsd_IssueInstant_.get ();
    }

    StatusResponseType::IssueInstant::type& StatusResponseType::
    IssueInstant ()
    {
      return this->_xsd_IssueInstant_.get ();
    }

    void StatusResponseType::
    IssueInstant (const IssueInstant::type& IssueInstant)
    {
      this->_xsd_IssueInstant_.set (IssueInstant);
    }

    void StatusResponseType::
    IssueInstant (::std::auto_ptr< IssueInstant::type > IssueInstant)
    {
      this->_xsd_IssueInstant_.set (IssueInstant);
    }

    const StatusResponseType::Destination::container& StatusResponseType::
    Destination () const
    {
      return this->_xsd_Destination_;
    }

    StatusResponseType::Destination::container& StatusResponseType::
    Destination ()
    {
      return this->_xsd_Destination_;
    }

    void StatusResponseType::
    Destination (const Destination::type& Destination)
    {
      this->_xsd_Destination_.set (Destination);
    }

    void StatusResponseType::
    Destination (const Destination::container& Destination)
    {
      this->_xsd_Destination_ = Destination;
    }

    void StatusResponseType::
    Destination (::std::auto_ptr< Destination::type > Destination)
    {
      this->_xsd_Destination_.set (Destination);
    }

    const StatusResponseType::Consent::container& StatusResponseType::
    Consent () const
    {
      return this->_xsd_Consent_;
    }

    StatusResponseType::Consent::container& StatusResponseType::
    Consent ()
    {
      return this->_xsd_Consent_;
    }

    void StatusResponseType::
    Consent (const Consent::type& Consent)
    {
      this->_xsd_Consent_.set (Consent);
    }

    void StatusResponseType::
    Consent (const Consent::container& Consent)
    {
      this->_xsd_Consent_ = Consent;
    }

    void StatusResponseType::
    Consent (::std::auto_ptr< Consent::type > Consent)
    {
      this->_xsd_Consent_.set (Consent);
    }


    // StatusType
    // 

    const StatusType::StatusCode::type& StatusType::
    StatusCode () const
    {
      return this->_xsd_StatusCode_.get ();
    }

    StatusType::StatusCode::type& StatusType::
    StatusCode ()
    {
      return this->_xsd_StatusCode_.get ();
    }

    void StatusType::
    StatusCode (const StatusCode::type& StatusCode)
    {
      this->_xsd_StatusCode_.set (StatusCode);
    }

    void StatusType::
    StatusCode (::std::auto_ptr< StatusCode::type > StatusCode)
    {
      this->_xsd_StatusCode_.set (StatusCode);
    }

    const StatusType::StatusMessage::container& StatusType::
    StatusMessage () const
    {
      return this->_xsd_StatusMessage_;
    }

    StatusType::StatusMessage::container& StatusType::
    StatusMessage ()
    {
      return this->_xsd_StatusMessage_;
    }

    void StatusType::
    StatusMessage (const StatusMessage::type& StatusMessage)
    {
      this->_xsd_StatusMessage_.set (StatusMessage);
    }

    void StatusType::
    StatusMessage (const StatusMessage::container& StatusMessage)
    {
      this->_xsd_StatusMessage_ = StatusMessage;
    }

    void StatusType::
    StatusMessage (::std::auto_ptr< StatusMessage::type > StatusMessage)
    {
      this->_xsd_StatusMessage_.set (StatusMessage);
    }

    const StatusType::StatusDetail::container& StatusType::
    StatusDetail () const
    {
      return this->_xsd_StatusDetail_;
    }

    StatusType::StatusDetail::container& StatusType::
    StatusDetail ()
    {
      return this->_xsd_StatusDetail_;
    }

    void StatusType::
    StatusDetail (const StatusDetail::type& StatusDetail)
    {
      this->_xsd_StatusDetail_.set (StatusDetail);
    }

    void StatusType::
    StatusDetail (const StatusDetail::container& StatusDetail)
    {
      this->_xsd_StatusDetail_ = StatusDetail;
    }

    void StatusType::
    StatusDetail (::std::auto_ptr< StatusDetail::type > StatusDetail)
    {
      this->_xsd_StatusDetail_.set (StatusDetail);
    }


    // StatusCodeType
    // 

    const StatusCodeType::StatusCode::container& StatusCodeType::
    StatusCode () const
    {
      return this->_xsd_StatusCode_;
    }

    StatusCodeType::StatusCode::container& StatusCodeType::
    StatusCode ()
    {
      return this->_xsd_StatusCode_;
    }

    void StatusCodeType::
    StatusCode (const StatusCode::type& StatusCode)
    {
      this->_xsd_StatusCode_.set (StatusCode);
    }

    void StatusCodeType::
    StatusCode (const StatusCode::container& StatusCode)
    {
      this->_xsd_StatusCode_ = StatusCode;
    }

    void StatusCodeType::
    StatusCode (::std::auto_ptr< StatusCode::type > StatusCode)
    {
      this->_xsd_StatusCode_.set (StatusCode);
    }

    const StatusCodeType::Value::type& StatusCodeType::
    Value () const
    {
      return this->_xsd_Value_.get ();
    }

    StatusCodeType::Value::type& StatusCodeType::
    Value ()
    {
      return this->_xsd_Value_.get ();
    }

    void StatusCodeType::
    Value (const Value::type& Value)
    {
      this->_xsd_Value_.set (Value);
    }

    void StatusCodeType::
    Value (::std::auto_ptr< Value::type > Value)
    {
      this->_xsd_Value_.set (Value);
    }


    // StatusDetailType
    // 


    // AssertionIDRequestType
    // 

    const AssertionIDRequestType::AssertionIDRef::container& AssertionIDRequestType::
    AssertionIDRef () const
    {
      return this->_xsd_AssertionIDRef_;
    }

    AssertionIDRequestType::AssertionIDRef::container& AssertionIDRequestType::
    AssertionIDRef ()
    {
      return this->_xsd_AssertionIDRef_;
    }

    void AssertionIDRequestType::
    AssertionIDRef (const AssertionIDRef::container& AssertionIDRef)
    {
      this->_xsd_AssertionIDRef_ = AssertionIDRef;
    }


    // SubjectQueryAbstractType
    // 

    const SubjectQueryAbstractType::Subject::type& SubjectQueryAbstractType::
    Subject () const
    {
      return this->_xsd_Subject_.get ();
    }

    SubjectQueryAbstractType::Subject::type& SubjectQueryAbstractType::
    Subject ()
    {
      return this->_xsd_Subject_.get ();
    }

    void SubjectQueryAbstractType::
    Subject (const Subject::type& Subject)
    {
      this->_xsd_Subject_.set (Subject);
    }

    void SubjectQueryAbstractType::
    Subject (::std::auto_ptr< Subject::type > Subject)
    {
      this->_xsd_Subject_.set (Subject);
    }


    // AuthnQueryType
    // 

    const AuthnQueryType::RequestedAuthnContext::container& AuthnQueryType::
    RequestedAuthnContext () const
    {
      return this->_xsd_RequestedAuthnContext_;
    }

    AuthnQueryType::RequestedAuthnContext::container& AuthnQueryType::
    RequestedAuthnContext ()
    {
      return this->_xsd_RequestedAuthnContext_;
    }

    void AuthnQueryType::
    RequestedAuthnContext (const RequestedAuthnContext::type& RequestedAuthnContext)
    {
      this->_xsd_RequestedAuthnContext_.set (RequestedAuthnContext);
    }

    void AuthnQueryType::
    RequestedAuthnContext (const RequestedAuthnContext::container& RequestedAuthnContext)
    {
      this->_xsd_RequestedAuthnContext_ = RequestedAuthnContext;
    }

    void AuthnQueryType::
    RequestedAuthnContext (::std::auto_ptr< RequestedAuthnContext::type > RequestedAuthnContext)
    {
      this->_xsd_RequestedAuthnContext_.set (RequestedAuthnContext);
    }

    const AuthnQueryType::SessionIndex::container& AuthnQueryType::
    SessionIndex () const
    {
      return this->_xsd_SessionIndex_;
    }

    AuthnQueryType::SessionIndex::container& AuthnQueryType::
    SessionIndex ()
    {
      return this->_xsd_SessionIndex_;
    }

    void AuthnQueryType::
    SessionIndex (const SessionIndex::type& SessionIndex)
    {
      this->_xsd_SessionIndex_.set (SessionIndex);
    }

    void AuthnQueryType::
    SessionIndex (const SessionIndex::container& SessionIndex)
    {
      this->_xsd_SessionIndex_ = SessionIndex;
    }

    void AuthnQueryType::
    SessionIndex (::std::auto_ptr< SessionIndex::type > SessionIndex)
    {
      this->_xsd_SessionIndex_.set (SessionIndex);
    }


    // RequestedAuthnContextType
    // 

    const RequestedAuthnContextType::AuthnContextClassRef::container& RequestedAuthnContextType::
    AuthnContextClassRef () const
    {
      return this->_xsd_AuthnContextClassRef_;
    }

    RequestedAuthnContextType::AuthnContextClassRef::container& RequestedAuthnContextType::
    AuthnContextClassRef ()
    {
      return this->_xsd_AuthnContextClassRef_;
    }

    void RequestedAuthnContextType::
    AuthnContextClassRef (const AuthnContextClassRef::container& AuthnContextClassRef)
    {
      this->_xsd_AuthnContextClassRef_ = AuthnContextClassRef;
    }

    const RequestedAuthnContextType::AuthnContextDeclRef::container& RequestedAuthnContextType::
    AuthnContextDeclRef () const
    {
      return this->_xsd_AuthnContextDeclRef_;
    }

    RequestedAuthnContextType::AuthnContextDeclRef::container& RequestedAuthnContextType::
    AuthnContextDeclRef ()
    {
      return this->_xsd_AuthnContextDeclRef_;
    }

    void RequestedAuthnContextType::
    AuthnContextDeclRef (const AuthnContextDeclRef::container& AuthnContextDeclRef)
    {
      this->_xsd_AuthnContextDeclRef_ = AuthnContextDeclRef;
    }

    const RequestedAuthnContextType::Comparison::container& RequestedAuthnContextType::
    Comparison () const
    {
      return this->_xsd_Comparison_;
    }

    RequestedAuthnContextType::Comparison::container& RequestedAuthnContextType::
    Comparison ()
    {
      return this->_xsd_Comparison_;
    }

    void RequestedAuthnContextType::
    Comparison (const Comparison::type& Comparison)
    {
      this->_xsd_Comparison_.set (Comparison);
    }

    void RequestedAuthnContextType::
    Comparison (const Comparison::container& Comparison)
    {
      this->_xsd_Comparison_ = Comparison;
    }

    void RequestedAuthnContextType::
    Comparison (::std::auto_ptr< Comparison::type > Comparison)
    {
      this->_xsd_Comparison_.set (Comparison);
    }


    // AuthnContextComparisonType
    // 

    AuthnContextComparisonType::
    AuthnContextComparisonType ()
    : ::xml_schema::string ()
    {
    }

    AuthnContextComparisonType::
    AuthnContextComparisonType (_xsd_AuthnContextComparisonType v)
    : ::xml_schema::string (_xsd_AuthnContextComparisonType_literals_[v])
    {
    }

    AuthnContextComparisonType::
    AuthnContextComparisonType (const ::xml_schema::string& _xsd_AuthnContextComparisonType)
    : ::xml_schema::string (_xsd_AuthnContextComparisonType)
    {
    }

    AuthnContextComparisonType::
    AuthnContextComparisonType (const AuthnContextComparisonType& v,
                                ::xml_schema::flags f,
                                ::xml_schema::type* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    AuthnContextComparisonType& AuthnContextComparisonType::
    operator= (_xsd_AuthnContextComparisonType v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_AuthnContextComparisonType_literals_[v]);

      return *this;
    }


    // AttributeQueryType
    // 

    const AttributeQueryType::Attribute::container& AttributeQueryType::
    Attribute () const
    {
      return this->_xsd_Attribute_;
    }

    AttributeQueryType::Attribute::container& AttributeQueryType::
    Attribute ()
    {
      return this->_xsd_Attribute_;
    }

    void AttributeQueryType::
    Attribute (const Attribute::container& Attribute)
    {
      this->_xsd_Attribute_ = Attribute;
    }


    // AuthzDecisionQueryType
    // 

    const AuthzDecisionQueryType::Action::container& AuthzDecisionQueryType::
    Action () const
    {
      return this->_xsd_Action_;
    }

    AuthzDecisionQueryType::Action::container& AuthzDecisionQueryType::
    Action ()
    {
      return this->_xsd_Action_;
    }

    void AuthzDecisionQueryType::
    Action (const Action::container& Action)
    {
      this->_xsd_Action_ = Action;
    }

    const AuthzDecisionQueryType::Evidence::container& AuthzDecisionQueryType::
    Evidence () const
    {
      return this->_xsd_Evidence_;
    }

    AuthzDecisionQueryType::Evidence::container& AuthzDecisionQueryType::
    Evidence ()
    {
      return this->_xsd_Evidence_;
    }

    void AuthzDecisionQueryType::
    Evidence (const Evidence::type& Evidence)
    {
      this->_xsd_Evidence_.set (Evidence);
    }

    void AuthzDecisionQueryType::
    Evidence (const Evidence::container& Evidence)
    {
      this->_xsd_Evidence_ = Evidence;
    }

    void AuthzDecisionQueryType::
    Evidence (::std::auto_ptr< Evidence::type > Evidence)
    {
      this->_xsd_Evidence_.set (Evidence);
    }

    const AuthzDecisionQueryType::Resource::type& AuthzDecisionQueryType::
    Resource () const
    {
      return this->_xsd_Resource_.get ();
    }

    AuthzDecisionQueryType::Resource::type& AuthzDecisionQueryType::
    Resource ()
    {
      return this->_xsd_Resource_.get ();
    }

    void AuthzDecisionQueryType::
    Resource (const Resource::type& Resource)
    {
      this->_xsd_Resource_.set (Resource);
    }

    void AuthzDecisionQueryType::
    Resource (::std::auto_ptr< Resource::type > Resource)
    {
      this->_xsd_Resource_.set (Resource);
    }


    // AuthnRequestType
    // 

    const AuthnRequestType::Subject::container& AuthnRequestType::
    Subject () const
    {
      return this->_xsd_Subject_;
    }

    AuthnRequestType::Subject::container& AuthnRequestType::
    Subject ()
    {
      return this->_xsd_Subject_;
    }

    void AuthnRequestType::
    Subject (const Subject::type& Subject)
    {
      this->_xsd_Subject_.set (Subject);
    }

    void AuthnRequestType::
    Subject (const Subject::container& Subject)
    {
      this->_xsd_Subject_ = Subject;
    }

    void AuthnRequestType::
    Subject (::std::auto_ptr< Subject::type > Subject)
    {
      this->_xsd_Subject_.set (Subject);
    }

    const AuthnRequestType::NameIDPolicy::container& AuthnRequestType::
    NameIDPolicy () const
    {
      return this->_xsd_NameIDPolicy_;
    }

    AuthnRequestType::NameIDPolicy::container& AuthnRequestType::
    NameIDPolicy ()
    {
      return this->_xsd_NameIDPolicy_;
    }

    void AuthnRequestType::
    NameIDPolicy (const NameIDPolicy::type& NameIDPolicy)
    {
      this->_xsd_NameIDPolicy_.set (NameIDPolicy);
    }

    void AuthnRequestType::
    NameIDPolicy (const NameIDPolicy::container& NameIDPolicy)
    {
      this->_xsd_NameIDPolicy_ = NameIDPolicy;
    }

    void AuthnRequestType::
    NameIDPolicy (::std::auto_ptr< NameIDPolicy::type > NameIDPolicy)
    {
      this->_xsd_NameIDPolicy_.set (NameIDPolicy);
    }

    const AuthnRequestType::Conditions::container& AuthnRequestType::
    Conditions () const
    {
      return this->_xsd_Conditions_;
    }

    AuthnRequestType::Conditions::container& AuthnRequestType::
    Conditions ()
    {
      return this->_xsd_Conditions_;
    }

    void AuthnRequestType::
    Conditions (const Conditions::type& Conditions)
    {
      this->_xsd_Conditions_.set (Conditions);
    }

    void AuthnRequestType::
    Conditions (const Conditions::container& Conditions)
    {
      this->_xsd_Conditions_ = Conditions;
    }

    void AuthnRequestType::
    Conditions (::std::auto_ptr< Conditions::type > Conditions)
    {
      this->_xsd_Conditions_.set (Conditions);
    }

    const AuthnRequestType::RequestedAuthnContext::container& AuthnRequestType::
    RequestedAuthnContext () const
    {
      return this->_xsd_RequestedAuthnContext_;
    }

    AuthnRequestType::RequestedAuthnContext::container& AuthnRequestType::
    RequestedAuthnContext ()
    {
      return this->_xsd_RequestedAuthnContext_;
    }

    void AuthnRequestType::
    RequestedAuthnContext (const RequestedAuthnContext::type& RequestedAuthnContext)
    {
      this->_xsd_RequestedAuthnContext_.set (RequestedAuthnContext);
    }

    void AuthnRequestType::
    RequestedAuthnContext (const RequestedAuthnContext::container& RequestedAuthnContext)
    {
      this->_xsd_RequestedAuthnContext_ = RequestedAuthnContext;
    }

    void AuthnRequestType::
    RequestedAuthnContext (::std::auto_ptr< RequestedAuthnContext::type > RequestedAuthnContext)
    {
      this->_xsd_RequestedAuthnContext_.set (RequestedAuthnContext);
    }

    const AuthnRequestType::Scoping::container& AuthnRequestType::
    Scoping () const
    {
      return this->_xsd_Scoping_;
    }

    AuthnRequestType::Scoping::container& AuthnRequestType::
    Scoping ()
    {
      return this->_xsd_Scoping_;
    }

    void AuthnRequestType::
    Scoping (const Scoping::type& Scoping)
    {
      this->_xsd_Scoping_.set (Scoping);
    }

    void AuthnRequestType::
    Scoping (const Scoping::container& Scoping)
    {
      this->_xsd_Scoping_ = Scoping;
    }

    void AuthnRequestType::
    Scoping (::std::auto_ptr< Scoping::type > Scoping)
    {
      this->_xsd_Scoping_.set (Scoping);
    }

    const AuthnRequestType::ForceAuthn::container& AuthnRequestType::
    ForceAuthn () const
    {
      return this->_xsd_ForceAuthn_;
    }

    AuthnRequestType::ForceAuthn::container& AuthnRequestType::
    ForceAuthn ()
    {
      return this->_xsd_ForceAuthn_;
    }

    void AuthnRequestType::
    ForceAuthn (const ForceAuthn::type& ForceAuthn)
    {
      this->_xsd_ForceAuthn_.set (ForceAuthn);
    }

    void AuthnRequestType::
    ForceAuthn (const ForceAuthn::container& ForceAuthn)
    {
      this->_xsd_ForceAuthn_ = ForceAuthn;
    }

    const AuthnRequestType::IsPassive::container& AuthnRequestType::
    IsPassive () const
    {
      return this->_xsd_IsPassive_;
    }

    AuthnRequestType::IsPassive::container& AuthnRequestType::
    IsPassive ()
    {
      return this->_xsd_IsPassive_;
    }

    void AuthnRequestType::
    IsPassive (const IsPassive::type& IsPassive)
    {
      this->_xsd_IsPassive_.set (IsPassive);
    }

    void AuthnRequestType::
    IsPassive (const IsPassive::container& IsPassive)
    {
      this->_xsd_IsPassive_ = IsPassive;
    }

    const AuthnRequestType::ProtocolBinding::container& AuthnRequestType::
    ProtocolBinding () const
    {
      return this->_xsd_ProtocolBinding_;
    }

    AuthnRequestType::ProtocolBinding::container& AuthnRequestType::
    ProtocolBinding ()
    {
      return this->_xsd_ProtocolBinding_;
    }

    void AuthnRequestType::
    ProtocolBinding (const ProtocolBinding::type& ProtocolBinding)
    {
      this->_xsd_ProtocolBinding_.set (ProtocolBinding);
    }

    void AuthnRequestType::
    ProtocolBinding (const ProtocolBinding::container& ProtocolBinding)
    {
      this->_xsd_ProtocolBinding_ = ProtocolBinding;
    }

    void AuthnRequestType::
    ProtocolBinding (::std::auto_ptr< ProtocolBinding::type > ProtocolBinding)
    {
      this->_xsd_ProtocolBinding_.set (ProtocolBinding);
    }

    const AuthnRequestType::AssertionConsumerServiceIndex::container& AuthnRequestType::
    AssertionConsumerServiceIndex () const
    {
      return this->_xsd_AssertionConsumerServiceIndex_;
    }

    AuthnRequestType::AssertionConsumerServiceIndex::container& AuthnRequestType::
    AssertionConsumerServiceIndex ()
    {
      return this->_xsd_AssertionConsumerServiceIndex_;
    }

    void AuthnRequestType::
    AssertionConsumerServiceIndex (const AssertionConsumerServiceIndex::type& AssertionConsumerServiceIndex)
    {
      this->_xsd_AssertionConsumerServiceIndex_.set (AssertionConsumerServiceIndex);
    }

    void AuthnRequestType::
    AssertionConsumerServiceIndex (const AssertionConsumerServiceIndex::container& AssertionConsumerServiceIndex)
    {
      this->_xsd_AssertionConsumerServiceIndex_ = AssertionConsumerServiceIndex;
    }

    const AuthnRequestType::AssertionConsumerServiceURL::container& AuthnRequestType::
    AssertionConsumerServiceURL () const
    {
      return this->_xsd_AssertionConsumerServiceURL_;
    }

    AuthnRequestType::AssertionConsumerServiceURL::container& AuthnRequestType::
    AssertionConsumerServiceURL ()
    {
      return this->_xsd_AssertionConsumerServiceURL_;
    }

    void AuthnRequestType::
    AssertionConsumerServiceURL (const AssertionConsumerServiceURL::type& AssertionConsumerServiceURL)
    {
      this->_xsd_AssertionConsumerServiceURL_.set (AssertionConsumerServiceURL);
    }

    void AuthnRequestType::
    AssertionConsumerServiceURL (const AssertionConsumerServiceURL::container& AssertionConsumerServiceURL)
    {
      this->_xsd_AssertionConsumerServiceURL_ = AssertionConsumerServiceURL;
    }

    void AuthnRequestType::
    AssertionConsumerServiceURL (::std::auto_ptr< AssertionConsumerServiceURL::type > AssertionConsumerServiceURL)
    {
      this->_xsd_AssertionConsumerServiceURL_.set (AssertionConsumerServiceURL);
    }

    const AuthnRequestType::AttributeConsumingServiceIndex::container& AuthnRequestType::
    AttributeConsumingServiceIndex () const
    {
      return this->_xsd_AttributeConsumingServiceIndex_;
    }

    AuthnRequestType::AttributeConsumingServiceIndex::container& AuthnRequestType::
    AttributeConsumingServiceIndex ()
    {
      return this->_xsd_AttributeConsumingServiceIndex_;
    }

    void AuthnRequestType::
    AttributeConsumingServiceIndex (const AttributeConsumingServiceIndex::type& AttributeConsumingServiceIndex)
    {
      this->_xsd_AttributeConsumingServiceIndex_.set (AttributeConsumingServiceIndex);
    }

    void AuthnRequestType::
    AttributeConsumingServiceIndex (const AttributeConsumingServiceIndex::container& AttributeConsumingServiceIndex)
    {
      this->_xsd_AttributeConsumingServiceIndex_ = AttributeConsumingServiceIndex;
    }

    const AuthnRequestType::ProviderName::container& AuthnRequestType::
    ProviderName () const
    {
      return this->_xsd_ProviderName_;
    }

    AuthnRequestType::ProviderName::container& AuthnRequestType::
    ProviderName ()
    {
      return this->_xsd_ProviderName_;
    }

    void AuthnRequestType::
    ProviderName (const ProviderName::type& ProviderName)
    {
      this->_xsd_ProviderName_.set (ProviderName);
    }

    void AuthnRequestType::
    ProviderName (const ProviderName::container& ProviderName)
    {
      this->_xsd_ProviderName_ = ProviderName;
    }

    void AuthnRequestType::
    ProviderName (::std::auto_ptr< ProviderName::type > ProviderName)
    {
      this->_xsd_ProviderName_.set (ProviderName);
    }


    // NameIDPolicyType
    // 

    const NameIDPolicyType::Format::container& NameIDPolicyType::
    Format () const
    {
      return this->_xsd_Format_;
    }

    NameIDPolicyType::Format::container& NameIDPolicyType::
    Format ()
    {
      return this->_xsd_Format_;
    }

    void NameIDPolicyType::
    Format (const Format::type& Format)
    {
      this->_xsd_Format_.set (Format);
    }

    void NameIDPolicyType::
    Format (const Format::container& Format)
    {
      this->_xsd_Format_ = Format;
    }

    void NameIDPolicyType::
    Format (::std::auto_ptr< Format::type > Format)
    {
      this->_xsd_Format_.set (Format);
    }

    const NameIDPolicyType::SPNameQualifier::container& NameIDPolicyType::
    SPNameQualifier () const
    {
      return this->_xsd_SPNameQualifier_;
    }

    NameIDPolicyType::SPNameQualifier::container& NameIDPolicyType::
    SPNameQualifier ()
    {
      return this->_xsd_SPNameQualifier_;
    }

    void NameIDPolicyType::
    SPNameQualifier (const SPNameQualifier::type& SPNameQualifier)
    {
      this->_xsd_SPNameQualifier_.set (SPNameQualifier);
    }

    void NameIDPolicyType::
    SPNameQualifier (const SPNameQualifier::container& SPNameQualifier)
    {
      this->_xsd_SPNameQualifier_ = SPNameQualifier;
    }

    void NameIDPolicyType::
    SPNameQualifier (::std::auto_ptr< SPNameQualifier::type > SPNameQualifier)
    {
      this->_xsd_SPNameQualifier_.set (SPNameQualifier);
    }

    const NameIDPolicyType::AllowCreate::container& NameIDPolicyType::
    AllowCreate () const
    {
      return this->_xsd_AllowCreate_;
    }

    NameIDPolicyType::AllowCreate::container& NameIDPolicyType::
    AllowCreate ()
    {
      return this->_xsd_AllowCreate_;
    }

    void NameIDPolicyType::
    AllowCreate (const AllowCreate::type& AllowCreate)
    {
      this->_xsd_AllowCreate_.set (AllowCreate);
    }

    void NameIDPolicyType::
    AllowCreate (const AllowCreate::container& AllowCreate)
    {
      this->_xsd_AllowCreate_ = AllowCreate;
    }


    // ScopingType
    // 

    const ScopingType::IDPList::container& ScopingType::
    IDPList () const
    {
      return this->_xsd_IDPList_;
    }

    ScopingType::IDPList::container& ScopingType::
    IDPList ()
    {
      return this->_xsd_IDPList_;
    }

    void ScopingType::
    IDPList (const IDPList::type& IDPList)
    {
      this->_xsd_IDPList_.set (IDPList);
    }

    void ScopingType::
    IDPList (const IDPList::container& IDPList)
    {
      this->_xsd_IDPList_ = IDPList;
    }

    void ScopingType::
    IDPList (::std::auto_ptr< IDPList::type > IDPList)
    {
      this->_xsd_IDPList_.set (IDPList);
    }

    const ScopingType::RequesterID::container& ScopingType::
    RequesterID () const
    {
      return this->_xsd_RequesterID_;
    }

    ScopingType::RequesterID::container& ScopingType::
    RequesterID ()
    {
      return this->_xsd_RequesterID_;
    }

    void ScopingType::
    RequesterID (const RequesterID::container& RequesterID)
    {
      this->_xsd_RequesterID_ = RequesterID;
    }

    const ScopingType::ProxyCount::container& ScopingType::
    ProxyCount () const
    {
      return this->_xsd_ProxyCount_;
    }

    ScopingType::ProxyCount::container& ScopingType::
    ProxyCount ()
    {
      return this->_xsd_ProxyCount_;
    }

    void ScopingType::
    ProxyCount (const ProxyCount::type& ProxyCount)
    {
      this->_xsd_ProxyCount_.set (ProxyCount);
    }

    void ScopingType::
    ProxyCount (const ProxyCount::container& ProxyCount)
    {
      this->_xsd_ProxyCount_ = ProxyCount;
    }


    // IDPListType
    // 

    const IDPListType::IDPEntry::container& IDPListType::
    IDPEntry () const
    {
      return this->_xsd_IDPEntry_;
    }

    IDPListType::IDPEntry::container& IDPListType::
    IDPEntry ()
    {
      return this->_xsd_IDPEntry_;
    }

    void IDPListType::
    IDPEntry (const IDPEntry::container& IDPEntry)
    {
      this->_xsd_IDPEntry_ = IDPEntry;
    }

    const IDPListType::GetComplete::container& IDPListType::
    GetComplete () const
    {
      return this->_xsd_GetComplete_;
    }

    IDPListType::GetComplete::container& IDPListType::
    GetComplete ()
    {
      return this->_xsd_GetComplete_;
    }

    void IDPListType::
    GetComplete (const GetComplete::type& GetComplete)
    {
      this->_xsd_GetComplete_.set (GetComplete);
    }

    void IDPListType::
    GetComplete (const GetComplete::container& GetComplete)
    {
      this->_xsd_GetComplete_ = GetComplete;
    }

    void IDPListType::
    GetComplete (::std::auto_ptr< GetComplete::type > GetComplete)
    {
      this->_xsd_GetComplete_.set (GetComplete);
    }


    // IDPEntryType
    // 

    const IDPEntryType::ProviderID::type& IDPEntryType::
    ProviderID () const
    {
      return this->_xsd_ProviderID_.get ();
    }

    IDPEntryType::ProviderID::type& IDPEntryType::
    ProviderID ()
    {
      return this->_xsd_ProviderID_.get ();
    }

    void IDPEntryType::
    ProviderID (const ProviderID::type& ProviderID)
    {
      this->_xsd_ProviderID_.set (ProviderID);
    }

    void IDPEntryType::
    ProviderID (::std::auto_ptr< ProviderID::type > ProviderID)
    {
      this->_xsd_ProviderID_.set (ProviderID);
    }

    const IDPEntryType::Name::container& IDPEntryType::
    Name () const
    {
      return this->_xsd_Name_;
    }

    IDPEntryType::Name::container& IDPEntryType::
    Name ()
    {
      return this->_xsd_Name_;
    }

    void IDPEntryType::
    Name (const Name::type& Name)
    {
      this->_xsd_Name_.set (Name);
    }

    void IDPEntryType::
    Name (const Name::container& Name)
    {
      this->_xsd_Name_ = Name;
    }

    void IDPEntryType::
    Name (::std::auto_ptr< Name::type > Name)
    {
      this->_xsd_Name_.set (Name);
    }

    const IDPEntryType::Loc::container& IDPEntryType::
    Loc () const
    {
      return this->_xsd_Loc_;
    }

    IDPEntryType::Loc::container& IDPEntryType::
    Loc ()
    {
      return this->_xsd_Loc_;
    }

    void IDPEntryType::
    Loc (const Loc::type& Loc)
    {
      this->_xsd_Loc_.set (Loc);
    }

    void IDPEntryType::
    Loc (const Loc::container& Loc)
    {
      this->_xsd_Loc_ = Loc;
    }

    void IDPEntryType::
    Loc (::std::auto_ptr< Loc::type > Loc)
    {
      this->_xsd_Loc_.set (Loc);
    }


    // ResponseType
    // 

    const ResponseType::Assertion::container& ResponseType::
    Assertion () const
    {
      return this->_xsd_Assertion_;
    }

    ResponseType::Assertion::container& ResponseType::
    Assertion ()
    {
      return this->_xsd_Assertion_;
    }

    void ResponseType::
    Assertion (const Assertion::container& Assertion)
    {
      this->_xsd_Assertion_ = Assertion;
    }

    const ResponseType::EncryptedAssertion::container& ResponseType::
    EncryptedAssertion () const
    {
      return this->_xsd_EncryptedAssertion_;
    }

    ResponseType::EncryptedAssertion::container& ResponseType::
    EncryptedAssertion ()
    {
      return this->_xsd_EncryptedAssertion_;
    }

    void ResponseType::
    EncryptedAssertion (const EncryptedAssertion::container& EncryptedAssertion)
    {
      this->_xsd_EncryptedAssertion_ = EncryptedAssertion;
    }


    // ArtifactResolveType
    // 

    const ArtifactResolveType::Artifact::type& ArtifactResolveType::
    Artifact () const
    {
      return this->_xsd_Artifact_.get ();
    }

    ArtifactResolveType::Artifact::type& ArtifactResolveType::
    Artifact ()
    {
      return this->_xsd_Artifact_.get ();
    }

    void ArtifactResolveType::
    Artifact (const Artifact::type& Artifact)
    {
      this->_xsd_Artifact_.set (Artifact);
    }

    void ArtifactResolveType::
    Artifact (::std::auto_ptr< Artifact::type > Artifact)
    {
      this->_xsd_Artifact_.set (Artifact);
    }


    // ArtifactResponseType
    // 


    // ManageNameIDRequestType
    // 

    const ManageNameIDRequestType::NameID::container& ManageNameIDRequestType::
    NameID () const
    {
      return this->_xsd_NameID_;
    }

    ManageNameIDRequestType::NameID::container& ManageNameIDRequestType::
    NameID ()
    {
      return this->_xsd_NameID_;
    }

    void ManageNameIDRequestType::
    NameID (const NameID::type& NameID)
    {
      this->_xsd_NameID_.set (NameID);
    }

    void ManageNameIDRequestType::
    NameID (const NameID::container& NameID)
    {
      this->_xsd_NameID_ = NameID;
    }

    void ManageNameIDRequestType::
    NameID (::std::auto_ptr< NameID::type > NameID)
    {
      this->_xsd_NameID_.set (NameID);
    }

    const ManageNameIDRequestType::EncryptedID::container& ManageNameIDRequestType::
    EncryptedID () const
    {
      return this->_xsd_EncryptedID_;
    }

    ManageNameIDRequestType::EncryptedID::container& ManageNameIDRequestType::
    EncryptedID ()
    {
      return this->_xsd_EncryptedID_;
    }

    void ManageNameIDRequestType::
    EncryptedID (const EncryptedID::type& EncryptedID)
    {
      this->_xsd_EncryptedID_.set (EncryptedID);
    }

    void ManageNameIDRequestType::
    EncryptedID (const EncryptedID::container& EncryptedID)
    {
      this->_xsd_EncryptedID_ = EncryptedID;
    }

    void ManageNameIDRequestType::
    EncryptedID (::std::auto_ptr< EncryptedID::type > EncryptedID)
    {
      this->_xsd_EncryptedID_.set (EncryptedID);
    }

    const ManageNameIDRequestType::NewID::container& ManageNameIDRequestType::
    NewID () const
    {
      return this->_xsd_NewID_;
    }

    ManageNameIDRequestType::NewID::container& ManageNameIDRequestType::
    NewID ()
    {
      return this->_xsd_NewID_;
    }

    void ManageNameIDRequestType::
    NewID (const NewID::type& NewID)
    {
      this->_xsd_NewID_.set (NewID);
    }

    void ManageNameIDRequestType::
    NewID (const NewID::container& NewID)
    {
      this->_xsd_NewID_ = NewID;
    }

    void ManageNameIDRequestType::
    NewID (::std::auto_ptr< NewID::type > NewID)
    {
      this->_xsd_NewID_.set (NewID);
    }

    const ManageNameIDRequestType::NewEncryptedID::container& ManageNameIDRequestType::
    NewEncryptedID () const
    {
      return this->_xsd_NewEncryptedID_;
    }

    ManageNameIDRequestType::NewEncryptedID::container& ManageNameIDRequestType::
    NewEncryptedID ()
    {
      return this->_xsd_NewEncryptedID_;
    }

    void ManageNameIDRequestType::
    NewEncryptedID (const NewEncryptedID::type& NewEncryptedID)
    {
      this->_xsd_NewEncryptedID_.set (NewEncryptedID);
    }

    void ManageNameIDRequestType::
    NewEncryptedID (const NewEncryptedID::container& NewEncryptedID)
    {
      this->_xsd_NewEncryptedID_ = NewEncryptedID;
    }

    void ManageNameIDRequestType::
    NewEncryptedID (::std::auto_ptr< NewEncryptedID::type > NewEncryptedID)
    {
      this->_xsd_NewEncryptedID_.set (NewEncryptedID);
    }

    const ManageNameIDRequestType::Terminate::container& ManageNameIDRequestType::
    Terminate () const
    {
      return this->_xsd_Terminate_;
    }

    ManageNameIDRequestType::Terminate::container& ManageNameIDRequestType::
    Terminate ()
    {
      return this->_xsd_Terminate_;
    }

    void ManageNameIDRequestType::
    Terminate (const Terminate::type& Terminate)
    {
      this->_xsd_Terminate_.set (Terminate);
    }

    void ManageNameIDRequestType::
    Terminate (const Terminate::container& Terminate)
    {
      this->_xsd_Terminate_ = Terminate;
    }

    void ManageNameIDRequestType::
    Terminate (::std::auto_ptr< Terminate::type > Terminate)
    {
      this->_xsd_Terminate_.set (Terminate);
    }


    // TerminateType
    // 


    // LogoutRequestType
    // 

    const LogoutRequestType::BaseID::container& LogoutRequestType::
    BaseID () const
    {
      return this->_xsd_BaseID_;
    }

    LogoutRequestType::BaseID::container& LogoutRequestType::
    BaseID ()
    {
      return this->_xsd_BaseID_;
    }

    void LogoutRequestType::
    BaseID (const BaseID::type& BaseID)
    {
      this->_xsd_BaseID_.set (BaseID);
    }

    void LogoutRequestType::
    BaseID (const BaseID::container& BaseID)
    {
      this->_xsd_BaseID_ = BaseID;
    }

    void LogoutRequestType::
    BaseID (::std::auto_ptr< BaseID::type > BaseID)
    {
      this->_xsd_BaseID_.set (BaseID);
    }

    const LogoutRequestType::NameID::container& LogoutRequestType::
    NameID () const
    {
      return this->_xsd_NameID_;
    }

    LogoutRequestType::NameID::container& LogoutRequestType::
    NameID ()
    {
      return this->_xsd_NameID_;
    }

    void LogoutRequestType::
    NameID (const NameID::type& NameID)
    {
      this->_xsd_NameID_.set (NameID);
    }

    void LogoutRequestType::
    NameID (const NameID::container& NameID)
    {
      this->_xsd_NameID_ = NameID;
    }

    void LogoutRequestType::
    NameID (::std::auto_ptr< NameID::type > NameID)
    {
      this->_xsd_NameID_.set (NameID);
    }

    const LogoutRequestType::EncryptedID::container& LogoutRequestType::
    EncryptedID () const
    {
      return this->_xsd_EncryptedID_;
    }

    LogoutRequestType::EncryptedID::container& LogoutRequestType::
    EncryptedID ()
    {
      return this->_xsd_EncryptedID_;
    }

    void LogoutRequestType::
    EncryptedID (const EncryptedID::type& EncryptedID)
    {
      this->_xsd_EncryptedID_.set (EncryptedID);
    }

    void LogoutRequestType::
    EncryptedID (const EncryptedID::container& EncryptedID)
    {
      this->_xsd_EncryptedID_ = EncryptedID;
    }

    void LogoutRequestType::
    EncryptedID (::std::auto_ptr< EncryptedID::type > EncryptedID)
    {
      this->_xsd_EncryptedID_.set (EncryptedID);
    }

    const LogoutRequestType::SessionIndex::container& LogoutRequestType::
    SessionIndex () const
    {
      return this->_xsd_SessionIndex_;
    }

    LogoutRequestType::SessionIndex::container& LogoutRequestType::
    SessionIndex ()
    {
      return this->_xsd_SessionIndex_;
    }

    void LogoutRequestType::
    SessionIndex (const SessionIndex::container& SessionIndex)
    {
      this->_xsd_SessionIndex_ = SessionIndex;
    }

    const LogoutRequestType::Reason::container& LogoutRequestType::
    Reason () const
    {
      return this->_xsd_Reason_;
    }

    LogoutRequestType::Reason::container& LogoutRequestType::
    Reason ()
    {
      return this->_xsd_Reason_;
    }

    void LogoutRequestType::
    Reason (const Reason::type& Reason)
    {
      this->_xsd_Reason_.set (Reason);
    }

    void LogoutRequestType::
    Reason (const Reason::container& Reason)
    {
      this->_xsd_Reason_ = Reason;
    }

    void LogoutRequestType::
    Reason (::std::auto_ptr< Reason::type > Reason)
    {
      this->_xsd_Reason_.set (Reason);
    }

    const LogoutRequestType::NotOnOrAfter::container& LogoutRequestType::
    NotOnOrAfter () const
    {
      return this->_xsd_NotOnOrAfter_;
    }

    LogoutRequestType::NotOnOrAfter::container& LogoutRequestType::
    NotOnOrAfter ()
    {
      return this->_xsd_NotOnOrAfter_;
    }

    void LogoutRequestType::
    NotOnOrAfter (const NotOnOrAfter::type& NotOnOrAfter)
    {
      this->_xsd_NotOnOrAfter_.set (NotOnOrAfter);
    }

    void LogoutRequestType::
    NotOnOrAfter (const NotOnOrAfter::container& NotOnOrAfter)
    {
      this->_xsd_NotOnOrAfter_ = NotOnOrAfter;
    }

    void LogoutRequestType::
    NotOnOrAfter (::std::auto_ptr< NotOnOrAfter::type > NotOnOrAfter)
    {
      this->_xsd_NotOnOrAfter_.set (NotOnOrAfter);
    }


    // NameIDMappingRequestType
    // 

    const NameIDMappingRequestType::BaseID::container& NameIDMappingRequestType::
    BaseID () const
    {
      return this->_xsd_BaseID_;
    }

    NameIDMappingRequestType::BaseID::container& NameIDMappingRequestType::
    BaseID ()
    {
      return this->_xsd_BaseID_;
    }

    void NameIDMappingRequestType::
    BaseID (const BaseID::type& BaseID)
    {
      this->_xsd_BaseID_.set (BaseID);
    }

    void NameIDMappingRequestType::
    BaseID (const BaseID::container& BaseID)
    {
      this->_xsd_BaseID_ = BaseID;
    }

    void NameIDMappingRequestType::
    BaseID (::std::auto_ptr< BaseID::type > BaseID)
    {
      this->_xsd_BaseID_.set (BaseID);
    }

    const NameIDMappingRequestType::NameID::container& NameIDMappingRequestType::
    NameID () const
    {
      return this->_xsd_NameID_;
    }

    NameIDMappingRequestType::NameID::container& NameIDMappingRequestType::
    NameID ()
    {
      return this->_xsd_NameID_;
    }

    void NameIDMappingRequestType::
    NameID (const NameID::type& NameID)
    {
      this->_xsd_NameID_.set (NameID);
    }

    void NameIDMappingRequestType::
    NameID (const NameID::container& NameID)
    {
      this->_xsd_NameID_ = NameID;
    }

    void NameIDMappingRequestType::
    NameID (::std::auto_ptr< NameID::type > NameID)
    {
      this->_xsd_NameID_.set (NameID);
    }

    const NameIDMappingRequestType::EncryptedID::container& NameIDMappingRequestType::
    EncryptedID () const
    {
      return this->_xsd_EncryptedID_;
    }

    NameIDMappingRequestType::EncryptedID::container& NameIDMappingRequestType::
    EncryptedID ()
    {
      return this->_xsd_EncryptedID_;
    }

    void NameIDMappingRequestType::
    EncryptedID (const EncryptedID::type& EncryptedID)
    {
      this->_xsd_EncryptedID_.set (EncryptedID);
    }

    void NameIDMappingRequestType::
    EncryptedID (const EncryptedID::container& EncryptedID)
    {
      this->_xsd_EncryptedID_ = EncryptedID;
    }

    void NameIDMappingRequestType::
    EncryptedID (::std::auto_ptr< EncryptedID::type > EncryptedID)
    {
      this->_xsd_EncryptedID_.set (EncryptedID);
    }

    const NameIDMappingRequestType::NameIDPolicy::type& NameIDMappingRequestType::
    NameIDPolicy () const
    {
      return this->_xsd_NameIDPolicy_.get ();
    }

    NameIDMappingRequestType::NameIDPolicy::type& NameIDMappingRequestType::
    NameIDPolicy ()
    {
      return this->_xsd_NameIDPolicy_.get ();
    }

    void NameIDMappingRequestType::
    NameIDPolicy (const NameIDPolicy::type& NameIDPolicy)
    {
      this->_xsd_NameIDPolicy_.set (NameIDPolicy);
    }

    void NameIDMappingRequestType::
    NameIDPolicy (::std::auto_ptr< NameIDPolicy::type > NameIDPolicy)
    {
      this->_xsd_NameIDPolicy_.set (NameIDPolicy);
    }


    // NameIDMappingResponseType
    // 

    const NameIDMappingResponseType::NameID::container& NameIDMappingResponseType::
    NameID () const
    {
      return this->_xsd_NameID_;
    }

    NameIDMappingResponseType::NameID::container& NameIDMappingResponseType::
    NameID ()
    {
      return this->_xsd_NameID_;
    }

    void NameIDMappingResponseType::
    NameID (const NameID::type& NameID)
    {
      this->_xsd_NameID_.set (NameID);
    }

    void NameIDMappingResponseType::
    NameID (const NameID::container& NameID)
    {
      this->_xsd_NameID_ = NameID;
    }

    void NameIDMappingResponseType::
    NameID (::std::auto_ptr< NameID::type > NameID)
    {
      this->_xsd_NameID_.set (NameID);
    }

    const NameIDMappingResponseType::EncryptedID::container& NameIDMappingResponseType::
    EncryptedID () const
    {
      return this->_xsd_EncryptedID_;
    }

    NameIDMappingResponseType::EncryptedID::container& NameIDMappingResponseType::
    EncryptedID ()
    {
      return this->_xsd_EncryptedID_;
    }

    void NameIDMappingResponseType::
    EncryptedID (const EncryptedID::type& EncryptedID)
    {
      this->_xsd_EncryptedID_.set (EncryptedID);
    }

    void NameIDMappingResponseType::
    EncryptedID (const EncryptedID::container& EncryptedID)
    {
      this->_xsd_EncryptedID_ = EncryptedID;
    }

    void NameIDMappingResponseType::
    EncryptedID (::std::auto_ptr< EncryptedID::type > EncryptedID)
    {
      this->_xsd_EncryptedID_.set (EncryptedID);
    }
  }
}

#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/parser.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_factory_plate< 0, wchar_t >
  type_factory_plate_init;
}

namespace saml2
{
  namespace protocol
  {
    // RequestAbstractType
    //

    RequestAbstractType::
    RequestAbstractType ()
    : ::xml_schema::type (),
    _xsd_Issuer_ (::xml_schema::flags (), this),
    _xsd_Signature_ (::xml_schema::flags (), this),
    _xsd_Extensions_ (::xml_schema::flags (), this),
    _xsd_ID_ (::xml_schema::flags (), this),
    _xsd_Version_ (::xml_schema::flags (), this),
    _xsd_IssueInstant_ (::xml_schema::flags (), this),
    _xsd_Destination_ (::xml_schema::flags (), this),
    _xsd_Consent_ (::xml_schema::flags (), this)
    {
    }

    RequestAbstractType::
    RequestAbstractType (const ID::type& _xsd_ID,
                         const Version::type& _xsd_Version,
                         const IssueInstant::type& _xsd_IssueInstant)
    : ::xml_schema::type (),
    _xsd_Issuer_ (::xml_schema::flags (), this),
    _xsd_Signature_ (::xml_schema::flags (), this),
    _xsd_Extensions_ (::xml_schema::flags (), this),
    _xsd_ID_ (_xsd_ID,
              ::xml_schema::flags (),
              this),
    _xsd_Version_ (_xsd_Version,
                   ::xml_schema::flags (),
                   this),
    _xsd_IssueInstant_ (_xsd_IssueInstant,
                        ::xml_schema::flags (),
                        this),
    _xsd_Destination_ (::xml_schema::flags (), this),
    _xsd_Consent_ (::xml_schema::flags (), this)
    {
    }

    RequestAbstractType::
    RequestAbstractType (const RequestAbstractType& _xsd_RequestAbstractType,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_RequestAbstractType, f, c),
    _xsd_Issuer_ (_xsd_RequestAbstractType._xsd_Issuer_,
                  f | ::xml_schema::flags::not_root,
                  this),
    _xsd_Signature_ (_xsd_RequestAbstractType._xsd_Signature_,
                     f | ::xml_schema::flags::not_root,
                     this),
    _xsd_Extensions_ (_xsd_RequestAbstractType._xsd_Extensions_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_ID_ (_xsd_RequestAbstractType._xsd_ID_,
              f | ::xml_schema::flags::not_root,
              this),
    _xsd_Version_ (_xsd_RequestAbstractType._xsd_Version_,
                   f | ::xml_schema::flags::not_root,
                   this),
    _xsd_IssueInstant_ (_xsd_RequestAbstractType._xsd_IssueInstant_,
                        f | ::xml_schema::flags::not_root,
                        this),
    _xsd_Destination_ (_xsd_RequestAbstractType._xsd_Destination_,
                       f | ::xml_schema::flags::not_root,
                       this),
    _xsd_Consent_ (_xsd_RequestAbstractType._xsd_Consent_,
                   f | ::xml_schema::flags::not_root,
                   this)
    {
    }

    RequestAbstractType::
    RequestAbstractType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Issuer_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Signature_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Extensions_ (f | ::xml_schema::flags::not_root, this),
    _xsd_ID_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Version_ (f | ::xml_schema::flags::not_root, this),
    _xsd_IssueInstant_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Destination_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Consent_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void RequestAbstractType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Issuer
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Issuer::type > r (
            tfm.create< Issuer::type > (
              L"Issuer",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Issuer ())
              continue;
            this->Issuer (r);
            continue;
          }
        }

        // Signature
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Signature::type > r (
            tfm.create< Signature::type > (
              L"Signature",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Signature ())
              continue;
            this->Signature (r);
            continue;
          }
        }

        // Extensions
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Extensions::type > r (
            tfm.create< Extensions::type > (
              L"Extensions",
              L"urn:oasis:names:tc:SAML:2.0:protocol",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Extensions ())
              continue;
            this->Extensions (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"ID" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< ID::type > r (
            ID::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->ID (r);
          continue;
        }

        if (a.name () == L"Version" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Version::type > r (
            Version::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Version (r);
          continue;
        }

        if (a.name () == L"IssueInstant" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< IssueInstant::type > r (
            IssueInstant::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->IssueInstant (r);
          continue;
        }

        if (a.name () == L"Destination" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Destination::type > r (
            Destination::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Destination (r);
          continue;
        }

        if (a.name () == L"Consent" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Consent::type > r (
            Consent::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Consent (r);
          continue;
        }
      }

      if (!_xsd_ID_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"ID",
          L"");
      }

      if (!_xsd_Version_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Version",
          L"");
      }

      if (!_xsd_IssueInstant_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"IssueInstant",
          L"");
      }
    }

    RequestAbstractType* RequestAbstractType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new RequestAbstractType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, RequestAbstractType >
    _xsd_RequestAbstractType_type_factory_init (
      L"RequestAbstractType urn:oasis:names:tc:SAML:2.0:protocol");


    // ExtensionsType
    //

    ExtensionsType::
    ExtensionsType ()
    : ::xml_schema::type ()
    {
    }

    ExtensionsType::
    ExtensionsType (const ExtensionsType& _xsd_ExtensionsType,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_ExtensionsType, f, c)
    {
    }

    ExtensionsType::
    ExtensionsType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c)
    {
    }

    ExtensionsType::
    ExtensionsType (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (a, f, c)
    {
    }

    ExtensionsType::
    ExtensionsType (const ::std::basic_string< wchar_t >& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (s, e, f, c)
    {
    }

    ExtensionsType* ExtensionsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ExtensionsType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ExtensionsType >
    _xsd_ExtensionsType_type_factory_init (
      L"ExtensionsType urn:oasis:names:tc:SAML:2.0:protocol");


    // StatusResponseType
    //

    StatusResponseType::
    StatusResponseType ()
    : ::xml_schema::type (),
    _xsd_Issuer_ (::xml_schema::flags (), this),
    _xsd_Signature_ (::xml_schema::flags (), this),
    _xsd_Extensions_ (::xml_schema::flags (), this),
    _xsd_Status_ (::xml_schema::flags (), this),
    _xsd_ID_ (::xml_schema::flags (), this),
    _xsd_InResponseTo_ (::xml_schema::flags (), this),
    _xsd_Version_ (::xml_schema::flags (), this),
    _xsd_IssueInstant_ (::xml_schema::flags (), this),
    _xsd_Destination_ (::xml_schema::flags (), this),
    _xsd_Consent_ (::xml_schema::flags (), this)
    {
    }

    StatusResponseType::
    StatusResponseType (const Status::type& _xsd_Status,
                        const ID::type& _xsd_ID,
                        const Version::type& _xsd_Version,
                        const IssueInstant::type& _xsd_IssueInstant)
    : ::xml_schema::type (),
    _xsd_Issuer_ (::xml_schema::flags (), this),
    _xsd_Signature_ (::xml_schema::flags (), this),
    _xsd_Extensions_ (::xml_schema::flags (), this),
    _xsd_Status_ (_xsd_Status,
                  ::xml_schema::flags (),
                  this),
    _xsd_ID_ (_xsd_ID,
              ::xml_schema::flags (),
              this),
    _xsd_InResponseTo_ (::xml_schema::flags (), this),
    _xsd_Version_ (_xsd_Version,
                   ::xml_schema::flags (),
                   this),
    _xsd_IssueInstant_ (_xsd_IssueInstant,
                        ::xml_schema::flags (),
                        this),
    _xsd_Destination_ (::xml_schema::flags (), this),
    _xsd_Consent_ (::xml_schema::flags (), this)
    {
    }

    StatusResponseType::
    StatusResponseType (const StatusResponseType& _xsd_StatusResponseType,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_StatusResponseType, f, c),
    _xsd_Issuer_ (_xsd_StatusResponseType._xsd_Issuer_,
                  f | ::xml_schema::flags::not_root,
                  this),
    _xsd_Signature_ (_xsd_StatusResponseType._xsd_Signature_,
                     f | ::xml_schema::flags::not_root,
                     this),
    _xsd_Extensions_ (_xsd_StatusResponseType._xsd_Extensions_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_Status_ (_xsd_StatusResponseType._xsd_Status_,
                  f | ::xml_schema::flags::not_root,
                  this),
    _xsd_ID_ (_xsd_StatusResponseType._xsd_ID_,
              f | ::xml_schema::flags::not_root,
              this),
    _xsd_InResponseTo_ (_xsd_StatusResponseType._xsd_InResponseTo_,
                        f | ::xml_schema::flags::not_root,
                        this),
    _xsd_Version_ (_xsd_StatusResponseType._xsd_Version_,
                   f | ::xml_schema::flags::not_root,
                   this),
    _xsd_IssueInstant_ (_xsd_StatusResponseType._xsd_IssueInstant_,
                        f | ::xml_schema::flags::not_root,
                        this),
    _xsd_Destination_ (_xsd_StatusResponseType._xsd_Destination_,
                       f | ::xml_schema::flags::not_root,
                       this),
    _xsd_Consent_ (_xsd_StatusResponseType._xsd_Consent_,
                   f | ::xml_schema::flags::not_root,
                   this)
    {
    }

    StatusResponseType::
    StatusResponseType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Issuer_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Signature_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Extensions_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Status_ (f | ::xml_schema::flags::not_root, this),
    _xsd_ID_ (f | ::xml_schema::flags::not_root, this),
    _xsd_InResponseTo_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Version_ (f | ::xml_schema::flags::not_root, this),
    _xsd_IssueInstant_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Destination_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Consent_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void StatusResponseType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Issuer
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Issuer::type > r (
            tfm.create< Issuer::type > (
              L"Issuer",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Issuer ())
              continue;
            this->Issuer (r);
            continue;
          }
        }

        // Signature
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Signature::type > r (
            tfm.create< Signature::type > (
              L"Signature",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Signature ())
              continue;
            this->Signature (r);
            continue;
          }
        }

        // Extensions
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Extensions::type > r (
            tfm.create< Extensions::type > (
              L"Extensions",
              L"urn:oasis:names:tc:SAML:2.0:protocol",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Extensions ())
              continue;
            this->Extensions (r);
            continue;
          }
        }

        // Status
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Status::type > r (
            tfm.create< Status::type > (
              L"Status",
              L"urn:oasis:names:tc:SAML:2.0:protocol",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_Status_.present ())
              continue;
            this->Status (r);
            continue;
          }
        }
      }

      if (!_xsd_Status_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Status",
          L"urn:oasis:names:tc:SAML:2.0:protocol");
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"ID" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< ID::type > r (
            ID::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->ID (r);
          continue;
        }

        if (a.name () == L"InResponseTo" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< InResponseTo::type > r (
            InResponseTo::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->InResponseTo (r);
          continue;
        }

        if (a.name () == L"Version" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Version::type > r (
            Version::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Version (r);
          continue;
        }

        if (a.name () == L"IssueInstant" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< IssueInstant::type > r (
            IssueInstant::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->IssueInstant (r);
          continue;
        }

        if (a.name () == L"Destination" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Destination::type > r (
            Destination::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Destination (r);
          continue;
        }

        if (a.name () == L"Consent" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Consent::type > r (
            Consent::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Consent (r);
          continue;
        }
      }

      if (!_xsd_ID_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"ID",
          L"");
      }

      if (!_xsd_Version_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Version",
          L"");
      }

      if (!_xsd_IssueInstant_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"IssueInstant",
          L"");
      }
    }

    StatusResponseType* StatusResponseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new StatusResponseType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, StatusResponseType >
    _xsd_StatusResponseType_type_factory_init (
      L"StatusResponseType urn:oasis:names:tc:SAML:2.0:protocol");


    // StatusType
    //

    StatusType::
    StatusType ()
    : ::xml_schema::type (),
    _xsd_StatusCode_ (::xml_schema::flags (), this),
    _xsd_StatusMessage_ (::xml_schema::flags (), this),
    _xsd_StatusDetail_ (::xml_schema::flags (), this)
    {
    }

    StatusType::
    StatusType (const StatusCode::type& _xsd_StatusCode)
    : ::xml_schema::type (),
    _xsd_StatusCode_ (_xsd_StatusCode,
                      ::xml_schema::flags (),
                      this),
    _xsd_StatusMessage_ (::xml_schema::flags (), this),
    _xsd_StatusDetail_ (::xml_schema::flags (), this)
    {
    }

    StatusType::
    StatusType (const StatusType& _xsd_StatusType,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_StatusType, f, c),
    _xsd_StatusCode_ (_xsd_StatusType._xsd_StatusCode_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_StatusMessage_ (_xsd_StatusType._xsd_StatusMessage_,
                         f | ::xml_schema::flags::not_root,
                         this),
    _xsd_StatusDetail_ (_xsd_StatusType._xsd_StatusDetail_,
                        f | ::xml_schema::flags::not_root,
                        this)
    {
    }

    StatusType::
    StatusType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_StatusCode_ (f | ::xml_schema::flags::not_root, this),
    _xsd_StatusMessage_ (f | ::xml_schema::flags::not_root, this),
    _xsd_StatusDetail_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void StatusType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // StatusCode
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< StatusCode::type > r (
            tfm.create< StatusCode::type > (
              L"StatusCode",
              L"urn:oasis:names:tc:SAML:2.0:protocol",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_StatusCode_.present ())
              continue;
            this->StatusCode (r);
            continue;
          }
        }

        // StatusMessage
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< StatusMessage::type > r (
            tfm.create< StatusMessage::type > (
              L"StatusMessage",
              L"urn:oasis:names:tc:SAML:2.0:protocol",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->StatusMessage ())
              continue;
            this->StatusMessage (r);
            continue;
          }
        }

        // StatusDetail
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< StatusDetail::type > r (
            tfm.create< StatusDetail::type > (
              L"StatusDetail",
              L"urn:oasis:names:tc:SAML:2.0:protocol",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->StatusDetail ())
              continue;
            this->StatusDetail (r);
            continue;
          }
        }
      }

      if (!_xsd_StatusCode_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"StatusCode",
          L"urn:oasis:names:tc:SAML:2.0:protocol");
      }
    }

    StatusType* StatusType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new StatusType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, StatusType >
    _xsd_StatusType_type_factory_init (
      L"StatusType urn:oasis:names:tc:SAML:2.0:protocol");


    // StatusCodeType
    //

    StatusCodeType::
    StatusCodeType ()
    : ::xml_schema::type (),
    _xsd_StatusCode_ (::xml_schema::flags (), this),
    _xsd_Value_ (::xml_schema::flags (), this)
    {
    }

    StatusCodeType::
    StatusCodeType (const Value::type& _xsd_Value)
    : ::xml_schema::type (),
    _xsd_StatusCode_ (::xml_schema::flags (), this),
    _xsd_Value_ (_xsd_Value,
                 ::xml_schema::flags (),
                 this)
    {
    }

    StatusCodeType::
    StatusCodeType (const StatusCodeType& _xsd_StatusCodeType,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_StatusCodeType, f, c),
    _xsd_StatusCode_ (_xsd_StatusCodeType._xsd_StatusCode_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_Value_ (_xsd_StatusCodeType._xsd_Value_,
                 f | ::xml_schema::flags::not_root,
                 this)
    {
    }

    StatusCodeType::
    StatusCodeType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_StatusCode_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Value_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void StatusCodeType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // StatusCode
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< StatusCode::type > r (
            tfm.create< StatusCode::type > (
              L"StatusCode",
              L"urn:oasis:names:tc:SAML:2.0:protocol",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->StatusCode ())
              continue;
            this->StatusCode (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Value" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Value::type > r (
            Value::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Value (r);
          continue;
        }
      }

      if (!_xsd_Value_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Value",
          L"");
      }
    }

    StatusCodeType* StatusCodeType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new StatusCodeType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, StatusCodeType >
    _xsd_StatusCodeType_type_factory_init (
      L"StatusCodeType urn:oasis:names:tc:SAML:2.0:protocol");


    // StatusDetailType
    //

    StatusDetailType::
    StatusDetailType ()
    : ::xml_schema::type ()
    {
    }

    StatusDetailType::
    StatusDetailType (const StatusDetailType& _xsd_StatusDetailType,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_StatusDetailType, f, c)
    {
    }

    StatusDetailType::
    StatusDetailType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c)
    {
    }

    StatusDetailType::
    StatusDetailType (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
    : ::xml_schema::type (a, f, c)
    {
    }

    StatusDetailType::
    StatusDetailType (const ::std::basic_string< wchar_t >& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
    : ::xml_schema::type (s, e, f, c)
    {
    }

    StatusDetailType* StatusDetailType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new StatusDetailType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, StatusDetailType >
    _xsd_StatusDetailType_type_factory_init (
      L"StatusDetailType urn:oasis:names:tc:SAML:2.0:protocol");


    // AssertionIDRequestType
    //

    AssertionIDRequestType::
    AssertionIDRequestType ()
    : ::saml2::protocol::RequestAbstractType (),
    _xsd_AssertionIDRef_ (::xml_schema::flags (), this)
    {
    }

    AssertionIDRequestType::
    AssertionIDRequestType (const ID::type& _xsd_ID,
                            const Version::type& _xsd_Version,
                            const IssueInstant::type& _xsd_IssueInstant)
    : ::saml2::protocol::RequestAbstractType (_xsd_ID,
                                              _xsd_Version,
                                              _xsd_IssueInstant),
    _xsd_AssertionIDRef_ (::xml_schema::flags (), this)
    {
    }

    AssertionIDRequestType::
    AssertionIDRequestType (const AssertionIDRequestType& _xsd_AssertionIDRequestType,
                            ::xml_schema::flags f,
                            ::xml_schema::type* c)
    : ::saml2::protocol::RequestAbstractType (_xsd_AssertionIDRequestType, f, c),
    _xsd_AssertionIDRef_ (_xsd_AssertionIDRequestType._xsd_AssertionIDRef_,
                          f | ::xml_schema::flags::not_root,
                          this)
    {
    }

    AssertionIDRequestType::
    AssertionIDRequestType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::type* c)
    : ::saml2::protocol::RequestAbstractType (e, f, c),
    _xsd_AssertionIDRef_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void AssertionIDRequestType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // AssertionIDRef
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< AssertionIDRef::type > r (
            tfm.create< AssertionIDRef::type > (
              L"AssertionIDRef",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->AssertionIDRef ().push_back (r);
            continue;
          }
        }
      }
    }

    AssertionIDRequestType* AssertionIDRequestType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new AssertionIDRequestType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AssertionIDRequestType >
    _xsd_AssertionIDRequestType_type_factory_init (
      L"AssertionIDRequestType urn:oasis:names:tc:SAML:2.0:protocol");


    // SubjectQueryAbstractType
    //

    SubjectQueryAbstractType::
    SubjectQueryAbstractType ()
    : ::saml2::protocol::RequestAbstractType (),
    _xsd_Subject_ (::xml_schema::flags (), this)
    {
    }

    SubjectQueryAbstractType::
    SubjectQueryAbstractType (const ID::type& _xsd_ID,
                              const Version::type& _xsd_Version,
                              const IssueInstant::type& _xsd_IssueInstant,
                              const Subject::type& _xsd_Subject)
    : ::saml2::protocol::RequestAbstractType (_xsd_ID,
                                              _xsd_Version,
                                              _xsd_IssueInstant),
    _xsd_Subject_ (_xsd_Subject,
                   ::xml_schema::flags (),
                   this)
    {
    }

    SubjectQueryAbstractType::
    SubjectQueryAbstractType (const SubjectQueryAbstractType& _xsd_SubjectQueryAbstractType,
                              ::xml_schema::flags f,
                              ::xml_schema::type* c)
    : ::saml2::protocol::RequestAbstractType (_xsd_SubjectQueryAbstractType, f, c),
    _xsd_Subject_ (_xsd_SubjectQueryAbstractType._xsd_Subject_,
                   f | ::xml_schema::flags::not_root,
                   this)
    {
    }

    SubjectQueryAbstractType::
    SubjectQueryAbstractType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::type* c)
    : ::saml2::protocol::RequestAbstractType (e, f, c),
    _xsd_Subject_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void SubjectQueryAbstractType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Subject
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Subject::type > r (
            tfm.create< Subject::type > (
              L"Subject",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_Subject_.present ())
              continue;
            this->Subject (r);
            continue;
          }
        }
      }

      if (!_xsd_Subject_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Subject",
          L"urn:oasis:names:tc:SAML:2.0:assertion");
      }
    }

    SubjectQueryAbstractType* SubjectQueryAbstractType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new SubjectQueryAbstractType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SubjectQueryAbstractType >
    _xsd_SubjectQueryAbstractType_type_factory_init (
      L"SubjectQueryAbstractType urn:oasis:names:tc:SAML:2.0:protocol");


    // AuthnQueryType
    //

    AuthnQueryType::
    AuthnQueryType ()
    : ::saml2::protocol::SubjectQueryAbstractType (),
    _xsd_RequestedAuthnContext_ (::xml_schema::flags (), this),
    _xsd_SessionIndex_ (::xml_schema::flags (), this)
    {
    }

    AuthnQueryType::
    AuthnQueryType (const ID::type& _xsd_ID,
                    const Version::type& _xsd_Version,
                    const IssueInstant::type& _xsd_IssueInstant,
                    const Subject::type& _xsd_Subject)
    : ::saml2::protocol::SubjectQueryAbstractType (_xsd_ID,
                                                   _xsd_Version,
                                                   _xsd_IssueInstant,
                                                   _xsd_Subject),
    _xsd_RequestedAuthnContext_ (::xml_schema::flags (), this),
    _xsd_SessionIndex_ (::xml_schema::flags (), this)
    {
    }

    AuthnQueryType::
    AuthnQueryType (const AuthnQueryType& _xsd_AuthnQueryType,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::saml2::protocol::SubjectQueryAbstractType (_xsd_AuthnQueryType, f, c),
    _xsd_RequestedAuthnContext_ (_xsd_AuthnQueryType._xsd_RequestedAuthnContext_,
                                 f | ::xml_schema::flags::not_root,
                                 this),
    _xsd_SessionIndex_ (_xsd_AuthnQueryType._xsd_SessionIndex_,
                        f | ::xml_schema::flags::not_root,
                        this)
    {
    }

    AuthnQueryType::
    AuthnQueryType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::saml2::protocol::SubjectQueryAbstractType (e, f, c),
    _xsd_RequestedAuthnContext_ (f | ::xml_schema::flags::not_root, this),
    _xsd_SessionIndex_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void AuthnQueryType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // RequestedAuthnContext
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< RequestedAuthnContext::type > r (
            tfm.create< RequestedAuthnContext::type > (
              L"RequestedAuthnContext",
              L"urn:oasis:names:tc:SAML:2.0:protocol",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->RequestedAuthnContext ())
              continue;
            this->RequestedAuthnContext (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"SessionIndex" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< SessionIndex::type > r (
            SessionIndex::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->SessionIndex (r);
          continue;
        }
      }
    }

    AuthnQueryType* AuthnQueryType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new AuthnQueryType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AuthnQueryType >
    _xsd_AuthnQueryType_type_factory_init (
      L"AuthnQueryType urn:oasis:names:tc:SAML:2.0:protocol");


    // RequestedAuthnContextType
    //

    RequestedAuthnContextType::
    RequestedAuthnContextType ()
    : ::xml_schema::type (),
    _xsd_AuthnContextClassRef_ (::xml_schema::flags (), this),
    _xsd_AuthnContextDeclRef_ (::xml_schema::flags (), this),
    _xsd_Comparison_ (::xml_schema::flags (), this)
    {
    }

    RequestedAuthnContextType::
    RequestedAuthnContextType (const RequestedAuthnContextType& _xsd_RequestedAuthnContextType,
                               ::xml_schema::flags f,
                               ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_RequestedAuthnContextType, f, c),
    _xsd_AuthnContextClassRef_ (_xsd_RequestedAuthnContextType._xsd_AuthnContextClassRef_,
                                f | ::xml_schema::flags::not_root,
                                this),
    _xsd_AuthnContextDeclRef_ (_xsd_RequestedAuthnContextType._xsd_AuthnContextDeclRef_,
                               f | ::xml_schema::flags::not_root,
                               this),
    _xsd_Comparison_ (_xsd_RequestedAuthnContextType._xsd_Comparison_,
                      f | ::xml_schema::flags::not_root,
                      this)
    {
    }

    RequestedAuthnContextType::
    RequestedAuthnContextType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_AuthnContextClassRef_ (f | ::xml_schema::flags::not_root, this),
    _xsd_AuthnContextDeclRef_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Comparison_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void RequestedAuthnContextType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // AuthnContextClassRef
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< AuthnContextClassRef::type > r (
            tfm.create< AuthnContextClassRef::type > (
              L"AuthnContextClassRef",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->AuthnContextClassRef ().push_back (r);
            continue;
          }
        }

        // AuthnContextDeclRef
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< AuthnContextDeclRef::type > r (
            tfm.create< AuthnContextDeclRef::type > (
              L"AuthnContextDeclRef",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->AuthnContextDeclRef ().push_back (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Comparison" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Comparison::type > r (
            Comparison::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Comparison (r);
          continue;
        }
      }
    }

    RequestedAuthnContextType* RequestedAuthnContextType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new RequestedAuthnContextType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, RequestedAuthnContextType >
    _xsd_RequestedAuthnContextType_type_factory_init (
      L"RequestedAuthnContextType urn:oasis:names:tc:SAML:2.0:protocol");


    // AuthnContextComparisonType
    //

    AuthnContextComparisonType::
    AuthnContextComparisonType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::type* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_AuthnContextComparisonType_convert ();
    }

    AuthnContextComparisonType::
    AuthnContextComparisonType (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f,
                                ::xml_schema::type* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_AuthnContextComparisonType_convert ();
    }

    AuthnContextComparisonType::
    AuthnContextComparisonType (const ::std::basic_string< wchar_t >& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f,
                                ::xml_schema::type* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_AuthnContextComparisonType_convert ();
    }

    AuthnContextComparisonType* AuthnContextComparisonType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new AuthnContextComparisonType (*this, f, c);
    }

    AuthnContextComparisonType::_xsd_AuthnContextComparisonType AuthnContextComparisonType::
    _xsd_AuthnContextComparisonType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_AuthnContextComparisonType_literals_);
      const _xsd_AuthnContextComparisonType* i (::std::lower_bound (
                                                  _xsd_AuthnContextComparisonType_indexes_,
                                                  _xsd_AuthnContextComparisonType_indexes_ + 4,
                                                  *this,
                                                  c));

      if (i == _xsd_AuthnContextComparisonType_indexes_ + 4 || _xsd_AuthnContextComparisonType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const AuthnContextComparisonType::
    _xsd_AuthnContextComparisonType_literals_[4] =
    {
      L"exact",
      L"minimum",
      L"maximum",
      L"better"
    };

    const AuthnContextComparisonType::_xsd_AuthnContextComparisonType AuthnContextComparisonType::
    _xsd_AuthnContextComparisonType_indexes_[4] =
    {
      ::saml2::protocol::AuthnContextComparisonType::better,
      ::saml2::protocol::AuthnContextComparisonType::exact,
      ::saml2::protocol::AuthnContextComparisonType::maximum,
      ::saml2::protocol::AuthnContextComparisonType::minimum
    };

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AuthnContextComparisonType >
    _xsd_AuthnContextComparisonType_type_factory_init (
      L"AuthnContextComparisonType urn:oasis:names:tc:SAML:2.0:protocol");


    // AttributeQueryType
    //

    AttributeQueryType::
    AttributeQueryType ()
    : ::saml2::protocol::SubjectQueryAbstractType (),
    _xsd_Attribute_ (::xml_schema::flags (), this)
    {
    }

    AttributeQueryType::
    AttributeQueryType (const ID::type& _xsd_ID,
                        const Version::type& _xsd_Version,
                        const IssueInstant::type& _xsd_IssueInstant,
                        const Subject::type& _xsd_Subject)
    : ::saml2::protocol::SubjectQueryAbstractType (_xsd_ID,
                                                   _xsd_Version,
                                                   _xsd_IssueInstant,
                                                   _xsd_Subject),
    _xsd_Attribute_ (::xml_schema::flags (), this)
    {
    }

    AttributeQueryType::
    AttributeQueryType (const AttributeQueryType& _xsd_AttributeQueryType,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
    : ::saml2::protocol::SubjectQueryAbstractType (_xsd_AttributeQueryType, f, c),
    _xsd_Attribute_ (_xsd_AttributeQueryType._xsd_Attribute_,
                     f | ::xml_schema::flags::not_root,
                     this)
    {
    }

    AttributeQueryType::
    AttributeQueryType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
    : ::saml2::protocol::SubjectQueryAbstractType (e, f, c),
    _xsd_Attribute_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void AttributeQueryType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Attribute
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Attribute::type > r (
            tfm.create< Attribute::type > (
              L"Attribute",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->Attribute ().push_back (r);
            continue;
          }
        }
      }
    }

    AttributeQueryType* AttributeQueryType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new AttributeQueryType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AttributeQueryType >
    _xsd_AttributeQueryType_type_factory_init (
      L"AttributeQueryType urn:oasis:names:tc:SAML:2.0:protocol");


    // AuthzDecisionQueryType
    //

    AuthzDecisionQueryType::
    AuthzDecisionQueryType ()
    : ::saml2::protocol::SubjectQueryAbstractType (),
    _xsd_Action_ (::xml_schema::flags (), this),
    _xsd_Evidence_ (::xml_schema::flags (), this),
    _xsd_Resource_ (::xml_schema::flags (), this)
    {
    }

    AuthzDecisionQueryType::
    AuthzDecisionQueryType (const ID::type& _xsd_ID,
                            const Version::type& _xsd_Version,
                            const IssueInstant::type& _xsd_IssueInstant,
                            const Subject::type& _xsd_Subject,
                            const Resource::type& _xsd_Resource)
    : ::saml2::protocol::SubjectQueryAbstractType (_xsd_ID,
                                                   _xsd_Version,
                                                   _xsd_IssueInstant,
                                                   _xsd_Subject),
    _xsd_Action_ (::xml_schema::flags (), this),
    _xsd_Evidence_ (::xml_schema::flags (), this),
    _xsd_Resource_ (_xsd_Resource,
                    ::xml_schema::flags (),
                    this)
    {
    }

    AuthzDecisionQueryType::
    AuthzDecisionQueryType (const AuthzDecisionQueryType& _xsd_AuthzDecisionQueryType,
                            ::xml_schema::flags f,
                            ::xml_schema::type* c)
    : ::saml2::protocol::SubjectQueryAbstractType (_xsd_AuthzDecisionQueryType, f, c),
    _xsd_Action_ (_xsd_AuthzDecisionQueryType._xsd_Action_,
                  f | ::xml_schema::flags::not_root,
                  this),
    _xsd_Evidence_ (_xsd_AuthzDecisionQueryType._xsd_Evidence_,
                    f | ::xml_schema::flags::not_root,
                    this),
    _xsd_Resource_ (_xsd_AuthzDecisionQueryType._xsd_Resource_,
                    f | ::xml_schema::flags::not_root,
                    this)
    {
    }

    AuthzDecisionQueryType::
    AuthzDecisionQueryType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::type* c)
    : ::saml2::protocol::SubjectQueryAbstractType (e, f, c),
    _xsd_Action_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Evidence_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Resource_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void AuthzDecisionQueryType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Action
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Action::type > r (
            tfm.create< Action::type > (
              L"Action",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->Action ().push_back (r);
            continue;
          }
        }

        // Evidence
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Evidence::type > r (
            tfm.create< Evidence::type > (
              L"Evidence",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Evidence ())
              continue;
            this->Evidence (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Resource" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Resource::type > r (
            Resource::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Resource (r);
          continue;
        }
      }

      if (!_xsd_Resource_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Resource",
          L"");
      }
    }

    AuthzDecisionQueryType* AuthzDecisionQueryType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new AuthzDecisionQueryType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AuthzDecisionQueryType >
    _xsd_AuthzDecisionQueryType_type_factory_init (
      L"AuthzDecisionQueryType urn:oasis:names:tc:SAML:2.0:protocol");


    // AuthnRequestType
    //

    AuthnRequestType::
    AuthnRequestType ()
    : ::saml2::protocol::RequestAbstractType (),
    _xsd_Subject_ (::xml_schema::flags (), this),
    _xsd_NameIDPolicy_ (::xml_schema::flags (), this),
    _xsd_Conditions_ (::xml_schema::flags (), this),
    _xsd_RequestedAuthnContext_ (::xml_schema::flags (), this),
    _xsd_Scoping_ (::xml_schema::flags (), this),
    _xsd_ForceAuthn_ (::xml_schema::flags (), this),
    _xsd_IsPassive_ (::xml_schema::flags (), this),
    _xsd_ProtocolBinding_ (::xml_schema::flags (), this),
    _xsd_AssertionConsumerServiceIndex_ (::xml_schema::flags (), this),
    _xsd_AssertionConsumerServiceURL_ (::xml_schema::flags (), this),
    _xsd_AttributeConsumingServiceIndex_ (::xml_schema::flags (), this),
    _xsd_ProviderName_ (::xml_schema::flags (), this)
    {
    }

    AuthnRequestType::
    AuthnRequestType (const ID::type& _xsd_ID,
                      const Version::type& _xsd_Version,
                      const IssueInstant::type& _xsd_IssueInstant)
    : ::saml2::protocol::RequestAbstractType (_xsd_ID,
                                              _xsd_Version,
                                              _xsd_IssueInstant),
    _xsd_Subject_ (::xml_schema::flags (), this),
    _xsd_NameIDPolicy_ (::xml_schema::flags (), this),
    _xsd_Conditions_ (::xml_schema::flags (), this),
    _xsd_RequestedAuthnContext_ (::xml_schema::flags (), this),
    _xsd_Scoping_ (::xml_schema::flags (), this),
    _xsd_ForceAuthn_ (::xml_schema::flags (), this),
    _xsd_IsPassive_ (::xml_schema::flags (), this),
    _xsd_ProtocolBinding_ (::xml_schema::flags (), this),
    _xsd_AssertionConsumerServiceIndex_ (::xml_schema::flags (), this),
    _xsd_AssertionConsumerServiceURL_ (::xml_schema::flags (), this),
    _xsd_AttributeConsumingServiceIndex_ (::xml_schema::flags (), this),
    _xsd_ProviderName_ (::xml_schema::flags (), this)
    {
    }

    AuthnRequestType::
    AuthnRequestType (const AuthnRequestType& _xsd_AuthnRequestType,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
    : ::saml2::protocol::RequestAbstractType (_xsd_AuthnRequestType, f, c),
    _xsd_Subject_ (_xsd_AuthnRequestType._xsd_Subject_,
                   f | ::xml_schema::flags::not_root,
                   this),
    _xsd_NameIDPolicy_ (_xsd_AuthnRequestType._xsd_NameIDPolicy_,
                        f | ::xml_schema::flags::not_root,
                        this),
    _xsd_Conditions_ (_xsd_AuthnRequestType._xsd_Conditions_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_RequestedAuthnContext_ (_xsd_AuthnRequestType._xsd_RequestedAuthnContext_,
                                 f | ::xml_schema::flags::not_root,
                                 this),
    _xsd_Scoping_ (_xsd_AuthnRequestType._xsd_Scoping_,
                   f | ::xml_schema::flags::not_root,
                   this),
    _xsd_ForceAuthn_ (_xsd_AuthnRequestType._xsd_ForceAuthn_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_IsPassive_ (_xsd_AuthnRequestType._xsd_IsPassive_,
                     f | ::xml_schema::flags::not_root,
                     this),
    _xsd_ProtocolBinding_ (_xsd_AuthnRequestType._xsd_ProtocolBinding_,
                           f | ::xml_schema::flags::not_root,
                           this),
    _xsd_AssertionConsumerServiceIndex_ (_xsd_AuthnRequestType._xsd_AssertionConsumerServiceIndex_,
                                         f | ::xml_schema::flags::not_root,
                                         this),
    _xsd_AssertionConsumerServiceURL_ (_xsd_AuthnRequestType._xsd_AssertionConsumerServiceURL_,
                                       f | ::xml_schema::flags::not_root,
                                       this),
    _xsd_AttributeConsumingServiceIndex_ (_xsd_AuthnRequestType._xsd_AttributeConsumingServiceIndex_,
                                          f | ::xml_schema::flags::not_root,
                                          this),
    _xsd_ProviderName_ (_xsd_AuthnRequestType._xsd_ProviderName_,
                        f | ::xml_schema::flags::not_root,
                        this)
    {
    }

    AuthnRequestType::
    AuthnRequestType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
    : ::saml2::protocol::RequestAbstractType (e, f, c),
    _xsd_Subject_ (f | ::xml_schema::flags::not_root, this),
    _xsd_NameIDPolicy_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Conditions_ (f | ::xml_schema::flags::not_root, this),
    _xsd_RequestedAuthnContext_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Scoping_ (f | ::xml_schema::flags::not_root, this),
    _xsd_ForceAuthn_ (f | ::xml_schema::flags::not_root, this),
    _xsd_IsPassive_ (f | ::xml_schema::flags::not_root, this),
    _xsd_ProtocolBinding_ (f | ::xml_schema::flags::not_root, this),
    _xsd_AssertionConsumerServiceIndex_ (f | ::xml_schema::flags::not_root, this),
    _xsd_AssertionConsumerServiceURL_ (f | ::xml_schema::flags::not_root, this),
    _xsd_AttributeConsumingServiceIndex_ (f | ::xml_schema::flags::not_root, this),
    _xsd_ProviderName_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void AuthnRequestType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Subject
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Subject::type > r (
            tfm.create< Subject::type > (
              L"Subject",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Subject ())
              continue;
            this->Subject (r);
            continue;
          }
        }

        // NameIDPolicy
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< NameIDPolicy::type > r (
            tfm.create< NameIDPolicy::type > (
              L"NameIDPolicy",
              L"urn:oasis:names:tc:SAML:2.0:protocol",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->NameIDPolicy ())
              continue;
            this->NameIDPolicy (r);
            continue;
          }
        }

        // Conditions
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Conditions::type > r (
            tfm.create< Conditions::type > (
              L"Conditions",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Conditions ())
              continue;
            this->Conditions (r);
            continue;
          }
        }

        // RequestedAuthnContext
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< RequestedAuthnContext::type > r (
            tfm.create< RequestedAuthnContext::type > (
              L"RequestedAuthnContext",
              L"urn:oasis:names:tc:SAML:2.0:protocol",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->RequestedAuthnContext ())
              continue;
            this->RequestedAuthnContext (r);
            continue;
          }
        }

        // Scoping
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Scoping::type > r (
            tfm.create< Scoping::type > (
              L"Scoping",
              L"urn:oasis:names:tc:SAML:2.0:protocol",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Scoping ())
              continue;
            this->Scoping (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"ForceAuthn" && a.namespace_ ().empty ())
        {
          this->ForceAuthn (
            ForceAuthn::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));
          continue;
        }

        if (a.name () == L"IsPassive" && a.namespace_ ().empty ())
        {
          this->IsPassive (
            IsPassive::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));
          continue;
        }

        if (a.name () == L"ProtocolBinding" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< ProtocolBinding::type > r (
            ProtocolBinding::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->ProtocolBinding (r);
          continue;
        }

        if (a.name () == L"AssertionConsumerServiceIndex" && a.namespace_ ().empty ())
        {
          this->AssertionConsumerServiceIndex (
            AssertionConsumerServiceIndex::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));
          continue;
        }

        if (a.name () == L"AssertionConsumerServiceURL" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< AssertionConsumerServiceURL::type > r (
            AssertionConsumerServiceURL::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->AssertionConsumerServiceURL (r);
          continue;
        }

        if (a.name () == L"AttributeConsumingServiceIndex" && a.namespace_ ().empty ())
        {
          this->AttributeConsumingServiceIndex (
            AttributeConsumingServiceIndex::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));
          continue;
        }

        if (a.name () == L"ProviderName" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< ProviderName::type > r (
            ProviderName::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->ProviderName (r);
          continue;
        }
      }
    }

    AuthnRequestType* AuthnRequestType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new AuthnRequestType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AuthnRequestType >
    _xsd_AuthnRequestType_type_factory_init (
      L"AuthnRequestType urn:oasis:names:tc:SAML:2.0:protocol");


    // NameIDPolicyType
    //

    NameIDPolicyType::
    NameIDPolicyType ()
    : ::xml_schema::type (),
    _xsd_Format_ (::xml_schema::flags (), this),
    _xsd_SPNameQualifier_ (::xml_schema::flags (), this),
    _xsd_AllowCreate_ (::xml_schema::flags (), this)
    {
    }

    NameIDPolicyType::
    NameIDPolicyType (const NameIDPolicyType& _xsd_NameIDPolicyType,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_NameIDPolicyType, f, c),
    _xsd_Format_ (_xsd_NameIDPolicyType._xsd_Format_,
                  f | ::xml_schema::flags::not_root,
                  this),
    _xsd_SPNameQualifier_ (_xsd_NameIDPolicyType._xsd_SPNameQualifier_,
                           f | ::xml_schema::flags::not_root,
                           this),
    _xsd_AllowCreate_ (_xsd_NameIDPolicyType._xsd_AllowCreate_,
                       f | ::xml_schema::flags::not_root,
                       this)
    {
    }

    NameIDPolicyType::
    NameIDPolicyType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Format_ (f | ::xml_schema::flags::not_root, this),
    _xsd_SPNameQualifier_ (f | ::xml_schema::flags::not_root, this),
    _xsd_AllowCreate_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void NameIDPolicyType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Format" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Format::type > r (
            Format::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Format (r);
          continue;
        }

        if (a.name () == L"SPNameQualifier" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< SPNameQualifier::type > r (
            SPNameQualifier::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->SPNameQualifier (r);
          continue;
        }

        if (a.name () == L"AllowCreate" && a.namespace_ ().empty ())
        {
          this->AllowCreate (
            AllowCreate::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));
          continue;
        }
      }
    }

    NameIDPolicyType* NameIDPolicyType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new NameIDPolicyType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, NameIDPolicyType >
    _xsd_NameIDPolicyType_type_factory_init (
      L"NameIDPolicyType urn:oasis:names:tc:SAML:2.0:protocol");


    // ScopingType
    //

    ScopingType::
    ScopingType ()
    : ::xml_schema::type (),
    _xsd_IDPList_ (::xml_schema::flags (), this),
    _xsd_RequesterID_ (::xml_schema::flags (), this),
    _xsd_ProxyCount_ (::xml_schema::flags (), this)
    {
    }

    ScopingType::
    ScopingType (const ScopingType& _xsd_ScopingType,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_ScopingType, f, c),
    _xsd_IDPList_ (_xsd_ScopingType._xsd_IDPList_,
                   f | ::xml_schema::flags::not_root,
                   this),
    _xsd_RequesterID_ (_xsd_ScopingType._xsd_RequesterID_,
                       f | ::xml_schema::flags::not_root,
                       this),
    _xsd_ProxyCount_ (_xsd_ScopingType._xsd_ProxyCount_,
                      f | ::xml_schema::flags::not_root,
                      this)
    {
    }

    ScopingType::
    ScopingType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_IDPList_ (f | ::xml_schema::flags::not_root, this),
    _xsd_RequesterID_ (f | ::xml_schema::flags::not_root, this),
    _xsd_ProxyCount_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void ScopingType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // IDPList
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< IDPList::type > r (
            tfm.create< IDPList::type > (
              L"IDPList",
              L"urn:oasis:names:tc:SAML:2.0:protocol",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->IDPList ())
              continue;
            this->IDPList (r);
            continue;
          }
        }

        // RequesterID
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< RequesterID::type > r (
            tfm.create< RequesterID::type > (
              L"RequesterID",
              L"urn:oasis:names:tc:SAML:2.0:protocol",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->RequesterID ().push_back (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"ProxyCount" && a.namespace_ ().empty ())
        {
          this->ProxyCount (
            ProxyCount::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));
          continue;
        }
      }
    }

    ScopingType* ScopingType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ScopingType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ScopingType >
    _xsd_ScopingType_type_factory_init (
      L"ScopingType urn:oasis:names:tc:SAML:2.0:protocol");


    // IDPListType
    //

    IDPListType::
    IDPListType ()
    : ::xml_schema::type (),
    _xsd_IDPEntry_ (::xml_schema::flags (), this),
    _xsd_GetComplete_ (::xml_schema::flags (), this)
    {
    }

    IDPListType::
    IDPListType (const IDPListType& _xsd_IDPListType,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_IDPListType, f, c),
    _xsd_IDPEntry_ (_xsd_IDPListType._xsd_IDPEntry_,
                    f | ::xml_schema::flags::not_root,
                    this),
    _xsd_GetComplete_ (_xsd_IDPListType._xsd_GetComplete_,
                       f | ::xml_schema::flags::not_root,
                       this)
    {
    }

    IDPListType::
    IDPListType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_IDPEntry_ (f | ::xml_schema::flags::not_root, this),
    _xsd_GetComplete_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void IDPListType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // IDPEntry
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< IDPEntry::type > r (
            tfm.create< IDPEntry::type > (
              L"IDPEntry",
              L"urn:oasis:names:tc:SAML:2.0:protocol",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->IDPEntry ().push_back (r);
            continue;
          }
        }

        // GetComplete
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< GetComplete::type > r (
            tfm.create< GetComplete::type > (
              L"GetComplete",
              L"urn:oasis:names:tc:SAML:2.0:protocol",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->GetComplete ())
              continue;
            this->GetComplete (r);
            continue;
          }
        }
      }
    }

    IDPListType* IDPListType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new IDPListType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, IDPListType >
    _xsd_IDPListType_type_factory_init (
      L"IDPListType urn:oasis:names:tc:SAML:2.0:protocol");


    // IDPEntryType
    //

    IDPEntryType::
    IDPEntryType ()
    : ::xml_schema::type (),
    _xsd_ProviderID_ (::xml_schema::flags (), this),
    _xsd_Name_ (::xml_schema::flags (), this),
    _xsd_Loc_ (::xml_schema::flags (), this)
    {
    }

    IDPEntryType::
    IDPEntryType (const ProviderID::type& _xsd_ProviderID)
    : ::xml_schema::type (),
    _xsd_ProviderID_ (_xsd_ProviderID,
                      ::xml_schema::flags (),
                      this),
    _xsd_Name_ (::xml_schema::flags (), this),
    _xsd_Loc_ (::xml_schema::flags (), this)
    {
    }

    IDPEntryType::
    IDPEntryType (const IDPEntryType& _xsd_IDPEntryType,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_IDPEntryType, f, c),
    _xsd_ProviderID_ (_xsd_IDPEntryType._xsd_ProviderID_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_Name_ (_xsd_IDPEntryType._xsd_Name_,
                f | ::xml_schema::flags::not_root,
                this),
    _xsd_Loc_ (_xsd_IDPEntryType._xsd_Loc_,
               f | ::xml_schema::flags::not_root,
               this)
    {
    }

    IDPEntryType::
    IDPEntryType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_ProviderID_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Name_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Loc_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void IDPEntryType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"ProviderID" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< ProviderID::type > r (
            ProviderID::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->ProviderID (r);
          continue;
        }

        if (a.name () == L"Name" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Name::type > r (
            Name::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Name (r);
          continue;
        }

        if (a.name () == L"Loc" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Loc::type > r (
            Loc::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Loc (r);
          continue;
        }
      }

      if (!_xsd_ProviderID_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"ProviderID",
          L"");
      }
    }

    IDPEntryType* IDPEntryType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new IDPEntryType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, IDPEntryType >
    _xsd_IDPEntryType_type_factory_init (
      L"IDPEntryType urn:oasis:names:tc:SAML:2.0:protocol");


    // ResponseType
    //

    ResponseType::
    ResponseType ()
    : ::saml2::protocol::StatusResponseType (),
    _xsd_Assertion_ (::xml_schema::flags (), this),
    _xsd_EncryptedAssertion_ (::xml_schema::flags (), this)
    {
    }

    ResponseType::
    ResponseType (const Status::type& _xsd_Status,
                  const ID::type& _xsd_ID,
                  const Version::type& _xsd_Version,
                  const IssueInstant::type& _xsd_IssueInstant)
    : ::saml2::protocol::StatusResponseType (_xsd_Status,
                                             _xsd_ID,
                                             _xsd_Version,
                                             _xsd_IssueInstant),
    _xsd_Assertion_ (::xml_schema::flags (), this),
    _xsd_EncryptedAssertion_ (::xml_schema::flags (), this)
    {
    }

    ResponseType::
    ResponseType (const ResponseType& _xsd_ResponseType,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::saml2::protocol::StatusResponseType (_xsd_ResponseType, f, c),
    _xsd_Assertion_ (_xsd_ResponseType._xsd_Assertion_,
                     f | ::xml_schema::flags::not_root,
                     this),
    _xsd_EncryptedAssertion_ (_xsd_ResponseType._xsd_EncryptedAssertion_,
                              f | ::xml_schema::flags::not_root,
                              this)
    {
    }

    ResponseType::
    ResponseType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::saml2::protocol::StatusResponseType (e, f, c),
    _xsd_Assertion_ (f | ::xml_schema::flags::not_root, this),
    _xsd_EncryptedAssertion_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void ResponseType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Assertion
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Assertion::type > r (
            tfm.create< Assertion::type > (
              L"Assertion",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->Assertion ().push_back (r);
            continue;
          }
        }

        // EncryptedAssertion
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< EncryptedAssertion::type > r (
            tfm.create< EncryptedAssertion::type > (
              L"EncryptedAssertion",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->EncryptedAssertion ().push_back (r);
            continue;
          }
        }
      }
    }

    ResponseType* ResponseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ResponseType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ResponseType >
    _xsd_ResponseType_type_factory_init (
      L"ResponseType urn:oasis:names:tc:SAML:2.0:protocol");


    // ArtifactResolveType
    //

    ArtifactResolveType::
    ArtifactResolveType ()
    : ::saml2::protocol::RequestAbstractType (),
    _xsd_Artifact_ (::xml_schema::flags (), this)
    {
    }

    ArtifactResolveType::
    ArtifactResolveType (const ID::type& _xsd_ID,
                         const Version::type& _xsd_Version,
                         const IssueInstant::type& _xsd_IssueInstant,
                         const Artifact::type& _xsd_Artifact)
    : ::saml2::protocol::RequestAbstractType (_xsd_ID,
                                              _xsd_Version,
                                              _xsd_IssueInstant),
    _xsd_Artifact_ (_xsd_Artifact,
                    ::xml_schema::flags (),
                    this)
    {
    }

    ArtifactResolveType::
    ArtifactResolveType (const ArtifactResolveType& _xsd_ArtifactResolveType,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
    : ::saml2::protocol::RequestAbstractType (_xsd_ArtifactResolveType, f, c),
    _xsd_Artifact_ (_xsd_ArtifactResolveType._xsd_Artifact_,
                    f | ::xml_schema::flags::not_root,
                    this)
    {
    }

    ArtifactResolveType::
    ArtifactResolveType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
    : ::saml2::protocol::RequestAbstractType (e, f, c),
    _xsd_Artifact_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void ArtifactResolveType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Artifact
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Artifact::type > r (
            tfm.create< Artifact::type > (
              L"Artifact",
              L"urn:oasis:names:tc:SAML:2.0:protocol",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_Artifact_.present ())
              continue;
            this->Artifact (r);
            continue;
          }
        }
      }

      if (!_xsd_Artifact_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Artifact",
          L"urn:oasis:names:tc:SAML:2.0:protocol");
      }
    }

    ArtifactResolveType* ArtifactResolveType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ArtifactResolveType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ArtifactResolveType >
    _xsd_ArtifactResolveType_type_factory_init (
      L"ArtifactResolveType urn:oasis:names:tc:SAML:2.0:protocol");


    // ArtifactResponseType
    //

    ArtifactResponseType::
    ArtifactResponseType ()
    : ::saml2::protocol::StatusResponseType ()
    {
    }

    ArtifactResponseType::
    ArtifactResponseType (const Status::type& _xsd_Status,
                          const ID::type& _xsd_ID,
                          const Version::type& _xsd_Version,
                          const IssueInstant::type& _xsd_IssueInstant)
    : ::saml2::protocol::StatusResponseType (_xsd_Status,
                                             _xsd_ID,
                                             _xsd_Version,
                                             _xsd_IssueInstant)
    {
    }

    ArtifactResponseType::
    ArtifactResponseType (const ArtifactResponseType& _xsd_ArtifactResponseType,
                          ::xml_schema::flags f,
                          ::xml_schema::type* c)
    : ::saml2::protocol::StatusResponseType (_xsd_ArtifactResponseType, f, c)
    {
    }

    ArtifactResponseType::
    ArtifactResponseType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::type* c)
    : ::saml2::protocol::StatusResponseType (e, f, c)
    {
    }

    ArtifactResponseType* ArtifactResponseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ArtifactResponseType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ArtifactResponseType >
    _xsd_ArtifactResponseType_type_factory_init (
      L"ArtifactResponseType urn:oasis:names:tc:SAML:2.0:protocol");


    // ManageNameIDRequestType
    //

    ManageNameIDRequestType::
    ManageNameIDRequestType ()
    : ::saml2::protocol::RequestAbstractType (),
    _xsd_NameID_ (::xml_schema::flags (), this),
    _xsd_EncryptedID_ (::xml_schema::flags (), this),
    _xsd_NewID_ (::xml_schema::flags (), this),
    _xsd_NewEncryptedID_ (::xml_schema::flags (), this),
    _xsd_Terminate_ (::xml_schema::flags (), this)
    {
    }

    ManageNameIDRequestType::
    ManageNameIDRequestType (const ID::type& _xsd_ID,
                             const Version::type& _xsd_Version,
                             const IssueInstant::type& _xsd_IssueInstant)
    : ::saml2::protocol::RequestAbstractType (_xsd_ID,
                                              _xsd_Version,
                                              _xsd_IssueInstant),
    _xsd_NameID_ (::xml_schema::flags (), this),
    _xsd_EncryptedID_ (::xml_schema::flags (), this),
    _xsd_NewID_ (::xml_schema::flags (), this),
    _xsd_NewEncryptedID_ (::xml_schema::flags (), this),
    _xsd_Terminate_ (::xml_schema::flags (), this)
    {
    }

    ManageNameIDRequestType::
    ManageNameIDRequestType (const ManageNameIDRequestType& _xsd_ManageNameIDRequestType,
                             ::xml_schema::flags f,
                             ::xml_schema::type* c)
    : ::saml2::protocol::RequestAbstractType (_xsd_ManageNameIDRequestType, f, c),
    _xsd_NameID_ (_xsd_ManageNameIDRequestType._xsd_NameID_,
                  f | ::xml_schema::flags::not_root,
                  this),
    _xsd_EncryptedID_ (_xsd_ManageNameIDRequestType._xsd_EncryptedID_,
                       f | ::xml_schema::flags::not_root,
                       this),
    _xsd_NewID_ (_xsd_ManageNameIDRequestType._xsd_NewID_,
                 f | ::xml_schema::flags::not_root,
                 this),
    _xsd_NewEncryptedID_ (_xsd_ManageNameIDRequestType._xsd_NewEncryptedID_,
                          f | ::xml_schema::flags::not_root,
                          this),
    _xsd_Terminate_ (_xsd_ManageNameIDRequestType._xsd_Terminate_,
                     f | ::xml_schema::flags::not_root,
                     this)
    {
    }

    ManageNameIDRequestType::
    ManageNameIDRequestType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::type* c)
    : ::saml2::protocol::RequestAbstractType (e, f, c),
    _xsd_NameID_ (f | ::xml_schema::flags::not_root, this),
    _xsd_EncryptedID_ (f | ::xml_schema::flags::not_root, this),
    _xsd_NewID_ (f | ::xml_schema::flags::not_root, this),
    _xsd_NewEncryptedID_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Terminate_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void ManageNameIDRequestType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // NameID
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< NameID::type > r (
            tfm.create< NameID::type > (
              L"NameID",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->NameID ())
              continue;
            this->NameID (r);
            continue;
          }
        }

        // EncryptedID
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< EncryptedID::type > r (
            tfm.create< EncryptedID::type > (
              L"EncryptedID",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->EncryptedID ())
              continue;
            this->EncryptedID (r);
            continue;
          }
        }

        // NewID
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< NewID::type > r (
            tfm.create< NewID::type > (
              L"NewID",
              L"urn:oasis:names:tc:SAML:2.0:protocol",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->NewID ())
              continue;
            this->NewID (r);
            continue;
          }
        }

        // NewEncryptedID
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< NewEncryptedID::type > r (
            tfm.create< NewEncryptedID::type > (
              L"NewEncryptedID",
              L"urn:oasis:names:tc:SAML:2.0:protocol",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->NewEncryptedID ())
              continue;
            this->NewEncryptedID (r);
            continue;
          }
        }

        // Terminate
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Terminate::type > r (
            tfm.create< Terminate::type > (
              L"Terminate",
              L"urn:oasis:names:tc:SAML:2.0:protocol",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Terminate ())
              continue;
            this->Terminate (r);
            continue;
          }
        }
      }
    }

    ManageNameIDRequestType* ManageNameIDRequestType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ManageNameIDRequestType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ManageNameIDRequestType >
    _xsd_ManageNameIDRequestType_type_factory_init (
      L"ManageNameIDRequestType urn:oasis:names:tc:SAML:2.0:protocol");


    // TerminateType
    //

    TerminateType::
    TerminateType ()
    : ::xml_schema::type ()
    {
    }

    TerminateType::
    TerminateType (const TerminateType& _xsd_TerminateType,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_TerminateType, f, c)
    {
    }

    TerminateType::
    TerminateType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c)
    {
    }

    TerminateType::
    TerminateType (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (a, f, c)
    {
    }

    TerminateType::
    TerminateType (const ::std::basic_string< wchar_t >& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (s, e, f, c)
    {
    }

    TerminateType* TerminateType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new TerminateType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, TerminateType >
    _xsd_TerminateType_type_factory_init (
      L"TerminateType urn:oasis:names:tc:SAML:2.0:protocol");


    // LogoutRequestType
    //

    LogoutRequestType::
    LogoutRequestType ()
    : ::saml2::protocol::RequestAbstractType (),
    _xsd_BaseID_ (::xml_schema::flags (), this),
    _xsd_NameID_ (::xml_schema::flags (), this),
    _xsd_EncryptedID_ (::xml_schema::flags (), this),
    _xsd_SessionIndex_ (::xml_schema::flags (), this),
    _xsd_Reason_ (::xml_schema::flags (), this),
    _xsd_NotOnOrAfter_ (::xml_schema::flags (), this)
    {
    }

    LogoutRequestType::
    LogoutRequestType (const ID::type& _xsd_ID,
                       const Version::type& _xsd_Version,
                       const IssueInstant::type& _xsd_IssueInstant)
    : ::saml2::protocol::RequestAbstractType (_xsd_ID,
                                              _xsd_Version,
                                              _xsd_IssueInstant),
    _xsd_BaseID_ (::xml_schema::flags (), this),
    _xsd_NameID_ (::xml_schema::flags (), this),
    _xsd_EncryptedID_ (::xml_schema::flags (), this),
    _xsd_SessionIndex_ (::xml_schema::flags (), this),
    _xsd_Reason_ (::xml_schema::flags (), this),
    _xsd_NotOnOrAfter_ (::xml_schema::flags (), this)
    {
    }

    LogoutRequestType::
    LogoutRequestType (const LogoutRequestType& _xsd_LogoutRequestType,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
    : ::saml2::protocol::RequestAbstractType (_xsd_LogoutRequestType, f, c),
    _xsd_BaseID_ (_xsd_LogoutRequestType._xsd_BaseID_,
                  f | ::xml_schema::flags::not_root,
                  this),
    _xsd_NameID_ (_xsd_LogoutRequestType._xsd_NameID_,
                  f | ::xml_schema::flags::not_root,
                  this),
    _xsd_EncryptedID_ (_xsd_LogoutRequestType._xsd_EncryptedID_,
                       f | ::xml_schema::flags::not_root,
                       this),
    _xsd_SessionIndex_ (_xsd_LogoutRequestType._xsd_SessionIndex_,
                        f | ::xml_schema::flags::not_root,
                        this),
    _xsd_Reason_ (_xsd_LogoutRequestType._xsd_Reason_,
                  f | ::xml_schema::flags::not_root,
                  this),
    _xsd_NotOnOrAfter_ (_xsd_LogoutRequestType._xsd_NotOnOrAfter_,
                        f | ::xml_schema::flags::not_root,
                        this)
    {
    }

    LogoutRequestType::
    LogoutRequestType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
    : ::saml2::protocol::RequestAbstractType (e, f, c),
    _xsd_BaseID_ (f | ::xml_schema::flags::not_root, this),
    _xsd_NameID_ (f | ::xml_schema::flags::not_root, this),
    _xsd_EncryptedID_ (f | ::xml_schema::flags::not_root, this),
    _xsd_SessionIndex_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Reason_ (f | ::xml_schema::flags::not_root, this),
    _xsd_NotOnOrAfter_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void LogoutRequestType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // BaseID
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< BaseID::type > r (
            tfm.create< BaseID::type > (
              L"BaseID",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->BaseID ())
              continue;
            this->BaseID (r);
            continue;
          }
        }

        // NameID
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< NameID::type > r (
            tfm.create< NameID::type > (
              L"NameID",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->NameID ())
              continue;
            this->NameID (r);
            continue;
          }
        }

        // EncryptedID
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< EncryptedID::type > r (
            tfm.create< EncryptedID::type > (
              L"EncryptedID",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->EncryptedID ())
              continue;
            this->EncryptedID (r);
            continue;
          }
        }

        // SessionIndex
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< SessionIndex::type > r (
            tfm.create< SessionIndex::type > (
              L"SessionIndex",
              L"urn:oasis:names:tc:SAML:2.0:protocol",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->SessionIndex ().push_back (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Reason" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Reason::type > r (
            Reason::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Reason (r);
          continue;
        }

        if (a.name () == L"NotOnOrAfter" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< NotOnOrAfter::type > r (
            NotOnOrAfter::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->NotOnOrAfter (r);
          continue;
        }
      }
    }

    LogoutRequestType* LogoutRequestType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new LogoutRequestType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, LogoutRequestType >
    _xsd_LogoutRequestType_type_factory_init (
      L"LogoutRequestType urn:oasis:names:tc:SAML:2.0:protocol");


    // NameIDMappingRequestType
    //

    NameIDMappingRequestType::
    NameIDMappingRequestType ()
    : ::saml2::protocol::RequestAbstractType (),
    _xsd_BaseID_ (::xml_schema::flags (), this),
    _xsd_NameID_ (::xml_schema::flags (), this),
    _xsd_EncryptedID_ (::xml_schema::flags (), this),
    _xsd_NameIDPolicy_ (::xml_schema::flags (), this)
    {
    }

    NameIDMappingRequestType::
    NameIDMappingRequestType (const ID::type& _xsd_ID,
                              const Version::type& _xsd_Version,
                              const IssueInstant::type& _xsd_IssueInstant,
                              const NameIDPolicy::type& _xsd_NameIDPolicy)
    : ::saml2::protocol::RequestAbstractType (_xsd_ID,
                                              _xsd_Version,
                                              _xsd_IssueInstant),
    _xsd_BaseID_ (::xml_schema::flags (), this),
    _xsd_NameID_ (::xml_schema::flags (), this),
    _xsd_EncryptedID_ (::xml_schema::flags (), this),
    _xsd_NameIDPolicy_ (_xsd_NameIDPolicy,
                        ::xml_schema::flags (),
                        this)
    {
    }

    NameIDMappingRequestType::
    NameIDMappingRequestType (const NameIDMappingRequestType& _xsd_NameIDMappingRequestType,
                              ::xml_schema::flags f,
                              ::xml_schema::type* c)
    : ::saml2::protocol::RequestAbstractType (_xsd_NameIDMappingRequestType, f, c),
    _xsd_BaseID_ (_xsd_NameIDMappingRequestType._xsd_BaseID_,
                  f | ::xml_schema::flags::not_root,
                  this),
    _xsd_NameID_ (_xsd_NameIDMappingRequestType._xsd_NameID_,
                  f | ::xml_schema::flags::not_root,
                  this),
    _xsd_EncryptedID_ (_xsd_NameIDMappingRequestType._xsd_EncryptedID_,
                       f | ::xml_schema::flags::not_root,
                       this),
    _xsd_NameIDPolicy_ (_xsd_NameIDMappingRequestType._xsd_NameIDPolicy_,
                        f | ::xml_schema::flags::not_root,
                        this)
    {
    }

    NameIDMappingRequestType::
    NameIDMappingRequestType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::type* c)
    : ::saml2::protocol::RequestAbstractType (e, f, c),
    _xsd_BaseID_ (f | ::xml_schema::flags::not_root, this),
    _xsd_NameID_ (f | ::xml_schema::flags::not_root, this),
    _xsd_EncryptedID_ (f | ::xml_schema::flags::not_root, this),
    _xsd_NameIDPolicy_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void NameIDMappingRequestType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // BaseID
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< BaseID::type > r (
            tfm.create< BaseID::type > (
              L"BaseID",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->BaseID ())
              continue;
            this->BaseID (r);
            continue;
          }
        }

        // NameID
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< NameID::type > r (
            tfm.create< NameID::type > (
              L"NameID",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->NameID ())
              continue;
            this->NameID (r);
            continue;
          }
        }

        // EncryptedID
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< EncryptedID::type > r (
            tfm.create< EncryptedID::type > (
              L"EncryptedID",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->EncryptedID ())
              continue;
            this->EncryptedID (r);
            continue;
          }
        }

        // NameIDPolicy
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< NameIDPolicy::type > r (
            tfm.create< NameIDPolicy::type > (
              L"NameIDPolicy",
              L"urn:oasis:names:tc:SAML:2.0:protocol",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_NameIDPolicy_.present ())
              continue;
            this->NameIDPolicy (r);
            continue;
          }
        }
      }

      if (!_xsd_NameIDPolicy_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"NameIDPolicy",
          L"urn:oasis:names:tc:SAML:2.0:protocol");
      }
    }

    NameIDMappingRequestType* NameIDMappingRequestType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new NameIDMappingRequestType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, NameIDMappingRequestType >
    _xsd_NameIDMappingRequestType_type_factory_init (
      L"NameIDMappingRequestType urn:oasis:names:tc:SAML:2.0:protocol");


    // NameIDMappingResponseType
    //

    NameIDMappingResponseType::
    NameIDMappingResponseType ()
    : ::saml2::protocol::StatusResponseType (),
    _xsd_NameID_ (::xml_schema::flags (), this),
    _xsd_EncryptedID_ (::xml_schema::flags (), this)
    {
    }

    NameIDMappingResponseType::
    NameIDMappingResponseType (const Status::type& _xsd_Status,
                               const ID::type& _xsd_ID,
                               const Version::type& _xsd_Version,
                               const IssueInstant::type& _xsd_IssueInstant)
    : ::saml2::protocol::StatusResponseType (_xsd_Status,
                                             _xsd_ID,
                                             _xsd_Version,
                                             _xsd_IssueInstant),
    _xsd_NameID_ (::xml_schema::flags (), this),
    _xsd_EncryptedID_ (::xml_schema::flags (), this)
    {
    }

    NameIDMappingResponseType::
    NameIDMappingResponseType (const NameIDMappingResponseType& _xsd_NameIDMappingResponseType,
                               ::xml_schema::flags f,
                               ::xml_schema::type* c)
    : ::saml2::protocol::StatusResponseType (_xsd_NameIDMappingResponseType, f, c),
    _xsd_NameID_ (_xsd_NameIDMappingResponseType._xsd_NameID_,
                  f | ::xml_schema::flags::not_root,
                  this),
    _xsd_EncryptedID_ (_xsd_NameIDMappingResponseType._xsd_EncryptedID_,
                       f | ::xml_schema::flags::not_root,
                       this)
    {
    }

    NameIDMappingResponseType::
    NameIDMappingResponseType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::type* c)
    : ::saml2::protocol::StatusResponseType (e, f, c),
    _xsd_NameID_ (f | ::xml_schema::flags::not_root, this),
    _xsd_EncryptedID_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void NameIDMappingResponseType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // NameID
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< NameID::type > r (
            tfm.create< NameID::type > (
              L"NameID",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->NameID ())
              continue;
            this->NameID (r);
            continue;
          }
        }

        // EncryptedID
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< EncryptedID::type > r (
            tfm.create< EncryptedID::type > (
              L"EncryptedID",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->EncryptedID ())
              continue;
            this->EncryptedID (r);
            continue;
          }
        }
      }
    }

    NameIDMappingResponseType* NameIDMappingResponseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new NameIDMappingResponseType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, NameIDMappingResponseType >
    _xsd_NameIDMappingResponseType_type_factory_init (
      L"NameIDMappingResponseType urn:oasis:names:tc:SAML:2.0:protocol");
  }
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace saml2
{
  namespace protocol
  {
    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (const ::std::basic_string< wchar_t >& u,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::Extensions (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (const ::std::basic_string< wchar_t >& u,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::Extensions (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (const ::std::basic_string< wchar_t >& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::Extensions (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (::std::istream& is,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Extensions (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (::std::istream& is,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Extensions (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Extensions (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Extensions (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Extensions (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Extensions (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (const ::xercesc::DOMInputSource& i,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::Extensions (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (const ::xercesc::DOMInputSource& i,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::Extensions (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (const ::xercesc::DOMInputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::Extensions (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::ExtensionsType > r (
        tfm.create< ::saml2::protocol::ExtensionsType > (
          L"Extensions",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Extensions",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (const ::std::basic_string< wchar_t >& u,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::Status (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (const ::std::basic_string< wchar_t >& u,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::Status (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (const ::std::basic_string< wchar_t >& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::Status (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (::std::istream& is,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Status (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (::std::istream& is,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Status (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Status (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (::std::istream& is,
            const ::std::basic_string< wchar_t >& sid,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Status (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (::std::istream& is,
            const ::std::basic_string< wchar_t >& sid,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Status (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (::std::istream& is,
            const ::std::basic_string< wchar_t >& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Status (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (const ::xercesc::DOMInputSource& i,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::Status (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (const ::xercesc::DOMInputSource& i,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::Status (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (const ::xercesc::DOMInputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::Status (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::StatusType > r (
        tfm.create< ::saml2::protocol::StatusType > (
          L"Status",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Status",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (const ::std::basic_string< wchar_t >& u,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::StatusCode (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (const ::std::basic_string< wchar_t >& u,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::StatusCode (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (const ::std::basic_string< wchar_t >& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::StatusCode (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (::std::istream& is,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::StatusCode (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (::std::istream& is,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::StatusCode (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::StatusCode (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::StatusCode (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::StatusCode (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::StatusCode (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (const ::xercesc::DOMInputSource& i,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::StatusCode (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (const ::xercesc::DOMInputSource& i,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::StatusCode (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (const ::xercesc::DOMInputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::StatusCode (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::StatusCodeType > r (
        tfm.create< ::saml2::protocol::StatusCodeType > (
          L"StatusCode",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"StatusCode",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::std::basic_string< wchar_t >& u,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::StatusMessage (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::std::basic_string< wchar_t >& u,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::StatusMessage (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::std::basic_string< wchar_t >& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::StatusMessage (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::StatusMessage (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::StatusMessage (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::StatusMessage (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   const ::std::basic_string< wchar_t >& sid,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::StatusMessage (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   const ::std::basic_string< wchar_t >& sid,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::StatusMessage (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   const ::std::basic_string< wchar_t >& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::StatusMessage (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::xercesc::DOMInputSource& i,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::StatusMessage (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::xercesc::DOMInputSource& i,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::StatusMessage (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::xercesc::DOMInputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::StatusMessage (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::string > r (
        tfm.create< ::xml_schema::string > (
          L"StatusMessage",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"StatusMessage",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (const ::std::basic_string< wchar_t >& u,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::StatusDetail (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (const ::std::basic_string< wchar_t >& u,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::StatusDetail (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (const ::std::basic_string< wchar_t >& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::StatusDetail (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::StatusDetail (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (::std::istream& is,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::StatusDetail (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::StatusDetail (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::StatusDetail (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::StatusDetail (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::StatusDetail (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (const ::xercesc::DOMInputSource& i,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::StatusDetail (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (const ::xercesc::DOMInputSource& i,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::StatusDetail (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (const ::xercesc::DOMInputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::StatusDetail (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::StatusDetailType > r (
        tfm.create< ::saml2::protocol::StatusDetailType > (
          L"StatusDetail",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"StatusDetail",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (const ::std::basic_string< wchar_t >& u,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::AssertionIDRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (const ::std::basic_string< wchar_t >& u,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::AssertionIDRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (const ::std::basic_string< wchar_t >& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::AssertionIDRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AssertionIDRequest (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (::std::istream& is,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AssertionIDRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AssertionIDRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (::std::istream& is,
                        const ::std::basic_string< wchar_t >& sid,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AssertionIDRequest (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (::std::istream& is,
                        const ::std::basic_string< wchar_t >& sid,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AssertionIDRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (::std::istream& is,
                        const ::std::basic_string< wchar_t >& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AssertionIDRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (const ::xercesc::DOMInputSource& i,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::AssertionIDRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (const ::xercesc::DOMInputSource& i,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::AssertionIDRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (const ::xercesc::DOMInputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::AssertionIDRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType > r (
        tfm.create< ::saml2::protocol::AssertionIDRequestType > (
          L"AssertionIDRequest",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"AssertionIDRequest",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (const ::std::basic_string< wchar_t >& u,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::SubjectQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (const ::std::basic_string< wchar_t >& u,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::SubjectQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (const ::std::basic_string< wchar_t >& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::SubjectQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::SubjectQuery (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (::std::istream& is,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::SubjectQuery (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::SubjectQuery (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::SubjectQuery (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::SubjectQuery (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::SubjectQuery (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (const ::xercesc::DOMInputSource& i,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::SubjectQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (const ::xercesc::DOMInputSource& i,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::SubjectQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (const ::xercesc::DOMInputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::SubjectQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType > r (
        tfm.create< ::saml2::protocol::SubjectQueryAbstractType > (
          L"SubjectQuery",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"SubjectQuery",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (const ::std::basic_string< wchar_t >& u,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::AuthnQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (const ::std::basic_string< wchar_t >& u,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::AuthnQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (const ::std::basic_string< wchar_t >& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::AuthnQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (::std::istream& is,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AuthnQuery (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (::std::istream& is,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AuthnQuery (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AuthnQuery (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AuthnQuery (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AuthnQuery (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AuthnQuery (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (const ::xercesc::DOMInputSource& i,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::AuthnQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (const ::xercesc::DOMInputSource& i,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::AuthnQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (const ::xercesc::DOMInputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::AuthnQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::AuthnQueryType > r (
        tfm.create< ::saml2::protocol::AuthnQueryType > (
          L"AuthnQuery",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"AuthnQuery",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (const ::std::basic_string< wchar_t >& u,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::RequestedAuthnContext (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (const ::std::basic_string< wchar_t >& u,
                           ::xsd::cxx::xml::error_handler< wchar_t >& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::RequestedAuthnContext (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (const ::std::basic_string< wchar_t >& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::RequestedAuthnContext (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::RequestedAuthnContext (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (::std::istream& is,
                           ::xsd::cxx::xml::error_handler< wchar_t >& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::RequestedAuthnContext (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::RequestedAuthnContext (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (::std::istream& is,
                           const ::std::basic_string< wchar_t >& sid,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::RequestedAuthnContext (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (::std::istream& is,
                           const ::std::basic_string< wchar_t >& sid,
                           ::xsd::cxx::xml::error_handler< wchar_t >& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::RequestedAuthnContext (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (::std::istream& is,
                           const ::std::basic_string< wchar_t >& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::RequestedAuthnContext (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (const ::xercesc::DOMInputSource& i,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::RequestedAuthnContext (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (const ::xercesc::DOMInputSource& i,
                           ::xsd::cxx::xml::error_handler< wchar_t >& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::RequestedAuthnContext (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (const ::xercesc::DOMInputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::RequestedAuthnContext (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType > r (
        tfm.create< ::saml2::protocol::RequestedAuthnContextType > (
          L"RequestedAuthnContext",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"RequestedAuthnContext",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (const ::std::basic_string< wchar_t >& u,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::AttributeQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (const ::std::basic_string< wchar_t >& u,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::AttributeQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (const ::std::basic_string< wchar_t >& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::AttributeQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AttributeQuery (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (::std::istream& is,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AttributeQuery (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AttributeQuery (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (::std::istream& is,
                    const ::std::basic_string< wchar_t >& sid,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AttributeQuery (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (::std::istream& is,
                    const ::std::basic_string< wchar_t >& sid,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AttributeQuery (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (::std::istream& is,
                    const ::std::basic_string< wchar_t >& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AttributeQuery (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (const ::xercesc::DOMInputSource& i,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::AttributeQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (const ::xercesc::DOMInputSource& i,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::AttributeQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (const ::xercesc::DOMInputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::AttributeQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::AttributeQueryType > r (
        tfm.create< ::saml2::protocol::AttributeQueryType > (
          L"AttributeQuery",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"AttributeQuery",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (const ::std::basic_string< wchar_t >& u,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::AuthzDecisionQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (const ::std::basic_string< wchar_t >& u,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::AuthzDecisionQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (const ::std::basic_string< wchar_t >& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::AuthzDecisionQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AuthzDecisionQuery (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (::std::istream& is,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AuthzDecisionQuery (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AuthzDecisionQuery (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (::std::istream& is,
                        const ::std::basic_string< wchar_t >& sid,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AuthzDecisionQuery (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (::std::istream& is,
                        const ::std::basic_string< wchar_t >& sid,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AuthzDecisionQuery (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (::std::istream& is,
                        const ::std::basic_string< wchar_t >& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AuthzDecisionQuery (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (const ::xercesc::DOMInputSource& i,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::AuthzDecisionQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (const ::xercesc::DOMInputSource& i,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::AuthzDecisionQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (const ::xercesc::DOMInputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::AuthzDecisionQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType > r (
        tfm.create< ::saml2::protocol::AuthzDecisionQueryType > (
          L"AuthzDecisionQuery",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"AuthzDecisionQuery",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (const ::std::basic_string< wchar_t >& u,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::AuthnRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (const ::std::basic_string< wchar_t >& u,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::AuthnRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (const ::std::basic_string< wchar_t >& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::AuthnRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AuthnRequest (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (::std::istream& is,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AuthnRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AuthnRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AuthnRequest (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AuthnRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::AuthnRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (const ::xercesc::DOMInputSource& i,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::AuthnRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (const ::xercesc::DOMInputSource& i,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::AuthnRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (const ::xercesc::DOMInputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::AuthnRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::AuthnRequestType > r (
        tfm.create< ::saml2::protocol::AuthnRequestType > (
          L"AuthnRequest",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"AuthnRequest",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (const ::std::basic_string< wchar_t >& u,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::NameIDPolicy (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (const ::std::basic_string< wchar_t >& u,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::NameIDPolicy (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (const ::std::basic_string< wchar_t >& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::NameIDPolicy (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NameIDPolicy (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (::std::istream& is,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NameIDPolicy (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NameIDPolicy (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NameIDPolicy (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NameIDPolicy (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NameIDPolicy (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (const ::xercesc::DOMInputSource& i,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::NameIDPolicy (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (const ::xercesc::DOMInputSource& i,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::NameIDPolicy (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (const ::xercesc::DOMInputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::NameIDPolicy (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType > r (
        tfm.create< ::saml2::protocol::NameIDPolicyType > (
          L"NameIDPolicy",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"NameIDPolicy",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (const ::std::basic_string< wchar_t >& u,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::Scoping (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (const ::std::basic_string< wchar_t >& u,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::Scoping (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (const ::std::basic_string< wchar_t >& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::Scoping (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (::std::istream& is,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Scoping (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (::std::istream& is,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Scoping (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Scoping (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Scoping (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Scoping (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Scoping (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (const ::xercesc::DOMInputSource& i,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::Scoping (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (const ::xercesc::DOMInputSource& i,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::Scoping (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (const ::xercesc::DOMInputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::Scoping (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::ScopingType > r (
        tfm.create< ::saml2::protocol::ScopingType > (
          L"Scoping",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Scoping",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (const ::std::basic_string< wchar_t >& u,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::RequesterID (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (const ::std::basic_string< wchar_t >& u,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::RequesterID (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (const ::std::basic_string< wchar_t >& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::RequesterID (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::RequesterID (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (::std::istream& is,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::RequesterID (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::RequesterID (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::RequesterID (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::RequesterID (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::RequesterID (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (const ::xercesc::DOMInputSource& i,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::RequesterID (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (const ::xercesc::DOMInputSource& i,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::RequesterID (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (const ::xercesc::DOMInputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::RequesterID (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::uri > r (
        tfm.create< ::xml_schema::uri > (
          L"RequesterID",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"RequesterID",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (const ::std::basic_string< wchar_t >& u,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::IDPList (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (const ::std::basic_string< wchar_t >& u,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::IDPList (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (const ::std::basic_string< wchar_t >& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::IDPList (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (::std::istream& is,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::IDPList (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (::std::istream& is,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::IDPList (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::IDPList (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::IDPList (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::IDPList (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::IDPList (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (const ::xercesc::DOMInputSource& i,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::IDPList (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (const ::xercesc::DOMInputSource& i,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::IDPList (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (const ::xercesc::DOMInputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::IDPList (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::IDPListType > r (
        tfm.create< ::saml2::protocol::IDPListType > (
          L"IDPList",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"IDPList",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (const ::std::basic_string< wchar_t >& u,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::IDPEntry (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (const ::std::basic_string< wchar_t >& u,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::IDPEntry (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (const ::std::basic_string< wchar_t >& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::IDPEntry (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (::std::istream& is,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::IDPEntry (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (::std::istream& is,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::IDPEntry (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::IDPEntry (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::IDPEntry (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::IDPEntry (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::IDPEntry (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (const ::xercesc::DOMInputSource& i,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::IDPEntry (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (const ::xercesc::DOMInputSource& i,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::IDPEntry (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (const ::xercesc::DOMInputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::IDPEntry (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::IDPEntryType > r (
        tfm.create< ::saml2::protocol::IDPEntryType > (
          L"IDPEntry",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"IDPEntry",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (const ::std::basic_string< wchar_t >& u,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::GetComplete (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (const ::std::basic_string< wchar_t >& u,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::GetComplete (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (const ::std::basic_string< wchar_t >& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::GetComplete (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::GetComplete (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (::std::istream& is,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::GetComplete (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::GetComplete (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::GetComplete (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::GetComplete (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::GetComplete (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (const ::xercesc::DOMInputSource& i,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::GetComplete (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (const ::xercesc::DOMInputSource& i,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::GetComplete (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (const ::xercesc::DOMInputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::GetComplete (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::uri > r (
        tfm.create< ::xml_schema::uri > (
          L"GetComplete",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"GetComplete",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (const ::std::basic_string< wchar_t >& u,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::Response (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (const ::std::basic_string< wchar_t >& u,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::Response (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (const ::std::basic_string< wchar_t >& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::Response (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (::std::istream& is,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Response (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (::std::istream& is,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Response (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Response (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Response (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Response (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Response (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (const ::xercesc::DOMInputSource& i,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::Response (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (const ::xercesc::DOMInputSource& i,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::Response (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (const ::xercesc::DOMInputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::Response (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::ResponseType > r (
        tfm.create< ::saml2::protocol::ResponseType > (
          L"Response",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Response",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (const ::std::basic_string< wchar_t >& u,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::ArtifactResolve (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (const ::std::basic_string< wchar_t >& u,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::ArtifactResolve (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (const ::std::basic_string< wchar_t >& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::ArtifactResolve (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::ArtifactResolve (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (::std::istream& is,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::ArtifactResolve (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::ArtifactResolve (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::ArtifactResolve (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::ArtifactResolve (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::ArtifactResolve (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (const ::xercesc::DOMInputSource& i,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::ArtifactResolve (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (const ::xercesc::DOMInputSource& i,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::ArtifactResolve (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (const ::xercesc::DOMInputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::ArtifactResolve (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType > r (
        tfm.create< ::saml2::protocol::ArtifactResolveType > (
          L"ArtifactResolve",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"ArtifactResolve",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (const ::std::basic_string< wchar_t >& u,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::Artifact (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (const ::std::basic_string< wchar_t >& u,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::Artifact (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (const ::std::basic_string< wchar_t >& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::Artifact (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (::std::istream& is,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Artifact (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (::std::istream& is,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Artifact (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Artifact (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Artifact (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Artifact (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Artifact (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (const ::xercesc::DOMInputSource& i,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::Artifact (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (const ::xercesc::DOMInputSource& i,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::Artifact (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (const ::xercesc::DOMInputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::Artifact (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::string > r (
        tfm.create< ::xml_schema::string > (
          L"Artifact",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Artifact",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (const ::std::basic_string< wchar_t >& u,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::ArtifactResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (const ::std::basic_string< wchar_t >& u,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::ArtifactResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (const ::std::basic_string< wchar_t >& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::ArtifactResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::ArtifactResponse (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (::std::istream& is,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::ArtifactResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::ArtifactResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (::std::istream& is,
                      const ::std::basic_string< wchar_t >& sid,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::ArtifactResponse (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (::std::istream& is,
                      const ::std::basic_string< wchar_t >& sid,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::ArtifactResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (::std::istream& is,
                      const ::std::basic_string< wchar_t >& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::ArtifactResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (const ::xercesc::DOMInputSource& i,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::ArtifactResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (const ::xercesc::DOMInputSource& i,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::ArtifactResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (const ::xercesc::DOMInputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::ArtifactResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType > r (
        tfm.create< ::saml2::protocol::ArtifactResponseType > (
          L"ArtifactResponse",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"ArtifactResponse",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (const ::std::basic_string< wchar_t >& u,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::ManageNameIDRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (const ::std::basic_string< wchar_t >& u,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::ManageNameIDRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (const ::std::basic_string< wchar_t >& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::ManageNameIDRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::ManageNameIDRequest (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (::std::istream& is,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::ManageNameIDRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::ManageNameIDRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (::std::istream& is,
                         const ::std::basic_string< wchar_t >& sid,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::ManageNameIDRequest (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (::std::istream& is,
                         const ::std::basic_string< wchar_t >& sid,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::ManageNameIDRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (::std::istream& is,
                         const ::std::basic_string< wchar_t >& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::ManageNameIDRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (const ::xercesc::DOMInputSource& i,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::ManageNameIDRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (const ::xercesc::DOMInputSource& i,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::ManageNameIDRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (const ::xercesc::DOMInputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::ManageNameIDRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType > r (
        tfm.create< ::saml2::protocol::ManageNameIDRequestType > (
          L"ManageNameIDRequest",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"ManageNameIDRequest",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::xml_schema::string >
    NewID (const ::std::basic_string< wchar_t >& u,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::NewID (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    NewID (const ::std::basic_string< wchar_t >& u,
           ::xsd::cxx::xml::error_handler< wchar_t >& h,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::NewID (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    NewID (const ::std::basic_string< wchar_t >& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::NewID (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    NewID (::std::istream& is,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NewID (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    NewID (::std::istream& is,
           ::xsd::cxx::xml::error_handler< wchar_t >& h,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NewID (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    NewID (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NewID (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    NewID (::std::istream& is,
           const ::std::basic_string< wchar_t >& sid,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NewID (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    NewID (::std::istream& is,
           const ::std::basic_string< wchar_t >& sid,
           ::xsd::cxx::xml::error_handler< wchar_t >& h,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NewID (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    NewID (::std::istream& is,
           const ::std::basic_string< wchar_t >& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NewID (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    NewID (const ::xercesc::DOMInputSource& i,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::NewID (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    NewID (const ::xercesc::DOMInputSource& i,
           ::xsd::cxx::xml::error_handler< wchar_t >& h,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::NewID (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    NewID (const ::xercesc::DOMInputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::NewID (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    NewID (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::string > r (
        tfm.create< ::xml_schema::string > (
          L"NewID",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"NewID",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (const ::std::basic_string< wchar_t >& u,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::NewEncryptedID (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (const ::std::basic_string< wchar_t >& u,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::NewEncryptedID (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (const ::std::basic_string< wchar_t >& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::NewEncryptedID (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NewEncryptedID (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (::std::istream& is,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NewEncryptedID (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NewEncryptedID (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (::std::istream& is,
                    const ::std::basic_string< wchar_t >& sid,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NewEncryptedID (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (::std::istream& is,
                    const ::std::basic_string< wchar_t >& sid,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NewEncryptedID (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (::std::istream& is,
                    const ::std::basic_string< wchar_t >& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NewEncryptedID (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (const ::xercesc::DOMInputSource& i,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::NewEncryptedID (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (const ::xercesc::DOMInputSource& i,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::NewEncryptedID (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (const ::xercesc::DOMInputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::NewEncryptedID (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::assertion::EncryptedElementType > r (
        tfm.create< ::saml2::assertion::EncryptedElementType > (
          L"NewEncryptedID",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"NewEncryptedID",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (const ::std::basic_string< wchar_t >& u,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::Terminate (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (const ::std::basic_string< wchar_t >& u,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::Terminate (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (const ::std::basic_string< wchar_t >& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::Terminate (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (::std::istream& is,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Terminate (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (::std::istream& is,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Terminate (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Terminate (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Terminate (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Terminate (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::Terminate (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (const ::xercesc::DOMInputSource& i,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::Terminate (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (const ::xercesc::DOMInputSource& i,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::Terminate (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (const ::xercesc::DOMInputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::Terminate (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::TerminateType > r (
        tfm.create< ::saml2::protocol::TerminateType > (
          L"Terminate",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Terminate",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (const ::std::basic_string< wchar_t >& u,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::ManageNameIDResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (const ::std::basic_string< wchar_t >& u,
                          ::xsd::cxx::xml::error_handler< wchar_t >& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::ManageNameIDResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (const ::std::basic_string< wchar_t >& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::ManageNameIDResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::ManageNameIDResponse (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (::std::istream& is,
                          ::xsd::cxx::xml::error_handler< wchar_t >& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::ManageNameIDResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::ManageNameIDResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (::std::istream& is,
                          const ::std::basic_string< wchar_t >& sid,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::ManageNameIDResponse (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (::std::istream& is,
                          const ::std::basic_string< wchar_t >& sid,
                          ::xsd::cxx::xml::error_handler< wchar_t >& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::ManageNameIDResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (::std::istream& is,
                          const ::std::basic_string< wchar_t >& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::ManageNameIDResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (const ::xercesc::DOMInputSource& i,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::ManageNameIDResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (const ::xercesc::DOMInputSource& i,
                          ::xsd::cxx::xml::error_handler< wchar_t >& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::ManageNameIDResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (const ::xercesc::DOMInputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::ManageNameIDResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::StatusResponseType > r (
        tfm.create< ::saml2::protocol::StatusResponseType > (
          L"ManageNameIDResponse",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"ManageNameIDResponse",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (const ::std::basic_string< wchar_t >& u,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::LogoutRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (const ::std::basic_string< wchar_t >& u,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::LogoutRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (const ::std::basic_string< wchar_t >& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::LogoutRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::LogoutRequest (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (::std::istream& is,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::LogoutRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::LogoutRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (::std::istream& is,
                   const ::std::basic_string< wchar_t >& sid,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::LogoutRequest (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (::std::istream& is,
                   const ::std::basic_string< wchar_t >& sid,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::LogoutRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (::std::istream& is,
                   const ::std::basic_string< wchar_t >& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::LogoutRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (const ::xercesc::DOMInputSource& i,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::LogoutRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (const ::xercesc::DOMInputSource& i,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::LogoutRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (const ::xercesc::DOMInputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::LogoutRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::LogoutRequestType > r (
        tfm.create< ::saml2::protocol::LogoutRequestType > (
          L"LogoutRequest",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"LogoutRequest",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (const ::std::basic_string< wchar_t >& u,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::SessionIndex (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (const ::std::basic_string< wchar_t >& u,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::SessionIndex (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (const ::std::basic_string< wchar_t >& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::SessionIndex (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::SessionIndex (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (::std::istream& is,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::SessionIndex (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::SessionIndex (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::SessionIndex (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::SessionIndex (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::SessionIndex (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (const ::xercesc::DOMInputSource& i,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::SessionIndex (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (const ::xercesc::DOMInputSource& i,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::SessionIndex (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (const ::xercesc::DOMInputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::SessionIndex (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::string > r (
        tfm.create< ::xml_schema::string > (
          L"SessionIndex",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"SessionIndex",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (const ::std::basic_string< wchar_t >& u,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::LogoutResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (const ::std::basic_string< wchar_t >& u,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::LogoutResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (const ::std::basic_string< wchar_t >& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::LogoutResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::LogoutResponse (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (::std::istream& is,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::LogoutResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::LogoutResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (::std::istream& is,
                    const ::std::basic_string< wchar_t >& sid,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::LogoutResponse (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (::std::istream& is,
                    const ::std::basic_string< wchar_t >& sid,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::LogoutResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (::std::istream& is,
                    const ::std::basic_string< wchar_t >& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::LogoutResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (const ::xercesc::DOMInputSource& i,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::LogoutResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (const ::xercesc::DOMInputSource& i,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::LogoutResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (const ::xercesc::DOMInputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::LogoutResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::StatusResponseType > r (
        tfm.create< ::saml2::protocol::StatusResponseType > (
          L"LogoutResponse",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"LogoutResponse",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (const ::std::basic_string< wchar_t >& u,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::NameIDMappingRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (const ::std::basic_string< wchar_t >& u,
                          ::xsd::cxx::xml::error_handler< wchar_t >& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::NameIDMappingRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (const ::std::basic_string< wchar_t >& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::NameIDMappingRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NameIDMappingRequest (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (::std::istream& is,
                          ::xsd::cxx::xml::error_handler< wchar_t >& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NameIDMappingRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NameIDMappingRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (::std::istream& is,
                          const ::std::basic_string< wchar_t >& sid,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NameIDMappingRequest (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (::std::istream& is,
                          const ::std::basic_string< wchar_t >& sid,
                          ::xsd::cxx::xml::error_handler< wchar_t >& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NameIDMappingRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (::std::istream& is,
                          const ::std::basic_string< wchar_t >& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NameIDMappingRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (const ::xercesc::DOMInputSource& i,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::NameIDMappingRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (const ::xercesc::DOMInputSource& i,
                          ::xsd::cxx::xml::error_handler< wchar_t >& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::NameIDMappingRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (const ::xercesc::DOMInputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::NameIDMappingRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType > r (
        tfm.create< ::saml2::protocol::NameIDMappingRequestType > (
          L"NameIDMappingRequest",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"NameIDMappingRequest",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (const ::std::basic_string< wchar_t >& u,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::NameIDMappingResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (const ::std::basic_string< wchar_t >& u,
                           ::xsd::cxx::xml::error_handler< wchar_t >& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::NameIDMappingResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (const ::std::basic_string< wchar_t >& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::NameIDMappingResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NameIDMappingResponse (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (::std::istream& is,
                           ::xsd::cxx::xml::error_handler< wchar_t >& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NameIDMappingResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NameIDMappingResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (::std::istream& is,
                           const ::std::basic_string< wchar_t >& sid,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NameIDMappingResponse (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (::std::istream& is,
                           const ::std::basic_string< wchar_t >& sid,
                           ::xsd::cxx::xml::error_handler< wchar_t >& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NameIDMappingResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (::std::istream& is,
                           const ::std::basic_string< wchar_t >& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::protocol::NameIDMappingResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (const ::xercesc::DOMInputSource& i,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::protocol::NameIDMappingResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (const ::xercesc::DOMInputSource& i,
                           ::xsd::cxx::xml::error_handler< wchar_t >& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::NameIDMappingResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (const ::xercesc::DOMInputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::protocol::NameIDMappingResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType > r (
        tfm.create< ::saml2::protocol::NameIDMappingResponseType > (
          L"NameIDMappingResponse",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"NameIDMappingResponse",
        L"urn:oasis:names:tc:SAML:2.0:protocol");
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/serialization.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_serializer_plate< 0, wchar_t >
  type_serializer_plate_init;
}

namespace saml2
{
  namespace protocol
  {
    void
    operator<< (::xercesc::DOMElement& e,
                const RequestAbstractType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Issuer ())
        {
          tsm.serialize< RequestAbstractType::Issuer::type > (
            L"Issuer",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *i.Issuer ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Signature ())
        {
          tsm.serialize< RequestAbstractType::Signature::type > (
            L"Signature",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *i.Signature ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Extensions ())
        {
          tsm.serialize< RequestAbstractType::Extensions::type > (
            L"Extensions",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            true,
            true,
            e,
            *i.Extensions ());
        }
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"ID",
          e);

        a.dom_attribute () << i.ID ();
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Version",
          e);

        a.dom_attribute () << i.Version ();
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"IssueInstant",
          e);

        a.dom_attribute () << i.IssueInstant ();
      }

      if (i.Destination ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Destination",
          e);

        a.dom_attribute () << *i.Destination ();
      }

      if (i.Consent ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Consent",
          e);

        a.dom_attribute () << *i.Consent ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, RequestAbstractType >
    _xsd_RequestAbstractType_type_serializer_init (
      L"RequestAbstractType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    Extensions (::xercesc::DOMDocument& d,
                const ::saml2::protocol::ExtensionsType& s,
                ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::ExtensionsType > (
        L"Extensions",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Extensions (const ::saml2::protocol::ExtensionsType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::ExtensionsType > (
            L"Extensions",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::Extensions (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Extensions (::xercesc::XMLFormatTarget& t,
                const ::saml2::protocol::ExtensionsType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Extensions (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Extensions (::xercesc::XMLFormatTarget& t,
                const ::saml2::protocol::ExtensionsType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Extensions (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Extensions (::xercesc::XMLFormatTarget& t,
                const ::saml2::protocol::ExtensionsType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Extensions (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Extensions (::std::ostream& o,
                const ::saml2::protocol::ExtensionsType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Extensions (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Extensions (::std::ostream& o,
                const ::saml2::protocol::ExtensionsType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Extensions (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Extensions (::std::ostream& o,
                const ::saml2::protocol::ExtensionsType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Extensions (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ExtensionsType&)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);
    }

    void
    operator<< (::xercesc::DOMAttr&,
                const ExtensionsType&)
    {
    }

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                const ExtensionsType&)
    {
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ExtensionsType >
    _xsd_ExtensionsType_type_serializer_init (
      L"ExtensionsType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    operator<< (::xercesc::DOMElement& e,
                const StatusResponseType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Issuer ())
        {
          tsm.serialize< StatusResponseType::Issuer::type > (
            L"Issuer",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *i.Issuer ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Signature ())
        {
          tsm.serialize< StatusResponseType::Signature::type > (
            L"Signature",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *i.Signature ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Extensions ())
        {
          tsm.serialize< StatusResponseType::Extensions::type > (
            L"Extensions",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            true,
            true,
            e,
            *i.Extensions ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< StatusResponseType::Status::type > (
          L"Status",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          i.Status ());
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"ID",
          e);

        a.dom_attribute () << i.ID ();
      }

      if (i.InResponseTo ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"InResponseTo",
          e);

        a.dom_attribute () << *i.InResponseTo ();
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Version",
          e);

        a.dom_attribute () << i.Version ();
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"IssueInstant",
          e);

        a.dom_attribute () << i.IssueInstant ();
      }

      if (i.Destination ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Destination",
          e);

        a.dom_attribute () << *i.Destination ();
      }

      if (i.Consent ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Consent",
          e);

        a.dom_attribute () << *i.Consent ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, StatusResponseType >
    _xsd_StatusResponseType_type_serializer_init (
      L"StatusResponseType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    Status (::xercesc::DOMDocument& d,
            const ::saml2::protocol::StatusType& s,
            ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::StatusType > (
        L"Status",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Status (const ::saml2::protocol::StatusType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::StatusType > (
            L"Status",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::Status (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Status (::xercesc::XMLFormatTarget& t,
            const ::saml2::protocol::StatusType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Status (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Status (::xercesc::XMLFormatTarget& t,
            const ::saml2::protocol::StatusType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Status (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Status (::xercesc::XMLFormatTarget& t,
            const ::saml2::protocol::StatusType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Status (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Status (::std::ostream& o,
            const ::saml2::protocol::StatusType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Status (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Status (::std::ostream& o,
            const ::saml2::protocol::StatusType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Status (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Status (::std::ostream& o,
            const ::saml2::protocol::StatusType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Status (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const StatusType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< StatusType::StatusCode::type > (
          L"StatusCode",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          i.StatusCode ());
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.StatusMessage ())
        {
          tsm.serialize< StatusType::StatusMessage::type > (
            L"StatusMessage",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            true,
            true,
            e,
            *i.StatusMessage ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.StatusDetail ())
        {
          tsm.serialize< StatusType::StatusDetail::type > (
            L"StatusDetail",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            true,
            true,
            e,
            *i.StatusDetail ());
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, StatusType >
    _xsd_StatusType_type_serializer_init (
      L"StatusType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    StatusCode (::xercesc::DOMDocument& d,
                const ::saml2::protocol::StatusCodeType& s,
                ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::StatusCodeType > (
        L"StatusCode",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    StatusCode (const ::saml2::protocol::StatusCodeType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::StatusCodeType > (
            L"StatusCode",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::StatusCode (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    StatusCode (::xercesc::XMLFormatTarget& t,
                const ::saml2::protocol::StatusCodeType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::StatusCode (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    StatusCode (::xercesc::XMLFormatTarget& t,
                const ::saml2::protocol::StatusCodeType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::StatusCode (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    StatusCode (::xercesc::XMLFormatTarget& t,
                const ::saml2::protocol::StatusCodeType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::StatusCode (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    StatusCode (::std::ostream& o,
                const ::saml2::protocol::StatusCodeType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::StatusCode (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    StatusCode (::std::ostream& o,
                const ::saml2::protocol::StatusCodeType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::StatusCode (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    StatusCode (::std::ostream& o,
                const ::saml2::protocol::StatusCodeType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::StatusCode (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const StatusCodeType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.StatusCode ())
        {
          tsm.serialize< StatusCodeType::StatusCode::type > (
            L"StatusCode",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            true,
            true,
            e,
            *i.StatusCode ());
        }
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Value",
          e);

        a.dom_attribute () << i.Value ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, StatusCodeType >
    _xsd_StatusCodeType_type_serializer_init (
      L"StatusCodeType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    StatusMessage (::xercesc::DOMDocument& d,
                   const ::xml_schema::string& s,
                   ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::xml_schema::string > (
        L"StatusMessage",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    StatusMessage (const ::xml_schema::string& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::xml_schema::string > (
            L"StatusMessage",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::StatusMessage (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    StatusMessage (::xercesc::XMLFormatTarget& t,
                   const ::xml_schema::string& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::StatusMessage (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    StatusMessage (::xercesc::XMLFormatTarget& t,
                   const ::xml_schema::string& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::StatusMessage (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    StatusMessage (::xercesc::XMLFormatTarget& t,
                   const ::xml_schema::string& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xercesc::DOMErrorHandler& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::StatusMessage (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    StatusMessage (::std::ostream& o,
                   const ::xml_schema::string& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::StatusMessage (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    StatusMessage (::std::ostream& o,
                   const ::xml_schema::string& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::StatusMessage (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    StatusMessage (::std::ostream& o,
                   const ::xml_schema::string& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xercesc::DOMErrorHandler& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::StatusMessage (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    StatusDetail (::xercesc::DOMDocument& d,
                  const ::saml2::protocol::StatusDetailType& s,
                  ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::StatusDetailType > (
        L"StatusDetail",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    StatusDetail (const ::saml2::protocol::StatusDetailType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::StatusDetailType > (
            L"StatusDetail",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::StatusDetail (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    StatusDetail (::xercesc::XMLFormatTarget& t,
                  const ::saml2::protocol::StatusDetailType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::StatusDetail (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    StatusDetail (::xercesc::XMLFormatTarget& t,
                  const ::saml2::protocol::StatusDetailType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::StatusDetail (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    StatusDetail (::xercesc::XMLFormatTarget& t,
                  const ::saml2::protocol::StatusDetailType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::StatusDetail (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    StatusDetail (::std::ostream& o,
                  const ::saml2::protocol::StatusDetailType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::StatusDetail (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    StatusDetail (::std::ostream& o,
                  const ::saml2::protocol::StatusDetailType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::StatusDetail (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    StatusDetail (::std::ostream& o,
                  const ::saml2::protocol::StatusDetailType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::StatusDetail (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const StatusDetailType&)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);
    }

    void
    operator<< (::xercesc::DOMAttr&,
                const StatusDetailType&)
    {
    }

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                const StatusDetailType&)
    {
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, StatusDetailType >
    _xsd_StatusDetailType_type_serializer_init (
      L"StatusDetailType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    AssertionIDRequest (::xercesc::DOMDocument& d,
                        const ::saml2::protocol::AssertionIDRequestType& s,
                        ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::AssertionIDRequestType > (
        L"AssertionIDRequest",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AssertionIDRequest (const ::saml2::protocol::AssertionIDRequestType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::AssertionIDRequestType > (
            L"AssertionIDRequest",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::AssertionIDRequest (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    AssertionIDRequest (::xercesc::XMLFormatTarget& t,
                        const ::saml2::protocol::AssertionIDRequestType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AssertionIDRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AssertionIDRequest (::xercesc::XMLFormatTarget& t,
                        const ::saml2::protocol::AssertionIDRequestType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AssertionIDRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AssertionIDRequest (::xercesc::XMLFormatTarget& t,
                        const ::saml2::protocol::AssertionIDRequestType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xercesc::DOMErrorHandler& h,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AssertionIDRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AssertionIDRequest (::std::ostream& o,
                        const ::saml2::protocol::AssertionIDRequestType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AssertionIDRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AssertionIDRequest (::std::ostream& o,
                        const ::saml2::protocol::AssertionIDRequestType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AssertionIDRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AssertionIDRequest (::std::ostream& o,
                        const ::saml2::protocol::AssertionIDRequestType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xercesc::DOMErrorHandler& h,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AssertionIDRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const AssertionIDRequestType& i)
    {
      e << static_cast< const ::saml2::protocol::RequestAbstractType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (AssertionIDRequestType::AssertionIDRef::const_iterator
             b (i.AssertionIDRef ().begin ()), n (i.AssertionIDRef ().end ());
             b != n; ++b)
        {
          tsm.serialize< AssertionIDRequestType::AssertionIDRef::type > (
            L"AssertionIDRef",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *b);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AssertionIDRequestType >
    _xsd_AssertionIDRequestType_type_serializer_init (
      L"AssertionIDRequestType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    SubjectQuery (::xercesc::DOMDocument& d,
                  const ::saml2::protocol::SubjectQueryAbstractType& s,
                  ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::SubjectQueryAbstractType > (
        L"SubjectQuery",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SubjectQuery (const ::saml2::protocol::SubjectQueryAbstractType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::SubjectQueryAbstractType > (
            L"SubjectQuery",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::SubjectQuery (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    SubjectQuery (::xercesc::XMLFormatTarget& t,
                  const ::saml2::protocol::SubjectQueryAbstractType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::SubjectQuery (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SubjectQuery (::xercesc::XMLFormatTarget& t,
                  const ::saml2::protocol::SubjectQueryAbstractType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::SubjectQuery (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SubjectQuery (::xercesc::XMLFormatTarget& t,
                  const ::saml2::protocol::SubjectQueryAbstractType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::SubjectQuery (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SubjectQuery (::std::ostream& o,
                  const ::saml2::protocol::SubjectQueryAbstractType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::SubjectQuery (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SubjectQuery (::std::ostream& o,
                  const ::saml2::protocol::SubjectQueryAbstractType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::SubjectQuery (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SubjectQuery (::std::ostream& o,
                  const ::saml2::protocol::SubjectQueryAbstractType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::SubjectQuery (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const SubjectQueryAbstractType& i)
    {
      e << static_cast< const ::saml2::protocol::RequestAbstractType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< SubjectQueryAbstractType::Subject::type > (
          L"Subject",
          L"urn:oasis:names:tc:SAML:2.0:assertion",
          true,
          true,
          e,
          i.Subject ());
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SubjectQueryAbstractType >
    _xsd_SubjectQueryAbstractType_type_serializer_init (
      L"SubjectQueryAbstractType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    AuthnQuery (::xercesc::DOMDocument& d,
                const ::saml2::protocol::AuthnQueryType& s,
                ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::AuthnQueryType > (
        L"AuthnQuery",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthnQuery (const ::saml2::protocol::AuthnQueryType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::AuthnQueryType > (
            L"AuthnQuery",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::AuthnQuery (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    AuthnQuery (::xercesc::XMLFormatTarget& t,
                const ::saml2::protocol::AuthnQueryType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AuthnQuery (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AuthnQuery (::xercesc::XMLFormatTarget& t,
                const ::saml2::protocol::AuthnQueryType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AuthnQuery (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AuthnQuery (::xercesc::XMLFormatTarget& t,
                const ::saml2::protocol::AuthnQueryType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AuthnQuery (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AuthnQuery (::std::ostream& o,
                const ::saml2::protocol::AuthnQueryType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AuthnQuery (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AuthnQuery (::std::ostream& o,
                const ::saml2::protocol::AuthnQueryType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AuthnQuery (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AuthnQuery (::std::ostream& o,
                const ::saml2::protocol::AuthnQueryType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AuthnQuery (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const AuthnQueryType& i)
    {
      e << static_cast< const ::saml2::protocol::SubjectQueryAbstractType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.RequestedAuthnContext ())
        {
          tsm.serialize< AuthnQueryType::RequestedAuthnContext::type > (
            L"RequestedAuthnContext",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            true,
            true,
            e,
            *i.RequestedAuthnContext ());
        }
      }

      if (i.SessionIndex ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"SessionIndex",
          e);

        a.dom_attribute () << *i.SessionIndex ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AuthnQueryType >
    _xsd_AuthnQueryType_type_serializer_init (
      L"AuthnQueryType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    RequestedAuthnContext (::xercesc::DOMDocument& d,
                           const ::saml2::protocol::RequestedAuthnContextType& s,
                           ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::RequestedAuthnContextType > (
        L"RequestedAuthnContext",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    RequestedAuthnContext (const ::saml2::protocol::RequestedAuthnContextType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::RequestedAuthnContextType > (
            L"RequestedAuthnContext",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::RequestedAuthnContext (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    RequestedAuthnContext (::xercesc::XMLFormatTarget& t,
                           const ::saml2::protocol::RequestedAuthnContextType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           const ::std::basic_string< wchar_t >& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::RequestedAuthnContext (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    RequestedAuthnContext (::xercesc::XMLFormatTarget& t,
                           const ::saml2::protocol::RequestedAuthnContextType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           ::xsd::cxx::xml::error_handler< wchar_t >& h,
                           const ::std::basic_string< wchar_t >& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::RequestedAuthnContext (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RequestedAuthnContext (::xercesc::XMLFormatTarget& t,
                           const ::saml2::protocol::RequestedAuthnContextType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           ::xercesc::DOMErrorHandler& h,
                           const ::std::basic_string< wchar_t >& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::RequestedAuthnContext (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RequestedAuthnContext (::std::ostream& o,
                           const ::saml2::protocol::RequestedAuthnContextType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           const ::std::basic_string< wchar_t >& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::RequestedAuthnContext (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    RequestedAuthnContext (::std::ostream& o,
                           const ::saml2::protocol::RequestedAuthnContextType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           ::xsd::cxx::xml::error_handler< wchar_t >& h,
                           const ::std::basic_string< wchar_t >& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::RequestedAuthnContext (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RequestedAuthnContext (::std::ostream& o,
                           const ::saml2::protocol::RequestedAuthnContextType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           ::xercesc::DOMErrorHandler& h,
                           const ::std::basic_string< wchar_t >& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::RequestedAuthnContext (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const RequestedAuthnContextType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (RequestedAuthnContextType::AuthnContextClassRef::const_iterator
             b (i.AuthnContextClassRef ().begin ()), n (i.AuthnContextClassRef ().end ());
             b != n; ++b)
        {
          tsm.serialize< RequestedAuthnContextType::AuthnContextClassRef::type > (
            L"AuthnContextClassRef",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (RequestedAuthnContextType::AuthnContextDeclRef::const_iterator
             b (i.AuthnContextDeclRef ().begin ()), n (i.AuthnContextDeclRef ().end ());
             b != n; ++b)
        {
          tsm.serialize< RequestedAuthnContextType::AuthnContextDeclRef::type > (
            L"AuthnContextDeclRef",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *b);
        }
      }

      if (i.Comparison ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Comparison",
          e);

        a.dom_attribute () << *i.Comparison ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, RequestedAuthnContextType >
    _xsd_RequestedAuthnContextType_type_serializer_init (
      L"RequestedAuthnContextType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    operator<< (::xercesc::DOMElement& e,
                AuthnContextComparisonType i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,
                AuthnContextComparisonType i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >& l,
                AuthnContextComparisonType i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AuthnContextComparisonType >
    _xsd_AuthnContextComparisonType_type_serializer_init (
      L"AuthnContextComparisonType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    AttributeQuery (::xercesc::DOMDocument& d,
                    const ::saml2::protocol::AttributeQueryType& s,
                    ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::AttributeQueryType > (
        L"AttributeQuery",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeQuery (const ::saml2::protocol::AttributeQueryType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::AttributeQueryType > (
            L"AttributeQuery",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::AttributeQuery (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    AttributeQuery (::xercesc::XMLFormatTarget& t,
                    const ::saml2::protocol::AttributeQueryType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AttributeQuery (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AttributeQuery (::xercesc::XMLFormatTarget& t,
                    const ::saml2::protocol::AttributeQueryType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AttributeQuery (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeQuery (::xercesc::XMLFormatTarget& t,
                    const ::saml2::protocol::AttributeQueryType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AttributeQuery (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeQuery (::std::ostream& o,
                    const ::saml2::protocol::AttributeQueryType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AttributeQuery (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AttributeQuery (::std::ostream& o,
                    const ::saml2::protocol::AttributeQueryType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AttributeQuery (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeQuery (::std::ostream& o,
                    const ::saml2::protocol::AttributeQueryType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AttributeQuery (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const AttributeQueryType& i)
    {
      e << static_cast< const ::saml2::protocol::SubjectQueryAbstractType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (AttributeQueryType::Attribute::const_iterator
             b (i.Attribute ().begin ()), n (i.Attribute ().end ());
             b != n; ++b)
        {
          tsm.serialize< AttributeQueryType::Attribute::type > (
            L"Attribute",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *b);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AttributeQueryType >
    _xsd_AttributeQueryType_type_serializer_init (
      L"AttributeQueryType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    AuthzDecisionQuery (::xercesc::DOMDocument& d,
                        const ::saml2::protocol::AuthzDecisionQueryType& s,
                        ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::AuthzDecisionQueryType > (
        L"AuthzDecisionQuery",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthzDecisionQuery (const ::saml2::protocol::AuthzDecisionQueryType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::AuthzDecisionQueryType > (
            L"AuthzDecisionQuery",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::AuthzDecisionQuery (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    AuthzDecisionQuery (::xercesc::XMLFormatTarget& t,
                        const ::saml2::protocol::AuthzDecisionQueryType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AuthzDecisionQuery (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AuthzDecisionQuery (::xercesc::XMLFormatTarget& t,
                        const ::saml2::protocol::AuthzDecisionQueryType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AuthzDecisionQuery (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AuthzDecisionQuery (::xercesc::XMLFormatTarget& t,
                        const ::saml2::protocol::AuthzDecisionQueryType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xercesc::DOMErrorHandler& h,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AuthzDecisionQuery (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AuthzDecisionQuery (::std::ostream& o,
                        const ::saml2::protocol::AuthzDecisionQueryType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AuthzDecisionQuery (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AuthzDecisionQuery (::std::ostream& o,
                        const ::saml2::protocol::AuthzDecisionQueryType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AuthzDecisionQuery (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AuthzDecisionQuery (::std::ostream& o,
                        const ::saml2::protocol::AuthzDecisionQueryType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xercesc::DOMErrorHandler& h,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AuthzDecisionQuery (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const AuthzDecisionQueryType& i)
    {
      e << static_cast< const ::saml2::protocol::SubjectQueryAbstractType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (AuthzDecisionQueryType::Action::const_iterator
             b (i.Action ().begin ()), n (i.Action ().end ());
             b != n; ++b)
        {
          tsm.serialize< AuthzDecisionQueryType::Action::type > (
            L"Action",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Evidence ())
        {
          tsm.serialize< AuthzDecisionQueryType::Evidence::type > (
            L"Evidence",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *i.Evidence ());
        }
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Resource",
          e);

        a.dom_attribute () << i.Resource ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AuthzDecisionQueryType >
    _xsd_AuthzDecisionQueryType_type_serializer_init (
      L"AuthzDecisionQueryType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    AuthnRequest (::xercesc::DOMDocument& d,
                  const ::saml2::protocol::AuthnRequestType& s,
                  ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::AuthnRequestType > (
        L"AuthnRequest",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthnRequest (const ::saml2::protocol::AuthnRequestType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::AuthnRequestType > (
            L"AuthnRequest",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::AuthnRequest (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    AuthnRequest (::xercesc::XMLFormatTarget& t,
                  const ::saml2::protocol::AuthnRequestType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AuthnRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AuthnRequest (::xercesc::XMLFormatTarget& t,
                  const ::saml2::protocol::AuthnRequestType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AuthnRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AuthnRequest (::xercesc::XMLFormatTarget& t,
                  const ::saml2::protocol::AuthnRequestType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AuthnRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AuthnRequest (::std::ostream& o,
                  const ::saml2::protocol::AuthnRequestType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AuthnRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AuthnRequest (::std::ostream& o,
                  const ::saml2::protocol::AuthnRequestType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AuthnRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AuthnRequest (::std::ostream& o,
                  const ::saml2::protocol::AuthnRequestType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::AuthnRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const AuthnRequestType& i)
    {
      e << static_cast< const ::saml2::protocol::RequestAbstractType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Subject ())
        {
          tsm.serialize< AuthnRequestType::Subject::type > (
            L"Subject",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *i.Subject ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.NameIDPolicy ())
        {
          tsm.serialize< AuthnRequestType::NameIDPolicy::type > (
            L"NameIDPolicy",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            true,
            true,
            e,
            *i.NameIDPolicy ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Conditions ())
        {
          tsm.serialize< AuthnRequestType::Conditions::type > (
            L"Conditions",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *i.Conditions ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.RequestedAuthnContext ())
        {
          tsm.serialize< AuthnRequestType::RequestedAuthnContext::type > (
            L"RequestedAuthnContext",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            true,
            true,
            e,
            *i.RequestedAuthnContext ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Scoping ())
        {
          tsm.serialize< AuthnRequestType::Scoping::type > (
            L"Scoping",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            true,
            true,
            e,
            *i.Scoping ());
        }
      }

      if (i.ForceAuthn ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"ForceAuthn",
          e);

        a.dom_attribute () << *i.ForceAuthn ();
      }

      if (i.IsPassive ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"IsPassive",
          e);

        a.dom_attribute () << *i.IsPassive ();
      }

      if (i.ProtocolBinding ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"ProtocolBinding",
          e);

        a.dom_attribute () << *i.ProtocolBinding ();
      }

      if (i.AssertionConsumerServiceIndex ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"AssertionConsumerServiceIndex",
          e);

        a.dom_attribute () << *i.AssertionConsumerServiceIndex ();
      }

      if (i.AssertionConsumerServiceURL ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"AssertionConsumerServiceURL",
          e);

        a.dom_attribute () << *i.AssertionConsumerServiceURL ();
      }

      if (i.AttributeConsumingServiceIndex ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"AttributeConsumingServiceIndex",
          e);

        a.dom_attribute () << *i.AttributeConsumingServiceIndex ();
      }

      if (i.ProviderName ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"ProviderName",
          e);

        a.dom_attribute () << *i.ProviderName ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AuthnRequestType >
    _xsd_AuthnRequestType_type_serializer_init (
      L"AuthnRequestType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    NameIDPolicy (::xercesc::DOMDocument& d,
                  const ::saml2::protocol::NameIDPolicyType& s,
                  ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::NameIDPolicyType > (
        L"NameIDPolicy",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    NameIDPolicy (const ::saml2::protocol::NameIDPolicyType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::NameIDPolicyType > (
            L"NameIDPolicy",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::NameIDPolicy (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    NameIDPolicy (::xercesc::XMLFormatTarget& t,
                  const ::saml2::protocol::NameIDPolicyType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NameIDPolicy (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    NameIDPolicy (::xercesc::XMLFormatTarget& t,
                  const ::saml2::protocol::NameIDPolicyType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NameIDPolicy (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NameIDPolicy (::xercesc::XMLFormatTarget& t,
                  const ::saml2::protocol::NameIDPolicyType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NameIDPolicy (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NameIDPolicy (::std::ostream& o,
                  const ::saml2::protocol::NameIDPolicyType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NameIDPolicy (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    NameIDPolicy (::std::ostream& o,
                  const ::saml2::protocol::NameIDPolicyType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NameIDPolicy (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NameIDPolicy (::std::ostream& o,
                  const ::saml2::protocol::NameIDPolicyType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NameIDPolicy (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const NameIDPolicyType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      if (i.Format ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Format",
          e);

        a.dom_attribute () << *i.Format ();
      }

      if (i.SPNameQualifier ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"SPNameQualifier",
          e);

        a.dom_attribute () << *i.SPNameQualifier ();
      }

      if (i.AllowCreate ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"AllowCreate",
          e);

        a.dom_attribute () << *i.AllowCreate ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, NameIDPolicyType >
    _xsd_NameIDPolicyType_type_serializer_init (
      L"NameIDPolicyType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    Scoping (::xercesc::DOMDocument& d,
             const ::saml2::protocol::ScopingType& s,
             ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::ScopingType > (
        L"Scoping",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Scoping (const ::saml2::protocol::ScopingType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::ScopingType > (
            L"Scoping",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::Scoping (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Scoping (::xercesc::XMLFormatTarget& t,
             const ::saml2::protocol::ScopingType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Scoping (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Scoping (::xercesc::XMLFormatTarget& t,
             const ::saml2::protocol::ScopingType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Scoping (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Scoping (::xercesc::XMLFormatTarget& t,
             const ::saml2::protocol::ScopingType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Scoping (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Scoping (::std::ostream& o,
             const ::saml2::protocol::ScopingType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Scoping (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Scoping (::std::ostream& o,
             const ::saml2::protocol::ScopingType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Scoping (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Scoping (::std::ostream& o,
             const ::saml2::protocol::ScopingType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Scoping (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ScopingType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.IDPList ())
        {
          tsm.serialize< ScopingType::IDPList::type > (
            L"IDPList",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            true,
            true,
            e,
            *i.IDPList ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (ScopingType::RequesterID::const_iterator
             b (i.RequesterID ().begin ()), n (i.RequesterID ().end ());
             b != n; ++b)
        {
          tsm.serialize< ScopingType::RequesterID::type > (
            L"RequesterID",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            true,
            true,
            e,
            *b);
        }
      }

      if (i.ProxyCount ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"ProxyCount",
          e);

        a.dom_attribute () << *i.ProxyCount ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ScopingType >
    _xsd_ScopingType_type_serializer_init (
      L"ScopingType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    RequesterID (::xercesc::DOMDocument& d,
                 const ::xml_schema::uri& s,
                 ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::xml_schema::uri > (
        L"RequesterID",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    RequesterID (const ::xml_schema::uri& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::xml_schema::uri > (
            L"RequesterID",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::RequesterID (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    RequesterID (::xercesc::XMLFormatTarget& t,
                 const ::xml_schema::uri& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::RequesterID (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    RequesterID (::xercesc::XMLFormatTarget& t,
                 const ::xml_schema::uri& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::RequesterID (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RequesterID (::xercesc::XMLFormatTarget& t,
                 const ::xml_schema::uri& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::RequesterID (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RequesterID (::std::ostream& o,
                 const ::xml_schema::uri& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::RequesterID (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    RequesterID (::std::ostream& o,
                 const ::xml_schema::uri& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::RequesterID (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RequesterID (::std::ostream& o,
                 const ::xml_schema::uri& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::RequesterID (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    IDPList (::xercesc::DOMDocument& d,
             const ::saml2::protocol::IDPListType& s,
             ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::IDPListType > (
        L"IDPList",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    IDPList (const ::saml2::protocol::IDPListType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::IDPListType > (
            L"IDPList",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::IDPList (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    IDPList (::xercesc::XMLFormatTarget& t,
             const ::saml2::protocol::IDPListType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::IDPList (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    IDPList (::xercesc::XMLFormatTarget& t,
             const ::saml2::protocol::IDPListType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::IDPList (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    IDPList (::xercesc::XMLFormatTarget& t,
             const ::saml2::protocol::IDPListType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::IDPList (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    IDPList (::std::ostream& o,
             const ::saml2::protocol::IDPListType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::IDPList (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    IDPList (::std::ostream& o,
             const ::saml2::protocol::IDPListType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::IDPList (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    IDPList (::std::ostream& o,
             const ::saml2::protocol::IDPListType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::IDPList (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const IDPListType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (IDPListType::IDPEntry::const_iterator
             b (i.IDPEntry ().begin ()), n (i.IDPEntry ().end ());
             b != n; ++b)
        {
          tsm.serialize< IDPListType::IDPEntry::type > (
            L"IDPEntry",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.GetComplete ())
        {
          tsm.serialize< IDPListType::GetComplete::type > (
            L"GetComplete",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            true,
            true,
            e,
            *i.GetComplete ());
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, IDPListType >
    _xsd_IDPListType_type_serializer_init (
      L"IDPListType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    IDPEntry (::xercesc::DOMDocument& d,
              const ::saml2::protocol::IDPEntryType& s,
              ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::IDPEntryType > (
        L"IDPEntry",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    IDPEntry (const ::saml2::protocol::IDPEntryType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::IDPEntryType > (
            L"IDPEntry",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::IDPEntry (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    IDPEntry (::xercesc::XMLFormatTarget& t,
              const ::saml2::protocol::IDPEntryType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::IDPEntry (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    IDPEntry (::xercesc::XMLFormatTarget& t,
              const ::saml2::protocol::IDPEntryType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::IDPEntry (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    IDPEntry (::xercesc::XMLFormatTarget& t,
              const ::saml2::protocol::IDPEntryType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::IDPEntry (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    IDPEntry (::std::ostream& o,
              const ::saml2::protocol::IDPEntryType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::IDPEntry (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    IDPEntry (::std::ostream& o,
              const ::saml2::protocol::IDPEntryType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::IDPEntry (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    IDPEntry (::std::ostream& o,
              const ::saml2::protocol::IDPEntryType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::IDPEntry (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const IDPEntryType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"ProviderID",
          e);

        a.dom_attribute () << i.ProviderID ();
      }

      if (i.Name ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Name",
          e);

        a.dom_attribute () << *i.Name ();
      }

      if (i.Loc ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Loc",
          e);

        a.dom_attribute () << *i.Loc ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, IDPEntryType >
    _xsd_IDPEntryType_type_serializer_init (
      L"IDPEntryType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    GetComplete (::xercesc::DOMDocument& d,
                 const ::xml_schema::uri& s,
                 ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::xml_schema::uri > (
        L"GetComplete",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    GetComplete (const ::xml_schema::uri& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::xml_schema::uri > (
            L"GetComplete",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::GetComplete (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    GetComplete (::xercesc::XMLFormatTarget& t,
                 const ::xml_schema::uri& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::GetComplete (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    GetComplete (::xercesc::XMLFormatTarget& t,
                 const ::xml_schema::uri& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::GetComplete (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    GetComplete (::xercesc::XMLFormatTarget& t,
                 const ::xml_schema::uri& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::GetComplete (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    GetComplete (::std::ostream& o,
                 const ::xml_schema::uri& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::GetComplete (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    GetComplete (::std::ostream& o,
                 const ::xml_schema::uri& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::GetComplete (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    GetComplete (::std::ostream& o,
                 const ::xml_schema::uri& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::GetComplete (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Response (::xercesc::DOMDocument& d,
              const ::saml2::protocol::ResponseType& s,
              ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::ResponseType > (
        L"Response",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Response (const ::saml2::protocol::ResponseType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::ResponseType > (
            L"Response",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::Response (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Response (::xercesc::XMLFormatTarget& t,
              const ::saml2::protocol::ResponseType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Response (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Response (::xercesc::XMLFormatTarget& t,
              const ::saml2::protocol::ResponseType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Response (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Response (::xercesc::XMLFormatTarget& t,
              const ::saml2::protocol::ResponseType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Response (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Response (::std::ostream& o,
              const ::saml2::protocol::ResponseType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Response (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Response (::std::ostream& o,
              const ::saml2::protocol::ResponseType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Response (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Response (::std::ostream& o,
              const ::saml2::protocol::ResponseType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Response (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ResponseType& i)
    {
      e << static_cast< const ::saml2::protocol::StatusResponseType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (ResponseType::Assertion::const_iterator
             b (i.Assertion ().begin ()), n (i.Assertion ().end ());
             b != n; ++b)
        {
          tsm.serialize< ResponseType::Assertion::type > (
            L"Assertion",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (ResponseType::EncryptedAssertion::const_iterator
             b (i.EncryptedAssertion ().begin ()), n (i.EncryptedAssertion ().end ());
             b != n; ++b)
        {
          tsm.serialize< ResponseType::EncryptedAssertion::type > (
            L"EncryptedAssertion",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *b);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ResponseType >
    _xsd_ResponseType_type_serializer_init (
      L"ResponseType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    ArtifactResolve (::xercesc::DOMDocument& d,
                     const ::saml2::protocol::ArtifactResolveType& s,
                     ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::ArtifactResolveType > (
        L"ArtifactResolve",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ArtifactResolve (const ::saml2::protocol::ArtifactResolveType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::ArtifactResolveType > (
            L"ArtifactResolve",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::ArtifactResolve (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    ArtifactResolve (::xercesc::XMLFormatTarget& t,
                     const ::saml2::protocol::ArtifactResolveType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::ArtifactResolve (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ArtifactResolve (::xercesc::XMLFormatTarget& t,
                     const ::saml2::protocol::ArtifactResolveType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::ArtifactResolve (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ArtifactResolve (::xercesc::XMLFormatTarget& t,
                     const ::saml2::protocol::ArtifactResolveType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::ArtifactResolve (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ArtifactResolve (::std::ostream& o,
                     const ::saml2::protocol::ArtifactResolveType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::ArtifactResolve (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ArtifactResolve (::std::ostream& o,
                     const ::saml2::protocol::ArtifactResolveType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::ArtifactResolve (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ArtifactResolve (::std::ostream& o,
                     const ::saml2::protocol::ArtifactResolveType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::ArtifactResolve (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ArtifactResolveType& i)
    {
      e << static_cast< const ::saml2::protocol::RequestAbstractType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< ArtifactResolveType::Artifact::type > (
          L"Artifact",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          i.Artifact ());
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ArtifactResolveType >
    _xsd_ArtifactResolveType_type_serializer_init (
      L"ArtifactResolveType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    Artifact (::xercesc::DOMDocument& d,
              const ::xml_schema::string& s,
              ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::xml_schema::string > (
        L"Artifact",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Artifact (const ::xml_schema::string& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::xml_schema::string > (
            L"Artifact",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::Artifact (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Artifact (::xercesc::XMLFormatTarget& t,
              const ::xml_schema::string& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Artifact (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Artifact (::xercesc::XMLFormatTarget& t,
              const ::xml_schema::string& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Artifact (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Artifact (::xercesc::XMLFormatTarget& t,
              const ::xml_schema::string& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Artifact (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Artifact (::std::ostream& o,
              const ::xml_schema::string& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Artifact (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Artifact (::std::ostream& o,
              const ::xml_schema::string& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Artifact (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Artifact (::std::ostream& o,
              const ::xml_schema::string& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Artifact (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ArtifactResponse (::xercesc::DOMDocument& d,
                      const ::saml2::protocol::ArtifactResponseType& s,
                      ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::ArtifactResponseType > (
        L"ArtifactResponse",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ArtifactResponse (const ::saml2::protocol::ArtifactResponseType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::ArtifactResponseType > (
            L"ArtifactResponse",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::ArtifactResponse (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    ArtifactResponse (::xercesc::XMLFormatTarget& t,
                      const ::saml2::protocol::ArtifactResponseType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::ArtifactResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ArtifactResponse (::xercesc::XMLFormatTarget& t,
                      const ::saml2::protocol::ArtifactResponseType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::ArtifactResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ArtifactResponse (::xercesc::XMLFormatTarget& t,
                      const ::saml2::protocol::ArtifactResponseType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::ArtifactResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ArtifactResponse (::std::ostream& o,
                      const ::saml2::protocol::ArtifactResponseType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::ArtifactResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ArtifactResponse (::std::ostream& o,
                      const ::saml2::protocol::ArtifactResponseType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::ArtifactResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ArtifactResponse (::std::ostream& o,
                      const ::saml2::protocol::ArtifactResponseType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::ArtifactResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ArtifactResponseType& i)
    {
      e << static_cast< const ::saml2::protocol::StatusResponseType& > (i);
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ArtifactResponseType >
    _xsd_ArtifactResponseType_type_serializer_init (
      L"ArtifactResponseType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    ManageNameIDRequest (::xercesc::DOMDocument& d,
                         const ::saml2::protocol::ManageNameIDRequestType& s,
                         ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::ManageNameIDRequestType > (
        L"ManageNameIDRequest",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ManageNameIDRequest (const ::saml2::protocol::ManageNameIDRequestType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::ManageNameIDRequestType > (
            L"ManageNameIDRequest",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::ManageNameIDRequest (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    ManageNameIDRequest (::xercesc::XMLFormatTarget& t,
                         const ::saml2::protocol::ManageNameIDRequestType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::ManageNameIDRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ManageNameIDRequest (::xercesc::XMLFormatTarget& t,
                         const ::saml2::protocol::ManageNameIDRequestType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::ManageNameIDRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ManageNameIDRequest (::xercesc::XMLFormatTarget& t,
                         const ::saml2::protocol::ManageNameIDRequestType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xercesc::DOMErrorHandler& h,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::ManageNameIDRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ManageNameIDRequest (::std::ostream& o,
                         const ::saml2::protocol::ManageNameIDRequestType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::ManageNameIDRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ManageNameIDRequest (::std::ostream& o,
                         const ::saml2::protocol::ManageNameIDRequestType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::ManageNameIDRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ManageNameIDRequest (::std::ostream& o,
                         const ::saml2::protocol::ManageNameIDRequestType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xercesc::DOMErrorHandler& h,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::ManageNameIDRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ManageNameIDRequestType& i)
    {
      e << static_cast< const ::saml2::protocol::RequestAbstractType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.NameID ())
        {
          tsm.serialize< ManageNameIDRequestType::NameID::type > (
            L"NameID",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *i.NameID ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.EncryptedID ())
        {
          tsm.serialize< ManageNameIDRequestType::EncryptedID::type > (
            L"EncryptedID",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *i.EncryptedID ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.NewID ())
        {
          tsm.serialize< ManageNameIDRequestType::NewID::type > (
            L"NewID",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            true,
            true,
            e,
            *i.NewID ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.NewEncryptedID ())
        {
          tsm.serialize< ManageNameIDRequestType::NewEncryptedID::type > (
            L"NewEncryptedID",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            true,
            true,
            e,
            *i.NewEncryptedID ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Terminate ())
        {
          tsm.serialize< ManageNameIDRequestType::Terminate::type > (
            L"Terminate",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            true,
            true,
            e,
            *i.Terminate ());
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ManageNameIDRequestType >
    _xsd_ManageNameIDRequestType_type_serializer_init (
      L"ManageNameIDRequestType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    NewID (::xercesc::DOMDocument& d,
           const ::xml_schema::string& s,
           ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::xml_schema::string > (
        L"NewID",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    NewID (const ::xml_schema::string& s,
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
           ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::xml_schema::string > (
            L"NewID",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::NewID (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    NewID (::xercesc::XMLFormatTarget& t,
           const ::xml_schema::string& s,
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
           const ::std::basic_string< wchar_t >& e,
           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NewID (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    NewID (::xercesc::XMLFormatTarget& t,
           const ::xml_schema::string& s,
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
           ::xsd::cxx::xml::error_handler< wchar_t >& h,
           const ::std::basic_string< wchar_t >& e,
           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NewID (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NewID (::xercesc::XMLFormatTarget& t,
           const ::xml_schema::string& s,
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
           ::xercesc::DOMErrorHandler& h,
           const ::std::basic_string< wchar_t >& e,
           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NewID (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NewID (::std::ostream& o,
           const ::xml_schema::string& s,
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
           const ::std::basic_string< wchar_t >& e,
           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NewID (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    NewID (::std::ostream& o,
           const ::xml_schema::string& s,
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
           ::xsd::cxx::xml::error_handler< wchar_t >& h,
           const ::std::basic_string< wchar_t >& e,
           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NewID (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NewID (::std::ostream& o,
           const ::xml_schema::string& s,
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
           ::xercesc::DOMErrorHandler& h,
           const ::std::basic_string< wchar_t >& e,
           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NewID (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NewEncryptedID (::xercesc::DOMDocument& d,
                    const ::saml2::assertion::EncryptedElementType& s,
                    ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::assertion::EncryptedElementType > (
        L"NewEncryptedID",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    NewEncryptedID (const ::saml2::assertion::EncryptedElementType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::assertion::EncryptedElementType > (
            L"NewEncryptedID",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::NewEncryptedID (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    NewEncryptedID (::xercesc::XMLFormatTarget& t,
                    const ::saml2::assertion::EncryptedElementType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NewEncryptedID (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    NewEncryptedID (::xercesc::XMLFormatTarget& t,
                    const ::saml2::assertion::EncryptedElementType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NewEncryptedID (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NewEncryptedID (::xercesc::XMLFormatTarget& t,
                    const ::saml2::assertion::EncryptedElementType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NewEncryptedID (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NewEncryptedID (::std::ostream& o,
                    const ::saml2::assertion::EncryptedElementType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NewEncryptedID (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    NewEncryptedID (::std::ostream& o,
                    const ::saml2::assertion::EncryptedElementType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NewEncryptedID (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NewEncryptedID (::std::ostream& o,
                    const ::saml2::assertion::EncryptedElementType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NewEncryptedID (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Terminate (::xercesc::DOMDocument& d,
               const ::saml2::protocol::TerminateType& s,
               ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::TerminateType > (
        L"Terminate",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Terminate (const ::saml2::protocol::TerminateType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::TerminateType > (
            L"Terminate",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::Terminate (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Terminate (::xercesc::XMLFormatTarget& t,
               const ::saml2::protocol::TerminateType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Terminate (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Terminate (::xercesc::XMLFormatTarget& t,
               const ::saml2::protocol::TerminateType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Terminate (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Terminate (::xercesc::XMLFormatTarget& t,
               const ::saml2::protocol::TerminateType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Terminate (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Terminate (::std::ostream& o,
               const ::saml2::protocol::TerminateType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Terminate (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Terminate (::std::ostream& o,
               const ::saml2::protocol::TerminateType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Terminate (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Terminate (::std::ostream& o,
               const ::saml2::protocol::TerminateType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::Terminate (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const TerminateType&)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);
    }

    void
    operator<< (::xercesc::DOMAttr&,
                const TerminateType&)
    {
    }

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                const TerminateType&)
    {
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, TerminateType >
    _xsd_TerminateType_type_serializer_init (
      L"TerminateType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    ManageNameIDResponse (::xercesc::DOMDocument& d,
                          const ::saml2::protocol::StatusResponseType& s,
                          ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::StatusResponseType > (
        L"ManageNameIDResponse",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ManageNameIDResponse (const ::saml2::protocol::StatusResponseType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::StatusResponseType > (
            L"ManageNameIDResponse",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::ManageNameIDResponse (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    ManageNameIDResponse (::xercesc::XMLFormatTarget& t,
                          const ::saml2::protocol::StatusResponseType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          const ::std::basic_string< wchar_t >& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::ManageNameIDResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ManageNameIDResponse (::xercesc::XMLFormatTarget& t,
                          const ::saml2::protocol::StatusResponseType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          ::xsd::cxx::xml::error_handler< wchar_t >& h,
                          const ::std::basic_string< wchar_t >& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::ManageNameIDResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ManageNameIDResponse (::xercesc::XMLFormatTarget& t,
                          const ::saml2::protocol::StatusResponseType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          ::xercesc::DOMErrorHandler& h,
                          const ::std::basic_string< wchar_t >& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::ManageNameIDResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ManageNameIDResponse (::std::ostream& o,
                          const ::saml2::protocol::StatusResponseType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          const ::std::basic_string< wchar_t >& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::ManageNameIDResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ManageNameIDResponse (::std::ostream& o,
                          const ::saml2::protocol::StatusResponseType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          ::xsd::cxx::xml::error_handler< wchar_t >& h,
                          const ::std::basic_string< wchar_t >& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::ManageNameIDResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ManageNameIDResponse (::std::ostream& o,
                          const ::saml2::protocol::StatusResponseType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          ::xercesc::DOMErrorHandler& h,
                          const ::std::basic_string< wchar_t >& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::ManageNameIDResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LogoutRequest (::xercesc::DOMDocument& d,
                   const ::saml2::protocol::LogoutRequestType& s,
                   ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::LogoutRequestType > (
        L"LogoutRequest",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    LogoutRequest (const ::saml2::protocol::LogoutRequestType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::LogoutRequestType > (
            L"LogoutRequest",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::LogoutRequest (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    LogoutRequest (::xercesc::XMLFormatTarget& t,
                   const ::saml2::protocol::LogoutRequestType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::LogoutRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    LogoutRequest (::xercesc::XMLFormatTarget& t,
                   const ::saml2::protocol::LogoutRequestType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::LogoutRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LogoutRequest (::xercesc::XMLFormatTarget& t,
                   const ::saml2::protocol::LogoutRequestType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xercesc::DOMErrorHandler& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::LogoutRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LogoutRequest (::std::ostream& o,
                   const ::saml2::protocol::LogoutRequestType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::LogoutRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    LogoutRequest (::std::ostream& o,
                   const ::saml2::protocol::LogoutRequestType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::LogoutRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LogoutRequest (::std::ostream& o,
                   const ::saml2::protocol::LogoutRequestType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xercesc::DOMErrorHandler& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::LogoutRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const LogoutRequestType& i)
    {
      e << static_cast< const ::saml2::protocol::RequestAbstractType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.BaseID ())
        {
          tsm.serialize< LogoutRequestType::BaseID::type > (
            L"BaseID",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *i.BaseID ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.NameID ())
        {
          tsm.serialize< LogoutRequestType::NameID::type > (
            L"NameID",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *i.NameID ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.EncryptedID ())
        {
          tsm.serialize< LogoutRequestType::EncryptedID::type > (
            L"EncryptedID",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *i.EncryptedID ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (LogoutRequestType::SessionIndex::const_iterator
             b (i.SessionIndex ().begin ()), n (i.SessionIndex ().end ());
             b != n; ++b)
        {
          tsm.serialize< LogoutRequestType::SessionIndex::type > (
            L"SessionIndex",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            true,
            true,
            e,
            *b);
        }
      }

      if (i.Reason ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Reason",
          e);

        a.dom_attribute () << *i.Reason ();
      }

      if (i.NotOnOrAfter ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"NotOnOrAfter",
          e);

        a.dom_attribute () << *i.NotOnOrAfter ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, LogoutRequestType >
    _xsd_LogoutRequestType_type_serializer_init (
      L"LogoutRequestType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    SessionIndex (::xercesc::DOMDocument& d,
                  const ::xml_schema::string& s,
                  ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::xml_schema::string > (
        L"SessionIndex",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SessionIndex (const ::xml_schema::string& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::xml_schema::string > (
            L"SessionIndex",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::SessionIndex (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    SessionIndex (::xercesc::XMLFormatTarget& t,
                  const ::xml_schema::string& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::SessionIndex (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SessionIndex (::xercesc::XMLFormatTarget& t,
                  const ::xml_schema::string& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::SessionIndex (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SessionIndex (::xercesc::XMLFormatTarget& t,
                  const ::xml_schema::string& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::SessionIndex (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SessionIndex (::std::ostream& o,
                  const ::xml_schema::string& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::SessionIndex (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SessionIndex (::std::ostream& o,
                  const ::xml_schema::string& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::SessionIndex (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SessionIndex (::std::ostream& o,
                  const ::xml_schema::string& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::SessionIndex (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LogoutResponse (::xercesc::DOMDocument& d,
                    const ::saml2::protocol::StatusResponseType& s,
                    ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::StatusResponseType > (
        L"LogoutResponse",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    LogoutResponse (const ::saml2::protocol::StatusResponseType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::StatusResponseType > (
            L"LogoutResponse",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::LogoutResponse (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    LogoutResponse (::xercesc::XMLFormatTarget& t,
                    const ::saml2::protocol::StatusResponseType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::LogoutResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    LogoutResponse (::xercesc::XMLFormatTarget& t,
                    const ::saml2::protocol::StatusResponseType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::LogoutResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LogoutResponse (::xercesc::XMLFormatTarget& t,
                    const ::saml2::protocol::StatusResponseType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::LogoutResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LogoutResponse (::std::ostream& o,
                    const ::saml2::protocol::StatusResponseType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::LogoutResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    LogoutResponse (::std::ostream& o,
                    const ::saml2::protocol::StatusResponseType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::LogoutResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LogoutResponse (::std::ostream& o,
                    const ::saml2::protocol::StatusResponseType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::LogoutResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NameIDMappingRequest (::xercesc::DOMDocument& d,
                          const ::saml2::protocol::NameIDMappingRequestType& s,
                          ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::NameIDMappingRequestType > (
        L"NameIDMappingRequest",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    NameIDMappingRequest (const ::saml2::protocol::NameIDMappingRequestType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::NameIDMappingRequestType > (
            L"NameIDMappingRequest",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::NameIDMappingRequest (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    NameIDMappingRequest (::xercesc::XMLFormatTarget& t,
                          const ::saml2::protocol::NameIDMappingRequestType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          const ::std::basic_string< wchar_t >& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NameIDMappingRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    NameIDMappingRequest (::xercesc::XMLFormatTarget& t,
                          const ::saml2::protocol::NameIDMappingRequestType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          ::xsd::cxx::xml::error_handler< wchar_t >& h,
                          const ::std::basic_string< wchar_t >& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NameIDMappingRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NameIDMappingRequest (::xercesc::XMLFormatTarget& t,
                          const ::saml2::protocol::NameIDMappingRequestType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          ::xercesc::DOMErrorHandler& h,
                          const ::std::basic_string< wchar_t >& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NameIDMappingRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NameIDMappingRequest (::std::ostream& o,
                          const ::saml2::protocol::NameIDMappingRequestType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          const ::std::basic_string< wchar_t >& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NameIDMappingRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    NameIDMappingRequest (::std::ostream& o,
                          const ::saml2::protocol::NameIDMappingRequestType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          ::xsd::cxx::xml::error_handler< wchar_t >& h,
                          const ::std::basic_string< wchar_t >& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NameIDMappingRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NameIDMappingRequest (::std::ostream& o,
                          const ::saml2::protocol::NameIDMappingRequestType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          ::xercesc::DOMErrorHandler& h,
                          const ::std::basic_string< wchar_t >& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NameIDMappingRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const NameIDMappingRequestType& i)
    {
      e << static_cast< const ::saml2::protocol::RequestAbstractType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.BaseID ())
        {
          tsm.serialize< NameIDMappingRequestType::BaseID::type > (
            L"BaseID",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *i.BaseID ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.NameID ())
        {
          tsm.serialize< NameIDMappingRequestType::NameID::type > (
            L"NameID",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *i.NameID ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.EncryptedID ())
        {
          tsm.serialize< NameIDMappingRequestType::EncryptedID::type > (
            L"EncryptedID",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *i.EncryptedID ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< NameIDMappingRequestType::NameIDPolicy::type > (
          L"NameIDPolicy",
          L"urn:oasis:names:tc:SAML:2.0:protocol",
          true,
          true,
          e,
          i.NameIDPolicy ());
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, NameIDMappingRequestType >
    _xsd_NameIDMappingRequestType_type_serializer_init (
      L"NameIDMappingRequestType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");


    void
    NameIDMappingResponse (::xercesc::DOMDocument& d,
                           const ::saml2::protocol::NameIDMappingResponseType& s,
                           ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::protocol::NameIDMappingResponseType > (
        L"NameIDMappingResponse",
        L"urn:oasis:names:tc:SAML:2.0:protocol",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    NameIDMappingResponse (const ::saml2::protocol::NameIDMappingResponseType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::protocol::NameIDMappingResponseType > (
            L"NameIDMappingResponse",
            L"urn:oasis:names:tc:SAML:2.0:protocol",
            m,
            s,
            f));
        ::saml2::protocol::NameIDMappingResponse (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    NameIDMappingResponse (::xercesc::XMLFormatTarget& t,
                           const ::saml2::protocol::NameIDMappingResponseType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           const ::std::basic_string< wchar_t >& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NameIDMappingResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    NameIDMappingResponse (::xercesc::XMLFormatTarget& t,
                           const ::saml2::protocol::NameIDMappingResponseType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           ::xsd::cxx::xml::error_handler< wchar_t >& h,
                           const ::std::basic_string< wchar_t >& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NameIDMappingResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NameIDMappingResponse (::xercesc::XMLFormatTarget& t,
                           const ::saml2::protocol::NameIDMappingResponseType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           ::xercesc::DOMErrorHandler& h,
                           const ::std::basic_string< wchar_t >& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NameIDMappingResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NameIDMappingResponse (::std::ostream& o,
                           const ::saml2::protocol::NameIDMappingResponseType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           const ::std::basic_string< wchar_t >& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NameIDMappingResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    NameIDMappingResponse (::std::ostream& o,
                           const ::saml2::protocol::NameIDMappingResponseType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           ::xsd::cxx::xml::error_handler< wchar_t >& h,
                           const ::std::basic_string< wchar_t >& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NameIDMappingResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NameIDMappingResponse (::std::ostream& o,
                           const ::saml2::protocol::NameIDMappingResponseType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           ::xercesc::DOMErrorHandler& h,
                           const ::std::basic_string< wchar_t >& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::protocol::NameIDMappingResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const NameIDMappingResponseType& i)
    {
      e << static_cast< const ::saml2::protocol::StatusResponseType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.NameID ())
        {
          tsm.serialize< NameIDMappingResponseType::NameID::type > (
            L"NameID",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *i.NameID ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.EncryptedID ())
        {
          tsm.serialize< NameIDMappingResponseType::EncryptedID::type > (
            L"EncryptedID",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *i.EncryptedID ());
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, NameIDMappingResponseType >
    _xsd_NameIDMappingResponseType_type_serializer_init (
      L"NameIDMappingResponseType",
      L"urn:oasis:names:tc:SAML:2.0:protocol");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

