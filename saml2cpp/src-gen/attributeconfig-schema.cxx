// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "attributeconfig-schema.hxx"

namespace middleware
{
  namespace AttributeConfigSchema
  {
    // AttributeConfigType
    // 

    const AttributeConfigType::RequestedAttribute::container& AttributeConfigType::
    RequestedAttribute () const
    {
      return this->_xsd_RequestedAttribute_;
    }

    AttributeConfigType::RequestedAttribute::container& AttributeConfigType::
    RequestedAttribute ()
    {
      return this->_xsd_RequestedAttribute_;
    }

    void AttributeConfigType::
    RequestedAttribute (const RequestedAttribute::container& RequestedAttribute)
    {
      this->_xsd_RequestedAttribute_ = RequestedAttribute;
    }


    // RequestedAttributeType
    // 
  }
}

#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/parser.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_factory_plate< 0, wchar_t >
  type_factory_plate_init;
}

namespace middleware
{
  namespace AttributeConfigSchema
  {
    // AttributeConfigType
    //

    AttributeConfigType::
    AttributeConfigType ()
    : ::xml_schema::type (),
    _xsd_RequestedAttribute_ (::xml_schema::flags (), this)
    {
    }

    AttributeConfigType::
    AttributeConfigType (const AttributeConfigType& _xsd_AttributeConfigType,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_AttributeConfigType, f, c),
    _xsd_RequestedAttribute_ (_xsd_AttributeConfigType._xsd_RequestedAttribute_,
                              f | ::xml_schema::flags::not_root,
                              this)
    {
    }

    AttributeConfigType::
    AttributeConfigType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_RequestedAttribute_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void AttributeConfigType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // RequestedAttribute
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< RequestedAttribute::type > r (
            tfm.create< RequestedAttribute::type > (
              L"RequestedAttribute",
              L"http://www.qut.com/middleware/AttributeConfigSchema",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->RequestedAttribute ().push_back (r);
            continue;
          }
        }
      }
    }

    AttributeConfigType* AttributeConfigType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new AttributeConfigType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AttributeConfigType >
    _xsd_AttributeConfigType_type_factory_init (
      L"AttributeConfigType http://www.qut.com/middleware/AttributeConfigSchema");


    // RequestedAttributeType
    //

    RequestedAttributeType::
    RequestedAttributeType ()
    : ::saml2::assertion::AttributeType ()
    {
    }

    RequestedAttributeType::
    RequestedAttributeType (const Name::type& _xsd_Name)
    : ::saml2::assertion::AttributeType (_xsd_Name)
    {
    }

    RequestedAttributeType::
    RequestedAttributeType (const RequestedAttributeType& _xsd_RequestedAttributeType,
                            ::xml_schema::flags f,
                            ::xml_schema::type* c)
    : ::saml2::assertion::AttributeType (_xsd_RequestedAttributeType, f, c)
    {
    }

    RequestedAttributeType::
    RequestedAttributeType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::type* c)
    : ::saml2::assertion::AttributeType (e, f, c)
    {
    }

    RequestedAttributeType* RequestedAttributeType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new RequestedAttributeType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, RequestedAttributeType >
    _xsd_RequestedAttributeType_type_factory_init (
      L"RequestedAttributeType http://www.qut.com/middleware/AttributeConfigSchema");
  }
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace middleware
{
  namespace AttributeConfigSchema
  {
    ::std::auto_ptr< ::middleware::AttributeConfigSchema::AttributeConfigType >
    AttributeConfig (const ::std::basic_string< wchar_t >& u,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::AttributeConfigSchema::AttributeConfig (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::AttributeConfigSchema::AttributeConfigType >
    AttributeConfig (const ::std::basic_string< wchar_t >& u,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::AttributeConfigSchema::AttributeConfig (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::AttributeConfigSchema::AttributeConfigType >
    AttributeConfig (const ::std::basic_string< wchar_t >& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::AttributeConfigSchema::AttributeConfig (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::AttributeConfigSchema::AttributeConfigType >
    AttributeConfig (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::AttributeConfigSchema::AttributeConfig (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::AttributeConfigSchema::AttributeConfigType >
    AttributeConfig (::std::istream& is,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::AttributeConfigSchema::AttributeConfig (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::AttributeConfigSchema::AttributeConfigType >
    AttributeConfig (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::AttributeConfigSchema::AttributeConfig (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::AttributeConfigSchema::AttributeConfigType >
    AttributeConfig (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::AttributeConfigSchema::AttributeConfig (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::AttributeConfigSchema::AttributeConfigType >
    AttributeConfig (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::AttributeConfigSchema::AttributeConfig (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::AttributeConfigSchema::AttributeConfigType >
    AttributeConfig (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::AttributeConfigSchema::AttributeConfig (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::AttributeConfigSchema::AttributeConfigType >
    AttributeConfig (const ::xercesc::DOMInputSource& i,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::AttributeConfigSchema::AttributeConfig (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::AttributeConfigSchema::AttributeConfigType >
    AttributeConfig (const ::xercesc::DOMInputSource& i,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::AttributeConfigSchema::AttributeConfig (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::AttributeConfigSchema::AttributeConfigType >
    AttributeConfig (const ::xercesc::DOMInputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::AttributeConfigSchema::AttributeConfig (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::AttributeConfigSchema::AttributeConfigType >
    AttributeConfig (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::AttributeConfigSchema::AttributeConfigType > r (
        tfm.create< ::middleware::AttributeConfigSchema::AttributeConfigType > (
          L"AttributeConfig",
          L"http://www.qut.com/middleware/AttributeConfigSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"AttributeConfig",
        L"http://www.qut.com/middleware/AttributeConfigSchema");
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/serialization.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_serializer_plate< 0, wchar_t >
  type_serializer_plate_init;
}

namespace middleware
{
  namespace AttributeConfigSchema
  {
    void
    AttributeConfig (::xercesc::DOMDocument& d,
                     const ::middleware::AttributeConfigSchema::AttributeConfigType& s,
                     ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::AttributeConfigSchema::AttributeConfigType > (
        L"AttributeConfig",
        L"http://www.qut.com/middleware/AttributeConfigSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeConfig (const ::middleware::AttributeConfigSchema::AttributeConfigType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::AttributeConfigSchema::AttributeConfigType > (
            L"AttributeConfig",
            L"http://www.qut.com/middleware/AttributeConfigSchema",
            m,
            s,
            f));
        ::middleware::AttributeConfigSchema::AttributeConfig (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    AttributeConfig (::xercesc::XMLFormatTarget& t,
                     const ::middleware::AttributeConfigSchema::AttributeConfigType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::AttributeConfigSchema::AttributeConfig (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AttributeConfig (::xercesc::XMLFormatTarget& t,
                     const ::middleware::AttributeConfigSchema::AttributeConfigType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::AttributeConfigSchema::AttributeConfig (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeConfig (::xercesc::XMLFormatTarget& t,
                     const ::middleware::AttributeConfigSchema::AttributeConfigType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::AttributeConfigSchema::AttributeConfig (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeConfig (::std::ostream& o,
                     const ::middleware::AttributeConfigSchema::AttributeConfigType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::AttributeConfigSchema::AttributeConfig (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AttributeConfig (::std::ostream& o,
                     const ::middleware::AttributeConfigSchema::AttributeConfigType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::AttributeConfigSchema::AttributeConfig (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeConfig (::std::ostream& o,
                     const ::middleware::AttributeConfigSchema::AttributeConfigType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::AttributeConfigSchema::AttributeConfig (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const AttributeConfigType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (AttributeConfigType::RequestedAttribute::const_iterator
             b (i.RequestedAttribute ().begin ()), n (i.RequestedAttribute ().end ());
             b != n; ++b)
        {
          tsm.serialize< AttributeConfigType::RequestedAttribute::type > (
            L"RequestedAttribute",
            L"http://www.qut.com/middleware/AttributeConfigSchema",
            false,
            true,
            e,
            *b);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AttributeConfigType >
    _xsd_AttributeConfigType_type_serializer_init (
      L"AttributeConfigType",
      L"http://www.qut.com/middleware/AttributeConfigSchema");


    void
    operator<< (::xercesc::DOMElement& e,
                const RequestedAttributeType& i)
    {
      e << static_cast< const ::saml2::assertion::AttributeType& > (i);
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, RequestedAttributeType >
    _xsd_RequestedAttributeType_type_serializer_init (
      L"RequestedAttributeType",
      L"http://www.qut.com/middleware/AttributeConfigSchema");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

