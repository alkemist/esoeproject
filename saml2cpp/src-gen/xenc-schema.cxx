// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "xenc-schema.hxx"

namespace w3
{
  namespace xmlenc
  {
    // EncryptedType
    // 

    const EncryptedType::EncryptionMethod::container& EncryptedType::
    EncryptionMethod () const
    {
      return this->_xsd_EncryptionMethod_;
    }

    EncryptedType::EncryptionMethod::container& EncryptedType::
    EncryptionMethod ()
    {
      return this->_xsd_EncryptionMethod_;
    }

    void EncryptedType::
    EncryptionMethod (const EncryptionMethod::type& EncryptionMethod)
    {
      this->_xsd_EncryptionMethod_.set (EncryptionMethod);
    }

    void EncryptedType::
    EncryptionMethod (const EncryptionMethod::container& EncryptionMethod)
    {
      this->_xsd_EncryptionMethod_ = EncryptionMethod;
    }

    void EncryptedType::
    EncryptionMethod (::std::auto_ptr< EncryptionMethod::type > EncryptionMethod)
    {
      this->_xsd_EncryptionMethod_.set (EncryptionMethod);
    }

    const EncryptedType::KeyInfo::container& EncryptedType::
    KeyInfo () const
    {
      return this->_xsd_KeyInfo_;
    }

    EncryptedType::KeyInfo::container& EncryptedType::
    KeyInfo ()
    {
      return this->_xsd_KeyInfo_;
    }

    void EncryptedType::
    KeyInfo (const KeyInfo::type& KeyInfo)
    {
      this->_xsd_KeyInfo_.set (KeyInfo);
    }

    void EncryptedType::
    KeyInfo (const KeyInfo::container& KeyInfo)
    {
      this->_xsd_KeyInfo_ = KeyInfo;
    }

    void EncryptedType::
    KeyInfo (::std::auto_ptr< KeyInfo::type > KeyInfo)
    {
      this->_xsd_KeyInfo_.set (KeyInfo);
    }

    const EncryptedType::CipherData::type& EncryptedType::
    CipherData () const
    {
      return this->_xsd_CipherData_.get ();
    }

    EncryptedType::CipherData::type& EncryptedType::
    CipherData ()
    {
      return this->_xsd_CipherData_.get ();
    }

    void EncryptedType::
    CipherData (const CipherData::type& CipherData)
    {
      this->_xsd_CipherData_.set (CipherData);
    }

    void EncryptedType::
    CipherData (::std::auto_ptr< CipherData::type > CipherData)
    {
      this->_xsd_CipherData_.set (CipherData);
    }

    const EncryptedType::EncryptionProperties::container& EncryptedType::
    EncryptionProperties () const
    {
      return this->_xsd_EncryptionProperties_;
    }

    EncryptedType::EncryptionProperties::container& EncryptedType::
    EncryptionProperties ()
    {
      return this->_xsd_EncryptionProperties_;
    }

    void EncryptedType::
    EncryptionProperties (const EncryptionProperties::type& EncryptionProperties)
    {
      this->_xsd_EncryptionProperties_.set (EncryptionProperties);
    }

    void EncryptedType::
    EncryptionProperties (const EncryptionProperties::container& EncryptionProperties)
    {
      this->_xsd_EncryptionProperties_ = EncryptionProperties;
    }

    void EncryptedType::
    EncryptionProperties (::std::auto_ptr< EncryptionProperties::type > EncryptionProperties)
    {
      this->_xsd_EncryptionProperties_.set (EncryptionProperties);
    }

    const EncryptedType::Id::container& EncryptedType::
    Id () const
    {
      return this->_xsd_Id_;
    }

    EncryptedType::Id::container& EncryptedType::
    Id ()
    {
      return this->_xsd_Id_;
    }

    void EncryptedType::
    Id (const Id::type& Id)
    {
      this->_xsd_Id_.set (Id);
    }

    void EncryptedType::
    Id (const Id::container& Id)
    {
      this->_xsd_Id_ = Id;
    }

    void EncryptedType::
    Id (::std::auto_ptr< Id::type > Id)
    {
      this->_xsd_Id_.set (Id);
    }

    const EncryptedType::Type::container& EncryptedType::
    Type () const
    {
      return this->_xsd_Type_;
    }

    EncryptedType::Type::container& EncryptedType::
    Type ()
    {
      return this->_xsd_Type_;
    }

    void EncryptedType::
    Type (const Type::type& Type)
    {
      this->_xsd_Type_.set (Type);
    }

    void EncryptedType::
    Type (const Type::container& Type)
    {
      this->_xsd_Type_ = Type;
    }

    void EncryptedType::
    Type (::std::auto_ptr< Type::type > Type)
    {
      this->_xsd_Type_.set (Type);
    }

    const EncryptedType::MimeType::container& EncryptedType::
    MimeType () const
    {
      return this->_xsd_MimeType_;
    }

    EncryptedType::MimeType::container& EncryptedType::
    MimeType ()
    {
      return this->_xsd_MimeType_;
    }

    void EncryptedType::
    MimeType (const MimeType::type& MimeType)
    {
      this->_xsd_MimeType_.set (MimeType);
    }

    void EncryptedType::
    MimeType (const MimeType::container& MimeType)
    {
      this->_xsd_MimeType_ = MimeType;
    }

    void EncryptedType::
    MimeType (::std::auto_ptr< MimeType::type > MimeType)
    {
      this->_xsd_MimeType_.set (MimeType);
    }

    const EncryptedType::Encoding::container& EncryptedType::
    Encoding () const
    {
      return this->_xsd_Encoding_;
    }

    EncryptedType::Encoding::container& EncryptedType::
    Encoding ()
    {
      return this->_xsd_Encoding_;
    }

    void EncryptedType::
    Encoding (const Encoding::type& Encoding)
    {
      this->_xsd_Encoding_.set (Encoding);
    }

    void EncryptedType::
    Encoding (const Encoding::container& Encoding)
    {
      this->_xsd_Encoding_ = Encoding;
    }

    void EncryptedType::
    Encoding (::std::auto_ptr< Encoding::type > Encoding)
    {
      this->_xsd_Encoding_.set (Encoding);
    }


    // EncryptionMethodType
    // 

    const EncryptionMethodType::KeySize::container& EncryptionMethodType::
    KeySize () const
    {
      return this->_xsd_KeySize_;
    }

    EncryptionMethodType::KeySize::container& EncryptionMethodType::
    KeySize ()
    {
      return this->_xsd_KeySize_;
    }

    void EncryptionMethodType::
    KeySize (const KeySize::type& KeySize)
    {
      this->_xsd_KeySize_.set (KeySize);
    }

    void EncryptionMethodType::
    KeySize (const KeySize::container& KeySize)
    {
      this->_xsd_KeySize_ = KeySize;
    }

    void EncryptionMethodType::
    KeySize (::std::auto_ptr< KeySize::type > KeySize)
    {
      this->_xsd_KeySize_.set (KeySize);
    }

    const EncryptionMethodType::OAEPparams::container& EncryptionMethodType::
    OAEPparams () const
    {
      return this->_xsd_OAEPparams_;
    }

    EncryptionMethodType::OAEPparams::container& EncryptionMethodType::
    OAEPparams ()
    {
      return this->_xsd_OAEPparams_;
    }

    void EncryptionMethodType::
    OAEPparams (const OAEPparams::type& OAEPparams)
    {
      this->_xsd_OAEPparams_.set (OAEPparams);
    }

    void EncryptionMethodType::
    OAEPparams (const OAEPparams::container& OAEPparams)
    {
      this->_xsd_OAEPparams_ = OAEPparams;
    }

    void EncryptionMethodType::
    OAEPparams (::std::auto_ptr< OAEPparams::type > OAEPparams)
    {
      this->_xsd_OAEPparams_.set (OAEPparams);
    }

    const EncryptionMethodType::Algorithm::type& EncryptionMethodType::
    Algorithm () const
    {
      return this->_xsd_Algorithm_.get ();
    }

    EncryptionMethodType::Algorithm::type& EncryptionMethodType::
    Algorithm ()
    {
      return this->_xsd_Algorithm_.get ();
    }

    void EncryptionMethodType::
    Algorithm (const Algorithm::type& Algorithm)
    {
      this->_xsd_Algorithm_.set (Algorithm);
    }

    void EncryptionMethodType::
    Algorithm (::std::auto_ptr< Algorithm::type > Algorithm)
    {
      this->_xsd_Algorithm_.set (Algorithm);
    }


    // KeySizeType
    // 


    // CipherDataType
    // 

    const CipherDataType::CipherValue::container& CipherDataType::
    CipherValue () const
    {
      return this->_xsd_CipherValue_;
    }

    CipherDataType::CipherValue::container& CipherDataType::
    CipherValue ()
    {
      return this->_xsd_CipherValue_;
    }

    void CipherDataType::
    CipherValue (const CipherValue::type& CipherValue)
    {
      this->_xsd_CipherValue_.set (CipherValue);
    }

    void CipherDataType::
    CipherValue (const CipherValue::container& CipherValue)
    {
      this->_xsd_CipherValue_ = CipherValue;
    }

    void CipherDataType::
    CipherValue (::std::auto_ptr< CipherValue::type > CipherValue)
    {
      this->_xsd_CipherValue_.set (CipherValue);
    }

    const CipherDataType::CipherReference::container& CipherDataType::
    CipherReference () const
    {
      return this->_xsd_CipherReference_;
    }

    CipherDataType::CipherReference::container& CipherDataType::
    CipherReference ()
    {
      return this->_xsd_CipherReference_;
    }

    void CipherDataType::
    CipherReference (const CipherReference::type& CipherReference)
    {
      this->_xsd_CipherReference_.set (CipherReference);
    }

    void CipherDataType::
    CipherReference (const CipherReference::container& CipherReference)
    {
      this->_xsd_CipherReference_ = CipherReference;
    }

    void CipherDataType::
    CipherReference (::std::auto_ptr< CipherReference::type > CipherReference)
    {
      this->_xsd_CipherReference_.set (CipherReference);
    }


    // CipherReferenceType
    // 

    const CipherReferenceType::Transforms::container& CipherReferenceType::
    Transforms () const
    {
      return this->_xsd_Transforms_;
    }

    CipherReferenceType::Transforms::container& CipherReferenceType::
    Transforms ()
    {
      return this->_xsd_Transforms_;
    }

    void CipherReferenceType::
    Transforms (const Transforms::type& Transforms)
    {
      this->_xsd_Transforms_.set (Transforms);
    }

    void CipherReferenceType::
    Transforms (const Transforms::container& Transforms)
    {
      this->_xsd_Transforms_ = Transforms;
    }

    void CipherReferenceType::
    Transforms (::std::auto_ptr< Transforms::type > Transforms)
    {
      this->_xsd_Transforms_.set (Transforms);
    }

    const CipherReferenceType::URI::type& CipherReferenceType::
    URI () const
    {
      return this->_xsd_URI_.get ();
    }

    CipherReferenceType::URI::type& CipherReferenceType::
    URI ()
    {
      return this->_xsd_URI_.get ();
    }

    void CipherReferenceType::
    URI (const URI::type& URI)
    {
      this->_xsd_URI_.set (URI);
    }

    void CipherReferenceType::
    URI (::std::auto_ptr< URI::type > URI)
    {
      this->_xsd_URI_.set (URI);
    }


    // TransformsType
    // 

    const TransformsType::Transform::container& TransformsType::
    Transform () const
    {
      return this->_xsd_Transform_;
    }

    TransformsType::Transform::container& TransformsType::
    Transform ()
    {
      return this->_xsd_Transform_;
    }

    void TransformsType::
    Transform (const Transform::container& Transform)
    {
      this->_xsd_Transform_ = Transform;
    }


    // EncryptedDataType
    // 


    // EncryptedKeyType
    // 

    const EncryptedKeyType::ReferenceList::container& EncryptedKeyType::
    ReferenceList () const
    {
      return this->_xsd_ReferenceList_;
    }

    EncryptedKeyType::ReferenceList::container& EncryptedKeyType::
    ReferenceList ()
    {
      return this->_xsd_ReferenceList_;
    }

    void EncryptedKeyType::
    ReferenceList (const ReferenceList::type& ReferenceList)
    {
      this->_xsd_ReferenceList_.set (ReferenceList);
    }

    void EncryptedKeyType::
    ReferenceList (const ReferenceList::container& ReferenceList)
    {
      this->_xsd_ReferenceList_ = ReferenceList;
    }

    void EncryptedKeyType::
    ReferenceList (::std::auto_ptr< ReferenceList::type > ReferenceList)
    {
      this->_xsd_ReferenceList_.set (ReferenceList);
    }

    const EncryptedKeyType::CarriedKeyName::container& EncryptedKeyType::
    CarriedKeyName () const
    {
      return this->_xsd_CarriedKeyName_;
    }

    EncryptedKeyType::CarriedKeyName::container& EncryptedKeyType::
    CarriedKeyName ()
    {
      return this->_xsd_CarriedKeyName_;
    }

    void EncryptedKeyType::
    CarriedKeyName (const CarriedKeyName::type& CarriedKeyName)
    {
      this->_xsd_CarriedKeyName_.set (CarriedKeyName);
    }

    void EncryptedKeyType::
    CarriedKeyName (const CarriedKeyName::container& CarriedKeyName)
    {
      this->_xsd_CarriedKeyName_ = CarriedKeyName;
    }

    void EncryptedKeyType::
    CarriedKeyName (::std::auto_ptr< CarriedKeyName::type > CarriedKeyName)
    {
      this->_xsd_CarriedKeyName_.set (CarriedKeyName);
    }

    const EncryptedKeyType::Recipient::container& EncryptedKeyType::
    Recipient () const
    {
      return this->_xsd_Recipient_;
    }

    EncryptedKeyType::Recipient::container& EncryptedKeyType::
    Recipient ()
    {
      return this->_xsd_Recipient_;
    }

    void EncryptedKeyType::
    Recipient (const Recipient::type& Recipient)
    {
      this->_xsd_Recipient_.set (Recipient);
    }

    void EncryptedKeyType::
    Recipient (const Recipient::container& Recipient)
    {
      this->_xsd_Recipient_ = Recipient;
    }

    void EncryptedKeyType::
    Recipient (::std::auto_ptr< Recipient::type > Recipient)
    {
      this->_xsd_Recipient_.set (Recipient);
    }


    // AgreementMethodType
    // 

    const AgreementMethodType::KA_Nonce::container& AgreementMethodType::
    KA_Nonce () const
    {
      return this->_xsd_KA_Nonce_;
    }

    AgreementMethodType::KA_Nonce::container& AgreementMethodType::
    KA_Nonce ()
    {
      return this->_xsd_KA_Nonce_;
    }

    void AgreementMethodType::
    KA_Nonce (const KA_Nonce::type& KA_Nonce)
    {
      this->_xsd_KA_Nonce_.set (KA_Nonce);
    }

    void AgreementMethodType::
    KA_Nonce (const KA_Nonce::container& KA_Nonce)
    {
      this->_xsd_KA_Nonce_ = KA_Nonce;
    }

    void AgreementMethodType::
    KA_Nonce (::std::auto_ptr< KA_Nonce::type > KA_Nonce)
    {
      this->_xsd_KA_Nonce_.set (KA_Nonce);
    }

    const AgreementMethodType::OriginatorKeyInfo::container& AgreementMethodType::
    OriginatorKeyInfo () const
    {
      return this->_xsd_OriginatorKeyInfo_;
    }

    AgreementMethodType::OriginatorKeyInfo::container& AgreementMethodType::
    OriginatorKeyInfo ()
    {
      return this->_xsd_OriginatorKeyInfo_;
    }

    void AgreementMethodType::
    OriginatorKeyInfo (const OriginatorKeyInfo::type& OriginatorKeyInfo)
    {
      this->_xsd_OriginatorKeyInfo_.set (OriginatorKeyInfo);
    }

    void AgreementMethodType::
    OriginatorKeyInfo (const OriginatorKeyInfo::container& OriginatorKeyInfo)
    {
      this->_xsd_OriginatorKeyInfo_ = OriginatorKeyInfo;
    }

    void AgreementMethodType::
    OriginatorKeyInfo (::std::auto_ptr< OriginatorKeyInfo::type > OriginatorKeyInfo)
    {
      this->_xsd_OriginatorKeyInfo_.set (OriginatorKeyInfo);
    }

    const AgreementMethodType::RecipientKeyInfo::container& AgreementMethodType::
    RecipientKeyInfo () const
    {
      return this->_xsd_RecipientKeyInfo_;
    }

    AgreementMethodType::RecipientKeyInfo::container& AgreementMethodType::
    RecipientKeyInfo ()
    {
      return this->_xsd_RecipientKeyInfo_;
    }

    void AgreementMethodType::
    RecipientKeyInfo (const RecipientKeyInfo::type& RecipientKeyInfo)
    {
      this->_xsd_RecipientKeyInfo_.set (RecipientKeyInfo);
    }

    void AgreementMethodType::
    RecipientKeyInfo (const RecipientKeyInfo::container& RecipientKeyInfo)
    {
      this->_xsd_RecipientKeyInfo_ = RecipientKeyInfo;
    }

    void AgreementMethodType::
    RecipientKeyInfo (::std::auto_ptr< RecipientKeyInfo::type > RecipientKeyInfo)
    {
      this->_xsd_RecipientKeyInfo_.set (RecipientKeyInfo);
    }

    const AgreementMethodType::Algorithm::type& AgreementMethodType::
    Algorithm () const
    {
      return this->_xsd_Algorithm_.get ();
    }

    AgreementMethodType::Algorithm::type& AgreementMethodType::
    Algorithm ()
    {
      return this->_xsd_Algorithm_.get ();
    }

    void AgreementMethodType::
    Algorithm (const Algorithm::type& Algorithm)
    {
      this->_xsd_Algorithm_.set (Algorithm);
    }

    void AgreementMethodType::
    Algorithm (::std::auto_ptr< Algorithm::type > Algorithm)
    {
      this->_xsd_Algorithm_.set (Algorithm);
    }


    // ReferenceType
    // 

    const ReferenceType::URI::type& ReferenceType::
    URI () const
    {
      return this->_xsd_URI_.get ();
    }

    ReferenceType::URI::type& ReferenceType::
    URI ()
    {
      return this->_xsd_URI_.get ();
    }

    void ReferenceType::
    URI (const URI::type& URI)
    {
      this->_xsd_URI_.set (URI);
    }

    void ReferenceType::
    URI (::std::auto_ptr< URI::type > URI)
    {
      this->_xsd_URI_.set (URI);
    }


    // EncryptionPropertiesType
    // 

    const EncryptionPropertiesType::EncryptionProperty::container& EncryptionPropertiesType::
    EncryptionProperty () const
    {
      return this->_xsd_EncryptionProperty_;
    }

    EncryptionPropertiesType::EncryptionProperty::container& EncryptionPropertiesType::
    EncryptionProperty ()
    {
      return this->_xsd_EncryptionProperty_;
    }

    void EncryptionPropertiesType::
    EncryptionProperty (const EncryptionProperty::container& EncryptionProperty)
    {
      this->_xsd_EncryptionProperty_ = EncryptionProperty;
    }

    const EncryptionPropertiesType::Id::container& EncryptionPropertiesType::
    Id () const
    {
      return this->_xsd_Id_;
    }

    EncryptionPropertiesType::Id::container& EncryptionPropertiesType::
    Id ()
    {
      return this->_xsd_Id_;
    }

    void EncryptionPropertiesType::
    Id (const Id::type& Id)
    {
      this->_xsd_Id_.set (Id);
    }

    void EncryptionPropertiesType::
    Id (const Id::container& Id)
    {
      this->_xsd_Id_ = Id;
    }

    void EncryptionPropertiesType::
    Id (::std::auto_ptr< Id::type > Id)
    {
      this->_xsd_Id_.set (Id);
    }


    // EncryptionPropertyType
    // 

    const EncryptionPropertyType::Target::container& EncryptionPropertyType::
    Target () const
    {
      return this->_xsd_Target_;
    }

    EncryptionPropertyType::Target::container& EncryptionPropertyType::
    Target ()
    {
      return this->_xsd_Target_;
    }

    void EncryptionPropertyType::
    Target (const Target::type& Target)
    {
      this->_xsd_Target_.set (Target);
    }

    void EncryptionPropertyType::
    Target (const Target::container& Target)
    {
      this->_xsd_Target_ = Target;
    }

    void EncryptionPropertyType::
    Target (::std::auto_ptr< Target::type > Target)
    {
      this->_xsd_Target_.set (Target);
    }

    const EncryptionPropertyType::Id::container& EncryptionPropertyType::
    Id () const
    {
      return this->_xsd_Id_;
    }

    EncryptionPropertyType::Id::container& EncryptionPropertyType::
    Id ()
    {
      return this->_xsd_Id_;
    }

    void EncryptionPropertyType::
    Id (const Id::type& Id)
    {
      this->_xsd_Id_.set (Id);
    }

    void EncryptionPropertyType::
    Id (const Id::container& Id)
    {
      this->_xsd_Id_ = Id;
    }

    void EncryptionPropertyType::
    Id (::std::auto_ptr< Id::type > Id)
    {
      this->_xsd_Id_.set (Id);
    }


    // ReferenceList
    // 

    const ReferenceList::DataReference::container& ReferenceList::
    DataReference () const
    {
      return this->_xsd_DataReference_;
    }

    ReferenceList::DataReference::container& ReferenceList::
    DataReference ()
    {
      return this->_xsd_DataReference_;
    }

    void ReferenceList::
    DataReference (const DataReference::container& DataReference)
    {
      this->_xsd_DataReference_ = DataReference;
    }

    const ReferenceList::KeyReference::container& ReferenceList::
    KeyReference () const
    {
      return this->_xsd_KeyReference_;
    }

    ReferenceList::KeyReference::container& ReferenceList::
    KeyReference ()
    {
      return this->_xsd_KeyReference_;
    }

    void ReferenceList::
    KeyReference (const KeyReference::container& KeyReference)
    {
      this->_xsd_KeyReference_ = KeyReference;
    }
  }
}

#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/parser.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_factory_plate< 0, wchar_t >
  type_factory_plate_init;
}

namespace w3
{
  namespace xmlenc
  {
    // EncryptedType
    //

    EncryptedType::
    EncryptedType ()
    : ::xml_schema::type (),
    _xsd_EncryptionMethod_ (::xml_schema::flags (), this),
    _xsd_KeyInfo_ (::xml_schema::flags (), this),
    _xsd_CipherData_ (::xml_schema::flags (), this),
    _xsd_EncryptionProperties_ (::xml_schema::flags (), this),
    _xsd_Id_ (::xml_schema::flags (), this),
    _xsd_Type_ (::xml_schema::flags (), this),
    _xsd_MimeType_ (::xml_schema::flags (), this),
    _xsd_Encoding_ (::xml_schema::flags (), this)
    {
    }

    EncryptedType::
    EncryptedType (const CipherData::type& _xsd_CipherData)
    : ::xml_schema::type (),
    _xsd_EncryptionMethod_ (::xml_schema::flags (), this),
    _xsd_KeyInfo_ (::xml_schema::flags (), this),
    _xsd_CipherData_ (_xsd_CipherData,
                      ::xml_schema::flags (),
                      this),
    _xsd_EncryptionProperties_ (::xml_schema::flags (), this),
    _xsd_Id_ (::xml_schema::flags (), this),
    _xsd_Type_ (::xml_schema::flags (), this),
    _xsd_MimeType_ (::xml_schema::flags (), this),
    _xsd_Encoding_ (::xml_schema::flags (), this)
    {
    }

    EncryptedType::
    EncryptedType (const EncryptedType& _xsd_EncryptedType,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_EncryptedType, f, c),
    _xsd_EncryptionMethod_ (_xsd_EncryptedType._xsd_EncryptionMethod_,
                            f | ::xml_schema::flags::not_root,
                            this),
    _xsd_KeyInfo_ (_xsd_EncryptedType._xsd_KeyInfo_,
                   f | ::xml_schema::flags::not_root,
                   this),
    _xsd_CipherData_ (_xsd_EncryptedType._xsd_CipherData_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_EncryptionProperties_ (_xsd_EncryptedType._xsd_EncryptionProperties_,
                                f | ::xml_schema::flags::not_root,
                                this),
    _xsd_Id_ (_xsd_EncryptedType._xsd_Id_,
              f | ::xml_schema::flags::not_root,
              this),
    _xsd_Type_ (_xsd_EncryptedType._xsd_Type_,
                f | ::xml_schema::flags::not_root,
                this),
    _xsd_MimeType_ (_xsd_EncryptedType._xsd_MimeType_,
                    f | ::xml_schema::flags::not_root,
                    this),
    _xsd_Encoding_ (_xsd_EncryptedType._xsd_Encoding_,
                    f | ::xml_schema::flags::not_root,
                    this)
    {
    }

    EncryptedType::
    EncryptedType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_EncryptionMethod_ (f | ::xml_schema::flags::not_root, this),
    _xsd_KeyInfo_ (f | ::xml_schema::flags::not_root, this),
    _xsd_CipherData_ (f | ::xml_schema::flags::not_root, this),
    _xsd_EncryptionProperties_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Id_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Type_ (f | ::xml_schema::flags::not_root, this),
    _xsd_MimeType_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Encoding_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void EncryptedType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // EncryptionMethod
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< EncryptionMethod::type > r (
            tfm.create< EncryptionMethod::type > (
              L"EncryptionMethod",
              L"http://www.w3.org/2001/04/xmlenc#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->EncryptionMethod ())
              continue;
            this->EncryptionMethod (r);
            continue;
          }
        }

        // KeyInfo
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< KeyInfo::type > r (
            tfm.create< KeyInfo::type > (
              L"KeyInfo",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->KeyInfo ())
              continue;
            this->KeyInfo (r);
            continue;
          }
        }

        // CipherData
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< CipherData::type > r (
            tfm.create< CipherData::type > (
              L"CipherData",
              L"http://www.w3.org/2001/04/xmlenc#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_CipherData_.present ())
              continue;
            this->CipherData (r);
            continue;
          }
        }

        // EncryptionProperties
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< EncryptionProperties::type > r (
            tfm.create< EncryptionProperties::type > (
              L"EncryptionProperties",
              L"http://www.w3.org/2001/04/xmlenc#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->EncryptionProperties ())
              continue;
            this->EncryptionProperties (r);
            continue;
          }
        }
      }

      if (!_xsd_CipherData_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"CipherData",
          L"http://www.w3.org/2001/04/xmlenc#");
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Id" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Id::type > r (
            Id::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Id (r);
          continue;
        }

        if (a.name () == L"Type" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Type::type > r (
            Type::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Type (r);
          continue;
        }

        if (a.name () == L"MimeType" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< MimeType::type > r (
            MimeType::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->MimeType (r);
          continue;
        }

        if (a.name () == L"Encoding" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Encoding::type > r (
            Encoding::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Encoding (r);
          continue;
        }
      }
    }

    EncryptedType* EncryptedType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new EncryptedType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, EncryptedType >
    _xsd_EncryptedType_type_factory_init (
      L"EncryptedType http://www.w3.org/2001/04/xmlenc#");


    // EncryptionMethodType
    //

    EncryptionMethodType::
    EncryptionMethodType ()
    : ::xml_schema::type (),
    _xsd_KeySize_ (::xml_schema::flags (), this),
    _xsd_OAEPparams_ (::xml_schema::flags (), this),
    _xsd_Algorithm_ (::xml_schema::flags (), this)
    {
    }

    EncryptionMethodType::
    EncryptionMethodType (const Algorithm::type& _xsd_Algorithm)
    : ::xml_schema::type (),
    _xsd_KeySize_ (::xml_schema::flags (), this),
    _xsd_OAEPparams_ (::xml_schema::flags (), this),
    _xsd_Algorithm_ (_xsd_Algorithm,
                     ::xml_schema::flags (),
                     this)
    {
    }

    EncryptionMethodType::
    EncryptionMethodType (const EncryptionMethodType& _xsd_EncryptionMethodType,
                          ::xml_schema::flags f,
                          ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_EncryptionMethodType, f, c),
    _xsd_KeySize_ (_xsd_EncryptionMethodType._xsd_KeySize_,
                   f | ::xml_schema::flags::not_root,
                   this),
    _xsd_OAEPparams_ (_xsd_EncryptionMethodType._xsd_OAEPparams_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_Algorithm_ (_xsd_EncryptionMethodType._xsd_Algorithm_,
                     f | ::xml_schema::flags::not_root,
                     this)
    {
    }

    EncryptionMethodType::
    EncryptionMethodType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_KeySize_ (f | ::xml_schema::flags::not_root, this),
    _xsd_OAEPparams_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Algorithm_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void EncryptionMethodType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // KeySize
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< KeySize::type > r (
            tfm.create< KeySize::type > (
              L"KeySize",
              L"http://www.w3.org/2001/04/xmlenc#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->KeySize ())
              continue;
            this->KeySize (r);
            continue;
          }
        }

        // OAEPparams
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< OAEPparams::type > r (
            tfm.create< OAEPparams::type > (
              L"OAEPparams",
              L"http://www.w3.org/2001/04/xmlenc#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->OAEPparams ())
              continue;
            this->OAEPparams (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Algorithm" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Algorithm::type > r (
            Algorithm::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Algorithm (r);
          continue;
        }
      }

      if (!_xsd_Algorithm_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Algorithm",
          L"");
      }
    }

    EncryptionMethodType* EncryptionMethodType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new EncryptionMethodType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, EncryptionMethodType >
    _xsd_EncryptionMethodType_type_factory_init (
      L"EncryptionMethodType http://www.w3.org/2001/04/xmlenc#");


    // KeySizeType
    //

    KeySizeType::
    KeySizeType ()
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type > ()
    {
    }

    KeySizeType::
    KeySizeType (const _xsd_KeySizeType::base_& _xsd_KeySizeType)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type > (_xsd_KeySizeType)
    {
    }

    KeySizeType::
    KeySizeType (const KeySizeType& _xsd_KeySizeType,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type > (_xsd_KeySizeType, f, c)
    {
    }

    KeySizeType::
    KeySizeType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type > (e, f, c)
    {
    }

    KeySizeType::
    KeySizeType (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type > (a, f, c)
    {
    }

    KeySizeType::
    KeySizeType (const ::std::basic_string< wchar_t >& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type > (s, e, f, c)
    {
    }

    KeySizeType* KeySizeType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new KeySizeType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, KeySizeType >
    _xsd_KeySizeType_type_factory_init (
      L"KeySizeType http://www.w3.org/2001/04/xmlenc#");


    // CipherDataType
    //

    CipherDataType::
    CipherDataType ()
    : ::xml_schema::type (),
    _xsd_CipherValue_ (::xml_schema::flags (), this),
    _xsd_CipherReference_ (::xml_schema::flags (), this)
    {
    }

    CipherDataType::
    CipherDataType (const CipherDataType& _xsd_CipherDataType,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_CipherDataType, f, c),
    _xsd_CipherValue_ (_xsd_CipherDataType._xsd_CipherValue_,
                       f | ::xml_schema::flags::not_root,
                       this),
    _xsd_CipherReference_ (_xsd_CipherDataType._xsd_CipherReference_,
                           f | ::xml_schema::flags::not_root,
                           this)
    {
    }

    CipherDataType::
    CipherDataType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_CipherValue_ (f | ::xml_schema::flags::not_root, this),
    _xsd_CipherReference_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void CipherDataType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // CipherValue
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< CipherValue::type > r (
            tfm.create< CipherValue::type > (
              L"CipherValue",
              L"http://www.w3.org/2001/04/xmlenc#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->CipherValue ())
              continue;
            this->CipherValue (r);
            continue;
          }
        }

        // CipherReference
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< CipherReference::type > r (
            tfm.create< CipherReference::type > (
              L"CipherReference",
              L"http://www.w3.org/2001/04/xmlenc#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->CipherReference ())
              continue;
            this->CipherReference (r);
            continue;
          }
        }
      }
    }

    CipherDataType* CipherDataType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new CipherDataType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CipherDataType >
    _xsd_CipherDataType_type_factory_init (
      L"CipherDataType http://www.w3.org/2001/04/xmlenc#");


    // CipherReferenceType
    //

    CipherReferenceType::
    CipherReferenceType ()
    : ::xml_schema::type (),
    _xsd_Transforms_ (::xml_schema::flags (), this),
    _xsd_URI_ (::xml_schema::flags (), this)
    {
    }

    CipherReferenceType::
    CipherReferenceType (const URI::type& _xsd_URI)
    : ::xml_schema::type (),
    _xsd_Transforms_ (::xml_schema::flags (), this),
    _xsd_URI_ (_xsd_URI,
               ::xml_schema::flags (),
               this)
    {
    }

    CipherReferenceType::
    CipherReferenceType (const CipherReferenceType& _xsd_CipherReferenceType,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_CipherReferenceType, f, c),
    _xsd_Transforms_ (_xsd_CipherReferenceType._xsd_Transforms_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_URI_ (_xsd_CipherReferenceType._xsd_URI_,
               f | ::xml_schema::flags::not_root,
               this)
    {
    }

    CipherReferenceType::
    CipherReferenceType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Transforms_ (f | ::xml_schema::flags::not_root, this),
    _xsd_URI_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void CipherReferenceType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Transforms
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Transforms::type > r (
            tfm.create< Transforms::type > (
              L"Transforms",
              L"http://www.w3.org/2001/04/xmlenc#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Transforms ())
              continue;
            this->Transforms (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"URI" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< URI::type > r (
            URI::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->URI (r);
          continue;
        }
      }

      if (!_xsd_URI_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"URI",
          L"");
      }
    }

    CipherReferenceType* CipherReferenceType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new CipherReferenceType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CipherReferenceType >
    _xsd_CipherReferenceType_type_factory_init (
      L"CipherReferenceType http://www.w3.org/2001/04/xmlenc#");


    // TransformsType
    //

    TransformsType::
    TransformsType ()
    : ::xml_schema::type (),
    _xsd_Transform_ (::xml_schema::flags (), this)
    {
    }

    TransformsType::
    TransformsType (const TransformsType& _xsd_TransformsType,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_TransformsType, f, c),
    _xsd_Transform_ (_xsd_TransformsType._xsd_Transform_,
                     f | ::xml_schema::flags::not_root,
                     this)
    {
    }

    TransformsType::
    TransformsType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Transform_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void TransformsType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Transform
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Transform::type > r (
            tfm.create< Transform::type > (
              L"Transform",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->Transform ().push_back (r);
            continue;
          }
        }
      }
    }

    TransformsType* TransformsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new TransformsType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, TransformsType >
    _xsd_TransformsType_type_factory_init (
      L"TransformsType http://www.w3.org/2001/04/xmlenc#");


    // EncryptedDataType
    //

    EncryptedDataType::
    EncryptedDataType ()
    : ::w3::xmlenc::EncryptedType ()
    {
    }

    EncryptedDataType::
    EncryptedDataType (const CipherData::type& _xsd_CipherData)
    : ::w3::xmlenc::EncryptedType (_xsd_CipherData)
    {
    }

    EncryptedDataType::
    EncryptedDataType (const EncryptedDataType& _xsd_EncryptedDataType,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
    : ::w3::xmlenc::EncryptedType (_xsd_EncryptedDataType, f, c)
    {
    }

    EncryptedDataType::
    EncryptedDataType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
    : ::w3::xmlenc::EncryptedType (e, f, c)
    {
    }

    EncryptedDataType* EncryptedDataType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new EncryptedDataType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, EncryptedDataType >
    _xsd_EncryptedDataType_type_factory_init (
      L"EncryptedDataType http://www.w3.org/2001/04/xmlenc#");


    // EncryptedKeyType
    //

    EncryptedKeyType::
    EncryptedKeyType ()
    : ::w3::xmlenc::EncryptedType (),
    _xsd_ReferenceList_ (::xml_schema::flags (), this),
    _xsd_CarriedKeyName_ (::xml_schema::flags (), this),
    _xsd_Recipient_ (::xml_schema::flags (), this)
    {
    }

    EncryptedKeyType::
    EncryptedKeyType (const CipherData::type& _xsd_CipherData)
    : ::w3::xmlenc::EncryptedType (_xsd_CipherData),
    _xsd_ReferenceList_ (::xml_schema::flags (), this),
    _xsd_CarriedKeyName_ (::xml_schema::flags (), this),
    _xsd_Recipient_ (::xml_schema::flags (), this)
    {
    }

    EncryptedKeyType::
    EncryptedKeyType (const EncryptedKeyType& _xsd_EncryptedKeyType,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
    : ::w3::xmlenc::EncryptedType (_xsd_EncryptedKeyType, f, c),
    _xsd_ReferenceList_ (_xsd_EncryptedKeyType._xsd_ReferenceList_,
                         f | ::xml_schema::flags::not_root,
                         this),
    _xsd_CarriedKeyName_ (_xsd_EncryptedKeyType._xsd_CarriedKeyName_,
                          f | ::xml_schema::flags::not_root,
                          this),
    _xsd_Recipient_ (_xsd_EncryptedKeyType._xsd_Recipient_,
                     f | ::xml_schema::flags::not_root,
                     this)
    {
    }

    EncryptedKeyType::
    EncryptedKeyType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
    : ::w3::xmlenc::EncryptedType (e, f, c),
    _xsd_ReferenceList_ (f | ::xml_schema::flags::not_root, this),
    _xsd_CarriedKeyName_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Recipient_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void EncryptedKeyType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // ReferenceList
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ReferenceList::type > r (
            tfm.create< ReferenceList::type > (
              L"ReferenceList",
              L"http://www.w3.org/2001/04/xmlenc#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->ReferenceList ())
              continue;
            this->ReferenceList (r);
            continue;
          }
        }

        // CarriedKeyName
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< CarriedKeyName::type > r (
            tfm.create< CarriedKeyName::type > (
              L"CarriedKeyName",
              L"http://www.w3.org/2001/04/xmlenc#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->CarriedKeyName ())
              continue;
            this->CarriedKeyName (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Recipient" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Recipient::type > r (
            Recipient::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Recipient (r);
          continue;
        }
      }
    }

    EncryptedKeyType* EncryptedKeyType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new EncryptedKeyType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, EncryptedKeyType >
    _xsd_EncryptedKeyType_type_factory_init (
      L"EncryptedKeyType http://www.w3.org/2001/04/xmlenc#");


    // AgreementMethodType
    //

    AgreementMethodType::
    AgreementMethodType ()
    : ::xml_schema::type (),
    _xsd_KA_Nonce_ (::xml_schema::flags (), this),
    _xsd_OriginatorKeyInfo_ (::xml_schema::flags (), this),
    _xsd_RecipientKeyInfo_ (::xml_schema::flags (), this),
    _xsd_Algorithm_ (::xml_schema::flags (), this)
    {
    }

    AgreementMethodType::
    AgreementMethodType (const Algorithm::type& _xsd_Algorithm)
    : ::xml_schema::type (),
    _xsd_KA_Nonce_ (::xml_schema::flags (), this),
    _xsd_OriginatorKeyInfo_ (::xml_schema::flags (), this),
    _xsd_RecipientKeyInfo_ (::xml_schema::flags (), this),
    _xsd_Algorithm_ (_xsd_Algorithm,
                     ::xml_schema::flags (),
                     this)
    {
    }

    AgreementMethodType::
    AgreementMethodType (const AgreementMethodType& _xsd_AgreementMethodType,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_AgreementMethodType, f, c),
    _xsd_KA_Nonce_ (_xsd_AgreementMethodType._xsd_KA_Nonce_,
                    f | ::xml_schema::flags::not_root,
                    this),
    _xsd_OriginatorKeyInfo_ (_xsd_AgreementMethodType._xsd_OriginatorKeyInfo_,
                             f | ::xml_schema::flags::not_root,
                             this),
    _xsd_RecipientKeyInfo_ (_xsd_AgreementMethodType._xsd_RecipientKeyInfo_,
                            f | ::xml_schema::flags::not_root,
                            this),
    _xsd_Algorithm_ (_xsd_AgreementMethodType._xsd_Algorithm_,
                     f | ::xml_schema::flags::not_root,
                     this)
    {
    }

    AgreementMethodType::
    AgreementMethodType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_KA_Nonce_ (f | ::xml_schema::flags::not_root, this),
    _xsd_OriginatorKeyInfo_ (f | ::xml_schema::flags::not_root, this),
    _xsd_RecipientKeyInfo_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Algorithm_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void AgreementMethodType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // KA_Nonce
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< KA_Nonce::type > r (
            tfm.create< KA_Nonce::type > (
              L"KA-Nonce",
              L"http://www.w3.org/2001/04/xmlenc#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->KA_Nonce ())
              continue;
            this->KA_Nonce (r);
            continue;
          }
        }

        // OriginatorKeyInfo
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< OriginatorKeyInfo::type > r (
            tfm.create< OriginatorKeyInfo::type > (
              L"OriginatorKeyInfo",
              L"http://www.w3.org/2001/04/xmlenc#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->OriginatorKeyInfo ())
              continue;
            this->OriginatorKeyInfo (r);
            continue;
          }
        }

        // RecipientKeyInfo
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< RecipientKeyInfo::type > r (
            tfm.create< RecipientKeyInfo::type > (
              L"RecipientKeyInfo",
              L"http://www.w3.org/2001/04/xmlenc#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->RecipientKeyInfo ())
              continue;
            this->RecipientKeyInfo (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Algorithm" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Algorithm::type > r (
            Algorithm::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Algorithm (r);
          continue;
        }
      }

      if (!_xsd_Algorithm_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Algorithm",
          L"");
      }
    }

    AgreementMethodType* AgreementMethodType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new AgreementMethodType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AgreementMethodType >
    _xsd_AgreementMethodType_type_factory_init (
      L"AgreementMethodType http://www.w3.org/2001/04/xmlenc#");


    // ReferenceType
    //

    ReferenceType::
    ReferenceType ()
    : ::xml_schema::type (),
    _xsd_URI_ (::xml_schema::flags (), this)
    {
    }

    ReferenceType::
    ReferenceType (const URI::type& _xsd_URI)
    : ::xml_schema::type (),
    _xsd_URI_ (_xsd_URI,
               ::xml_schema::flags (),
               this)
    {
    }

    ReferenceType::
    ReferenceType (const ReferenceType& _xsd_ReferenceType,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_ReferenceType, f, c),
    _xsd_URI_ (_xsd_ReferenceType._xsd_URI_,
               f | ::xml_schema::flags::not_root,
               this)
    {
    }

    ReferenceType::
    ReferenceType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_URI_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void ReferenceType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"URI" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< URI::type > r (
            URI::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->URI (r);
          continue;
        }
      }

      if (!_xsd_URI_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"URI",
          L"");
      }
    }

    ReferenceType* ReferenceType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ReferenceType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ReferenceType >
    _xsd_ReferenceType_type_factory_init (
      L"ReferenceType http://www.w3.org/2001/04/xmlenc#");


    // EncryptionPropertiesType
    //

    EncryptionPropertiesType::
    EncryptionPropertiesType ()
    : ::xml_schema::type (),
    _xsd_EncryptionProperty_ (::xml_schema::flags (), this),
    _xsd_Id_ (::xml_schema::flags (), this)
    {
    }

    EncryptionPropertiesType::
    EncryptionPropertiesType (const EncryptionPropertiesType& _xsd_EncryptionPropertiesType,
                              ::xml_schema::flags f,
                              ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_EncryptionPropertiesType, f, c),
    _xsd_EncryptionProperty_ (_xsd_EncryptionPropertiesType._xsd_EncryptionProperty_,
                              f | ::xml_schema::flags::not_root,
                              this),
    _xsd_Id_ (_xsd_EncryptionPropertiesType._xsd_Id_,
              f | ::xml_schema::flags::not_root,
              this)
    {
    }

    EncryptionPropertiesType::
    EncryptionPropertiesType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_EncryptionProperty_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Id_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void EncryptionPropertiesType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // EncryptionProperty
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< EncryptionProperty::type > r (
            tfm.create< EncryptionProperty::type > (
              L"EncryptionProperty",
              L"http://www.w3.org/2001/04/xmlenc#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->EncryptionProperty ().push_back (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Id" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Id::type > r (
            Id::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Id (r);
          continue;
        }
      }
    }

    EncryptionPropertiesType* EncryptionPropertiesType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new EncryptionPropertiesType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, EncryptionPropertiesType >
    _xsd_EncryptionPropertiesType_type_factory_init (
      L"EncryptionPropertiesType http://www.w3.org/2001/04/xmlenc#");


    // EncryptionPropertyType
    //

    EncryptionPropertyType::
    EncryptionPropertyType ()
    : ::xml_schema::type (),
    _xsd_Target_ (::xml_schema::flags (), this),
    _xsd_Id_ (::xml_schema::flags (), this)
    {
    }

    EncryptionPropertyType::
    EncryptionPropertyType (const EncryptionPropertyType& _xsd_EncryptionPropertyType,
                            ::xml_schema::flags f,
                            ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_EncryptionPropertyType, f, c),
    _xsd_Target_ (_xsd_EncryptionPropertyType._xsd_Target_,
                  f | ::xml_schema::flags::not_root,
                  this),
    _xsd_Id_ (_xsd_EncryptionPropertyType._xsd_Id_,
              f | ::xml_schema::flags::not_root,
              this)
    {
    }

    EncryptionPropertyType::
    EncryptionPropertyType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Target_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Id_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void EncryptionPropertyType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Target" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Target::type > r (
            Target::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Target (r);
          continue;
        }

        if (a.name () == L"Id" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Id::type > r (
            Id::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Id (r);
          continue;
        }
      }
    }

    EncryptionPropertyType* EncryptionPropertyType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new EncryptionPropertyType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, EncryptionPropertyType >
    _xsd_EncryptionPropertyType_type_factory_init (
      L"EncryptionPropertyType http://www.w3.org/2001/04/xmlenc#");


    // ReferenceList
    //

    ReferenceList::
    ReferenceList ()
    : ::xml_schema::type (),
    _xsd_DataReference_ (::xml_schema::flags (), this),
    _xsd_KeyReference_ (::xml_schema::flags (), this)
    {
    }

    ReferenceList::
    ReferenceList (const ReferenceList& _xsd_ReferenceList,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_ReferenceList, f, c),
    _xsd_DataReference_ (_xsd_ReferenceList._xsd_DataReference_,
                         f | ::xml_schema::flags::not_root,
                         this),
    _xsd_KeyReference_ (_xsd_ReferenceList._xsd_KeyReference_,
                        f | ::xml_schema::flags::not_root,
                        this)
    {
    }

    ReferenceList::
    ReferenceList (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_DataReference_ (f | ::xml_schema::flags::not_root, this),
    _xsd_KeyReference_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void ReferenceList::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // DataReference
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< DataReference::type > r (
            tfm.create< DataReference::type > (
              L"DataReference",
              L"http://www.w3.org/2001/04/xmlenc#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->DataReference ().push_back (r);
            continue;
          }
        }

        // KeyReference
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< KeyReference::type > r (
            tfm.create< KeyReference::type > (
              L"KeyReference",
              L"http://www.w3.org/2001/04/xmlenc#",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->KeyReference ().push_back (r);
            continue;
          }
        }
      }
    }

    ReferenceList* ReferenceList::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ReferenceList (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ReferenceList >
    _xsd_ReferenceList_type_factory_init (
      L"ReferenceList http://www.w3.org/2001/04/xmlenc#");
  }
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace w3
{
  namespace xmlenc
  {
    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (const ::std::basic_string< wchar_t >& u,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmlenc::CipherData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (const ::std::basic_string< wchar_t >& u,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::CipherData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (const ::std::basic_string< wchar_t >& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::CipherData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (::std::istream& is,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::CipherData (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (::std::istream& is,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::CipherData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::CipherData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::CipherData (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::CipherData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::CipherData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (const ::xercesc::DOMInputSource& i,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmlenc::CipherData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (const ::xercesc::DOMInputSource& i,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::CipherData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (const ::xercesc::DOMInputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::CipherData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmlenc::CipherDataType > r (
        tfm.create< ::w3::xmlenc::CipherDataType > (
          L"CipherData",
          L"http://www.w3.org/2001/04/xmlenc#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"CipherData",
        L"http://www.w3.org/2001/04/xmlenc#");
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (const ::std::basic_string< wchar_t >& u,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmlenc::CipherReference (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (const ::std::basic_string< wchar_t >& u,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::CipherReference (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (const ::std::basic_string< wchar_t >& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::CipherReference (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::CipherReference (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (::std::istream& is,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::CipherReference (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::CipherReference (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::CipherReference (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::CipherReference (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::CipherReference (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (const ::xercesc::DOMInputSource& i,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmlenc::CipherReference (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (const ::xercesc::DOMInputSource& i,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::CipherReference (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (const ::xercesc::DOMInputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::CipherReference (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType > r (
        tfm.create< ::w3::xmlenc::CipherReferenceType > (
          L"CipherReference",
          L"http://www.w3.org/2001/04/xmlenc#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"CipherReference",
        L"http://www.w3.org/2001/04/xmlenc#");
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (const ::std::basic_string< wchar_t >& u,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmlenc::EncryptedData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (const ::std::basic_string< wchar_t >& u,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::EncryptedData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (const ::std::basic_string< wchar_t >& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::EncryptedData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::EncryptedData (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (::std::istream& is,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::EncryptedData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::EncryptedData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (::std::istream& is,
                   const ::std::basic_string< wchar_t >& sid,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::EncryptedData (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (::std::istream& is,
                   const ::std::basic_string< wchar_t >& sid,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::EncryptedData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (::std::istream& is,
                   const ::std::basic_string< wchar_t >& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::EncryptedData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (const ::xercesc::DOMInputSource& i,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmlenc::EncryptedData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (const ::xercesc::DOMInputSource& i,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::EncryptedData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (const ::xercesc::DOMInputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::EncryptedData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType > r (
        tfm.create< ::w3::xmlenc::EncryptedDataType > (
          L"EncryptedData",
          L"http://www.w3.org/2001/04/xmlenc#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"EncryptedData",
        L"http://www.w3.org/2001/04/xmlenc#");
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (const ::std::basic_string< wchar_t >& u,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmlenc::EncryptedKey (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (const ::std::basic_string< wchar_t >& u,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::EncryptedKey (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (const ::std::basic_string< wchar_t >& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::EncryptedKey (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::EncryptedKey (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (::std::istream& is,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::EncryptedKey (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::EncryptedKey (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::EncryptedKey (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::EncryptedKey (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::EncryptedKey (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (const ::xercesc::DOMInputSource& i,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmlenc::EncryptedKey (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (const ::xercesc::DOMInputSource& i,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::EncryptedKey (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (const ::xercesc::DOMInputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::EncryptedKey (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType > r (
        tfm.create< ::w3::xmlenc::EncryptedKeyType > (
          L"EncryptedKey",
          L"http://www.w3.org/2001/04/xmlenc#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"EncryptedKey",
        L"http://www.w3.org/2001/04/xmlenc#");
    }

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (const ::std::basic_string< wchar_t >& u,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmlenc::AgreementMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (const ::std::basic_string< wchar_t >& u,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::AgreementMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (const ::std::basic_string< wchar_t >& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::AgreementMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::AgreementMethod (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (::std::istream& is,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::AgreementMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::AgreementMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::AgreementMethod (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::AgreementMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::AgreementMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (const ::xercesc::DOMInputSource& i,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmlenc::AgreementMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (const ::xercesc::DOMInputSource& i,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::AgreementMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (const ::xercesc::DOMInputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::AgreementMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType > r (
        tfm.create< ::w3::xmlenc::AgreementMethodType > (
          L"AgreementMethod",
          L"http://www.w3.org/2001/04/xmlenc#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"AgreementMethod",
        L"http://www.w3.org/2001/04/xmlenc#");
    }

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (const ::std::basic_string< wchar_t >& u,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmlenc::ReferenceList_ (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (const ::std::basic_string< wchar_t >& u,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::ReferenceList_ (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (const ::std::basic_string< wchar_t >& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::ReferenceList_ (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::ReferenceList_ (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (::std::istream& is,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::ReferenceList_ (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::ReferenceList_ (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (::std::istream& is,
                    const ::std::basic_string< wchar_t >& sid,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::ReferenceList_ (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (::std::istream& is,
                    const ::std::basic_string< wchar_t >& sid,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::ReferenceList_ (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (::std::istream& is,
                    const ::std::basic_string< wchar_t >& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::ReferenceList_ (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (const ::xercesc::DOMInputSource& i,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmlenc::ReferenceList_ (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (const ::xercesc::DOMInputSource& i,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::ReferenceList_ (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (const ::xercesc::DOMInputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::ReferenceList_ (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmlenc::ReferenceList > r (
        tfm.create< ::w3::xmlenc::ReferenceList > (
          L"ReferenceList",
          L"http://www.w3.org/2001/04/xmlenc#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"ReferenceList",
        L"http://www.w3.org/2001/04/xmlenc#");
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (const ::std::basic_string< wchar_t >& u,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmlenc::EncryptionProperties (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (const ::std::basic_string< wchar_t >& u,
                          ::xsd::cxx::xml::error_handler< wchar_t >& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::EncryptionProperties (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (const ::std::basic_string< wchar_t >& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::EncryptionProperties (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::EncryptionProperties (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (::std::istream& is,
                          ::xsd::cxx::xml::error_handler< wchar_t >& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::EncryptionProperties (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::EncryptionProperties (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (::std::istream& is,
                          const ::std::basic_string< wchar_t >& sid,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::EncryptionProperties (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (::std::istream& is,
                          const ::std::basic_string< wchar_t >& sid,
                          ::xsd::cxx::xml::error_handler< wchar_t >& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::EncryptionProperties (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (::std::istream& is,
                          const ::std::basic_string< wchar_t >& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::EncryptionProperties (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (const ::xercesc::DOMInputSource& i,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmlenc::EncryptionProperties (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (const ::xercesc::DOMInputSource& i,
                          ::xsd::cxx::xml::error_handler< wchar_t >& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::EncryptionProperties (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (const ::xercesc::DOMInputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::EncryptionProperties (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType > r (
        tfm.create< ::w3::xmlenc::EncryptionPropertiesType > (
          L"EncryptionProperties",
          L"http://www.w3.org/2001/04/xmlenc#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"EncryptionProperties",
        L"http://www.w3.org/2001/04/xmlenc#");
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (const ::std::basic_string< wchar_t >& u,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmlenc::EncryptionProperty (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (const ::std::basic_string< wchar_t >& u,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::EncryptionProperty (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (const ::std::basic_string< wchar_t >& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::EncryptionProperty (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::EncryptionProperty (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (::std::istream& is,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::EncryptionProperty (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::EncryptionProperty (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (::std::istream& is,
                        const ::std::basic_string< wchar_t >& sid,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::EncryptionProperty (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (::std::istream& is,
                        const ::std::basic_string< wchar_t >& sid,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::EncryptionProperty (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (::std::istream& is,
                        const ::std::basic_string< wchar_t >& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmlenc::EncryptionProperty (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (const ::xercesc::DOMInputSource& i,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::w3::xmlenc::EncryptionProperty (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (const ::xercesc::DOMInputSource& i,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::EncryptionProperty (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (const ::xercesc::DOMInputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::w3::xmlenc::EncryptionProperty (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType > r (
        tfm.create< ::w3::xmlenc::EncryptionPropertyType > (
          L"EncryptionProperty",
          L"http://www.w3.org/2001/04/xmlenc#",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"EncryptionProperty",
        L"http://www.w3.org/2001/04/xmlenc#");
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/serialization.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_serializer_plate< 0, wchar_t >
  type_serializer_plate_init;
}

namespace w3
{
  namespace xmlenc
  {
    void
    operator<< (::xercesc::DOMElement& e,
                const EncryptedType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.EncryptionMethod ())
        {
          tsm.serialize< EncryptedType::EncryptionMethod::type > (
            L"EncryptionMethod",
            L"http://www.w3.org/2001/04/xmlenc#",
            false,
            true,
            e,
            *i.EncryptionMethod ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.KeyInfo ())
        {
          tsm.serialize< EncryptedType::KeyInfo::type > (
            L"KeyInfo",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *i.KeyInfo ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< EncryptedType::CipherData::type > (
          L"CipherData",
          L"http://www.w3.org/2001/04/xmlenc#",
          true,
          true,
          e,
          i.CipherData ());
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.EncryptionProperties ())
        {
          tsm.serialize< EncryptedType::EncryptionProperties::type > (
            L"EncryptionProperties",
            L"http://www.w3.org/2001/04/xmlenc#",
            true,
            true,
            e,
            *i.EncryptionProperties ());
        }
      }

      if (i.Id ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Id",
          e);

        a.dom_attribute () << *i.Id ();
      }

      if (i.Type ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Type",
          e);

        a.dom_attribute () << *i.Type ();
      }

      if (i.MimeType ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"MimeType",
          e);

        a.dom_attribute () << *i.MimeType ();
      }

      if (i.Encoding ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Encoding",
          e);

        a.dom_attribute () << *i.Encoding ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, EncryptedType >
    _xsd_EncryptedType_type_serializer_init (
      L"EncryptedType",
      L"http://www.w3.org/2001/04/xmlenc#");


    void
    operator<< (::xercesc::DOMElement& e,
                const EncryptionMethodType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.KeySize ())
        {
          tsm.serialize< EncryptionMethodType::KeySize::type > (
            L"KeySize",
            L"http://www.w3.org/2001/04/xmlenc#",
            false,
            true,
            e,
            *i.KeySize ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.OAEPparams ())
        {
          tsm.serialize< EncryptionMethodType::OAEPparams::type > (
            L"OAEPparams",
            L"http://www.w3.org/2001/04/xmlenc#",
            false,
            true,
            e,
            *i.OAEPparams ());
        }
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Algorithm",
          e);

        a.dom_attribute () << i.Algorithm ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, EncryptionMethodType >
    _xsd_EncryptionMethodType_type_serializer_init (
      L"EncryptionMethodType",
      L"http://www.w3.org/2001/04/xmlenc#");


    void
    operator<< (::xercesc::DOMElement& e,
                const KeySizeType& i)
    {
      e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type >& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,
                const KeySizeType& i)
    {
      a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type >& > (i);
    }

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >& l,
                const KeySizeType& i)
    {
      l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type >& > (i);
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, KeySizeType >
    _xsd_KeySizeType_type_serializer_init (
      L"KeySizeType",
      L"http://www.w3.org/2001/04/xmlenc#");


    void
    CipherData (::xercesc::DOMDocument& d,
                const ::w3::xmlenc::CipherDataType& s,
                ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmlenc::CipherDataType > (
        L"CipherData",
        L"http://www.w3.org/2001/04/xmlenc#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    CipherData (const ::w3::xmlenc::CipherDataType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmlenc::CipherDataType > (
            L"CipherData",
            L"http://www.w3.org/2001/04/xmlenc#",
            m,
            s,
            f));
        ::w3::xmlenc::CipherData (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    CipherData (::xercesc::XMLFormatTarget& t,
                const ::w3::xmlenc::CipherDataType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::CipherData (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    CipherData (::xercesc::XMLFormatTarget& t,
                const ::w3::xmlenc::CipherDataType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::CipherData (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    CipherData (::xercesc::XMLFormatTarget& t,
                const ::w3::xmlenc::CipherDataType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::CipherData (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    CipherData (::std::ostream& o,
                const ::w3::xmlenc::CipherDataType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::CipherData (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    CipherData (::std::ostream& o,
                const ::w3::xmlenc::CipherDataType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::CipherData (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    CipherData (::std::ostream& o,
                const ::w3::xmlenc::CipherDataType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::CipherData (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const CipherDataType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.CipherValue ())
        {
          tsm.serialize< CipherDataType::CipherValue::type > (
            L"CipherValue",
            L"http://www.w3.org/2001/04/xmlenc#",
            false,
            true,
            e,
            *i.CipherValue ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.CipherReference ())
        {
          tsm.serialize< CipherDataType::CipherReference::type > (
            L"CipherReference",
            L"http://www.w3.org/2001/04/xmlenc#",
            true,
            true,
            e,
            *i.CipherReference ());
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CipherDataType >
    _xsd_CipherDataType_type_serializer_init (
      L"CipherDataType",
      L"http://www.w3.org/2001/04/xmlenc#");


    void
    CipherReference (::xercesc::DOMDocument& d,
                     const ::w3::xmlenc::CipherReferenceType& s,
                     ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmlenc::CipherReferenceType > (
        L"CipherReference",
        L"http://www.w3.org/2001/04/xmlenc#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    CipherReference (const ::w3::xmlenc::CipherReferenceType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmlenc::CipherReferenceType > (
            L"CipherReference",
            L"http://www.w3.org/2001/04/xmlenc#",
            m,
            s,
            f));
        ::w3::xmlenc::CipherReference (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    CipherReference (::xercesc::XMLFormatTarget& t,
                     const ::w3::xmlenc::CipherReferenceType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::CipherReference (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    CipherReference (::xercesc::XMLFormatTarget& t,
                     const ::w3::xmlenc::CipherReferenceType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::CipherReference (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    CipherReference (::xercesc::XMLFormatTarget& t,
                     const ::w3::xmlenc::CipherReferenceType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::CipherReference (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    CipherReference (::std::ostream& o,
                     const ::w3::xmlenc::CipherReferenceType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::CipherReference (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    CipherReference (::std::ostream& o,
                     const ::w3::xmlenc::CipherReferenceType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::CipherReference (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    CipherReference (::std::ostream& o,
                     const ::w3::xmlenc::CipherReferenceType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::CipherReference (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const CipherReferenceType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Transforms ())
        {
          tsm.serialize< CipherReferenceType::Transforms::type > (
            L"Transforms",
            L"http://www.w3.org/2001/04/xmlenc#",
            false,
            true,
            e,
            *i.Transforms ());
        }
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"URI",
          e);

        a.dom_attribute () << i.URI ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CipherReferenceType >
    _xsd_CipherReferenceType_type_serializer_init (
      L"CipherReferenceType",
      L"http://www.w3.org/2001/04/xmlenc#");


    void
    operator<< (::xercesc::DOMElement& e,
                const TransformsType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (TransformsType::Transform::const_iterator
             b (i.Transform ().begin ()), n (i.Transform ().end ());
             b != n; ++b)
        {
          tsm.serialize< TransformsType::Transform::type > (
            L"Transform",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *b);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, TransformsType >
    _xsd_TransformsType_type_serializer_init (
      L"TransformsType",
      L"http://www.w3.org/2001/04/xmlenc#");


    void
    EncryptedData (::xercesc::DOMDocument& d,
                   const ::w3::xmlenc::EncryptedDataType& s,
                   ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmlenc::EncryptedDataType > (
        L"EncryptedData",
        L"http://www.w3.org/2001/04/xmlenc#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    EncryptedData (const ::w3::xmlenc::EncryptedDataType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmlenc::EncryptedDataType > (
            L"EncryptedData",
            L"http://www.w3.org/2001/04/xmlenc#",
            m,
            s,
            f));
        ::w3::xmlenc::EncryptedData (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    EncryptedData (::xercesc::XMLFormatTarget& t,
                   const ::w3::xmlenc::EncryptedDataType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::EncryptedData (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    EncryptedData (::xercesc::XMLFormatTarget& t,
                   const ::w3::xmlenc::EncryptedDataType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::EncryptedData (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EncryptedData (::xercesc::XMLFormatTarget& t,
                   const ::w3::xmlenc::EncryptedDataType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xercesc::DOMErrorHandler& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::EncryptedData (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EncryptedData (::std::ostream& o,
                   const ::w3::xmlenc::EncryptedDataType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::EncryptedData (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    EncryptedData (::std::ostream& o,
                   const ::w3::xmlenc::EncryptedDataType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::EncryptedData (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EncryptedData (::std::ostream& o,
                   const ::w3::xmlenc::EncryptedDataType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xercesc::DOMErrorHandler& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::EncryptedData (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const EncryptedDataType& i)
    {
      e << static_cast< const ::w3::xmlenc::EncryptedType& > (i);
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, EncryptedDataType >
    _xsd_EncryptedDataType_type_serializer_init (
      L"EncryptedDataType",
      L"http://www.w3.org/2001/04/xmlenc#");


    void
    EncryptedKey (::xercesc::DOMDocument& d,
                  const ::w3::xmlenc::EncryptedKeyType& s,
                  ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmlenc::EncryptedKeyType > (
        L"EncryptedKey",
        L"http://www.w3.org/2001/04/xmlenc#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    EncryptedKey (const ::w3::xmlenc::EncryptedKeyType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmlenc::EncryptedKeyType > (
            L"EncryptedKey",
            L"http://www.w3.org/2001/04/xmlenc#",
            m,
            s,
            f));
        ::w3::xmlenc::EncryptedKey (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    EncryptedKey (::xercesc::XMLFormatTarget& t,
                  const ::w3::xmlenc::EncryptedKeyType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::EncryptedKey (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    EncryptedKey (::xercesc::XMLFormatTarget& t,
                  const ::w3::xmlenc::EncryptedKeyType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::EncryptedKey (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EncryptedKey (::xercesc::XMLFormatTarget& t,
                  const ::w3::xmlenc::EncryptedKeyType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::EncryptedKey (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EncryptedKey (::std::ostream& o,
                  const ::w3::xmlenc::EncryptedKeyType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::EncryptedKey (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    EncryptedKey (::std::ostream& o,
                  const ::w3::xmlenc::EncryptedKeyType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::EncryptedKey (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EncryptedKey (::std::ostream& o,
                  const ::w3::xmlenc::EncryptedKeyType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::EncryptedKey (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const EncryptedKeyType& i)
    {
      e << static_cast< const ::w3::xmlenc::EncryptedType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.ReferenceList ())
        {
          tsm.serialize< EncryptedKeyType::ReferenceList::type > (
            L"ReferenceList",
            L"http://www.w3.org/2001/04/xmlenc#",
            true,
            true,
            e,
            *i.ReferenceList ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.CarriedKeyName ())
        {
          tsm.serialize< EncryptedKeyType::CarriedKeyName::type > (
            L"CarriedKeyName",
            L"http://www.w3.org/2001/04/xmlenc#",
            false,
            true,
            e,
            *i.CarriedKeyName ());
        }
      }

      if (i.Recipient ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Recipient",
          e);

        a.dom_attribute () << *i.Recipient ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, EncryptedKeyType >
    _xsd_EncryptedKeyType_type_serializer_init (
      L"EncryptedKeyType",
      L"http://www.w3.org/2001/04/xmlenc#");


    void
    AgreementMethod (::xercesc::DOMDocument& d,
                     const ::w3::xmlenc::AgreementMethodType& s,
                     ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmlenc::AgreementMethodType > (
        L"AgreementMethod",
        L"http://www.w3.org/2001/04/xmlenc#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AgreementMethod (const ::w3::xmlenc::AgreementMethodType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmlenc::AgreementMethodType > (
            L"AgreementMethod",
            L"http://www.w3.org/2001/04/xmlenc#",
            m,
            s,
            f));
        ::w3::xmlenc::AgreementMethod (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    AgreementMethod (::xercesc::XMLFormatTarget& t,
                     const ::w3::xmlenc::AgreementMethodType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::AgreementMethod (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AgreementMethod (::xercesc::XMLFormatTarget& t,
                     const ::w3::xmlenc::AgreementMethodType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::AgreementMethod (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AgreementMethod (::xercesc::XMLFormatTarget& t,
                     const ::w3::xmlenc::AgreementMethodType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::AgreementMethod (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AgreementMethod (::std::ostream& o,
                     const ::w3::xmlenc::AgreementMethodType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::AgreementMethod (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AgreementMethod (::std::ostream& o,
                     const ::w3::xmlenc::AgreementMethodType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::AgreementMethod (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AgreementMethod (::std::ostream& o,
                     const ::w3::xmlenc::AgreementMethodType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::AgreementMethod (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const AgreementMethodType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.KA_Nonce ())
        {
          tsm.serialize< AgreementMethodType::KA_Nonce::type > (
            L"KA-Nonce",
            L"http://www.w3.org/2001/04/xmlenc#",
            false,
            true,
            e,
            *i.KA_Nonce ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.OriginatorKeyInfo ())
        {
          tsm.serialize< AgreementMethodType::OriginatorKeyInfo::type > (
            L"OriginatorKeyInfo",
            L"http://www.w3.org/2001/04/xmlenc#",
            false,
            true,
            e,
            *i.OriginatorKeyInfo ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.RecipientKeyInfo ())
        {
          tsm.serialize< AgreementMethodType::RecipientKeyInfo::type > (
            L"RecipientKeyInfo",
            L"http://www.w3.org/2001/04/xmlenc#",
            false,
            true,
            e,
            *i.RecipientKeyInfo ());
        }
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Algorithm",
          e);

        a.dom_attribute () << i.Algorithm ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AgreementMethodType >
    _xsd_AgreementMethodType_type_serializer_init (
      L"AgreementMethodType",
      L"http://www.w3.org/2001/04/xmlenc#");


    void
    ReferenceList_ (::xercesc::DOMDocument& d,
                    const ::w3::xmlenc::ReferenceList& s,
                    ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmlenc::ReferenceList > (
        L"ReferenceList",
        L"http://www.w3.org/2001/04/xmlenc#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ReferenceList_ (const ::w3::xmlenc::ReferenceList& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmlenc::ReferenceList > (
            L"ReferenceList",
            L"http://www.w3.org/2001/04/xmlenc#",
            m,
            s,
            f));
        ::w3::xmlenc::ReferenceList_ (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    ReferenceList_ (::xercesc::XMLFormatTarget& t,
                    const ::w3::xmlenc::ReferenceList& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::ReferenceList_ (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ReferenceList_ (::xercesc::XMLFormatTarget& t,
                    const ::w3::xmlenc::ReferenceList& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::ReferenceList_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ReferenceList_ (::xercesc::XMLFormatTarget& t,
                    const ::w3::xmlenc::ReferenceList& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::ReferenceList_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ReferenceList_ (::std::ostream& o,
                    const ::w3::xmlenc::ReferenceList& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::ReferenceList_ (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ReferenceList_ (::std::ostream& o,
                    const ::w3::xmlenc::ReferenceList& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::ReferenceList_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ReferenceList_ (::std::ostream& o,
                    const ::w3::xmlenc::ReferenceList& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::ReferenceList_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ReferenceType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"URI",
          e);

        a.dom_attribute () << i.URI ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ReferenceType >
    _xsd_ReferenceType_type_serializer_init (
      L"ReferenceType",
      L"http://www.w3.org/2001/04/xmlenc#");


    void
    EncryptionProperties (::xercesc::DOMDocument& d,
                          const ::w3::xmlenc::EncryptionPropertiesType& s,
                          ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmlenc::EncryptionPropertiesType > (
        L"EncryptionProperties",
        L"http://www.w3.org/2001/04/xmlenc#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    EncryptionProperties (const ::w3::xmlenc::EncryptionPropertiesType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmlenc::EncryptionPropertiesType > (
            L"EncryptionProperties",
            L"http://www.w3.org/2001/04/xmlenc#",
            m,
            s,
            f));
        ::w3::xmlenc::EncryptionProperties (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    EncryptionProperties (::xercesc::XMLFormatTarget& t,
                          const ::w3::xmlenc::EncryptionPropertiesType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          const ::std::basic_string< wchar_t >& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::EncryptionProperties (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    EncryptionProperties (::xercesc::XMLFormatTarget& t,
                          const ::w3::xmlenc::EncryptionPropertiesType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          ::xsd::cxx::xml::error_handler< wchar_t >& h,
                          const ::std::basic_string< wchar_t >& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::EncryptionProperties (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EncryptionProperties (::xercesc::XMLFormatTarget& t,
                          const ::w3::xmlenc::EncryptionPropertiesType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          ::xercesc::DOMErrorHandler& h,
                          const ::std::basic_string< wchar_t >& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::EncryptionProperties (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EncryptionProperties (::std::ostream& o,
                          const ::w3::xmlenc::EncryptionPropertiesType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          const ::std::basic_string< wchar_t >& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::EncryptionProperties (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    EncryptionProperties (::std::ostream& o,
                          const ::w3::xmlenc::EncryptionPropertiesType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          ::xsd::cxx::xml::error_handler< wchar_t >& h,
                          const ::std::basic_string< wchar_t >& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::EncryptionProperties (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EncryptionProperties (::std::ostream& o,
                          const ::w3::xmlenc::EncryptionPropertiesType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          ::xercesc::DOMErrorHandler& h,
                          const ::std::basic_string< wchar_t >& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::EncryptionProperties (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const EncryptionPropertiesType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (EncryptionPropertiesType::EncryptionProperty::const_iterator
             b (i.EncryptionProperty ().begin ()), n (i.EncryptionProperty ().end ());
             b != n; ++b)
        {
          tsm.serialize< EncryptionPropertiesType::EncryptionProperty::type > (
            L"EncryptionProperty",
            L"http://www.w3.org/2001/04/xmlenc#",
            true,
            true,
            e,
            *b);
        }
      }

      if (i.Id ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Id",
          e);

        a.dom_attribute () << *i.Id ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, EncryptionPropertiesType >
    _xsd_EncryptionPropertiesType_type_serializer_init (
      L"EncryptionPropertiesType",
      L"http://www.w3.org/2001/04/xmlenc#");


    void
    EncryptionProperty (::xercesc::DOMDocument& d,
                        const ::w3::xmlenc::EncryptionPropertyType& s,
                        ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmlenc::EncryptionPropertyType > (
        L"EncryptionProperty",
        L"http://www.w3.org/2001/04/xmlenc#",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    EncryptionProperty (const ::w3::xmlenc::EncryptionPropertyType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmlenc::EncryptionPropertyType > (
            L"EncryptionProperty",
            L"http://www.w3.org/2001/04/xmlenc#",
            m,
            s,
            f));
        ::w3::xmlenc::EncryptionProperty (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    EncryptionProperty (::xercesc::XMLFormatTarget& t,
                        const ::w3::xmlenc::EncryptionPropertyType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::EncryptionProperty (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    EncryptionProperty (::xercesc::XMLFormatTarget& t,
                        const ::w3::xmlenc::EncryptionPropertyType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::EncryptionProperty (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EncryptionProperty (::xercesc::XMLFormatTarget& t,
                        const ::w3::xmlenc::EncryptionPropertyType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xercesc::DOMErrorHandler& h,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::EncryptionProperty (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EncryptionProperty (::std::ostream& o,
                        const ::w3::xmlenc::EncryptionPropertyType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::EncryptionProperty (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    EncryptionProperty (::std::ostream& o,
                        const ::w3::xmlenc::EncryptionPropertyType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::EncryptionProperty (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EncryptionProperty (::std::ostream& o,
                        const ::w3::xmlenc::EncryptionPropertyType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xercesc::DOMErrorHandler& h,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmlenc::EncryptionProperty (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const EncryptionPropertyType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      if (i.Target ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Target",
          e);

        a.dom_attribute () << *i.Target ();
      }

      if (i.Id ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Id",
          e);

        a.dom_attribute () << *i.Id ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, EncryptionPropertyType >
    _xsd_EncryptionPropertyType_type_serializer_init (
      L"EncryptionPropertyType",
      L"http://www.w3.org/2001/04/xmlenc#");


    void
    operator<< (::xercesc::DOMElement& e,
                const ReferenceList& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (ReferenceList::DataReference::const_iterator
             b (i.DataReference ().begin ()), n (i.DataReference ().end ());
             b != n; ++b)
        {
          tsm.serialize< ReferenceList::DataReference::type > (
            L"DataReference",
            L"http://www.w3.org/2001/04/xmlenc#",
            false,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (ReferenceList::KeyReference::const_iterator
             b (i.KeyReference ().begin ()), n (i.KeyReference ().end ());
             b != n; ++b)
        {
          tsm.serialize< ReferenceList::KeyReference::type > (
            L"KeyReference",
            L"http://www.w3.org/2001/04/xmlenc#",
            false,
            true,
            e,
            *b);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ReferenceList >
    _xsd_ReferenceList_type_serializer_init (
      L"ReferenceList",
      L"http://www.w3.org/2001/04/xmlenc#");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

