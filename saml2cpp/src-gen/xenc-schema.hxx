// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

#ifndef XENC_SCHEMA_HXX
#define XENC_SCHEMA_HXX

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 2030100L)
#error XSD runtime version mismatch
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include "xsd/xml-schema.hxx"

// Forward declarations.
//
namespace w3
{
  namespace xmlenc
  {
    class EncryptedType;
    class EncryptionMethodType;
    class KeySizeType;
    class CipherDataType;
    class CipherReferenceType;
    class TransformsType;
    class EncryptedDataType;
    class EncryptedKeyType;
    class AgreementMethodType;
    class ReferenceType;
    class EncryptionPropertiesType;
    class EncryptionPropertyType;
    class ReferenceList;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include "xmldsig-core-schema.hxx"

namespace w3
{
  namespace xmlenc
  {
    class EncryptedType: public ::xml_schema::type
    {
      public:

      struct _xsd_EncryptedType
      {
        typedef ::xml_schema::type base_;
      };

      // EncryptionMethod
      // 
      public:
      struct EncryptionMethod
      {
        typedef ::w3::xmlenc::EncryptionMethodType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const EncryptionMethod::container&
      EncryptionMethod () const;

      EncryptionMethod::container&
      EncryptionMethod ();

      void
      EncryptionMethod (const EncryptionMethod::type&);

      void
      EncryptionMethod (const EncryptionMethod::container&);

      void
      EncryptionMethod (::std::auto_ptr< EncryptionMethod::type >);

      // KeyInfo
      // 
      public:
      struct KeyInfo
      {
        typedef ::w3::xmldsig::KeyInfoType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const KeyInfo::container&
      KeyInfo () const;

      KeyInfo::container&
      KeyInfo ();

      void
      KeyInfo (const KeyInfo::type&);

      void
      KeyInfo (const KeyInfo::container&);

      void
      KeyInfo (::std::auto_ptr< KeyInfo::type >);

      // CipherData
      // 
      public:
      struct CipherData
      {
        typedef ::w3::xmlenc::CipherDataType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const CipherData::type&
      CipherData () const;

      CipherData::type&
      CipherData ();

      void
      CipherData (const CipherData::type&);

      void
      CipherData (::std::auto_ptr< CipherData::type >);

      // EncryptionProperties
      // 
      public:
      struct EncryptionProperties
      {
        typedef ::w3::xmlenc::EncryptionPropertiesType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const EncryptionProperties::container&
      EncryptionProperties () const;

      EncryptionProperties::container&
      EncryptionProperties ();

      void
      EncryptionProperties (const EncryptionProperties::type&);

      void
      EncryptionProperties (const EncryptionProperties::container&);

      void
      EncryptionProperties (::std::auto_ptr< EncryptionProperties::type >);

      // Id
      // 
      public:
      struct Id
      {
        typedef ::xml_schema::id type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Id::container&
      Id () const;

      Id::container&
      Id ();

      void
      Id (const Id::type&);

      void
      Id (const Id::container&);

      void
      Id (::std::auto_ptr< Id::type >);

      // Type
      // 
      public:
      struct Type
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Type::container&
      Type () const;

      Type::container&
      Type ();

      void
      Type (const Type::type&);

      void
      Type (const Type::container&);

      void
      Type (::std::auto_ptr< Type::type >);

      // MimeType
      // 
      public:
      struct MimeType
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const MimeType::container&
      MimeType () const;

      MimeType::container&
      MimeType ();

      void
      MimeType (const MimeType::type&);

      void
      MimeType (const MimeType::container&);

      void
      MimeType (::std::auto_ptr< MimeType::type >);

      // Encoding
      // 
      public:
      struct Encoding
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Encoding::container&
      Encoding () const;

      Encoding::container&
      Encoding ();

      void
      Encoding (const Encoding::type&);

      void
      Encoding (const Encoding::container&);

      void
      Encoding (::std::auto_ptr< Encoding::type >);

      // Constructors.
      //
      public:
      EncryptedType ();

      EncryptedType (const CipherData::type&);

      EncryptedType (const ::xercesc::DOMElement&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      EncryptedType (const EncryptedType&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      virtual EncryptedType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< EncryptionMethod::type > _xsd_EncryptionMethod_;
      ::xsd::cxx::tree::optional< KeyInfo::type > _xsd_KeyInfo_;
      ::xsd::cxx::tree::one< CipherData::type > _xsd_CipherData_;
      ::xsd::cxx::tree::optional< EncryptionProperties::type > _xsd_EncryptionProperties_;
      ::xsd::cxx::tree::optional< Id::type > _xsd_Id_;
      ::xsd::cxx::tree::optional< Type::type > _xsd_Type_;
      ::xsd::cxx::tree::optional< MimeType::type > _xsd_MimeType_;
      ::xsd::cxx::tree::optional< Encoding::type > _xsd_Encoding_;
    };

    class EncryptionMethodType: public ::xml_schema::type
    {
      public:

      struct _xsd_EncryptionMethodType
      {
        typedef ::xml_schema::type base_;
      };

      // KeySize
      // 
      public:
      struct KeySize
      {
        typedef ::w3::xmlenc::KeySizeType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const KeySize::container&
      KeySize () const;

      KeySize::container&
      KeySize ();

      void
      KeySize (const KeySize::type&);

      void
      KeySize (const KeySize::container&);

      void
      KeySize (::std::auto_ptr< KeySize::type >);

      // OAEPparams
      // 
      public:
      struct OAEPparams
      {
        typedef ::xml_schema::base64_binary type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const OAEPparams::container&
      OAEPparams () const;

      OAEPparams::container&
      OAEPparams ();

      void
      OAEPparams (const OAEPparams::type&);

      void
      OAEPparams (const OAEPparams::container&);

      void
      OAEPparams (::std::auto_ptr< OAEPparams::type >);

      // Algorithm
      // 
      public:
      struct Algorithm
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Algorithm::type&
      Algorithm () const;

      Algorithm::type&
      Algorithm ();

      void
      Algorithm (const Algorithm::type&);

      void
      Algorithm (::std::auto_ptr< Algorithm::type >);

      // Constructors.
      //
      public:
      EncryptionMethodType ();

      EncryptionMethodType (const Algorithm::type&);

      EncryptionMethodType (const ::xercesc::DOMElement&,
                            ::xml_schema::flags = 0,
                            ::xml_schema::type* = 0);

      EncryptionMethodType (const EncryptionMethodType&,
                            ::xml_schema::flags = 0,
                            ::xml_schema::type* = 0);

      virtual EncryptionMethodType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< KeySize::type > _xsd_KeySize_;
      ::xsd::cxx::tree::optional< OAEPparams::type > _xsd_OAEPparams_;
      ::xsd::cxx::tree::one< Algorithm::type > _xsd_Algorithm_;
    };

    class KeySizeType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type >
    {
      public:

      struct _xsd_KeySizeType
      {
        typedef ::xml_schema::integer base_;
      };

      // Constructors.
      //
      public:
      KeySizeType ();

      KeySizeType (const _xsd_KeySizeType::base_& );

      KeySizeType (const ::xercesc::DOMElement&,
                   ::xml_schema::flags = 0,
                   ::xml_schema::type* = 0);

      KeySizeType (const ::xercesc::DOMAttr&,
                   ::xml_schema::flags = 0,
                   ::xml_schema::type* = 0);

      KeySizeType (const ::std::basic_string< wchar_t >&,
                   const ::xercesc::DOMElement*,
                   ::xml_schema::flags = 0,
                   ::xml_schema::type* = 0);

      KeySizeType (const KeySizeType&,
                   ::xml_schema::flags = 0,
                   ::xml_schema::type* = 0);

      virtual KeySizeType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;
    };

    class CipherDataType: public ::xml_schema::type
    {
      public:

      struct _xsd_CipherDataType
      {
        typedef ::xml_schema::type base_;
      };

      // CipherValue
      // 
      public:
      struct CipherValue
      {
        typedef ::xml_schema::base64_binary type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const CipherValue::container&
      CipherValue () const;

      CipherValue::container&
      CipherValue ();

      void
      CipherValue (const CipherValue::type&);

      void
      CipherValue (const CipherValue::container&);

      void
      CipherValue (::std::auto_ptr< CipherValue::type >);

      // CipherReference
      // 
      public:
      struct CipherReference
      {
        typedef ::w3::xmlenc::CipherReferenceType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const CipherReference::container&
      CipherReference () const;

      CipherReference::container&
      CipherReference ();

      void
      CipherReference (const CipherReference::type&);

      void
      CipherReference (const CipherReference::container&);

      void
      CipherReference (::std::auto_ptr< CipherReference::type >);

      // Constructors.
      //
      public:
      CipherDataType ();

      CipherDataType (const ::xercesc::DOMElement&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      CipherDataType (const CipherDataType&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      virtual CipherDataType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< CipherValue::type > _xsd_CipherValue_;
      ::xsd::cxx::tree::optional< CipherReference::type > _xsd_CipherReference_;
    };

    class CipherReferenceType: public ::xml_schema::type
    {
      public:

      struct _xsd_CipherReferenceType
      {
        typedef ::xml_schema::type base_;
      };

      // Transforms
      // 
      public:
      struct Transforms
      {
        typedef ::w3::xmlenc::TransformsType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Transforms::container&
      Transforms () const;

      Transforms::container&
      Transforms ();

      void
      Transforms (const Transforms::type&);

      void
      Transforms (const Transforms::container&);

      void
      Transforms (::std::auto_ptr< Transforms::type >);

      // URI
      // 
      public:
      struct URI
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const URI::type&
      URI () const;

      URI::type&
      URI ();

      void
      URI (const URI::type&);

      void
      URI (::std::auto_ptr< URI::type >);

      // Constructors.
      //
      public:
      CipherReferenceType ();

      CipherReferenceType (const URI::type&);

      CipherReferenceType (const ::xercesc::DOMElement&,
                           ::xml_schema::flags = 0,
                           ::xml_schema::type* = 0);

      CipherReferenceType (const CipherReferenceType&,
                           ::xml_schema::flags = 0,
                           ::xml_schema::type* = 0);

      virtual CipherReferenceType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< Transforms::type > _xsd_Transforms_;
      ::xsd::cxx::tree::one< URI::type > _xsd_URI_;
    };

    class TransformsType: public ::xml_schema::type
    {
      public:

      struct _xsd_TransformsType
      {
        typedef ::xml_schema::type base_;
      };

      // Transform
      // 
      public:
      struct Transform
      {
        typedef ::w3::xmldsig::TransformType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Transform::container&
      Transform () const;

      Transform::container&
      Transform ();

      void
      Transform (const Transform::container&);

      // Constructors.
      //
      public:
      TransformsType ();

      TransformsType (const ::xercesc::DOMElement&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      TransformsType (const TransformsType&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      virtual TransformsType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< Transform::type > _xsd_Transform_;
    };

    class EncryptedDataType: public ::w3::xmlenc::EncryptedType
    {
      public:

      struct _xsd_EncryptedDataType
      {
        typedef ::w3::xmlenc::EncryptedType base_;
      };

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_EncryptedDataType::base_::CipherData;
#endif

      // Constructors.
      //
      public:
      EncryptedDataType ();

      EncryptedDataType (const CipherData::type&);

      EncryptedDataType (const ::xercesc::DOMElement&,
                         ::xml_schema::flags = 0,
                         ::xml_schema::type* = 0);

      EncryptedDataType (const EncryptedDataType&,
                         ::xml_schema::flags = 0,
                         ::xml_schema::type* = 0);

      virtual EncryptedDataType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;
    };

    class EncryptedKeyType: public ::w3::xmlenc::EncryptedType
    {
      public:

      struct _xsd_EncryptedKeyType
      {
        typedef ::w3::xmlenc::EncryptedType base_;
      };

      // ReferenceList
      // 
      public:
      struct ReferenceList
      {
        typedef ::w3::xmlenc::ReferenceList type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const ReferenceList::container&
      ReferenceList () const;

      ReferenceList::container&
      ReferenceList ();

      void
      ReferenceList (const ReferenceList::type&);

      void
      ReferenceList (const ReferenceList::container&);

      void
      ReferenceList (::std::auto_ptr< ReferenceList::type >);

      // CarriedKeyName
      // 
      public:
      struct CarriedKeyName
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const CarriedKeyName::container&
      CarriedKeyName () const;

      CarriedKeyName::container&
      CarriedKeyName ();

      void
      CarriedKeyName (const CarriedKeyName::type&);

      void
      CarriedKeyName (const CarriedKeyName::container&);

      void
      CarriedKeyName (::std::auto_ptr< CarriedKeyName::type >);

      // Recipient
      // 
      public:
      struct Recipient
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Recipient::container&
      Recipient () const;

      Recipient::container&
      Recipient ();

      void
      Recipient (const Recipient::type&);

      void
      Recipient (const Recipient::container&);

      void
      Recipient (::std::auto_ptr< Recipient::type >);

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_EncryptedKeyType::base_::CipherData;
#endif

      // Constructors.
      //
      public:
      EncryptedKeyType ();

      EncryptedKeyType (const CipherData::type&);

      EncryptedKeyType (const ::xercesc::DOMElement&,
                        ::xml_schema::flags = 0,
                        ::xml_schema::type* = 0);

      EncryptedKeyType (const EncryptedKeyType&,
                        ::xml_schema::flags = 0,
                        ::xml_schema::type* = 0);

      virtual EncryptedKeyType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< ReferenceList::type > _xsd_ReferenceList_;
      ::xsd::cxx::tree::optional< CarriedKeyName::type > _xsd_CarriedKeyName_;
      ::xsd::cxx::tree::optional< Recipient::type > _xsd_Recipient_;
    };

    class AgreementMethodType: public ::xml_schema::type
    {
      public:

      struct _xsd_AgreementMethodType
      {
        typedef ::xml_schema::type base_;
      };

      // KA-Nonce
      // 
      public:
      struct KA_Nonce
      {
        typedef ::xml_schema::base64_binary type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const KA_Nonce::container&
      KA_Nonce () const;

      KA_Nonce::container&
      KA_Nonce ();

      void
      KA_Nonce (const KA_Nonce::type&);

      void
      KA_Nonce (const KA_Nonce::container&);

      void
      KA_Nonce (::std::auto_ptr< KA_Nonce::type >);

      // OriginatorKeyInfo
      // 
      public:
      struct OriginatorKeyInfo
      {
        typedef ::w3::xmldsig::KeyInfoType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const OriginatorKeyInfo::container&
      OriginatorKeyInfo () const;

      OriginatorKeyInfo::container&
      OriginatorKeyInfo ();

      void
      OriginatorKeyInfo (const OriginatorKeyInfo::type&);

      void
      OriginatorKeyInfo (const OriginatorKeyInfo::container&);

      void
      OriginatorKeyInfo (::std::auto_ptr< OriginatorKeyInfo::type >);

      // RecipientKeyInfo
      // 
      public:
      struct RecipientKeyInfo
      {
        typedef ::w3::xmldsig::KeyInfoType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const RecipientKeyInfo::container&
      RecipientKeyInfo () const;

      RecipientKeyInfo::container&
      RecipientKeyInfo ();

      void
      RecipientKeyInfo (const RecipientKeyInfo::type&);

      void
      RecipientKeyInfo (const RecipientKeyInfo::container&);

      void
      RecipientKeyInfo (::std::auto_ptr< RecipientKeyInfo::type >);

      // Algorithm
      // 
      public:
      struct Algorithm
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Algorithm::type&
      Algorithm () const;

      Algorithm::type&
      Algorithm ();

      void
      Algorithm (const Algorithm::type&);

      void
      Algorithm (::std::auto_ptr< Algorithm::type >);

      // Constructors.
      //
      public:
      AgreementMethodType ();

      AgreementMethodType (const Algorithm::type&);

      AgreementMethodType (const ::xercesc::DOMElement&,
                           ::xml_schema::flags = 0,
                           ::xml_schema::type* = 0);

      AgreementMethodType (const AgreementMethodType&,
                           ::xml_schema::flags = 0,
                           ::xml_schema::type* = 0);

      virtual AgreementMethodType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< KA_Nonce::type > _xsd_KA_Nonce_;
      ::xsd::cxx::tree::optional< OriginatorKeyInfo::type > _xsd_OriginatorKeyInfo_;
      ::xsd::cxx::tree::optional< RecipientKeyInfo::type > _xsd_RecipientKeyInfo_;
      ::xsd::cxx::tree::one< Algorithm::type > _xsd_Algorithm_;
    };

    class ReferenceType: public ::xml_schema::type
    {
      public:

      struct _xsd_ReferenceType
      {
        typedef ::xml_schema::type base_;
      };

      // URI
      // 
      public:
      struct URI
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const URI::type&
      URI () const;

      URI::type&
      URI ();

      void
      URI (const URI::type&);

      void
      URI (::std::auto_ptr< URI::type >);

      // Constructors.
      //
      public:
      ReferenceType ();

      ReferenceType (const URI::type&);

      ReferenceType (const ::xercesc::DOMElement&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      ReferenceType (const ReferenceType&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      virtual ReferenceType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< URI::type > _xsd_URI_;
    };

    class EncryptionPropertiesType: public ::xml_schema::type
    {
      public:

      struct _xsd_EncryptionPropertiesType
      {
        typedef ::xml_schema::type base_;
      };

      // EncryptionProperty
      // 
      public:
      struct EncryptionProperty
      {
        typedef ::w3::xmlenc::EncryptionPropertyType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const EncryptionProperty::container&
      EncryptionProperty () const;

      EncryptionProperty::container&
      EncryptionProperty ();

      void
      EncryptionProperty (const EncryptionProperty::container&);

      // Id
      // 
      public:
      struct Id
      {
        typedef ::xml_schema::id type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Id::container&
      Id () const;

      Id::container&
      Id ();

      void
      Id (const Id::type&);

      void
      Id (const Id::container&);

      void
      Id (::std::auto_ptr< Id::type >);

      // Constructors.
      //
      public:
      EncryptionPropertiesType ();

      EncryptionPropertiesType (const ::xercesc::DOMElement&,
                                ::xml_schema::flags = 0,
                                ::xml_schema::type* = 0);

      EncryptionPropertiesType (const EncryptionPropertiesType&,
                                ::xml_schema::flags = 0,
                                ::xml_schema::type* = 0);

      virtual EncryptionPropertiesType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< EncryptionProperty::type > _xsd_EncryptionProperty_;
      ::xsd::cxx::tree::optional< Id::type > _xsd_Id_;
    };

    class EncryptionPropertyType: public ::xml_schema::type
    {
      public:

      struct _xsd_EncryptionPropertyType
      {
        typedef ::xml_schema::type base_;
      };

      // Target
      // 
      public:
      struct Target
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Target::container&
      Target () const;

      Target::container&
      Target ();

      void
      Target (const Target::type&);

      void
      Target (const Target::container&);

      void
      Target (::std::auto_ptr< Target::type >);

      // Id
      // 
      public:
      struct Id
      {
        typedef ::xml_schema::id type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Id::container&
      Id () const;

      Id::container&
      Id ();

      void
      Id (const Id::type&);

      void
      Id (const Id::container&);

      void
      Id (::std::auto_ptr< Id::type >);

      // Constructors.
      //
      public:
      EncryptionPropertyType ();

      EncryptionPropertyType (const ::xercesc::DOMElement&,
                              ::xml_schema::flags = 0,
                              ::xml_schema::type* = 0);

      EncryptionPropertyType (const EncryptionPropertyType&,
                              ::xml_schema::flags = 0,
                              ::xml_schema::type* = 0);

      virtual EncryptionPropertyType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< Target::type > _xsd_Target_;
      ::xsd::cxx::tree::optional< Id::type > _xsd_Id_;
    };

    class ReferenceList: public ::xml_schema::type
    {
      public:

      struct _xsd_ReferenceList
      {
        typedef ::xml_schema::type base_;
      };

      // DataReference
      // 
      public:
      struct DataReference
      {
        typedef ::w3::xmlenc::ReferenceType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const DataReference::container&
      DataReference () const;

      DataReference::container&
      DataReference ();

      void
      DataReference (const DataReference::container&);

      // KeyReference
      // 
      public:
      struct KeyReference
      {
        typedef ::w3::xmlenc::ReferenceType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const KeyReference::container&
      KeyReference () const;

      KeyReference::container&
      KeyReference ();

      void
      KeyReference (const KeyReference::container&);

      // Constructors.
      //
      public:
      ReferenceList ();

      ReferenceList (const ::xercesc::DOMElement&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      ReferenceList (const ReferenceList&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      virtual ReferenceList*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< DataReference::type > _xsd_DataReference_;
      ::xsd::cxx::tree::sequence< KeyReference::type > _xsd_KeyReference_;
    };
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMInputSource.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace w3
{
  namespace xmlenc
  {
    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (const ::std::basic_string< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (const ::std::basic_string< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (const ::std::basic_string< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (::std::istream&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (::std::istream&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (::std::istream&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (const ::xercesc::DOMInputSource&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (const ::xercesc::DOMInputSource&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (const ::xercesc::DOMInputSource&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (const ::xercesc::DOMDocument&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (const ::std::basic_string< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (const ::std::basic_string< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (const ::std::basic_string< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (::std::istream&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (::std::istream&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (::std::istream&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (const ::xercesc::DOMInputSource&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (const ::xercesc::DOMInputSource&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (const ::xercesc::DOMInputSource&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (const ::xercesc::DOMDocument&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (const ::std::basic_string< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (const ::std::basic_string< wchar_t >&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (const ::std::basic_string< wchar_t >&,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (::std::istream&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (::std::istream&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (::std::istream&,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (::std::istream&,
                   const ::std::basic_string< wchar_t >& id,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (::std::istream&,
                   const ::std::basic_string< wchar_t >& id,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (::std::istream&,
                   const ::std::basic_string< wchar_t >& id,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (const ::xercesc::DOMInputSource&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (const ::xercesc::DOMInputSource&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (const ::xercesc::DOMInputSource&,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (const ::xercesc::DOMDocument&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (const ::std::basic_string< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (const ::std::basic_string< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (const ::std::basic_string< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (::std::istream&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (::std::istream&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (::std::istream&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (const ::xercesc::DOMInputSource&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (const ::xercesc::DOMInputSource&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (const ::xercesc::DOMInputSource&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (const ::xercesc::DOMDocument&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (const ::std::basic_string< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (const ::std::basic_string< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (const ::std::basic_string< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (::std::istream&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (::std::istream&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (::std::istream&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (const ::xercesc::DOMInputSource&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (const ::xercesc::DOMInputSource&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (const ::xercesc::DOMInputSource&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (const ::xercesc::DOMDocument&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (const ::std::basic_string< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (const ::std::basic_string< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (const ::std::basic_string< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (::std::istream&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (::std::istream&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (::std::istream&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (const ::xercesc::DOMInputSource&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (const ::xercesc::DOMInputSource&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (const ::xercesc::DOMInputSource&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (const ::xercesc::DOMDocument&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (const ::std::basic_string< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (const ::std::basic_string< wchar_t >&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (const ::std::basic_string< wchar_t >&,
                          ::xercesc::DOMErrorHandler&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (::std::istream&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (::std::istream&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (::std::istream&,
                          ::xercesc::DOMErrorHandler&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (::std::istream&,
                          const ::std::basic_string< wchar_t >& id,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (::std::istream&,
                          const ::std::basic_string< wchar_t >& id,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (::std::istream&,
                          const ::std::basic_string< wchar_t >& id,
                          ::xercesc::DOMErrorHandler&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (const ::xercesc::DOMInputSource&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (const ::xercesc::DOMInputSource&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (const ::xercesc::DOMInputSource&,
                          ::xercesc::DOMErrorHandler&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (const ::xercesc::DOMDocument&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (const ::std::basic_string< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (const ::std::basic_string< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (const ::std::basic_string< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (::std::istream&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (::std::istream&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (::std::istream&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (const ::xercesc::DOMInputSource&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (const ::xercesc::DOMInputSource&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (const ::xercesc::DOMInputSource&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (const ::xercesc::DOMDocument&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());
  }
}

#include <iosfwd> // std::ostream&

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace w3
{
  namespace xmlenc
  {
    void
    operator<< (::xercesc::DOMElement&,
                const EncryptedType&);

    void
    operator<< (::xercesc::DOMElement&,
                const EncryptionMethodType&);

    void
    operator<< (::xercesc::DOMElement&,
                const KeySizeType&);

    void
    operator<< (::xercesc::DOMAttr&,
                const KeySizeType&);

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                const KeySizeType&);

    // Serialize to an existing DOM instance.
    //
    void
    CipherData (::xercesc::DOMDocument&,
                const ::w3::xmlenc::CipherDataType&,
                ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    CipherData (const ::w3::xmlenc::CipherDataType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    CipherData (::xercesc::XMLFormatTarget&,
                const ::w3::xmlenc::CipherDataType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    CipherData (::xercesc::XMLFormatTarget&,
                const ::w3::xmlenc::CipherDataType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);

    void
    CipherData (::xercesc::XMLFormatTarget&,
                const ::w3::xmlenc::CipherDataType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    CipherData (::std::ostream&,
                const ::w3::xmlenc::CipherDataType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    CipherData (::std::ostream&,
                const ::w3::xmlenc::CipherDataType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);

    void
    CipherData (::std::ostream&,
                const ::w3::xmlenc::CipherDataType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const CipherDataType&);

    // Serialize to an existing DOM instance.
    //
    void
    CipherReference (::xercesc::DOMDocument&,
                     const ::w3::xmlenc::CipherReferenceType&,
                     ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    CipherReference (const ::w3::xmlenc::CipherReferenceType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    CipherReference (::xercesc::XMLFormatTarget&,
                     const ::w3::xmlenc::CipherReferenceType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    CipherReference (::xercesc::XMLFormatTarget&,
                     const ::w3::xmlenc::CipherReferenceType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);

    void
    CipherReference (::xercesc::XMLFormatTarget&,
                     const ::w3::xmlenc::CipherReferenceType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    CipherReference (::std::ostream&,
                     const ::w3::xmlenc::CipherReferenceType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    CipherReference (::std::ostream&,
                     const ::w3::xmlenc::CipherReferenceType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);

    void
    CipherReference (::std::ostream&,
                     const ::w3::xmlenc::CipherReferenceType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const CipherReferenceType&);

    void
    operator<< (::xercesc::DOMElement&,
                const TransformsType&);

    // Serialize to an existing DOM instance.
    //
    void
    EncryptedData (::xercesc::DOMDocument&,
                   const ::w3::xmlenc::EncryptedDataType&,
                   ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    EncryptedData (const ::w3::xmlenc::EncryptedDataType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    EncryptedData (::xercesc::XMLFormatTarget&,
                   const ::w3::xmlenc::EncryptedDataType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    void
    EncryptedData (::xercesc::XMLFormatTarget&,
                   const ::w3::xmlenc::EncryptedDataType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);

    void
    EncryptedData (::xercesc::XMLFormatTarget&,
                   const ::w3::xmlenc::EncryptedDataType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xercesc::DOMErrorHandler&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    EncryptedData (::std::ostream&,
                   const ::w3::xmlenc::EncryptedDataType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    void
    EncryptedData (::std::ostream&,
                   const ::w3::xmlenc::EncryptedDataType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);

    void
    EncryptedData (::std::ostream&,
                   const ::w3::xmlenc::EncryptedDataType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xercesc::DOMErrorHandler&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const EncryptedDataType&);

    // Serialize to an existing DOM instance.
    //
    void
    EncryptedKey (::xercesc::DOMDocument&,
                  const ::w3::xmlenc::EncryptedKeyType&,
                  ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    EncryptedKey (const ::w3::xmlenc::EncryptedKeyType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    EncryptedKey (::xercesc::XMLFormatTarget&,
                  const ::w3::xmlenc::EncryptedKeyType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    EncryptedKey (::xercesc::XMLFormatTarget&,
                  const ::w3::xmlenc::EncryptedKeyType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);

    void
    EncryptedKey (::xercesc::XMLFormatTarget&,
                  const ::w3::xmlenc::EncryptedKeyType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    EncryptedKey (::std::ostream&,
                  const ::w3::xmlenc::EncryptedKeyType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    EncryptedKey (::std::ostream&,
                  const ::w3::xmlenc::EncryptedKeyType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);

    void
    EncryptedKey (::std::ostream&,
                  const ::w3::xmlenc::EncryptedKeyType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const EncryptedKeyType&);

    // Serialize to an existing DOM instance.
    //
    void
    AgreementMethod (::xercesc::DOMDocument&,
                     const ::w3::xmlenc::AgreementMethodType&,
                     ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AgreementMethod (const ::w3::xmlenc::AgreementMethodType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AgreementMethod (::xercesc::XMLFormatTarget&,
                     const ::w3::xmlenc::AgreementMethodType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    AgreementMethod (::xercesc::XMLFormatTarget&,
                     const ::w3::xmlenc::AgreementMethodType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);

    void
    AgreementMethod (::xercesc::XMLFormatTarget&,
                     const ::w3::xmlenc::AgreementMethodType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AgreementMethod (::std::ostream&,
                     const ::w3::xmlenc::AgreementMethodType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    AgreementMethod (::std::ostream&,
                     const ::w3::xmlenc::AgreementMethodType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);

    void
    AgreementMethod (::std::ostream&,
                     const ::w3::xmlenc::AgreementMethodType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const AgreementMethodType&);

    // Serialize to an existing DOM instance.
    //
    void
    ReferenceList_ (::xercesc::DOMDocument&,
                    const ::w3::xmlenc::ReferenceList&,
                    ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ReferenceList_ (const ::w3::xmlenc::ReferenceList&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    ReferenceList_ (::xercesc::XMLFormatTarget&,
                    const ::w3::xmlenc::ReferenceList&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    ReferenceList_ (::xercesc::XMLFormatTarget&,
                    const ::w3::xmlenc::ReferenceList&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);

    void
    ReferenceList_ (::xercesc::XMLFormatTarget&,
                    const ::w3::xmlenc::ReferenceList&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    ReferenceList_ (::std::ostream&,
                    const ::w3::xmlenc::ReferenceList&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    ReferenceList_ (::std::ostream&,
                    const ::w3::xmlenc::ReferenceList&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);

    void
    ReferenceList_ (::std::ostream&,
                    const ::w3::xmlenc::ReferenceList&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ReferenceType&);

    // Serialize to an existing DOM instance.
    //
    void
    EncryptionProperties (::xercesc::DOMDocument&,
                          const ::w3::xmlenc::EncryptionPropertiesType&,
                          ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    EncryptionProperties (const ::w3::xmlenc::EncryptionPropertiesType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    EncryptionProperties (::xercesc::XMLFormatTarget&,
                          const ::w3::xmlenc::EncryptionPropertiesType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);


    void
    EncryptionProperties (::xercesc::XMLFormatTarget&,
                          const ::w3::xmlenc::EncryptionPropertiesType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);

    void
    EncryptionProperties (::xercesc::XMLFormatTarget&,
                          const ::w3::xmlenc::EncryptionPropertiesType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xercesc::DOMErrorHandler&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    EncryptionProperties (::std::ostream&,
                          const ::w3::xmlenc::EncryptionPropertiesType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);


    void
    EncryptionProperties (::std::ostream&,
                          const ::w3::xmlenc::EncryptionPropertiesType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);

    void
    EncryptionProperties (::std::ostream&,
                          const ::w3::xmlenc::EncryptionPropertiesType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xercesc::DOMErrorHandler&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const EncryptionPropertiesType&);

    // Serialize to an existing DOM instance.
    //
    void
    EncryptionProperty (::xercesc::DOMDocument&,
                        const ::w3::xmlenc::EncryptionPropertyType&,
                        ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    EncryptionProperty (const ::w3::xmlenc::EncryptionPropertyType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    EncryptionProperty (::xercesc::XMLFormatTarget&,
                        const ::w3::xmlenc::EncryptionPropertyType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    void
    EncryptionProperty (::xercesc::XMLFormatTarget&,
                        const ::w3::xmlenc::EncryptionPropertyType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);

    void
    EncryptionProperty (::xercesc::XMLFormatTarget&,
                        const ::w3::xmlenc::EncryptionPropertyType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    EncryptionProperty (::std::ostream&,
                        const ::w3::xmlenc::EncryptionPropertyType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    void
    EncryptionProperty (::std::ostream&,
                        const ::w3::xmlenc::EncryptionPropertyType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);

    void
    EncryptionProperty (::std::ostream&,
                        const ::w3::xmlenc::EncryptionPropertyType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const EncryptionPropertyType&);

    void
    operator<< (::xercesc::DOMElement&,
                const ReferenceList&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // XENC_SCHEMA_HXX
