// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "lxacml-schema.hxx"

namespace middleware
{
  namespace lxacmlSchema
  {
    // PolicySetType
    // 

    const PolicySetType::Description::container& PolicySetType::
    Description () const
    {
      return this->_xsd_Description_;
    }

    PolicySetType::Description::container& PolicySetType::
    Description ()
    {
      return this->_xsd_Description_;
    }

    void PolicySetType::
    Description (const Description::type& Description)
    {
      this->_xsd_Description_.set (Description);
    }

    void PolicySetType::
    Description (const Description::container& Description)
    {
      this->_xsd_Description_ = Description;
    }

    void PolicySetType::
    Description (::std::auto_ptr< Description::type > Description)
    {
      this->_xsd_Description_.set (Description);
    }

    const PolicySetType::Policy::container& PolicySetType::
    Policy () const
    {
      return this->_xsd_Policy_;
    }

    PolicySetType::Policy::container& PolicySetType::
    Policy ()
    {
      return this->_xsd_Policy_;
    }

    void PolicySetType::
    Policy (const Policy::container& Policy)
    {
      this->_xsd_Policy_ = Policy;
    }


    // PolicyType
    // 

    const PolicyType::Description::type& PolicyType::
    Description () const
    {
      return this->_xsd_Description_.get ();
    }

    PolicyType::Description::type& PolicyType::
    Description ()
    {
      return this->_xsd_Description_.get ();
    }

    void PolicyType::
    Description (const Description::type& Description)
    {
      this->_xsd_Description_.set (Description);
    }

    void PolicyType::
    Description (::std::auto_ptr< Description::type > Description)
    {
      this->_xsd_Description_.set (Description);
    }

    const PolicyType::Target::type& PolicyType::
    Target () const
    {
      return this->_xsd_Target_.get ();
    }

    PolicyType::Target::type& PolicyType::
    Target ()
    {
      return this->_xsd_Target_.get ();
    }

    void PolicyType::
    Target (const Target::type& Target)
    {
      this->_xsd_Target_.set (Target);
    }

    void PolicyType::
    Target (::std::auto_ptr< Target::type > Target)
    {
      this->_xsd_Target_.set (Target);
    }

    const PolicyType::Rule::container& PolicyType::
    Rule () const
    {
      return this->_xsd_Rule_;
    }

    PolicyType::Rule::container& PolicyType::
    Rule ()
    {
      return this->_xsd_Rule_;
    }

    void PolicyType::
    Rule (const Rule::container& Rule)
    {
      this->_xsd_Rule_ = Rule;
    }

    const PolicyType::PolicyId::type& PolicyType::
    PolicyId () const
    {
      return this->_xsd_PolicyId_.get ();
    }

    PolicyType::PolicyId::type& PolicyType::
    PolicyId ()
    {
      return this->_xsd_PolicyId_.get ();
    }

    void PolicyType::
    PolicyId (const PolicyId::type& PolicyId)
    {
      this->_xsd_PolicyId_.set (PolicyId);
    }

    void PolicyType::
    PolicyId (::std::auto_ptr< PolicyId::type > PolicyId)
    {
      this->_xsd_PolicyId_.set (PolicyId);
    }


    // RuleType
    // 

    const RuleType::Description::type& RuleType::
    Description () const
    {
      return this->_xsd_Description_.get ();
    }

    RuleType::Description::type& RuleType::
    Description ()
    {
      return this->_xsd_Description_.get ();
    }

    void RuleType::
    Description (const Description::type& Description)
    {
      this->_xsd_Description_.set (Description);
    }

    void RuleType::
    Description (::std::auto_ptr< Description::type > Description)
    {
      this->_xsd_Description_.set (Description);
    }

    const RuleType::Target::container& RuleType::
    Target () const
    {
      return this->_xsd_Target_;
    }

    RuleType::Target::container& RuleType::
    Target ()
    {
      return this->_xsd_Target_;
    }

    void RuleType::
    Target (const Target::type& Target)
    {
      this->_xsd_Target_.set (Target);
    }

    void RuleType::
    Target (const Target::container& Target)
    {
      this->_xsd_Target_ = Target;
    }

    void RuleType::
    Target (::std::auto_ptr< Target::type > Target)
    {
      this->_xsd_Target_.set (Target);
    }

    const RuleType::Condition::container& RuleType::
    Condition () const
    {
      return this->_xsd_Condition_;
    }

    RuleType::Condition::container& RuleType::
    Condition ()
    {
      return this->_xsd_Condition_;
    }

    void RuleType::
    Condition (const Condition::type& Condition)
    {
      this->_xsd_Condition_.set (Condition);
    }

    void RuleType::
    Condition (const Condition::container& Condition)
    {
      this->_xsd_Condition_ = Condition;
    }

    void RuleType::
    Condition (::std::auto_ptr< Condition::type > Condition)
    {
      this->_xsd_Condition_.set (Condition);
    }

    const RuleType::RuleId::type& RuleType::
    RuleId () const
    {
      return this->_xsd_RuleId_.get ();
    }

    RuleType::RuleId::type& RuleType::
    RuleId ()
    {
      return this->_xsd_RuleId_.get ();
    }

    void RuleType::
    RuleId (const RuleId::type& RuleId)
    {
      this->_xsd_RuleId_.set (RuleId);
    }

    void RuleType::
    RuleId (::std::auto_ptr< RuleId::type > RuleId)
    {
      this->_xsd_RuleId_.set (RuleId);
    }

    const RuleType::Effect::type& RuleType::
    Effect () const
    {
      return this->_xsd_Effect_.get ();
    }

    RuleType::Effect::type& RuleType::
    Effect ()
    {
      return this->_xsd_Effect_.get ();
    }

    void RuleType::
    Effect (const Effect::type& Effect)
    {
      this->_xsd_Effect_.set (Effect);
    }

    void RuleType::
    Effect (::std::auto_ptr< Effect::type > Effect)
    {
      this->_xsd_Effect_.set (Effect);
    }


    // TargetType
    // 

    const TargetType::Resources::type& TargetType::
    Resources () const
    {
      return this->_xsd_Resources_.get ();
    }

    TargetType::Resources::type& TargetType::
    Resources ()
    {
      return this->_xsd_Resources_.get ();
    }

    void TargetType::
    Resources (const Resources::type& Resources)
    {
      this->_xsd_Resources_.set (Resources);
    }

    void TargetType::
    Resources (::std::auto_ptr< Resources::type > Resources)
    {
      this->_xsd_Resources_.set (Resources);
    }

    const TargetType::Actions::type& TargetType::
    Actions () const
    {
      return this->_xsd_Actions_.get ();
    }

    TargetType::Actions::type& TargetType::
    Actions ()
    {
      return this->_xsd_Actions_.get ();
    }

    void TargetType::
    Actions (const Actions::type& Actions)
    {
      this->_xsd_Actions_.set (Actions);
    }

    void TargetType::
    Actions (::std::auto_ptr< Actions::type > Actions)
    {
      this->_xsd_Actions_.set (Actions);
    }


    // ResourcesType
    // 

    const ResourcesType::Resource::container& ResourcesType::
    Resource () const
    {
      return this->_xsd_Resource_;
    }

    ResourcesType::Resource::container& ResourcesType::
    Resource ()
    {
      return this->_xsd_Resource_;
    }

    void ResourcesType::
    Resource (const Resource::container& Resource)
    {
      this->_xsd_Resource_ = Resource;
    }


    // ActionsType
    // 

    const ActionsType::Action::container& ActionsType::
    Action () const
    {
      return this->_xsd_Action_;
    }

    ActionsType::Action::container& ActionsType::
    Action ()
    {
      return this->_xsd_Action_;
    }

    void ActionsType::
    Action (const Action::container& Action)
    {
      this->_xsd_Action_ = Action;
    }


    // ResourceType
    // 

    const ResourceType::AttributeValue::type& ResourceType::
    AttributeValue () const
    {
      return this->_xsd_AttributeValue_.get ();
    }

    ResourceType::AttributeValue::type& ResourceType::
    AttributeValue ()
    {
      return this->_xsd_AttributeValue_.get ();
    }

    void ResourceType::
    AttributeValue (const AttributeValue::type& AttributeValue)
    {
      this->_xsd_AttributeValue_.set (AttributeValue);
    }

    void ResourceType::
    AttributeValue (::std::auto_ptr< AttributeValue::type > AttributeValue)
    {
      this->_xsd_AttributeValue_.set (AttributeValue);
    }


    // ActionType
    // 

    const ActionType::AttributeValue::type& ActionType::
    AttributeValue () const
    {
      return this->_xsd_AttributeValue_.get ();
    }

    ActionType::AttributeValue::type& ActionType::
    AttributeValue ()
    {
      return this->_xsd_AttributeValue_.get ();
    }

    void ActionType::
    AttributeValue (const AttributeValue::type& AttributeValue)
    {
      this->_xsd_AttributeValue_.set (AttributeValue);
    }

    void ActionType::
    AttributeValue (::std::auto_ptr< AttributeValue::type > AttributeValue)
    {
      this->_xsd_AttributeValue_.set (AttributeValue);
    }


    // ExpressionType
    // 


    // ConditionType
    // 

    const ConditionType::Expression::type& ConditionType::
    Expression () const
    {
      return this->_xsd_Expression_.get ();
    }

    ConditionType::Expression::type& ConditionType::
    Expression ()
    {
      return this->_xsd_Expression_.get ();
    }

    void ConditionType::
    Expression (const Expression::type& Expression)
    {
      this->_xsd_Expression_.set (Expression);
    }

    void ConditionType::
    Expression (::std::auto_ptr< Expression::type > Expression)
    {
      this->_xsd_Expression_.set (Expression);
    }


    // ApplyType
    // 

    const ApplyType::Expression::container& ApplyType::
    Expression () const
    {
      return this->_xsd_Expression_;
    }

    ApplyType::Expression::container& ApplyType::
    Expression ()
    {
      return this->_xsd_Expression_;
    }

    void ApplyType::
    Expression (const Expression::container& Expression)
    {
      this->_xsd_Expression_ = Expression;
    }

    const ApplyType::FunctionId::type& ApplyType::
    FunctionId () const
    {
      return this->_xsd_FunctionId_.get ();
    }

    ApplyType::FunctionId::type& ApplyType::
    FunctionId ()
    {
      return this->_xsd_FunctionId_.get ();
    }

    void ApplyType::
    FunctionId (const FunctionId::type& FunctionId)
    {
      this->_xsd_FunctionId_.set (FunctionId);
    }

    void ApplyType::
    FunctionId (::std::auto_ptr< FunctionId::type > FunctionId)
    {
      this->_xsd_FunctionId_.set (FunctionId);
    }


    // AttributeDesignatorType
    // 

    const AttributeDesignatorType::AttributeId::type& AttributeDesignatorType::
    AttributeId () const
    {
      return this->_xsd_AttributeId_.get ();
    }

    AttributeDesignatorType::AttributeId::type& AttributeDesignatorType::
    AttributeId ()
    {
      return this->_xsd_AttributeId_.get ();
    }

    void AttributeDesignatorType::
    AttributeId (const AttributeId::type& AttributeId)
    {
      this->_xsd_AttributeId_.set (AttributeId);
    }

    void AttributeDesignatorType::
    AttributeId (::std::auto_ptr< AttributeId::type > AttributeId)
    {
      this->_xsd_AttributeId_.set (AttributeId);
    }


    // SubjectAttributeDesignatorType
    // 


    // AttributeValueType
    // 


    // ObligationsType
    // 

    const ObligationsType::Obligation::container& ObligationsType::
    Obligation () const
    {
      return this->_xsd_Obligation_;
    }

    ObligationsType::Obligation::container& ObligationsType::
    Obligation ()
    {
      return this->_xsd_Obligation_;
    }

    void ObligationsType::
    Obligation (const Obligation::container& Obligation)
    {
      this->_xsd_Obligation_ = Obligation;
    }


    // ObligationType
    // 

    const ObligationType::AttributeAssignment::container& ObligationType::
    AttributeAssignment () const
    {
      return this->_xsd_AttributeAssignment_;
    }

    ObligationType::AttributeAssignment::container& ObligationType::
    AttributeAssignment ()
    {
      return this->_xsd_AttributeAssignment_;
    }

    void ObligationType::
    AttributeAssignment (const AttributeAssignment::container& AttributeAssignment)
    {
      this->_xsd_AttributeAssignment_ = AttributeAssignment;
    }

    const ObligationType::ObligationId::type& ObligationType::
    ObligationId () const
    {
      return this->_xsd_ObligationId_.get ();
    }

    ObligationType::ObligationId::type& ObligationType::
    ObligationId ()
    {
      return this->_xsd_ObligationId_.get ();
    }

    void ObligationType::
    ObligationId (const ObligationId::type& ObligationId)
    {
      this->_xsd_ObligationId_.set (ObligationId);
    }

    void ObligationType::
    ObligationId (::std::auto_ptr< ObligationId::type > ObligationId)
    {
      this->_xsd_ObligationId_.set (ObligationId);
    }

    const ObligationType::FulfillOn::type& ObligationType::
    FulfillOn () const
    {
      return this->_xsd_FulfillOn_.get ();
    }

    ObligationType::FulfillOn::type& ObligationType::
    FulfillOn ()
    {
      return this->_xsd_FulfillOn_.get ();
    }

    void ObligationType::
    FulfillOn (const FulfillOn::type& FulfillOn)
    {
      this->_xsd_FulfillOn_.set (FulfillOn);
    }

    void ObligationType::
    FulfillOn (::std::auto_ptr< FulfillOn::type > FulfillOn)
    {
      this->_xsd_FulfillOn_.set (FulfillOn);
    }


    // EffectType
    // 

    EffectType::
    EffectType ()
    : ::xml_schema::string ()
    {
    }

    EffectType::
    EffectType (_xsd_EffectType v)
    : ::xml_schema::string (_xsd_EffectType_literals_[v])
    {
    }

    EffectType::
    EffectType (const ::xml_schema::string& _xsd_EffectType)
    : ::xml_schema::string (_xsd_EffectType)
    {
    }

    EffectType::
    EffectType (const EffectType& v,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    EffectType& EffectType::
    operator= (_xsd_EffectType v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_EffectType_literals_[v]);

      return *this;
    }


    // AttributeAssignmentType
    // 

    const AttributeAssignmentType::AttributeId::type& AttributeAssignmentType::
    AttributeId () const
    {
      return this->_xsd_AttributeId_.get ();
    }

    AttributeAssignmentType::AttributeId::type& AttributeAssignmentType::
    AttributeId ()
    {
      return this->_xsd_AttributeId_.get ();
    }

    void AttributeAssignmentType::
    AttributeId (const AttributeId::type& AttributeId)
    {
      this->_xsd_AttributeId_.set (AttributeId);
    }

    void AttributeAssignmentType::
    AttributeId (::std::auto_ptr< AttributeId::type > AttributeId)
    {
      this->_xsd_AttributeId_.set (AttributeId);
    }
  }
}

#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/parser.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_factory_plate< 0, wchar_t >
  type_factory_plate_init;
}

namespace middleware
{
  namespace lxacmlSchema
  {
    // PolicySetType
    //

    PolicySetType::
    PolicySetType ()
    : ::xml_schema::type (),
    _xsd_Description_ (::xml_schema::flags (), this),
    _xsd_Policy_ (::xml_schema::flags (), this)
    {
    }

    PolicySetType::
    PolicySetType (const PolicySetType& _xsd_PolicySetType,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_PolicySetType, f, c),
    _xsd_Description_ (_xsd_PolicySetType._xsd_Description_,
                       f | ::xml_schema::flags::not_root,
                       this),
    _xsd_Policy_ (_xsd_PolicySetType._xsd_Policy_,
                  f | ::xml_schema::flags::not_root,
                  this)
    {
    }

    PolicySetType::
    PolicySetType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Description_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Policy_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void PolicySetType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Description
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Description::type > r (
            tfm.create< Description::type > (
              L"Description",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Description ())
              continue;
            this->Description (r);
            continue;
          }
        }

        // Policy
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Policy::type > r (
            tfm.create< Policy::type > (
              L"Policy",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->Policy ().push_back (r);
            continue;
          }
        }
      }
    }

    PolicySetType* PolicySetType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new PolicySetType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, PolicySetType >
    _xsd_PolicySetType_type_factory_init (
      L"PolicySetType http://www.qut.com/middleware/lxacmlSchema");


    // PolicyType
    //

    PolicyType::
    PolicyType ()
    : ::xml_schema::type (),
    _xsd_Description_ (::xml_schema::flags (), this),
    _xsd_Target_ (::xml_schema::flags (), this),
    _xsd_Rule_ (::xml_schema::flags (), this),
    _xsd_PolicyId_ (::xml_schema::flags (), this)
    {
    }

    PolicyType::
    PolicyType (const Description::type& _xsd_Description,
                const Target::type& _xsd_Target,
                const PolicyId::type& _xsd_PolicyId)
    : ::xml_schema::type (),
    _xsd_Description_ (_xsd_Description,
                       ::xml_schema::flags (),
                       this),
    _xsd_Target_ (_xsd_Target,
                  ::xml_schema::flags (),
                  this),
    _xsd_Rule_ (::xml_schema::flags (), this),
    _xsd_PolicyId_ (_xsd_PolicyId,
                    ::xml_schema::flags (),
                    this)
    {
    }

    PolicyType::
    PolicyType (const PolicyType& _xsd_PolicyType,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_PolicyType, f, c),
    _xsd_Description_ (_xsd_PolicyType._xsd_Description_,
                       f | ::xml_schema::flags::not_root,
                       this),
    _xsd_Target_ (_xsd_PolicyType._xsd_Target_,
                  f | ::xml_schema::flags::not_root,
                  this),
    _xsd_Rule_ (_xsd_PolicyType._xsd_Rule_,
                f | ::xml_schema::flags::not_root,
                this),
    _xsd_PolicyId_ (_xsd_PolicyType._xsd_PolicyId_,
                    f | ::xml_schema::flags::not_root,
                    this)
    {
    }

    PolicyType::
    PolicyType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Description_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Target_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Rule_ (f | ::xml_schema::flags::not_root, this),
    _xsd_PolicyId_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void PolicyType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Description
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Description::type > r (
            tfm.create< Description::type > (
              L"Description",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_Description_.present ())
              continue;
            this->Description (r);
            continue;
          }
        }

        // Target
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Target::type > r (
            tfm.create< Target::type > (
              L"Target",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_Target_.present ())
              continue;
            this->Target (r);
            continue;
          }
        }

        // Rule
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Rule::type > r (
            tfm.create< Rule::type > (
              L"Rule",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->Rule ().push_back (r);
            continue;
          }
        }
      }

      if (!_xsd_Description_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Description",
          L"http://www.qut.com/middleware/lxacmlSchema");
      }

      if (!_xsd_Target_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Target",
          L"http://www.qut.com/middleware/lxacmlSchema");
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"PolicyId" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< PolicyId::type > r (
            PolicyId::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->PolicyId (r);
          continue;
        }
      }

      if (!_xsd_PolicyId_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"PolicyId",
          L"");
      }
    }

    PolicyType* PolicyType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new PolicyType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, PolicyType >
    _xsd_PolicyType_type_factory_init (
      L"PolicyType http://www.qut.com/middleware/lxacmlSchema");


    // RuleType
    //

    RuleType::
    RuleType ()
    : ::xml_schema::type (),
    _xsd_Description_ (::xml_schema::flags (), this),
    _xsd_Target_ (::xml_schema::flags (), this),
    _xsd_Condition_ (::xml_schema::flags (), this),
    _xsd_RuleId_ (::xml_schema::flags (), this),
    _xsd_Effect_ (::xml_schema::flags (), this)
    {
    }

    RuleType::
    RuleType (const Description::type& _xsd_Description,
              const RuleId::type& _xsd_RuleId,
              const Effect::type& _xsd_Effect)
    : ::xml_schema::type (),
    _xsd_Description_ (_xsd_Description,
                       ::xml_schema::flags (),
                       this),
    _xsd_Target_ (::xml_schema::flags (), this),
    _xsd_Condition_ (::xml_schema::flags (), this),
    _xsd_RuleId_ (_xsd_RuleId,
                  ::xml_schema::flags (),
                  this),
    _xsd_Effect_ (_xsd_Effect,
                  ::xml_schema::flags (),
                  this)
    {
    }

    RuleType::
    RuleType (const RuleType& _xsd_RuleType,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_RuleType, f, c),
    _xsd_Description_ (_xsd_RuleType._xsd_Description_,
                       f | ::xml_schema::flags::not_root,
                       this),
    _xsd_Target_ (_xsd_RuleType._xsd_Target_,
                  f | ::xml_schema::flags::not_root,
                  this),
    _xsd_Condition_ (_xsd_RuleType._xsd_Condition_,
                     f | ::xml_schema::flags::not_root,
                     this),
    _xsd_RuleId_ (_xsd_RuleType._xsd_RuleId_,
                  f | ::xml_schema::flags::not_root,
                  this),
    _xsd_Effect_ (_xsd_RuleType._xsd_Effect_,
                  f | ::xml_schema::flags::not_root,
                  this)
    {
    }

    RuleType::
    RuleType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Description_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Target_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Condition_ (f | ::xml_schema::flags::not_root, this),
    _xsd_RuleId_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Effect_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void RuleType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Description
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Description::type > r (
            tfm.create< Description::type > (
              L"Description",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_Description_.present ())
              continue;
            this->Description (r);
            continue;
          }
        }

        // Target
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Target::type > r (
            tfm.create< Target::type > (
              L"Target",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Target ())
              continue;
            this->Target (r);
            continue;
          }
        }

        // Condition
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Condition::type > r (
            tfm.create< Condition::type > (
              L"Condition",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Condition ())
              continue;
            this->Condition (r);
            continue;
          }
        }
      }

      if (!_xsd_Description_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Description",
          L"http://www.qut.com/middleware/lxacmlSchema");
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"RuleId" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< RuleId::type > r (
            RuleId::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->RuleId (r);
          continue;
        }

        if (a.name () == L"Effect" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Effect::type > r (
            Effect::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Effect (r);
          continue;
        }
      }

      if (!_xsd_RuleId_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"RuleId",
          L"");
      }

      if (!_xsd_Effect_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Effect",
          L"");
      }
    }

    RuleType* RuleType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new RuleType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, RuleType >
    _xsd_RuleType_type_factory_init (
      L"RuleType http://www.qut.com/middleware/lxacmlSchema");


    // TargetType
    //

    TargetType::
    TargetType ()
    : ::xml_schema::type (),
    _xsd_Resources_ (::xml_schema::flags (), this),
    _xsd_Actions_ (::xml_schema::flags (), this)
    {
    }

    TargetType::
    TargetType (const Resources::type& _xsd_Resources,
                const Actions::type& _xsd_Actions)
    : ::xml_schema::type (),
    _xsd_Resources_ (_xsd_Resources,
                     ::xml_schema::flags (),
                     this),
    _xsd_Actions_ (_xsd_Actions,
                   ::xml_schema::flags (),
                   this)
    {
    }

    TargetType::
    TargetType (const TargetType& _xsd_TargetType,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_TargetType, f, c),
    _xsd_Resources_ (_xsd_TargetType._xsd_Resources_,
                     f | ::xml_schema::flags::not_root,
                     this),
    _xsd_Actions_ (_xsd_TargetType._xsd_Actions_,
                   f | ::xml_schema::flags::not_root,
                   this)
    {
    }

    TargetType::
    TargetType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Resources_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Actions_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void TargetType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Resources
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Resources::type > r (
            tfm.create< Resources::type > (
              L"Resources",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_Resources_.present ())
              continue;
            this->Resources (r);
            continue;
          }
        }

        // Actions
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Actions::type > r (
            tfm.create< Actions::type > (
              L"Actions",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_Actions_.present ())
              continue;
            this->Actions (r);
            continue;
          }
        }
      }

      if (!_xsd_Resources_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Resources",
          L"http://www.qut.com/middleware/lxacmlSchema");
      }

      if (!_xsd_Actions_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Actions",
          L"http://www.qut.com/middleware/lxacmlSchema");
      }
    }

    TargetType* TargetType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new TargetType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, TargetType >
    _xsd_TargetType_type_factory_init (
      L"TargetType http://www.qut.com/middleware/lxacmlSchema");


    // ResourcesType
    //

    ResourcesType::
    ResourcesType ()
    : ::xml_schema::type (),
    _xsd_Resource_ (::xml_schema::flags (), this)
    {
    }

    ResourcesType::
    ResourcesType (const ResourcesType& _xsd_ResourcesType,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_ResourcesType, f, c),
    _xsd_Resource_ (_xsd_ResourcesType._xsd_Resource_,
                    f | ::xml_schema::flags::not_root,
                    this)
    {
    }

    ResourcesType::
    ResourcesType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Resource_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void ResourcesType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Resource
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Resource::type > r (
            tfm.create< Resource::type > (
              L"Resource",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->Resource ().push_back (r);
            continue;
          }
        }
      }
    }

    ResourcesType* ResourcesType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ResourcesType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ResourcesType >
    _xsd_ResourcesType_type_factory_init (
      L"ResourcesType http://www.qut.com/middleware/lxacmlSchema");


    // ActionsType
    //

    ActionsType::
    ActionsType ()
    : ::xml_schema::type (),
    _xsd_Action_ (::xml_schema::flags (), this)
    {
    }

    ActionsType::
    ActionsType (const ActionsType& _xsd_ActionsType,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_ActionsType, f, c),
    _xsd_Action_ (_xsd_ActionsType._xsd_Action_,
                  f | ::xml_schema::flags::not_root,
                  this)
    {
    }

    ActionsType::
    ActionsType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Action_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void ActionsType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Action
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Action::type > r (
            tfm.create< Action::type > (
              L"Action",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->Action ().push_back (r);
            continue;
          }
        }
      }
    }

    ActionsType* ActionsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ActionsType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ActionsType >
    _xsd_ActionsType_type_factory_init (
      L"ActionsType http://www.qut.com/middleware/lxacmlSchema");


    // ResourceType
    //

    ResourceType::
    ResourceType ()
    : ::xml_schema::type (),
    _xsd_AttributeValue_ (::xml_schema::flags (), this)
    {
    }

    ResourceType::
    ResourceType (const AttributeValue::type& _xsd_AttributeValue)
    : ::xml_schema::type (),
    _xsd_AttributeValue_ (_xsd_AttributeValue,
                          ::xml_schema::flags (),
                          this)
    {
    }

    ResourceType::
    ResourceType (const ResourceType& _xsd_ResourceType,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_ResourceType, f, c),
    _xsd_AttributeValue_ (_xsd_ResourceType._xsd_AttributeValue_,
                          f | ::xml_schema::flags::not_root,
                          this)
    {
    }

    ResourceType::
    ResourceType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_AttributeValue_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void ResourceType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // AttributeValue
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< AttributeValue::type > r (
            tfm.create< AttributeValue::type > (
              L"AttributeValue",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_AttributeValue_.present ())
              continue;
            this->AttributeValue (r);
            continue;
          }
        }
      }

      if (!_xsd_AttributeValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"AttributeValue",
          L"http://www.qut.com/middleware/lxacmlSchema");
      }
    }

    ResourceType* ResourceType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ResourceType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ResourceType >
    _xsd_ResourceType_type_factory_init (
      L"ResourceType http://www.qut.com/middleware/lxacmlSchema");


    // ActionType
    //

    ActionType::
    ActionType ()
    : ::xml_schema::type (),
    _xsd_AttributeValue_ (::xml_schema::flags (), this)
    {
    }

    ActionType::
    ActionType (const AttributeValue::type& _xsd_AttributeValue)
    : ::xml_schema::type (),
    _xsd_AttributeValue_ (_xsd_AttributeValue,
                          ::xml_schema::flags (),
                          this)
    {
    }

    ActionType::
    ActionType (const ActionType& _xsd_ActionType,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_ActionType, f, c),
    _xsd_AttributeValue_ (_xsd_ActionType._xsd_AttributeValue_,
                          f | ::xml_schema::flags::not_root,
                          this)
    {
    }

    ActionType::
    ActionType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_AttributeValue_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void ActionType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // AttributeValue
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< AttributeValue::type > r (
            tfm.create< AttributeValue::type > (
              L"AttributeValue",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_AttributeValue_.present ())
              continue;
            this->AttributeValue (r);
            continue;
          }
        }
      }

      if (!_xsd_AttributeValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"AttributeValue",
          L"http://www.qut.com/middleware/lxacmlSchema");
      }
    }

    ActionType* ActionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ActionType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ActionType >
    _xsd_ActionType_type_factory_init (
      L"ActionType http://www.qut.com/middleware/lxacmlSchema");


    // ExpressionType
    //

    ExpressionType::
    ExpressionType ()
    : ::xml_schema::type ()
    {
    }

    ExpressionType::
    ExpressionType (const ExpressionType& _xsd_ExpressionType,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_ExpressionType, f, c)
    {
    }

    ExpressionType::
    ExpressionType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c)
    {
    }

    ExpressionType::
    ExpressionType (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (a, f, c)
    {
    }

    ExpressionType::
    ExpressionType (const ::std::basic_string< wchar_t >& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (s, e, f, c)
    {
    }

    ExpressionType* ExpressionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ExpressionType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ExpressionType >
    _xsd_ExpressionType_type_factory_init (
      L"ExpressionType http://www.qut.com/middleware/lxacmlSchema");


    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ::middleware::lxacmlSchema::ConditionType >
    _xsd_Condition_element_factory_init (
      L"Expression http://www.qut.com/middleware/lxacmlSchema", 
      L"Condition http://www.qut.com/middleware/lxacmlSchema");


    // ConditionType
    //

    ConditionType::
    ConditionType ()
    : ::middleware::lxacmlSchema::ExpressionType (),
    _xsd_Expression_ (::xml_schema::flags (), this)
    {
    }

    ConditionType::
    ConditionType (const Expression::type& _xsd_Expression)
    : ::middleware::lxacmlSchema::ExpressionType (),
    _xsd_Expression_ (_xsd_Expression,
                      ::xml_schema::flags (),
                      this)
    {
    }

    ConditionType::
    ConditionType (const ConditionType& _xsd_ConditionType,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::middleware::lxacmlSchema::ExpressionType (_xsd_ConditionType, f, c),
    _xsd_Expression_ (_xsd_ConditionType._xsd_Expression_,
                      f | ::xml_schema::flags::not_root,
                      this)
    {
    }

    ConditionType::
    ConditionType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::middleware::lxacmlSchema::ExpressionType (e, f, c),
    _xsd_Expression_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void ConditionType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Expression
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Expression::type > r (
            tfm.create< Expression::type > (
              L"Expression",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_Expression_.present ())
              continue;
            this->Expression (r);
            continue;
          }
        }
      }

      if (!_xsd_Expression_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Expression",
          L"http://www.qut.com/middleware/lxacmlSchema");
      }
    }

    ConditionType* ConditionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ConditionType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ConditionType >
    _xsd_ConditionType_type_factory_init (
      L"ConditionType http://www.qut.com/middleware/lxacmlSchema");


    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ::middleware::lxacmlSchema::ApplyType >
    _xsd_Apply_element_factory_init (
      L"Expression http://www.qut.com/middleware/lxacmlSchema", 
      L"Apply http://www.qut.com/middleware/lxacmlSchema");


    // ApplyType
    //

    ApplyType::
    ApplyType ()
    : ::middleware::lxacmlSchema::ExpressionType (),
    _xsd_Expression_ (::xml_schema::flags (), this),
    _xsd_FunctionId_ (::xml_schema::flags (), this)
    {
    }

    ApplyType::
    ApplyType (const FunctionId::type& _xsd_FunctionId)
    : ::middleware::lxacmlSchema::ExpressionType (),
    _xsd_Expression_ (::xml_schema::flags (), this),
    _xsd_FunctionId_ (_xsd_FunctionId,
                      ::xml_schema::flags (),
                      this)
    {
    }

    ApplyType::
    ApplyType (const ApplyType& _xsd_ApplyType,
               ::xml_schema::flags f,
               ::xml_schema::type* c)
    : ::middleware::lxacmlSchema::ExpressionType (_xsd_ApplyType, f, c),
    _xsd_Expression_ (_xsd_ApplyType._xsd_Expression_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_FunctionId_ (_xsd_ApplyType._xsd_FunctionId_,
                      f | ::xml_schema::flags::not_root,
                      this)
    {
    }

    ApplyType::
    ApplyType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::type* c)
    : ::middleware::lxacmlSchema::ExpressionType (e, f, c),
    _xsd_Expression_ (f | ::xml_schema::flags::not_root, this),
    _xsd_FunctionId_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void ApplyType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Expression
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Expression::type > r (
            tfm.create< Expression::type > (
              L"Expression",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->Expression ().push_back (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"FunctionId" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< FunctionId::type > r (
            FunctionId::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->FunctionId (r);
          continue;
        }
      }

      if (!_xsd_FunctionId_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"FunctionId",
          L"");
      }
    }

    ApplyType* ApplyType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ApplyType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ApplyType >
    _xsd_ApplyType_type_factory_init (
      L"ApplyType http://www.qut.com/middleware/lxacmlSchema");


    // AttributeDesignatorType
    //

    AttributeDesignatorType::
    AttributeDesignatorType ()
    : ::middleware::lxacmlSchema::ExpressionType (),
    _xsd_AttributeId_ (::xml_schema::flags (), this)
    {
    }

    AttributeDesignatorType::
    AttributeDesignatorType (const AttributeId::type& _xsd_AttributeId)
    : ::middleware::lxacmlSchema::ExpressionType (),
    _xsd_AttributeId_ (_xsd_AttributeId,
                       ::xml_schema::flags (),
                       this)
    {
    }

    AttributeDesignatorType::
    AttributeDesignatorType (const AttributeDesignatorType& _xsd_AttributeDesignatorType,
                             ::xml_schema::flags f,
                             ::xml_schema::type* c)
    : ::middleware::lxacmlSchema::ExpressionType (_xsd_AttributeDesignatorType, f, c),
    _xsd_AttributeId_ (_xsd_AttributeDesignatorType._xsd_AttributeId_,
                       f | ::xml_schema::flags::not_root,
                       this)
    {
    }

    AttributeDesignatorType::
    AttributeDesignatorType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::type* c)
    : ::middleware::lxacmlSchema::ExpressionType (e, f, c),
    _xsd_AttributeId_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void AttributeDesignatorType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"AttributeId" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< AttributeId::type > r (
            AttributeId::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->AttributeId (r);
          continue;
        }
      }

      if (!_xsd_AttributeId_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"AttributeId",
          L"");
      }
    }

    AttributeDesignatorType* AttributeDesignatorType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new AttributeDesignatorType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AttributeDesignatorType >
    _xsd_AttributeDesignatorType_type_factory_init (
      L"AttributeDesignatorType http://www.qut.com/middleware/lxacmlSchema");


    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    _xsd_SubjectAttributeDesignator_element_factory_init (
      L"Expression http://www.qut.com/middleware/lxacmlSchema", 
      L"SubjectAttributeDesignator http://www.qut.com/middleware/lxacmlSchema");


    // SubjectAttributeDesignatorType
    //

    SubjectAttributeDesignatorType::
    SubjectAttributeDesignatorType ()
    : ::middleware::lxacmlSchema::AttributeDesignatorType ()
    {
    }

    SubjectAttributeDesignatorType::
    SubjectAttributeDesignatorType (const AttributeId::type& _xsd_AttributeId)
    : ::middleware::lxacmlSchema::AttributeDesignatorType (_xsd_AttributeId)
    {
    }

    SubjectAttributeDesignatorType::
    SubjectAttributeDesignatorType (const SubjectAttributeDesignatorType& _xsd_SubjectAttributeDesignatorType,
                                    ::xml_schema::flags f,
                                    ::xml_schema::type* c)
    : ::middleware::lxacmlSchema::AttributeDesignatorType (_xsd_SubjectAttributeDesignatorType, f, c)
    {
    }

    SubjectAttributeDesignatorType::
    SubjectAttributeDesignatorType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::type* c)
    : ::middleware::lxacmlSchema::AttributeDesignatorType (e, f, c)
    {
    }

    SubjectAttributeDesignatorType* SubjectAttributeDesignatorType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new SubjectAttributeDesignatorType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SubjectAttributeDesignatorType >
    _xsd_SubjectAttributeDesignatorType_type_factory_init (
      L"SubjectAttributeDesignatorType http://www.qut.com/middleware/lxacmlSchema");


    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ::middleware::lxacmlSchema::AttributeValueType >
    _xsd_AttributeValue_element_factory_init (
      L"Expression http://www.qut.com/middleware/lxacmlSchema", 
      L"AttributeValue http://www.qut.com/middleware/lxacmlSchema");


    // AttributeValueType
    //

    AttributeValueType::
    AttributeValueType ()
    : ::middleware::lxacmlSchema::ExpressionType ()
    {
    }

    AttributeValueType::
    AttributeValueType (const AttributeValueType& _xsd_AttributeValueType,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
    : ::middleware::lxacmlSchema::ExpressionType (_xsd_AttributeValueType, f, c)
    {
    }

    AttributeValueType::
    AttributeValueType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
    : ::middleware::lxacmlSchema::ExpressionType (e, f, c)
    {
    }

    AttributeValueType::
    AttributeValueType (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
    : ::middleware::lxacmlSchema::ExpressionType (a, f, c)
    {
    }

    AttributeValueType::
    AttributeValueType (const ::std::basic_string< wchar_t >& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
    : ::middleware::lxacmlSchema::ExpressionType (s, e, f, c)
    {
    }

    AttributeValueType* AttributeValueType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new AttributeValueType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AttributeValueType >
    _xsd_AttributeValueType_type_factory_init (
      L"AttributeValueType http://www.qut.com/middleware/lxacmlSchema");


    // ObligationsType
    //

    ObligationsType::
    ObligationsType ()
    : ::xml_schema::type (),
    _xsd_Obligation_ (::xml_schema::flags (), this)
    {
    }

    ObligationsType::
    ObligationsType (const ObligationsType& _xsd_ObligationsType,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_ObligationsType, f, c),
    _xsd_Obligation_ (_xsd_ObligationsType._xsd_Obligation_,
                      f | ::xml_schema::flags::not_root,
                      this)
    {
    }

    ObligationsType::
    ObligationsType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Obligation_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void ObligationsType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Obligation
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Obligation::type > r (
            tfm.create< Obligation::type > (
              L"Obligation",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->Obligation ().push_back (r);
            continue;
          }
        }
      }
    }

    ObligationsType* ObligationsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ObligationsType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ObligationsType >
    _xsd_ObligationsType_type_factory_init (
      L"ObligationsType http://www.qut.com/middleware/lxacmlSchema");


    // ObligationType
    //

    ObligationType::
    ObligationType ()
    : ::xml_schema::type (),
    _xsd_AttributeAssignment_ (::xml_schema::flags (), this),
    _xsd_ObligationId_ (::xml_schema::flags (), this),
    _xsd_FulfillOn_ (::xml_schema::flags (), this)
    {
    }

    ObligationType::
    ObligationType (const ObligationId::type& _xsd_ObligationId,
                    const FulfillOn::type& _xsd_FulfillOn)
    : ::xml_schema::type (),
    _xsd_AttributeAssignment_ (::xml_schema::flags (), this),
    _xsd_ObligationId_ (_xsd_ObligationId,
                        ::xml_schema::flags (),
                        this),
    _xsd_FulfillOn_ (_xsd_FulfillOn,
                     ::xml_schema::flags (),
                     this)
    {
    }

    ObligationType::
    ObligationType (const ObligationType& _xsd_ObligationType,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_ObligationType, f, c),
    _xsd_AttributeAssignment_ (_xsd_ObligationType._xsd_AttributeAssignment_,
                               f | ::xml_schema::flags::not_root,
                               this),
    _xsd_ObligationId_ (_xsd_ObligationType._xsd_ObligationId_,
                        f | ::xml_schema::flags::not_root,
                        this),
    _xsd_FulfillOn_ (_xsd_ObligationType._xsd_FulfillOn_,
                     f | ::xml_schema::flags::not_root,
                     this)
    {
    }

    ObligationType::
    ObligationType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_AttributeAssignment_ (f | ::xml_schema::flags::not_root, this),
    _xsd_ObligationId_ (f | ::xml_schema::flags::not_root, this),
    _xsd_FulfillOn_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void ObligationType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // AttributeAssignment
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< AttributeAssignment::type > r (
            tfm.create< AttributeAssignment::type > (
              L"AttributeAssignment",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->AttributeAssignment ().push_back (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"ObligationId" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< ObligationId::type > r (
            ObligationId::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->ObligationId (r);
          continue;
        }

        if (a.name () == L"FulfillOn" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< FulfillOn::type > r (
            FulfillOn::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->FulfillOn (r);
          continue;
        }
      }

      if (!_xsd_ObligationId_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"ObligationId",
          L"");
      }

      if (!_xsd_FulfillOn_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"FulfillOn",
          L"");
      }
    }

    ObligationType* ObligationType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ObligationType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ObligationType >
    _xsd_ObligationType_type_factory_init (
      L"ObligationType http://www.qut.com/middleware/lxacmlSchema");


    // EffectType
    //

    EffectType::
    EffectType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_EffectType_convert ();
    }

    EffectType::
    EffectType (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_EffectType_convert ();
    }

    EffectType::
    EffectType (const ::std::basic_string< wchar_t >& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_EffectType_convert ();
    }

    EffectType* EffectType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new EffectType (*this, f, c);
    }

    EffectType::_xsd_EffectType EffectType::
    _xsd_EffectType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_EffectType_literals_);
      const _xsd_EffectType* i (::std::lower_bound (
                                  _xsd_EffectType_indexes_,
                                  _xsd_EffectType_indexes_ + 2,
                                  *this,
                                  c));

      if (i == _xsd_EffectType_indexes_ + 2 || _xsd_EffectType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const EffectType::
    _xsd_EffectType_literals_[2] =
    {
      L"Permit",
      L"Deny"
    };

    const EffectType::_xsd_EffectType EffectType::
    _xsd_EffectType_indexes_[2] =
    {
      ::middleware::lxacmlSchema::EffectType::Deny,
      ::middleware::lxacmlSchema::EffectType::Permit
    };

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, EffectType >
    _xsd_EffectType_type_factory_init (
      L"EffectType http://www.qut.com/middleware/lxacmlSchema");


    // AttributeAssignmentType
    //

    AttributeAssignmentType::
    AttributeAssignmentType ()
    : ::middleware::lxacmlSchema::AttributeValueType (),
    _xsd_AttributeId_ (::xml_schema::flags (), this)
    {
    }

    AttributeAssignmentType::
    AttributeAssignmentType (const AttributeId::type& _xsd_AttributeId)
    : ::middleware::lxacmlSchema::AttributeValueType (),
    _xsd_AttributeId_ (_xsd_AttributeId,
                       ::xml_schema::flags (),
                       this)
    {
    }

    AttributeAssignmentType::
    AttributeAssignmentType (const AttributeAssignmentType& _xsd_AttributeAssignmentType,
                             ::xml_schema::flags f,
                             ::xml_schema::type* c)
    : ::middleware::lxacmlSchema::AttributeValueType (_xsd_AttributeAssignmentType, f, c),
    _xsd_AttributeId_ (_xsd_AttributeAssignmentType._xsd_AttributeId_,
                       f | ::xml_schema::flags::not_root,
                       this)
    {
    }

    AttributeAssignmentType::
    AttributeAssignmentType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::type* c)
    : ::middleware::lxacmlSchema::AttributeValueType (e, f, c),
    _xsd_AttributeId_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void AttributeAssignmentType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"AttributeId" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< AttributeId::type > r (
            AttributeId::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->AttributeId (r);
          continue;
        }
      }

      if (!_xsd_AttributeId_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"AttributeId",
          L"");
      }
    }

    AttributeAssignmentType* AttributeAssignmentType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new AttributeAssignmentType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AttributeAssignmentType >
    _xsd_AttributeAssignmentType_type_factory_init (
      L"AttributeAssignmentType http://www.qut.com/middleware/lxacmlSchema");
  }
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace middleware
{
  namespace lxacmlSchema
  {
    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (const ::std::basic_string< wchar_t >& u,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::PolicySet (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (const ::std::basic_string< wchar_t >& u,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::PolicySet (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (const ::std::basic_string< wchar_t >& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::PolicySet (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::std::istream& is,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::PolicySet (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::std::istream& is,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::PolicySet (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::PolicySet (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::PolicySet (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::PolicySet (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::PolicySet (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (const ::xercesc::DOMInputSource& i,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::PolicySet (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (const ::xercesc::DOMInputSource& i,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::PolicySet (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (const ::xercesc::DOMInputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::PolicySet (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType > r (
        tfm.create< ::middleware::lxacmlSchema::PolicySetType > (
          L"PolicySet",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"PolicySet",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (const ::std::basic_string< wchar_t >& u,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Policy (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (const ::std::basic_string< wchar_t >& u,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Policy (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (const ::std::basic_string< wchar_t >& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Policy (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::std::istream& is,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Policy (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::std::istream& is,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Policy (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Policy (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::std::istream& is,
            const ::std::basic_string< wchar_t >& sid,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Policy (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::std::istream& is,
            const ::std::basic_string< wchar_t >& sid,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Policy (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::std::istream& is,
            const ::std::basic_string< wchar_t >& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Policy (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (const ::xercesc::DOMInputSource& i,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Policy (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (const ::xercesc::DOMInputSource& i,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Policy (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (const ::xercesc::DOMInputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Policy (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType > r (
        tfm.create< ::middleware::lxacmlSchema::PolicyType > (
          L"Policy",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Policy",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (const ::std::basic_string< wchar_t >& u,
          ::xml_schema::flags f,
          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Rule (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (const ::std::basic_string< wchar_t >& u,
          ::xsd::cxx::xml::error_handler< wchar_t >& h,
          ::xml_schema::flags f,
          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Rule (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (const ::std::basic_string< wchar_t >& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Rule (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::std::istream& is,
          ::xml_schema::flags f,
          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Rule (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::std::istream& is,
          ::xsd::cxx::xml::error_handler< wchar_t >& h,
          ::xml_schema::flags f,
          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Rule (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Rule (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::std::istream& is,
          const ::std::basic_string< wchar_t >& sid,
          ::xml_schema::flags f,
          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Rule (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::std::istream& is,
          const ::std::basic_string< wchar_t >& sid,
          ::xsd::cxx::xml::error_handler< wchar_t >& h,
          ::xml_schema::flags f,
          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Rule (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::std::istream& is,
          const ::std::basic_string< wchar_t >& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Rule (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (const ::xercesc::DOMInputSource& i,
          ::xml_schema::flags f,
          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Rule (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (const ::xercesc::DOMInputSource& i,
          ::xsd::cxx::xml::error_handler< wchar_t >& h,
          ::xml_schema::flags f,
          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Rule (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (const ::xercesc::DOMInputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Rule (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f,
          const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType > r (
        tfm.create< ::middleware::lxacmlSchema::RuleType > (
          L"Rule",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Rule",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (const ::std::basic_string< wchar_t >& u,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Target (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (const ::std::basic_string< wchar_t >& u,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Target (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (const ::std::basic_string< wchar_t >& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Target (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::std::istream& is,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Target (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::std::istream& is,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Target (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Target (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::std::istream& is,
            const ::std::basic_string< wchar_t >& sid,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Target (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::std::istream& is,
            const ::std::basic_string< wchar_t >& sid,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Target (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::std::istream& is,
            const ::std::basic_string< wchar_t >& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Target (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (const ::xercesc::DOMInputSource& i,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Target (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (const ::xercesc::DOMInputSource& i,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Target (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (const ::xercesc::DOMInputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Target (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType > r (
        tfm.create< ::middleware::lxacmlSchema::TargetType > (
          L"Target",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Target",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (const ::std::basic_string< wchar_t >& u,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Resources (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (const ::std::basic_string< wchar_t >& u,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Resources (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (const ::std::basic_string< wchar_t >& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Resources (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::std::istream& is,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Resources (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::std::istream& is,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Resources (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Resources (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Resources (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Resources (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Resources (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (const ::xercesc::DOMInputSource& i,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Resources (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (const ::xercesc::DOMInputSource& i,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Resources (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (const ::xercesc::DOMInputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Resources (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType > r (
        tfm.create< ::middleware::lxacmlSchema::ResourcesType > (
          L"Resources",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Resources",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (const ::std::basic_string< wchar_t >& u,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Actions (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (const ::std::basic_string< wchar_t >& u,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Actions (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (const ::std::basic_string< wchar_t >& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Actions (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::std::istream& is,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Actions (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::std::istream& is,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Actions (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Actions (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Actions (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Actions (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Actions (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (const ::xercesc::DOMInputSource& i,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Actions (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (const ::xercesc::DOMInputSource& i,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Actions (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (const ::xercesc::DOMInputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Actions (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType > r (
        tfm.create< ::middleware::lxacmlSchema::ActionsType > (
          L"Actions",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Actions",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (const ::std::basic_string< wchar_t >& u,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Resource (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (const ::std::basic_string< wchar_t >& u,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Resource (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (const ::std::basic_string< wchar_t >& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Resource (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::std::istream& is,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Resource (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::std::istream& is,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Resource (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Resource (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Resource (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Resource (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Resource (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (const ::xercesc::DOMInputSource& i,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Resource (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (const ::xercesc::DOMInputSource& i,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Resource (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (const ::xercesc::DOMInputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Resource (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType > r (
        tfm.create< ::middleware::lxacmlSchema::ResourceType > (
          L"Resource",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Resource",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (const ::std::basic_string< wchar_t >& u,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Action (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (const ::std::basic_string< wchar_t >& u,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Action (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (const ::std::basic_string< wchar_t >& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Action (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::std::istream& is,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Action (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::std::istream& is,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Action (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Action (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::std::istream& is,
            const ::std::basic_string< wchar_t >& sid,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Action (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::std::istream& is,
            const ::std::basic_string< wchar_t >& sid,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Action (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::std::istream& is,
            const ::std::basic_string< wchar_t >& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Action (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (const ::xercesc::DOMInputSource& i,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Action (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (const ::xercesc::DOMInputSource& i,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Action (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (const ::xercesc::DOMInputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Action (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType > r (
        tfm.create< ::middleware::lxacmlSchema::ActionType > (
          L"Action",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Action",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (const ::std::basic_string< wchar_t >& u,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Expression (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (const ::std::basic_string< wchar_t >& u,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Expression (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (const ::std::basic_string< wchar_t >& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Expression (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::std::istream& is,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Expression (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::std::istream& is,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Expression (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Expression (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Expression (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Expression (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Expression (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (const ::xercesc::DOMInputSource& i,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Expression (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (const ::xercesc::DOMInputSource& i,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Expression (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (const ::xercesc::DOMInputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Expression (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType > r (
        tfm.create< ::middleware::lxacmlSchema::ExpressionType > (
          L"Expression",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Expression",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (const ::std::basic_string< wchar_t >& u,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Condition (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (const ::std::basic_string< wchar_t >& u,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Condition (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (const ::std::basic_string< wchar_t >& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Condition (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::std::istream& is,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Condition (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::std::istream& is,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Condition (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Condition (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Condition (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Condition (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Condition (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (const ::xercesc::DOMInputSource& i,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Condition (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (const ::xercesc::DOMInputSource& i,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Condition (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (const ::xercesc::DOMInputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Condition (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType > r (
        tfm.create< ::middleware::lxacmlSchema::ConditionType > (
          L"Condition",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Condition",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (const ::std::basic_string< wchar_t >& u,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Apply (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (const ::std::basic_string< wchar_t >& u,
           ::xsd::cxx::xml::error_handler< wchar_t >& h,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Apply (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (const ::std::basic_string< wchar_t >& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Apply (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::std::istream& is,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Apply (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::std::istream& is,
           ::xsd::cxx::xml::error_handler< wchar_t >& h,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Apply (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Apply (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::std::istream& is,
           const ::std::basic_string< wchar_t >& sid,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Apply (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::std::istream& is,
           const ::std::basic_string< wchar_t >& sid,
           ::xsd::cxx::xml::error_handler< wchar_t >& h,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Apply (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::std::istream& is,
           const ::std::basic_string< wchar_t >& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Apply (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (const ::xercesc::DOMInputSource& i,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Apply (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (const ::xercesc::DOMInputSource& i,
           ::xsd::cxx::xml::error_handler< wchar_t >& h,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Apply (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (const ::xercesc::DOMInputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Apply (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType > r (
        tfm.create< ::middleware::lxacmlSchema::ApplyType > (
          L"Apply",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Apply",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (const ::std::basic_string< wchar_t >& u,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::SubjectAttributeDesignator (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (const ::std::basic_string< wchar_t >& u,
                                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::SubjectAttributeDesignator (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (const ::std::basic_string< wchar_t >& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::SubjectAttributeDesignator (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::SubjectAttributeDesignator (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::std::istream& is,
                                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::SubjectAttributeDesignator (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::SubjectAttributeDesignator (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::std::istream& is,
                                const ::std::basic_string< wchar_t >& sid,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::SubjectAttributeDesignator (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::std::istream& is,
                                const ::std::basic_string< wchar_t >& sid,
                                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::SubjectAttributeDesignator (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::std::istream& is,
                                const ::std::basic_string< wchar_t >& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::SubjectAttributeDesignator (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (const ::xercesc::DOMInputSource& i,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::SubjectAttributeDesignator (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (const ::xercesc::DOMInputSource& i,
                                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::SubjectAttributeDesignator (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (const ::xercesc::DOMInputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::SubjectAttributeDesignator (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType > r (
        tfm.create< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType > (
          L"SubjectAttributeDesignator",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"SubjectAttributeDesignator",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (const ::std::basic_string< wchar_t >& u,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::AttributeValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (const ::std::basic_string< wchar_t >& u,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::AttributeValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (const ::std::basic_string< wchar_t >& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::AttributeValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::AttributeValue (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::AttributeValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::AttributeValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    const ::std::basic_string< wchar_t >& sid,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::AttributeValue (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    const ::std::basic_string< wchar_t >& sid,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::AttributeValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    const ::std::basic_string< wchar_t >& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::AttributeValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (const ::xercesc::DOMInputSource& i,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::AttributeValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (const ::xercesc::DOMInputSource& i,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::AttributeValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (const ::xercesc::DOMInputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::AttributeValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType > r (
        tfm.create< ::middleware::lxacmlSchema::AttributeValueType > (
          L"AttributeValue",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"AttributeValue",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (const ::std::basic_string< wchar_t >& u,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Obligations (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (const ::std::basic_string< wchar_t >& u,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Obligations (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (const ::std::basic_string< wchar_t >& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Obligations (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Obligations (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::std::istream& is,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Obligations (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Obligations (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Obligations (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Obligations (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Obligations (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (const ::xercesc::DOMInputSource& i,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Obligations (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (const ::xercesc::DOMInputSource& i,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Obligations (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (const ::xercesc::DOMInputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Obligations (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType > r (
        tfm.create< ::middleware::lxacmlSchema::ObligationsType > (
          L"Obligations",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Obligations",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (const ::std::basic_string< wchar_t >& u,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Obligation (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (const ::std::basic_string< wchar_t >& u,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Obligation (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (const ::std::basic_string< wchar_t >& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Obligation (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::std::istream& is,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Obligation (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::std::istream& is,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Obligation (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Obligation (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Obligation (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Obligation (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Obligation (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (const ::xercesc::DOMInputSource& i,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Obligation (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (const ::xercesc::DOMInputSource& i,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Obligation (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (const ::xercesc::DOMInputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Obligation (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType > r (
        tfm.create< ::middleware::lxacmlSchema::ObligationType > (
          L"Obligation",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Obligation",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (const ::std::basic_string< wchar_t >& u,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::AttributeAssignment (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (const ::std::basic_string< wchar_t >& u,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::AttributeAssignment (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (const ::std::basic_string< wchar_t >& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::AttributeAssignment (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::AttributeAssignment (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::std::istream& is,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::AttributeAssignment (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::AttributeAssignment (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::std::istream& is,
                         const ::std::basic_string< wchar_t >& sid,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::AttributeAssignment (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::std::istream& is,
                         const ::std::basic_string< wchar_t >& sid,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::AttributeAssignment (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::std::istream& is,
                         const ::std::basic_string< wchar_t >& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::AttributeAssignment (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (const ::xercesc::DOMInputSource& i,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::AttributeAssignment (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (const ::xercesc::DOMInputSource& i,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::AttributeAssignment (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (const ::xercesc::DOMInputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::AttributeAssignment (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType > r (
        tfm.create< ::middleware::lxacmlSchema::AttributeAssignmentType > (
          L"AttributeAssignment",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"AttributeAssignment",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (const ::std::basic_string< wchar_t >& u,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Description (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (const ::std::basic_string< wchar_t >& u,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Description (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (const ::std::basic_string< wchar_t >& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Description (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Description (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (::std::istream& is,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Description (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Description (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Description (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Description (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSchema::Description (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (const ::xercesc::DOMInputSource& i,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSchema::Description (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (const ::xercesc::DOMInputSource& i,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Description (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (const ::xercesc::DOMInputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSchema::Description (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::string > r (
        tfm.create< ::xml_schema::string > (
          L"Description",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Description",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/serialization.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_serializer_plate< 0, wchar_t >
  type_serializer_plate_init;
}

namespace middleware
{
  namespace lxacmlSchema
  {
    void
    PolicySet (::xercesc::DOMDocument& d,
               const ::middleware::lxacmlSchema::PolicySetType& s,
               ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlSchema::PolicySetType > (
        L"PolicySet",
        L"http://www.qut.com/middleware/lxacmlSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    PolicySet (const ::middleware::lxacmlSchema::PolicySetType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlSchema::PolicySetType > (
            L"PolicySet",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m,
            s,
            f));
        ::middleware::lxacmlSchema::PolicySet (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    PolicySet (::xercesc::XMLFormatTarget& t,
               const ::middleware::lxacmlSchema::PolicySetType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::PolicySet (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    PolicySet (::xercesc::XMLFormatTarget& t,
               const ::middleware::lxacmlSchema::PolicySetType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::PolicySet (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    PolicySet (::xercesc::XMLFormatTarget& t,
               const ::middleware::lxacmlSchema::PolicySetType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::PolicySet (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    PolicySet (::std::ostream& o,
               const ::middleware::lxacmlSchema::PolicySetType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::PolicySet (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    PolicySet (::std::ostream& o,
               const ::middleware::lxacmlSchema::PolicySetType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::PolicySet (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    PolicySet (::std::ostream& o,
               const ::middleware::lxacmlSchema::PolicySetType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::PolicySet (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const PolicySetType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Description ())
        {
          tsm.serialize< PolicySetType::Description::type > (
            L"Description",
            L"http://www.qut.com/middleware/lxacmlSchema",
            true,
            true,
            e,
            *i.Description ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (PolicySetType::Policy::const_iterator
             b (i.Policy ().begin ()), n (i.Policy ().end ());
             b != n; ++b)
        {
          tsm.serialize< PolicySetType::Policy::type > (
            L"Policy",
            L"http://www.qut.com/middleware/lxacmlSchema",
            true,
            true,
            e,
            *b);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, PolicySetType >
    _xsd_PolicySetType_type_serializer_init (
      L"PolicySetType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Policy (::xercesc::DOMDocument& d,
            const ::middleware::lxacmlSchema::PolicyType& s,
            ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlSchema::PolicyType > (
        L"Policy",
        L"http://www.qut.com/middleware/lxacmlSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Policy (const ::middleware::lxacmlSchema::PolicyType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlSchema::PolicyType > (
            L"Policy",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m,
            s,
            f));
        ::middleware::lxacmlSchema::Policy (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Policy (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlSchema::PolicyType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Policy (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Policy (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlSchema::PolicyType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Policy (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Policy (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlSchema::PolicyType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Policy (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Policy (::std::ostream& o,
            const ::middleware::lxacmlSchema::PolicyType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Policy (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Policy (::std::ostream& o,
            const ::middleware::lxacmlSchema::PolicyType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Policy (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Policy (::std::ostream& o,
            const ::middleware::lxacmlSchema::PolicyType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Policy (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const PolicyType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< PolicyType::Description::type > (
          L"Description",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          i.Description ());
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< PolicyType::Target::type > (
          L"Target",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          i.Target ());
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (PolicyType::Rule::const_iterator
             b (i.Rule ().begin ()), n (i.Rule ().end ());
             b != n; ++b)
        {
          tsm.serialize< PolicyType::Rule::type > (
            L"Rule",
            L"http://www.qut.com/middleware/lxacmlSchema",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"PolicyId",
          e);

        a.dom_attribute () << i.PolicyId ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, PolicyType >
    _xsd_PolicyType_type_serializer_init (
      L"PolicyType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Rule (::xercesc::DOMDocument& d,
          const ::middleware::lxacmlSchema::RuleType& s,
          ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlSchema::RuleType > (
        L"Rule",
        L"http://www.qut.com/middleware/lxacmlSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Rule (const ::middleware::lxacmlSchema::RuleType& s,
          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
          ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlSchema::RuleType > (
            L"Rule",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m,
            s,
            f));
        ::middleware::lxacmlSchema::Rule (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Rule (::xercesc::XMLFormatTarget& t,
          const ::middleware::lxacmlSchema::RuleType& s,
          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
          const ::std::basic_string< wchar_t >& e,
          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Rule (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Rule (::xercesc::XMLFormatTarget& t,
          const ::middleware::lxacmlSchema::RuleType& s,
          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
          ::xsd::cxx::xml::error_handler< wchar_t >& h,
          const ::std::basic_string< wchar_t >& e,
          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Rule (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Rule (::xercesc::XMLFormatTarget& t,
          const ::middleware::lxacmlSchema::RuleType& s,
          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
          ::xercesc::DOMErrorHandler& h,
          const ::std::basic_string< wchar_t >& e,
          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Rule (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Rule (::std::ostream& o,
          const ::middleware::lxacmlSchema::RuleType& s,
          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
          const ::std::basic_string< wchar_t >& e,
          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Rule (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Rule (::std::ostream& o,
          const ::middleware::lxacmlSchema::RuleType& s,
          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
          ::xsd::cxx::xml::error_handler< wchar_t >& h,
          const ::std::basic_string< wchar_t >& e,
          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Rule (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Rule (::std::ostream& o,
          const ::middleware::lxacmlSchema::RuleType& s,
          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
          ::xercesc::DOMErrorHandler& h,
          const ::std::basic_string< wchar_t >& e,
          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Rule (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const RuleType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< RuleType::Description::type > (
          L"Description",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          i.Description ());
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Target ())
        {
          tsm.serialize< RuleType::Target::type > (
            L"Target",
            L"http://www.qut.com/middleware/lxacmlSchema",
            true,
            true,
            e,
            *i.Target ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Condition ())
        {
          tsm.serialize< RuleType::Condition::type > (
            L"Condition",
            L"http://www.qut.com/middleware/lxacmlSchema",
            true,
            true,
            e,
            *i.Condition ());
        }
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"RuleId",
          e);

        a.dom_attribute () << i.RuleId ();
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Effect",
          e);

        a.dom_attribute () << i.Effect ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, RuleType >
    _xsd_RuleType_type_serializer_init (
      L"RuleType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Target (::xercesc::DOMDocument& d,
            const ::middleware::lxacmlSchema::TargetType& s,
            ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlSchema::TargetType > (
        L"Target",
        L"http://www.qut.com/middleware/lxacmlSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Target (const ::middleware::lxacmlSchema::TargetType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlSchema::TargetType > (
            L"Target",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m,
            s,
            f));
        ::middleware::lxacmlSchema::Target (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Target (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlSchema::TargetType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Target (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Target (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlSchema::TargetType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Target (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Target (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlSchema::TargetType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Target (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Target (::std::ostream& o,
            const ::middleware::lxacmlSchema::TargetType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Target (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Target (::std::ostream& o,
            const ::middleware::lxacmlSchema::TargetType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Target (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Target (::std::ostream& o,
            const ::middleware::lxacmlSchema::TargetType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Target (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const TargetType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< TargetType::Resources::type > (
          L"Resources",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          i.Resources ());
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< TargetType::Actions::type > (
          L"Actions",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          i.Actions ());
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, TargetType >
    _xsd_TargetType_type_serializer_init (
      L"TargetType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Resources (::xercesc::DOMDocument& d,
               const ::middleware::lxacmlSchema::ResourcesType& s,
               ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlSchema::ResourcesType > (
        L"Resources",
        L"http://www.qut.com/middleware/lxacmlSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Resources (const ::middleware::lxacmlSchema::ResourcesType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlSchema::ResourcesType > (
            L"Resources",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m,
            s,
            f));
        ::middleware::lxacmlSchema::Resources (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Resources (::xercesc::XMLFormatTarget& t,
               const ::middleware::lxacmlSchema::ResourcesType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Resources (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Resources (::xercesc::XMLFormatTarget& t,
               const ::middleware::lxacmlSchema::ResourcesType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Resources (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Resources (::xercesc::XMLFormatTarget& t,
               const ::middleware::lxacmlSchema::ResourcesType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Resources (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Resources (::std::ostream& o,
               const ::middleware::lxacmlSchema::ResourcesType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Resources (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Resources (::std::ostream& o,
               const ::middleware::lxacmlSchema::ResourcesType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Resources (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Resources (::std::ostream& o,
               const ::middleware::lxacmlSchema::ResourcesType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Resources (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ResourcesType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (ResourcesType::Resource::const_iterator
             b (i.Resource ().begin ()), n (i.Resource ().end ());
             b != n; ++b)
        {
          tsm.serialize< ResourcesType::Resource::type > (
            L"Resource",
            L"http://www.qut.com/middleware/lxacmlSchema",
            true,
            true,
            e,
            *b);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ResourcesType >
    _xsd_ResourcesType_type_serializer_init (
      L"ResourcesType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Actions (::xercesc::DOMDocument& d,
             const ::middleware::lxacmlSchema::ActionsType& s,
             ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlSchema::ActionsType > (
        L"Actions",
        L"http://www.qut.com/middleware/lxacmlSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Actions (const ::middleware::lxacmlSchema::ActionsType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlSchema::ActionsType > (
            L"Actions",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m,
            s,
            f));
        ::middleware::lxacmlSchema::Actions (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Actions (::xercesc::XMLFormatTarget& t,
             const ::middleware::lxacmlSchema::ActionsType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Actions (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Actions (::xercesc::XMLFormatTarget& t,
             const ::middleware::lxacmlSchema::ActionsType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Actions (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Actions (::xercesc::XMLFormatTarget& t,
             const ::middleware::lxacmlSchema::ActionsType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Actions (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Actions (::std::ostream& o,
             const ::middleware::lxacmlSchema::ActionsType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Actions (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Actions (::std::ostream& o,
             const ::middleware::lxacmlSchema::ActionsType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Actions (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Actions (::std::ostream& o,
             const ::middleware::lxacmlSchema::ActionsType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Actions (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ActionsType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (ActionsType::Action::const_iterator
             b (i.Action ().begin ()), n (i.Action ().end ());
             b != n; ++b)
        {
          tsm.serialize< ActionsType::Action::type > (
            L"Action",
            L"http://www.qut.com/middleware/lxacmlSchema",
            true,
            true,
            e,
            *b);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ActionsType >
    _xsd_ActionsType_type_serializer_init (
      L"ActionsType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Resource (::xercesc::DOMDocument& d,
              const ::middleware::lxacmlSchema::ResourceType& s,
              ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlSchema::ResourceType > (
        L"Resource",
        L"http://www.qut.com/middleware/lxacmlSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Resource (const ::middleware::lxacmlSchema::ResourceType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlSchema::ResourceType > (
            L"Resource",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m,
            s,
            f));
        ::middleware::lxacmlSchema::Resource (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Resource (::xercesc::XMLFormatTarget& t,
              const ::middleware::lxacmlSchema::ResourceType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Resource (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Resource (::xercesc::XMLFormatTarget& t,
              const ::middleware::lxacmlSchema::ResourceType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Resource (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Resource (::xercesc::XMLFormatTarget& t,
              const ::middleware::lxacmlSchema::ResourceType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Resource (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Resource (::std::ostream& o,
              const ::middleware::lxacmlSchema::ResourceType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Resource (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Resource (::std::ostream& o,
              const ::middleware::lxacmlSchema::ResourceType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Resource (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Resource (::std::ostream& o,
              const ::middleware::lxacmlSchema::ResourceType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Resource (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ResourceType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< ResourceType::AttributeValue::type > (
          L"AttributeValue",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          i.AttributeValue ());
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ResourceType >
    _xsd_ResourceType_type_serializer_init (
      L"ResourceType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Action (::xercesc::DOMDocument& d,
            const ::middleware::lxacmlSchema::ActionType& s,
            ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlSchema::ActionType > (
        L"Action",
        L"http://www.qut.com/middleware/lxacmlSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Action (const ::middleware::lxacmlSchema::ActionType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlSchema::ActionType > (
            L"Action",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m,
            s,
            f));
        ::middleware::lxacmlSchema::Action (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Action (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlSchema::ActionType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Action (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Action (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlSchema::ActionType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Action (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Action (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlSchema::ActionType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Action (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Action (::std::ostream& o,
            const ::middleware::lxacmlSchema::ActionType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Action (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Action (::std::ostream& o,
            const ::middleware::lxacmlSchema::ActionType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Action (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Action (::std::ostream& o,
            const ::middleware::lxacmlSchema::ActionType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Action (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ActionType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< ActionType::AttributeValue::type > (
          L"AttributeValue",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          i.AttributeValue ());
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ActionType >
    _xsd_ActionType_type_serializer_init (
      L"ActionType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Expression (::xercesc::DOMDocument& d,
                const ::middleware::lxacmlSchema::ExpressionType& s,
                ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlSchema::ExpressionType > (
        L"Expression",
        L"http://www.qut.com/middleware/lxacmlSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Expression (const ::middleware::lxacmlSchema::ExpressionType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlSchema::ExpressionType > (
            L"Expression",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m,
            s,
            f));
        ::middleware::lxacmlSchema::Expression (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Expression (::xercesc::XMLFormatTarget& t,
                const ::middleware::lxacmlSchema::ExpressionType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Expression (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Expression (::xercesc::XMLFormatTarget& t,
                const ::middleware::lxacmlSchema::ExpressionType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Expression (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Expression (::xercesc::XMLFormatTarget& t,
                const ::middleware::lxacmlSchema::ExpressionType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Expression (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Expression (::std::ostream& o,
                const ::middleware::lxacmlSchema::ExpressionType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Expression (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Expression (::std::ostream& o,
                const ::middleware::lxacmlSchema::ExpressionType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Expression (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Expression (::std::ostream& o,
                const ::middleware::lxacmlSchema::ExpressionType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Expression (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ExpressionType&)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);
    }

    void
    operator<< (::xercesc::DOMAttr&,
                const ExpressionType&)
    {
    }

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                const ExpressionType&)
    {
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ExpressionType >
    _xsd_ExpressionType_type_serializer_init (
      L"ExpressionType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ::middleware::lxacmlSchema::ConditionType >
    _xsd_Condition_element_name_init (
      L"Expression",
      L"http://www.qut.com/middleware/lxacmlSchema",
      L"Condition",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Condition (::xercesc::DOMDocument& d,
               const ::middleware::lxacmlSchema::ConditionType& s,
               ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlSchema::ConditionType > (
        L"Condition",
        L"http://www.qut.com/middleware/lxacmlSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Condition (const ::middleware::lxacmlSchema::ConditionType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlSchema::ConditionType > (
            L"Condition",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m,
            s,
            f));
        ::middleware::lxacmlSchema::Condition (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Condition (::xercesc::XMLFormatTarget& t,
               const ::middleware::lxacmlSchema::ConditionType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Condition (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Condition (::xercesc::XMLFormatTarget& t,
               const ::middleware::lxacmlSchema::ConditionType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Condition (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Condition (::xercesc::XMLFormatTarget& t,
               const ::middleware::lxacmlSchema::ConditionType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Condition (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Condition (::std::ostream& o,
               const ::middleware::lxacmlSchema::ConditionType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Condition (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Condition (::std::ostream& o,
               const ::middleware::lxacmlSchema::ConditionType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Condition (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Condition (::std::ostream& o,
               const ::middleware::lxacmlSchema::ConditionType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Condition (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ConditionType& i)
    {
      e << static_cast< const ::middleware::lxacmlSchema::ExpressionType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< ConditionType::Expression::type > (
          L"Expression",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          i.Expression ());
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ConditionType >
    _xsd_ConditionType_type_serializer_init (
      L"ConditionType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ::middleware::lxacmlSchema::ApplyType >
    _xsd_Apply_element_name_init (
      L"Expression",
      L"http://www.qut.com/middleware/lxacmlSchema",
      L"Apply",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Apply (::xercesc::DOMDocument& d,
           const ::middleware::lxacmlSchema::ApplyType& s,
           ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlSchema::ApplyType > (
        L"Apply",
        L"http://www.qut.com/middleware/lxacmlSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Apply (const ::middleware::lxacmlSchema::ApplyType& s,
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
           ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlSchema::ApplyType > (
            L"Apply",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m,
            s,
            f));
        ::middleware::lxacmlSchema::Apply (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Apply (::xercesc::XMLFormatTarget& t,
           const ::middleware::lxacmlSchema::ApplyType& s,
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
           const ::std::basic_string< wchar_t >& e,
           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Apply (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Apply (::xercesc::XMLFormatTarget& t,
           const ::middleware::lxacmlSchema::ApplyType& s,
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
           ::xsd::cxx::xml::error_handler< wchar_t >& h,
           const ::std::basic_string< wchar_t >& e,
           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Apply (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Apply (::xercesc::XMLFormatTarget& t,
           const ::middleware::lxacmlSchema::ApplyType& s,
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
           ::xercesc::DOMErrorHandler& h,
           const ::std::basic_string< wchar_t >& e,
           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Apply (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Apply (::std::ostream& o,
           const ::middleware::lxacmlSchema::ApplyType& s,
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
           const ::std::basic_string< wchar_t >& e,
           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Apply (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Apply (::std::ostream& o,
           const ::middleware::lxacmlSchema::ApplyType& s,
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
           ::xsd::cxx::xml::error_handler< wchar_t >& h,
           const ::std::basic_string< wchar_t >& e,
           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Apply (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Apply (::std::ostream& o,
           const ::middleware::lxacmlSchema::ApplyType& s,
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
           ::xercesc::DOMErrorHandler& h,
           const ::std::basic_string< wchar_t >& e,
           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Apply (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ApplyType& i)
    {
      e << static_cast< const ::middleware::lxacmlSchema::ExpressionType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (ApplyType::Expression::const_iterator
             b (i.Expression ().begin ()), n (i.Expression ().end ());
             b != n; ++b)
        {
          tsm.serialize< ApplyType::Expression::type > (
            L"Expression",
            L"http://www.qut.com/middleware/lxacmlSchema",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"FunctionId",
          e);

        a.dom_attribute () << i.FunctionId ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ApplyType >
    _xsd_ApplyType_type_serializer_init (
      L"ApplyType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    operator<< (::xercesc::DOMElement& e,
                const AttributeDesignatorType& i)
    {
      e << static_cast< const ::middleware::lxacmlSchema::ExpressionType& > (i);

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"AttributeId",
          e);

        a.dom_attribute () << i.AttributeId ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AttributeDesignatorType >
    _xsd_AttributeDesignatorType_type_serializer_init (
      L"AttributeDesignatorType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    _xsd_SubjectAttributeDesignator_element_name_init (
      L"Expression",
      L"http://www.qut.com/middleware/lxacmlSchema",
      L"SubjectAttributeDesignator",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    SubjectAttributeDesignator (::xercesc::DOMDocument& d,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType& s,
                                ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType > (
        L"SubjectAttributeDesignator",
        L"http://www.qut.com/middleware/lxacmlSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SubjectAttributeDesignator (const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType& s,
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType > (
            L"SubjectAttributeDesignator",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m,
            s,
            f));
        ::middleware::lxacmlSchema::SubjectAttributeDesignator (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    SubjectAttributeDesignator (::xercesc::XMLFormatTarget& t,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType& s,
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                const ::std::basic_string< wchar_t >& e,
                                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::SubjectAttributeDesignator (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SubjectAttributeDesignator (::xercesc::XMLFormatTarget& t,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType& s,
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                const ::std::basic_string< wchar_t >& e,
                                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::SubjectAttributeDesignator (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SubjectAttributeDesignator (::xercesc::XMLFormatTarget& t,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType& s,
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                ::xercesc::DOMErrorHandler& h,
                                const ::std::basic_string< wchar_t >& e,
                                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::SubjectAttributeDesignator (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SubjectAttributeDesignator (::std::ostream& o,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType& s,
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                const ::std::basic_string< wchar_t >& e,
                                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::SubjectAttributeDesignator (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SubjectAttributeDesignator (::std::ostream& o,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType& s,
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                const ::std::basic_string< wchar_t >& e,
                                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::SubjectAttributeDesignator (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SubjectAttributeDesignator (::std::ostream& o,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType& s,
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                ::xercesc::DOMErrorHandler& h,
                                const ::std::basic_string< wchar_t >& e,
                                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::SubjectAttributeDesignator (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const SubjectAttributeDesignatorType& i)
    {
      e << static_cast< const ::middleware::lxacmlSchema::AttributeDesignatorType& > (i);
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SubjectAttributeDesignatorType >
    _xsd_SubjectAttributeDesignatorType_type_serializer_init (
      L"SubjectAttributeDesignatorType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ::middleware::lxacmlSchema::AttributeValueType >
    _xsd_AttributeValue_element_name_init (
      L"Expression",
      L"http://www.qut.com/middleware/lxacmlSchema",
      L"AttributeValue",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    AttributeValue (::xercesc::DOMDocument& d,
                    const ::middleware::lxacmlSchema::AttributeValueType& s,
                    ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlSchema::AttributeValueType > (
        L"AttributeValue",
        L"http://www.qut.com/middleware/lxacmlSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeValue (const ::middleware::lxacmlSchema::AttributeValueType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlSchema::AttributeValueType > (
            L"AttributeValue",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m,
            s,
            f));
        ::middleware::lxacmlSchema::AttributeValue (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    AttributeValue (::xercesc::XMLFormatTarget& t,
                    const ::middleware::lxacmlSchema::AttributeValueType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::AttributeValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AttributeValue (::xercesc::XMLFormatTarget& t,
                    const ::middleware::lxacmlSchema::AttributeValueType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::AttributeValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeValue (::xercesc::XMLFormatTarget& t,
                    const ::middleware::lxacmlSchema::AttributeValueType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::AttributeValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeValue (::std::ostream& o,
                    const ::middleware::lxacmlSchema::AttributeValueType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::AttributeValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AttributeValue (::std::ostream& o,
                    const ::middleware::lxacmlSchema::AttributeValueType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::AttributeValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeValue (::std::ostream& o,
                    const ::middleware::lxacmlSchema::AttributeValueType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::AttributeValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const AttributeValueType& i)
    {
      e << static_cast< const ::middleware::lxacmlSchema::ExpressionType& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,
                const AttributeValueType& i)
    {
      a << static_cast< const ::middleware::lxacmlSchema::ExpressionType& > (i);
    }

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >& l,
                const AttributeValueType& i)
    {
      l << static_cast< const ::middleware::lxacmlSchema::ExpressionType& > (i);
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AttributeValueType >
    _xsd_AttributeValueType_type_serializer_init (
      L"AttributeValueType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Obligations (::xercesc::DOMDocument& d,
                 const ::middleware::lxacmlSchema::ObligationsType& s,
                 ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlSchema::ObligationsType > (
        L"Obligations",
        L"http://www.qut.com/middleware/lxacmlSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Obligations (const ::middleware::lxacmlSchema::ObligationsType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlSchema::ObligationsType > (
            L"Obligations",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m,
            s,
            f));
        ::middleware::lxacmlSchema::Obligations (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Obligations (::xercesc::XMLFormatTarget& t,
                 const ::middleware::lxacmlSchema::ObligationsType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Obligations (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Obligations (::xercesc::XMLFormatTarget& t,
                 const ::middleware::lxacmlSchema::ObligationsType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Obligations (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Obligations (::xercesc::XMLFormatTarget& t,
                 const ::middleware::lxacmlSchema::ObligationsType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Obligations (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Obligations (::std::ostream& o,
                 const ::middleware::lxacmlSchema::ObligationsType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Obligations (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Obligations (::std::ostream& o,
                 const ::middleware::lxacmlSchema::ObligationsType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Obligations (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Obligations (::std::ostream& o,
                 const ::middleware::lxacmlSchema::ObligationsType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Obligations (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ObligationsType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (ObligationsType::Obligation::const_iterator
             b (i.Obligation ().begin ()), n (i.Obligation ().end ());
             b != n; ++b)
        {
          tsm.serialize< ObligationsType::Obligation::type > (
            L"Obligation",
            L"http://www.qut.com/middleware/lxacmlSchema",
            true,
            true,
            e,
            *b);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ObligationsType >
    _xsd_ObligationsType_type_serializer_init (
      L"ObligationsType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Obligation (::xercesc::DOMDocument& d,
                const ::middleware::lxacmlSchema::ObligationType& s,
                ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlSchema::ObligationType > (
        L"Obligation",
        L"http://www.qut.com/middleware/lxacmlSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Obligation (const ::middleware::lxacmlSchema::ObligationType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlSchema::ObligationType > (
            L"Obligation",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m,
            s,
            f));
        ::middleware::lxacmlSchema::Obligation (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Obligation (::xercesc::XMLFormatTarget& t,
                const ::middleware::lxacmlSchema::ObligationType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Obligation (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Obligation (::xercesc::XMLFormatTarget& t,
                const ::middleware::lxacmlSchema::ObligationType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Obligation (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Obligation (::xercesc::XMLFormatTarget& t,
                const ::middleware::lxacmlSchema::ObligationType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Obligation (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Obligation (::std::ostream& o,
                const ::middleware::lxacmlSchema::ObligationType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Obligation (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Obligation (::std::ostream& o,
                const ::middleware::lxacmlSchema::ObligationType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Obligation (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Obligation (::std::ostream& o,
                const ::middleware::lxacmlSchema::ObligationType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Obligation (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ObligationType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (ObligationType::AttributeAssignment::const_iterator
             b (i.AttributeAssignment ().begin ()), n (i.AttributeAssignment ().end ());
             b != n; ++b)
        {
          tsm.serialize< ObligationType::AttributeAssignment::type > (
            L"AttributeAssignment",
            L"http://www.qut.com/middleware/lxacmlSchema",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"ObligationId",
          e);

        a.dom_attribute () << i.ObligationId ();
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"FulfillOn",
          e);

        a.dom_attribute () << i.FulfillOn ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ObligationType >
    _xsd_ObligationType_type_serializer_init (
      L"ObligationType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    operator<< (::xercesc::DOMElement& e,
                EffectType i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,
                EffectType i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >& l,
                EffectType i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, EffectType >
    _xsd_EffectType_type_serializer_init (
      L"EffectType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    AttributeAssignment (::xercesc::DOMDocument& d,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType& s,
                         ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlSchema::AttributeAssignmentType > (
        L"AttributeAssignment",
        L"http://www.qut.com/middleware/lxacmlSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeAssignment (const ::middleware::lxacmlSchema::AttributeAssignmentType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlSchema::AttributeAssignmentType > (
            L"AttributeAssignment",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m,
            s,
            f));
        ::middleware::lxacmlSchema::AttributeAssignment (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    AttributeAssignment (::xercesc::XMLFormatTarget& t,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::AttributeAssignment (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AttributeAssignment (::xercesc::XMLFormatTarget& t,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::AttributeAssignment (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeAssignment (::xercesc::XMLFormatTarget& t,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xercesc::DOMErrorHandler& h,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::AttributeAssignment (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeAssignment (::std::ostream& o,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::AttributeAssignment (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AttributeAssignment (::std::ostream& o,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::AttributeAssignment (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeAssignment (::std::ostream& o,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xercesc::DOMErrorHandler& h,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::AttributeAssignment (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const AttributeAssignmentType& i)
    {
      e << static_cast< const ::middleware::lxacmlSchema::AttributeValueType& > (i);

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"AttributeId",
          e);

        a.dom_attribute () << i.AttributeId ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AttributeAssignmentType >
    _xsd_AttributeAssignmentType_type_serializer_init (
      L"AttributeAssignmentType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Description (::xercesc::DOMDocument& d,
                 const ::xml_schema::string& s,
                 ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::xml_schema::string > (
        L"Description",
        L"http://www.qut.com/middleware/lxacmlSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Description (const ::xml_schema::string& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::xml_schema::string > (
            L"Description",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m,
            s,
            f));
        ::middleware::lxacmlSchema::Description (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Description (::xercesc::XMLFormatTarget& t,
                 const ::xml_schema::string& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Description (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Description (::xercesc::XMLFormatTarget& t,
                 const ::xml_schema::string& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Description (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Description (::xercesc::XMLFormatTarget& t,
                 const ::xml_schema::string& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Description (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Description (::std::ostream& o,
                 const ::xml_schema::string& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Description (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Description (::std::ostream& o,
                 const ::xml_schema::string& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Description (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Description (::std::ostream& o,
                 const ::xml_schema::string& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Description (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

