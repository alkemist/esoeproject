// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

#ifndef LXACML_SCHEMA_GROUPTARGET_HXX
#define LXACML_SCHEMA_GROUPTARGET_HXX

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 2030100L)
#error XSD runtime version mismatch
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include "xsd/xml-schema.hxx"

// Forward declarations.
//
namespace middleware
{
  namespace lxacmlGroupTargetSchema
  {
    class GroupTargetType;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

namespace middleware
{
  namespace lxacmlGroupTargetSchema
  {
    class GroupTargetType: public ::xml_schema::type
    {
      public:

      struct _xsd_GroupTargetType
      {
        typedef ::xml_schema::type base_;
      };

      // GroupTargetID
      // 
      public:
      struct GroupTargetID
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const GroupTargetID::type&
      GroupTargetID () const;

      GroupTargetID::type&
      GroupTargetID ();

      void
      GroupTargetID (const GroupTargetID::type&);

      void
      GroupTargetID (::std::auto_ptr< GroupTargetID::type >);

      // AuthzTarget
      // 
      public:
      struct AuthzTarget
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AuthzTarget::container&
      AuthzTarget () const;

      AuthzTarget::container&
      AuthzTarget ();

      void
      AuthzTarget (const AuthzTarget::container&);

      // Constructors.
      //
      public:
      GroupTargetType ();

      GroupTargetType (const GroupTargetID::type&);

      GroupTargetType (const ::xercesc::DOMElement&,
                       ::xml_schema::flags = 0,
                       ::xml_schema::type* = 0);

      GroupTargetType (const GroupTargetType&,
                       ::xml_schema::flags = 0,
                       ::xml_schema::type* = 0);

      virtual GroupTargetType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< GroupTargetID::type > _xsd_GroupTargetID_;
      ::xsd::cxx::tree::sequence< AuthzTarget::type > _xsd_AuthzTarget_;
    };
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMInputSource.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace middleware
{
  namespace lxacmlGroupTargetSchema
  {
    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlGroupTargetSchema::GroupTargetType >
    GroupTarget (const ::std::basic_string< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlGroupTargetSchema::GroupTargetType >
    GroupTarget (const ::std::basic_string< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlGroupTargetSchema::GroupTargetType >
    GroupTarget (const ::std::basic_string< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlGroupTargetSchema::GroupTargetType >
    GroupTarget (::std::istream&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlGroupTargetSchema::GroupTargetType >
    GroupTarget (::std::istream&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlGroupTargetSchema::GroupTargetType >
    GroupTarget (::std::istream&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlGroupTargetSchema::GroupTargetType >
    GroupTarget (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlGroupTargetSchema::GroupTargetType >
    GroupTarget (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlGroupTargetSchema::GroupTargetType >
    GroupTarget (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlGroupTargetSchema::GroupTargetType >
    GroupTarget (const ::xercesc::DOMInputSource&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlGroupTargetSchema::GroupTargetType >
    GroupTarget (const ::xercesc::DOMInputSource&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlGroupTargetSchema::GroupTargetType >
    GroupTarget (const ::xercesc::DOMInputSource&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlGroupTargetSchema::GroupTargetType >
    GroupTarget (const ::xercesc::DOMDocument&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());
  }
}

#include <iosfwd> // std::ostream&

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace middleware
{
  namespace lxacmlGroupTargetSchema
  {
    // Serialize to an existing DOM instance.
    //
    void
    GroupTarget (::xercesc::DOMDocument&,
                 const ::middleware::lxacmlGroupTargetSchema::GroupTargetType&,
                 ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    GroupTarget (const ::middleware::lxacmlGroupTargetSchema::GroupTargetType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    GroupTarget (::xercesc::XMLFormatTarget&,
                 const ::middleware::lxacmlGroupTargetSchema::GroupTargetType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    GroupTarget (::xercesc::XMLFormatTarget&,
                 const ::middleware::lxacmlGroupTargetSchema::GroupTargetType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);

    void
    GroupTarget (::xercesc::XMLFormatTarget&,
                 const ::middleware::lxacmlGroupTargetSchema::GroupTargetType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    GroupTarget (::std::ostream&,
                 const ::middleware::lxacmlGroupTargetSchema::GroupTargetType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    GroupTarget (::std::ostream&,
                 const ::middleware::lxacmlGroupTargetSchema::GroupTargetType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);

    void
    GroupTarget (::std::ostream&,
                 const ::middleware::lxacmlGroupTargetSchema::GroupTargetType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const GroupTargetType&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // LXACML_SCHEMA_GROUPTARGET_HXX
