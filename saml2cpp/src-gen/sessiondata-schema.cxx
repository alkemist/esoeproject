// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "sessiondata-schema.hxx"

namespace middleware
{
  namespace SessionDataSchema
  {
    // SessionDataType
    // 

    const SessionDataType::Identity::container& SessionDataType::
    Identity () const
    {
      return this->_xsd_Identity_;
    }

    SessionDataType::Identity::container& SessionDataType::
    Identity ()
    {
      return this->_xsd_Identity_;
    }

    void SessionDataType::
    Identity (const Identity::container& Identity)
    {
      this->_xsd_Identity_ = Identity;
    }


    // IdentityType
    // 

    const IdentityType::Attribute::container& IdentityType::
    Attribute () const
    {
      return this->_xsd_Attribute_;
    }

    IdentityType::Attribute::container& IdentityType::
    Attribute ()
    {
      return this->_xsd_Attribute_;
    }

    void IdentityType::
    Attribute (const Attribute::container& Attribute)
    {
      this->_xsd_Attribute_ = Attribute;
    }


    // AttributeType
    // 

    const AttributeType::Handler::container& AttributeType::
    Handler () const
    {
      return this->_xsd_Handler_;
    }

    AttributeType::Handler::container& AttributeType::
    Handler ()
    {
      return this->_xsd_Handler_;
    }

    void AttributeType::
    Handler (const Handler::container& Handler)
    {
      this->_xsd_Handler_ = Handler;
    }

    const AttributeType::Identifier::type& AttributeType::
    Identifier () const
    {
      return this->_xsd_Identifier_.get ();
    }

    AttributeType::Identifier::type& AttributeType::
    Identifier ()
    {
      return this->_xsd_Identifier_.get ();
    }

    void AttributeType::
    Identifier (const Identifier::type& Identifier)
    {
      this->_xsd_Identifier_.set (Identifier);
    }

    void AttributeType::
    Identifier (::std::auto_ptr< Identifier::type > Identifier)
    {
      this->_xsd_Identifier_.set (Identifier);
    }

    const AttributeType::Type::type& AttributeType::
    Type () const
    {
      return this->_xsd_Type_.get ();
    }

    AttributeType::Type::type& AttributeType::
    Type ()
    {
      return this->_xsd_Type_.get ();
    }

    void AttributeType::
    Type (const Type::type& Type)
    {
      this->_xsd_Type_.set (Type);
    }

    void AttributeType::
    Type (::std::auto_ptr< Type::type > Type)
    {
      this->_xsd_Type_.set (Type);
    }

    const AttributeType::Singleton::type& AttributeType::
    Singleton () const
    {
      return this->_xsd_Singleton_.get ();
    }

    AttributeType::Singleton::type& AttributeType::
    Singleton ()
    {
      return this->_xsd_Singleton_.get ();
    }

    void AttributeType::
    Singleton (const Singleton::type& Singleton)
    {
      this->_xsd_Singleton_.set (Singleton);
    }


    // DataType
    // 

    DataType::
    DataType ()
    : ::xml_schema::string ()
    {
    }

    DataType::
    DataType (_xsd_DataType v)
    : ::xml_schema::string (_xsd_DataType_literals_[v])
    {
    }

    DataType::
    DataType (const ::xml_schema::string& _xsd_DataType)
    : ::xml_schema::string (_xsd_DataType)
    {
    }

    DataType::
    DataType (const DataType& v,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    DataType& DataType::
    operator= (_xsd_DataType v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_DataType_literals_[v]);

      return *this;
    }


    // HandlerType
    // 

    const HandlerType::Name::type& HandlerType::
    Name () const
    {
      return this->_xsd_Name_.get ();
    }

    HandlerType::Name::type& HandlerType::
    Name ()
    {
      return this->_xsd_Name_.get ();
    }

    void HandlerType::
    Name (const Name::type& Name)
    {
      this->_xsd_Name_.set (Name);
    }

    void HandlerType::
    Name (::std::auto_ptr< Name::type > Name)
    {
      this->_xsd_Name_.set (Name);
    }

    const HandlerType::LocalIdentifier::type& HandlerType::
    LocalIdentifier () const
    {
      return this->_xsd_LocalIdentifier_.get ();
    }

    HandlerType::LocalIdentifier::type& HandlerType::
    LocalIdentifier ()
    {
      return this->_xsd_LocalIdentifier_.get ();
    }

    void HandlerType::
    LocalIdentifier (const LocalIdentifier::type& LocalIdentifier)
    {
      this->_xsd_LocalIdentifier_.set (LocalIdentifier);
    }

    void HandlerType::
    LocalIdentifier (::std::auto_ptr< LocalIdentifier::type > LocalIdentifier)
    {
      this->_xsd_LocalIdentifier_.set (LocalIdentifier);
    }
  }
}

#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/parser.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_factory_plate< 0, wchar_t >
  type_factory_plate_init;
}

namespace middleware
{
  namespace SessionDataSchema
  {
    // SessionDataType
    //

    SessionDataType::
    SessionDataType ()
    : ::xml_schema::type (),
    _xsd_Identity_ (::xml_schema::flags (), this)
    {
    }

    SessionDataType::
    SessionDataType (const SessionDataType& _xsd_SessionDataType,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_SessionDataType, f, c),
    _xsd_Identity_ (_xsd_SessionDataType._xsd_Identity_,
                    f | ::xml_schema::flags::not_root,
                    this)
    {
    }

    SessionDataType::
    SessionDataType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Identity_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void SessionDataType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Identity
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Identity::type > r (
            tfm.create< Identity::type > (
              L"Identity",
              L"http://www.qut.com/middleware/SessionDataSchema",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->Identity ().push_back (r);
            continue;
          }
        }
      }
    }

    SessionDataType* SessionDataType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new SessionDataType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SessionDataType >
    _xsd_SessionDataType_type_factory_init (
      L"SessionDataType http://www.qut.com/middleware/SessionDataSchema");


    // IdentityType
    //

    IdentityType::
    IdentityType ()
    : ::xml_schema::type (),
    _xsd_Attribute_ (::xml_schema::flags (), this)
    {
    }

    IdentityType::
    IdentityType (const IdentityType& _xsd_IdentityType,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_IdentityType, f, c),
    _xsd_Attribute_ (_xsd_IdentityType._xsd_Attribute_,
                     f | ::xml_schema::flags::not_root,
                     this)
    {
    }

    IdentityType::
    IdentityType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Attribute_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void IdentityType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Attribute
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Attribute::type > r (
            tfm.create< Attribute::type > (
              L"Attribute",
              L"http://www.qut.com/middleware/SessionDataSchema",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->Attribute ().push_back (r);
            continue;
          }
        }
      }
    }

    IdentityType* IdentityType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new IdentityType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, IdentityType >
    _xsd_IdentityType_type_factory_init (
      L"IdentityType http://www.qut.com/middleware/SessionDataSchema");


    // AttributeType
    //

    AttributeType::
    AttributeType ()
    : ::xml_schema::type (),
    _xsd_Handler_ (::xml_schema::flags (), this),
    _xsd_Identifier_ (::xml_schema::flags (), this),
    _xsd_Type_ (::xml_schema::flags (), this),
    _xsd_Singleton_ (::xml_schema::flags (), this)
    {
    }

    AttributeType::
    AttributeType (const Identifier::type& _xsd_Identifier,
                   const Type::type& _xsd_Type,
                   const Singleton::type& _xsd_Singleton)
    : ::xml_schema::type (),
    _xsd_Handler_ (::xml_schema::flags (), this),
    _xsd_Identifier_ (_xsd_Identifier,
                      ::xml_schema::flags (),
                      this),
    _xsd_Type_ (_xsd_Type,
                ::xml_schema::flags (),
                this),
    _xsd_Singleton_ (_xsd_Singleton,
                     ::xml_schema::flags (),
                     this)
    {
    }

    AttributeType::
    AttributeType (const AttributeType& _xsd_AttributeType,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_AttributeType, f, c),
    _xsd_Handler_ (_xsd_AttributeType._xsd_Handler_,
                   f | ::xml_schema::flags::not_root,
                   this),
    _xsd_Identifier_ (_xsd_AttributeType._xsd_Identifier_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_Type_ (_xsd_AttributeType._xsd_Type_,
                f | ::xml_schema::flags::not_root,
                this),
    _xsd_Singleton_ (_xsd_AttributeType._xsd_Singleton_,
                     f | ::xml_schema::flags::not_root,
                     this)
    {
    }

    AttributeType::
    AttributeType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Handler_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Identifier_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Type_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Singleton_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void AttributeType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Handler
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Handler::type > r (
            tfm.create< Handler::type > (
              L"Handler",
              L"http://www.qut.com/middleware/SessionDataSchema",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->Handler ().push_back (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Identifier" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Identifier::type > r (
            Identifier::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Identifier (r);
          continue;
        }

        if (a.name () == L"Type" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Type::type > r (
            Type::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Type (r);
          continue;
        }

        if (a.name () == L"Singleton" && a.namespace_ ().empty ())
        {
          this->Singleton (
            Singleton::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));
          continue;
        }
      }

      if (!_xsd_Identifier_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Identifier",
          L"");
      }

      if (!_xsd_Type_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Type",
          L"");
      }

      if (!_xsd_Singleton_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Singleton",
          L"");
      }
    }

    AttributeType* AttributeType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new AttributeType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AttributeType >
    _xsd_AttributeType_type_factory_init (
      L"AttributeType http://www.qut.com/middleware/SessionDataSchema");


    // DataType
    //

    DataType::
    DataType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_DataType_convert ();
    }

    DataType::
    DataType (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_DataType_convert ();
    }

    DataType::
    DataType (const ::std::basic_string< wchar_t >& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_DataType_convert ();
    }

    DataType* DataType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new DataType (*this, f, c);
    }

    DataType::_xsd_DataType DataType::
    _xsd_DataType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_DataType_literals_);
      const _xsd_DataType* i (::std::lower_bound (
                                _xsd_DataType_indexes_,
                                _xsd_DataType_indexes_ + 6,
                                *this,
                                c));

      if (i == _xsd_DataType_indexes_ + 6 || _xsd_DataType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const DataType::
    _xsd_DataType_literals_[6] =
    {
      L"String",
      L"Integer",
      L"Float",
      L"Date",
      L"Boolean",
      L"Other"
    };

    const DataType::_xsd_DataType DataType::
    _xsd_DataType_indexes_[6] =
    {
      ::middleware::SessionDataSchema::DataType::Boolean,
      ::middleware::SessionDataSchema::DataType::Date,
      ::middleware::SessionDataSchema::DataType::Float,
      ::middleware::SessionDataSchema::DataType::Integer,
      ::middleware::SessionDataSchema::DataType::Other,
      ::middleware::SessionDataSchema::DataType::String
    };

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DataType >
    _xsd_DataType_type_factory_init (
      L"DataType http://www.qut.com/middleware/SessionDataSchema");


    // HandlerType
    //

    HandlerType::
    HandlerType ()
    : ::xml_schema::type (),
    _xsd_Name_ (::xml_schema::flags (), this),
    _xsd_LocalIdentifier_ (::xml_schema::flags (), this)
    {
    }

    HandlerType::
    HandlerType (const Name::type& _xsd_Name,
                 const LocalIdentifier::type& _xsd_LocalIdentifier)
    : ::xml_schema::type (),
    _xsd_Name_ (_xsd_Name,
                ::xml_schema::flags (),
                this),
    _xsd_LocalIdentifier_ (_xsd_LocalIdentifier,
                           ::xml_schema::flags (),
                           this)
    {
    }

    HandlerType::
    HandlerType (const HandlerType& _xsd_HandlerType,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_HandlerType, f, c),
    _xsd_Name_ (_xsd_HandlerType._xsd_Name_,
                f | ::xml_schema::flags::not_root,
                this),
    _xsd_LocalIdentifier_ (_xsd_HandlerType._xsd_LocalIdentifier_,
                           f | ::xml_schema::flags::not_root,
                           this)
    {
    }

    HandlerType::
    HandlerType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Name_ (f | ::xml_schema::flags::not_root, this),
    _xsd_LocalIdentifier_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void HandlerType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Name" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Name::type > r (
            Name::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Name (r);
          continue;
        }

        if (a.name () == L"LocalIdentifier" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< LocalIdentifier::type > r (
            LocalIdentifier::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->LocalIdentifier (r);
          continue;
        }
      }

      if (!_xsd_Name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Name",
          L"");
      }

      if (!_xsd_LocalIdentifier_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"LocalIdentifier",
          L"");
      }
    }

    HandlerType* HandlerType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new HandlerType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, HandlerType >
    _xsd_HandlerType_type_factory_init (
      L"HandlerType http://www.qut.com/middleware/SessionDataSchema");
  }
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace middleware
{
  namespace SessionDataSchema
  {
    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (const ::std::basic_string< wchar_t >& u,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::SessionDataSchema::SessionData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (const ::std::basic_string< wchar_t >& u,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::SessionDataSchema::SessionData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (const ::std::basic_string< wchar_t >& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::SessionDataSchema::SessionData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::SessionDataSchema::SessionData (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::std::istream& is,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::SessionDataSchema::SessionData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::SessionDataSchema::SessionData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::SessionDataSchema::SessionData (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::SessionDataSchema::SessionData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::SessionDataSchema::SessionData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (const ::xercesc::DOMInputSource& i,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::SessionDataSchema::SessionData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (const ::xercesc::DOMInputSource& i,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::SessionDataSchema::SessionData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (const ::xercesc::DOMInputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::SessionDataSchema::SessionData (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType > r (
        tfm.create< ::middleware::SessionDataSchema::SessionDataType > (
          L"SessionData",
          L"http://www.qut.com/middleware/SessionDataSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"SessionData",
        L"http://www.qut.com/middleware/SessionDataSchema");
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/serialization.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_serializer_plate< 0, wchar_t >
  type_serializer_plate_init;
}

namespace middleware
{
  namespace SessionDataSchema
  {
    void
    SessionData (::xercesc::DOMDocument& d,
                 const ::middleware::SessionDataSchema::SessionDataType& s,
                 ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::SessionDataSchema::SessionDataType > (
        L"SessionData",
        L"http://www.qut.com/middleware/SessionDataSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SessionData (const ::middleware::SessionDataSchema::SessionDataType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::SessionDataSchema::SessionDataType > (
            L"SessionData",
            L"http://www.qut.com/middleware/SessionDataSchema",
            m,
            s,
            f));
        ::middleware::SessionDataSchema::SessionData (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    SessionData (::xercesc::XMLFormatTarget& t,
                 const ::middleware::SessionDataSchema::SessionDataType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::SessionDataSchema::SessionData (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SessionData (::xercesc::XMLFormatTarget& t,
                 const ::middleware::SessionDataSchema::SessionDataType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::SessionDataSchema::SessionData (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SessionData (::xercesc::XMLFormatTarget& t,
                 const ::middleware::SessionDataSchema::SessionDataType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::SessionDataSchema::SessionData (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SessionData (::std::ostream& o,
                 const ::middleware::SessionDataSchema::SessionDataType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::SessionDataSchema::SessionData (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SessionData (::std::ostream& o,
                 const ::middleware::SessionDataSchema::SessionDataType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::SessionDataSchema::SessionData (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SessionData (::std::ostream& o,
                 const ::middleware::SessionDataSchema::SessionDataType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::SessionDataSchema::SessionData (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const SessionDataType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (SessionDataType::Identity::const_iterator
             b (i.Identity ().begin ()), n (i.Identity ().end ());
             b != n; ++b)
        {
          tsm.serialize< SessionDataType::Identity::type > (
            L"Identity",
            L"http://www.qut.com/middleware/SessionDataSchema",
            false,
            true,
            e,
            *b);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SessionDataType >
    _xsd_SessionDataType_type_serializer_init (
      L"SessionDataType",
      L"http://www.qut.com/middleware/SessionDataSchema");


    void
    operator<< (::xercesc::DOMElement& e,
                const IdentityType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (IdentityType::Attribute::const_iterator
             b (i.Attribute ().begin ()), n (i.Attribute ().end ());
             b != n; ++b)
        {
          tsm.serialize< IdentityType::Attribute::type > (
            L"Attribute",
            L"http://www.qut.com/middleware/SessionDataSchema",
            false,
            true,
            e,
            *b);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, IdentityType >
    _xsd_IdentityType_type_serializer_init (
      L"IdentityType",
      L"http://www.qut.com/middleware/SessionDataSchema");


    void
    operator<< (::xercesc::DOMElement& e,
                const AttributeType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (AttributeType::Handler::const_iterator
             b (i.Handler ().begin ()), n (i.Handler ().end ());
             b != n; ++b)
        {
          tsm.serialize< AttributeType::Handler::type > (
            L"Handler",
            L"http://www.qut.com/middleware/SessionDataSchema",
            false,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Identifier",
          e);

        a.dom_attribute () << i.Identifier ();
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Type",
          e);

        a.dom_attribute () << i.Type ();
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Singleton",
          e);

        a.dom_attribute () << i.Singleton ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AttributeType >
    _xsd_AttributeType_type_serializer_init (
      L"AttributeType",
      L"http://www.qut.com/middleware/SessionDataSchema");


    void
    operator<< (::xercesc::DOMElement& e,
                DataType i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,
                DataType i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >& l,
                DataType i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DataType >
    _xsd_DataType_type_serializer_init (
      L"DataType",
      L"http://www.qut.com/middleware/SessionDataSchema");


    void
    operator<< (::xercesc::DOMElement& e,
                const HandlerType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Name",
          e);

        a.dom_attribute () << i.Name ();
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"LocalIdentifier",
          e);

        a.dom_attribute () << i.LocalIdentifier ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, HandlerType >
    _xsd_HandlerType_type_serializer_init (
      L"HandlerType",
      L"http://www.qut.com/middleware/SessionDataSchema");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

