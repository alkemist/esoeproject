// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "saml-schema-metadata-2.0.hxx"

namespace saml2
{
  namespace metadata
  {
    // entityIDType
    // 


    // localizedNameType
    // 

    const localizedNameType::lang::type& localizedNameType::
    lang () const
    {
      return this->_xsd_lang_.get ();
    }

    localizedNameType::lang::type& localizedNameType::
    lang ()
    {
      return this->_xsd_lang_.get ();
    }

    void localizedNameType::
    lang (const lang::type& lang)
    {
      this->_xsd_lang_.set (lang);
    }

    void localizedNameType::
    lang (::std::auto_ptr< lang::type > lang)
    {
      this->_xsd_lang_.set (lang);
    }


    // localizedURIType
    // 

    const localizedURIType::lang::type& localizedURIType::
    lang () const
    {
      return this->_xsd_lang_.get ();
    }

    localizedURIType::lang::type& localizedURIType::
    lang ()
    {
      return this->_xsd_lang_.get ();
    }

    void localizedURIType::
    lang (const lang::type& lang)
    {
      this->_xsd_lang_.set (lang);
    }

    void localizedURIType::
    lang (::std::auto_ptr< lang::type > lang)
    {
      this->_xsd_lang_.set (lang);
    }


    // ExtensionsType
    // 


    // EndpointType
    // 

    const EndpointType::Binding::type& EndpointType::
    Binding () const
    {
      return this->_xsd_Binding_.get ();
    }

    EndpointType::Binding::type& EndpointType::
    Binding ()
    {
      return this->_xsd_Binding_.get ();
    }

    void EndpointType::
    Binding (const Binding::type& Binding)
    {
      this->_xsd_Binding_.set (Binding);
    }

    void EndpointType::
    Binding (::std::auto_ptr< Binding::type > Binding)
    {
      this->_xsd_Binding_.set (Binding);
    }

    const EndpointType::Location::type& EndpointType::
    Location () const
    {
      return this->_xsd_Location_.get ();
    }

    EndpointType::Location::type& EndpointType::
    Location ()
    {
      return this->_xsd_Location_.get ();
    }

    void EndpointType::
    Location (const Location::type& Location)
    {
      this->_xsd_Location_.set (Location);
    }

    void EndpointType::
    Location (::std::auto_ptr< Location::type > Location)
    {
      this->_xsd_Location_.set (Location);
    }

    const EndpointType::ResponseLocation::container& EndpointType::
    ResponseLocation () const
    {
      return this->_xsd_ResponseLocation_;
    }

    EndpointType::ResponseLocation::container& EndpointType::
    ResponseLocation ()
    {
      return this->_xsd_ResponseLocation_;
    }

    void EndpointType::
    ResponseLocation (const ResponseLocation::type& ResponseLocation)
    {
      this->_xsd_ResponseLocation_.set (ResponseLocation);
    }

    void EndpointType::
    ResponseLocation (const ResponseLocation::container& ResponseLocation)
    {
      this->_xsd_ResponseLocation_ = ResponseLocation;
    }

    void EndpointType::
    ResponseLocation (::std::auto_ptr< ResponseLocation::type > ResponseLocation)
    {
      this->_xsd_ResponseLocation_.set (ResponseLocation);
    }


    // IndexedEndpointType
    // 

    const IndexedEndpointType::index::type& IndexedEndpointType::
    index () const
    {
      return this->_xsd_index_.get ();
    }

    IndexedEndpointType::index::type& IndexedEndpointType::
    index ()
    {
      return this->_xsd_index_.get ();
    }

    void IndexedEndpointType::
    index (const index::type& index)
    {
      this->_xsd_index_.set (index);
    }

    const IndexedEndpointType::isDefault::container& IndexedEndpointType::
    isDefault () const
    {
      return this->_xsd_isDefault_;
    }

    IndexedEndpointType::isDefault::container& IndexedEndpointType::
    isDefault ()
    {
      return this->_xsd_isDefault_;
    }

    void IndexedEndpointType::
    isDefault (const isDefault::type& isDefault)
    {
      this->_xsd_isDefault_.set (isDefault);
    }

    void IndexedEndpointType::
    isDefault (const isDefault::container& isDefault)
    {
      this->_xsd_isDefault_ = isDefault;
    }


    // EntitiesDescriptorType
    // 

    const EntitiesDescriptorType::Signature::container& EntitiesDescriptorType::
    Signature () const
    {
      return this->_xsd_Signature_;
    }

    EntitiesDescriptorType::Signature::container& EntitiesDescriptorType::
    Signature ()
    {
      return this->_xsd_Signature_;
    }

    void EntitiesDescriptorType::
    Signature (const Signature::type& Signature)
    {
      this->_xsd_Signature_.set (Signature);
    }

    void EntitiesDescriptorType::
    Signature (const Signature::container& Signature)
    {
      this->_xsd_Signature_ = Signature;
    }

    void EntitiesDescriptorType::
    Signature (::std::auto_ptr< Signature::type > Signature)
    {
      this->_xsd_Signature_.set (Signature);
    }

    const EntitiesDescriptorType::Extensions::container& EntitiesDescriptorType::
    Extensions () const
    {
      return this->_xsd_Extensions_;
    }

    EntitiesDescriptorType::Extensions::container& EntitiesDescriptorType::
    Extensions ()
    {
      return this->_xsd_Extensions_;
    }

    void EntitiesDescriptorType::
    Extensions (const Extensions::type& Extensions)
    {
      this->_xsd_Extensions_.set (Extensions);
    }

    void EntitiesDescriptorType::
    Extensions (const Extensions::container& Extensions)
    {
      this->_xsd_Extensions_ = Extensions;
    }

    void EntitiesDescriptorType::
    Extensions (::std::auto_ptr< Extensions::type > Extensions)
    {
      this->_xsd_Extensions_.set (Extensions);
    }

    const EntitiesDescriptorType::EntityDescriptor::container& EntitiesDescriptorType::
    EntityDescriptor () const
    {
      return this->_xsd_EntityDescriptor_;
    }

    EntitiesDescriptorType::EntityDescriptor::container& EntitiesDescriptorType::
    EntityDescriptor ()
    {
      return this->_xsd_EntityDescriptor_;
    }

    void EntitiesDescriptorType::
    EntityDescriptor (const EntityDescriptor::container& EntityDescriptor)
    {
      this->_xsd_EntityDescriptor_ = EntityDescriptor;
    }

    const EntitiesDescriptorType::EntitiesDescriptor::container& EntitiesDescriptorType::
    EntitiesDescriptor () const
    {
      return this->_xsd_EntitiesDescriptor_;
    }

    EntitiesDescriptorType::EntitiesDescriptor::container& EntitiesDescriptorType::
    EntitiesDescriptor ()
    {
      return this->_xsd_EntitiesDescriptor_;
    }

    void EntitiesDescriptorType::
    EntitiesDescriptor (const EntitiesDescriptor::container& EntitiesDescriptor)
    {
      this->_xsd_EntitiesDescriptor_ = EntitiesDescriptor;
    }

    const EntitiesDescriptorType::validUntil::container& EntitiesDescriptorType::
    validUntil () const
    {
      return this->_xsd_validUntil_;
    }

    EntitiesDescriptorType::validUntil::container& EntitiesDescriptorType::
    validUntil ()
    {
      return this->_xsd_validUntil_;
    }

    void EntitiesDescriptorType::
    validUntil (const validUntil::type& validUntil)
    {
      this->_xsd_validUntil_.set (validUntil);
    }

    void EntitiesDescriptorType::
    validUntil (const validUntil::container& validUntil)
    {
      this->_xsd_validUntil_ = validUntil;
    }

    void EntitiesDescriptorType::
    validUntil (::std::auto_ptr< validUntil::type > validUntil)
    {
      this->_xsd_validUntil_.set (validUntil);
    }

    const EntitiesDescriptorType::cacheDuration::container& EntitiesDescriptorType::
    cacheDuration () const
    {
      return this->_xsd_cacheDuration_;
    }

    EntitiesDescriptorType::cacheDuration::container& EntitiesDescriptorType::
    cacheDuration ()
    {
      return this->_xsd_cacheDuration_;
    }

    void EntitiesDescriptorType::
    cacheDuration (const cacheDuration::type& cacheDuration)
    {
      this->_xsd_cacheDuration_.set (cacheDuration);
    }

    void EntitiesDescriptorType::
    cacheDuration (const cacheDuration::container& cacheDuration)
    {
      this->_xsd_cacheDuration_ = cacheDuration;
    }

    void EntitiesDescriptorType::
    cacheDuration (::std::auto_ptr< cacheDuration::type > cacheDuration)
    {
      this->_xsd_cacheDuration_.set (cacheDuration);
    }

    const EntitiesDescriptorType::ID::container& EntitiesDescriptorType::
    ID () const
    {
      return this->_xsd_ID_;
    }

    EntitiesDescriptorType::ID::container& EntitiesDescriptorType::
    ID ()
    {
      return this->_xsd_ID_;
    }

    void EntitiesDescriptorType::
    ID (const ID::type& ID)
    {
      this->_xsd_ID_.set (ID);
    }

    void EntitiesDescriptorType::
    ID (const ID::container& ID)
    {
      this->_xsd_ID_ = ID;
    }

    void EntitiesDescriptorType::
    ID (::std::auto_ptr< ID::type > ID)
    {
      this->_xsd_ID_.set (ID);
    }

    const EntitiesDescriptorType::Name::container& EntitiesDescriptorType::
    Name () const
    {
      return this->_xsd_Name_;
    }

    EntitiesDescriptorType::Name::container& EntitiesDescriptorType::
    Name ()
    {
      return this->_xsd_Name_;
    }

    void EntitiesDescriptorType::
    Name (const Name::type& Name)
    {
      this->_xsd_Name_.set (Name);
    }

    void EntitiesDescriptorType::
    Name (const Name::container& Name)
    {
      this->_xsd_Name_ = Name;
    }

    void EntitiesDescriptorType::
    Name (::std::auto_ptr< Name::type > Name)
    {
      this->_xsd_Name_.set (Name);
    }


    // EntityDescriptorType
    // 

    const EntityDescriptorType::Signature::container& EntityDescriptorType::
    Signature () const
    {
      return this->_xsd_Signature_;
    }

    EntityDescriptorType::Signature::container& EntityDescriptorType::
    Signature ()
    {
      return this->_xsd_Signature_;
    }

    void EntityDescriptorType::
    Signature (const Signature::type& Signature)
    {
      this->_xsd_Signature_.set (Signature);
    }

    void EntityDescriptorType::
    Signature (const Signature::container& Signature)
    {
      this->_xsd_Signature_ = Signature;
    }

    void EntityDescriptorType::
    Signature (::std::auto_ptr< Signature::type > Signature)
    {
      this->_xsd_Signature_.set (Signature);
    }

    const EntityDescriptorType::Extensions::container& EntityDescriptorType::
    Extensions () const
    {
      return this->_xsd_Extensions_;
    }

    EntityDescriptorType::Extensions::container& EntityDescriptorType::
    Extensions ()
    {
      return this->_xsd_Extensions_;
    }

    void EntityDescriptorType::
    Extensions (const Extensions::type& Extensions)
    {
      this->_xsd_Extensions_.set (Extensions);
    }

    void EntityDescriptorType::
    Extensions (const Extensions::container& Extensions)
    {
      this->_xsd_Extensions_ = Extensions;
    }

    void EntityDescriptorType::
    Extensions (::std::auto_ptr< Extensions::type > Extensions)
    {
      this->_xsd_Extensions_.set (Extensions);
    }

    const EntityDescriptorType::RoleDescriptor::container& EntityDescriptorType::
    RoleDescriptor () const
    {
      return this->_xsd_RoleDescriptor_;
    }

    EntityDescriptorType::RoleDescriptor::container& EntityDescriptorType::
    RoleDescriptor ()
    {
      return this->_xsd_RoleDescriptor_;
    }

    void EntityDescriptorType::
    RoleDescriptor (const RoleDescriptor::container& RoleDescriptor)
    {
      this->_xsd_RoleDescriptor_ = RoleDescriptor;
    }

    const EntityDescriptorType::IDPSSODescriptor::container& EntityDescriptorType::
    IDPSSODescriptor () const
    {
      return this->_xsd_IDPSSODescriptor_;
    }

    EntityDescriptorType::IDPSSODescriptor::container& EntityDescriptorType::
    IDPSSODescriptor ()
    {
      return this->_xsd_IDPSSODescriptor_;
    }

    void EntityDescriptorType::
    IDPSSODescriptor (const IDPSSODescriptor::container& IDPSSODescriptor)
    {
      this->_xsd_IDPSSODescriptor_ = IDPSSODescriptor;
    }

    const EntityDescriptorType::SPSSODescriptor::container& EntityDescriptorType::
    SPSSODescriptor () const
    {
      return this->_xsd_SPSSODescriptor_;
    }

    EntityDescriptorType::SPSSODescriptor::container& EntityDescriptorType::
    SPSSODescriptor ()
    {
      return this->_xsd_SPSSODescriptor_;
    }

    void EntityDescriptorType::
    SPSSODescriptor (const SPSSODescriptor::container& SPSSODescriptor)
    {
      this->_xsd_SPSSODescriptor_ = SPSSODescriptor;
    }

    const EntityDescriptorType::AuthnAuthorityDescriptor::container& EntityDescriptorType::
    AuthnAuthorityDescriptor () const
    {
      return this->_xsd_AuthnAuthorityDescriptor_;
    }

    EntityDescriptorType::AuthnAuthorityDescriptor::container& EntityDescriptorType::
    AuthnAuthorityDescriptor ()
    {
      return this->_xsd_AuthnAuthorityDescriptor_;
    }

    void EntityDescriptorType::
    AuthnAuthorityDescriptor (const AuthnAuthorityDescriptor::container& AuthnAuthorityDescriptor)
    {
      this->_xsd_AuthnAuthorityDescriptor_ = AuthnAuthorityDescriptor;
    }

    const EntityDescriptorType::AttributeAuthorityDescriptor::container& EntityDescriptorType::
    AttributeAuthorityDescriptor () const
    {
      return this->_xsd_AttributeAuthorityDescriptor_;
    }

    EntityDescriptorType::AttributeAuthorityDescriptor::container& EntityDescriptorType::
    AttributeAuthorityDescriptor ()
    {
      return this->_xsd_AttributeAuthorityDescriptor_;
    }

    void EntityDescriptorType::
    AttributeAuthorityDescriptor (const AttributeAuthorityDescriptor::container& AttributeAuthorityDescriptor)
    {
      this->_xsd_AttributeAuthorityDescriptor_ = AttributeAuthorityDescriptor;
    }

    const EntityDescriptorType::PDPDescriptor::container& EntityDescriptorType::
    PDPDescriptor () const
    {
      return this->_xsd_PDPDescriptor_;
    }

    EntityDescriptorType::PDPDescriptor::container& EntityDescriptorType::
    PDPDescriptor ()
    {
      return this->_xsd_PDPDescriptor_;
    }

    void EntityDescriptorType::
    PDPDescriptor (const PDPDescriptor::container& PDPDescriptor)
    {
      this->_xsd_PDPDescriptor_ = PDPDescriptor;
    }

    const EntityDescriptorType::AffiliationDescriptor::container& EntityDescriptorType::
    AffiliationDescriptor () const
    {
      return this->_xsd_AffiliationDescriptor_;
    }

    EntityDescriptorType::AffiliationDescriptor::container& EntityDescriptorType::
    AffiliationDescriptor ()
    {
      return this->_xsd_AffiliationDescriptor_;
    }

    void EntityDescriptorType::
    AffiliationDescriptor (const AffiliationDescriptor::type& AffiliationDescriptor)
    {
      this->_xsd_AffiliationDescriptor_.set (AffiliationDescriptor);
    }

    void EntityDescriptorType::
    AffiliationDescriptor (const AffiliationDescriptor::container& AffiliationDescriptor)
    {
      this->_xsd_AffiliationDescriptor_ = AffiliationDescriptor;
    }

    void EntityDescriptorType::
    AffiliationDescriptor (::std::auto_ptr< AffiliationDescriptor::type > AffiliationDescriptor)
    {
      this->_xsd_AffiliationDescriptor_.set (AffiliationDescriptor);
    }

    const EntityDescriptorType::Organization::container& EntityDescriptorType::
    Organization () const
    {
      return this->_xsd_Organization_;
    }

    EntityDescriptorType::Organization::container& EntityDescriptorType::
    Organization ()
    {
      return this->_xsd_Organization_;
    }

    void EntityDescriptorType::
    Organization (const Organization::type& Organization)
    {
      this->_xsd_Organization_.set (Organization);
    }

    void EntityDescriptorType::
    Organization (const Organization::container& Organization)
    {
      this->_xsd_Organization_ = Organization;
    }

    void EntityDescriptorType::
    Organization (::std::auto_ptr< Organization::type > Organization)
    {
      this->_xsd_Organization_.set (Organization);
    }

    const EntityDescriptorType::ContactPerson::container& EntityDescriptorType::
    ContactPerson () const
    {
      return this->_xsd_ContactPerson_;
    }

    EntityDescriptorType::ContactPerson::container& EntityDescriptorType::
    ContactPerson ()
    {
      return this->_xsd_ContactPerson_;
    }

    void EntityDescriptorType::
    ContactPerson (const ContactPerson::container& ContactPerson)
    {
      this->_xsd_ContactPerson_ = ContactPerson;
    }

    const EntityDescriptorType::AdditionalMetadataLocation::container& EntityDescriptorType::
    AdditionalMetadataLocation () const
    {
      return this->_xsd_AdditionalMetadataLocation_;
    }

    EntityDescriptorType::AdditionalMetadataLocation::container& EntityDescriptorType::
    AdditionalMetadataLocation ()
    {
      return this->_xsd_AdditionalMetadataLocation_;
    }

    void EntityDescriptorType::
    AdditionalMetadataLocation (const AdditionalMetadataLocation::container& AdditionalMetadataLocation)
    {
      this->_xsd_AdditionalMetadataLocation_ = AdditionalMetadataLocation;
    }

    const EntityDescriptorType::entityID::type& EntityDescriptorType::
    entityID () const
    {
      return this->_xsd_entityID_.get ();
    }

    EntityDescriptorType::entityID::type& EntityDescriptorType::
    entityID ()
    {
      return this->_xsd_entityID_.get ();
    }

    void EntityDescriptorType::
    entityID (const entityID::type& entityID)
    {
      this->_xsd_entityID_.set (entityID);
    }

    void EntityDescriptorType::
    entityID (::std::auto_ptr< entityID::type > entityID)
    {
      this->_xsd_entityID_.set (entityID);
    }

    const EntityDescriptorType::validUntil::container& EntityDescriptorType::
    validUntil () const
    {
      return this->_xsd_validUntil_;
    }

    EntityDescriptorType::validUntil::container& EntityDescriptorType::
    validUntil ()
    {
      return this->_xsd_validUntil_;
    }

    void EntityDescriptorType::
    validUntil (const validUntil::type& validUntil)
    {
      this->_xsd_validUntil_.set (validUntil);
    }

    void EntityDescriptorType::
    validUntil (const validUntil::container& validUntil)
    {
      this->_xsd_validUntil_ = validUntil;
    }

    void EntityDescriptorType::
    validUntil (::std::auto_ptr< validUntil::type > validUntil)
    {
      this->_xsd_validUntil_.set (validUntil);
    }

    const EntityDescriptorType::cacheDuration::container& EntityDescriptorType::
    cacheDuration () const
    {
      return this->_xsd_cacheDuration_;
    }

    EntityDescriptorType::cacheDuration::container& EntityDescriptorType::
    cacheDuration ()
    {
      return this->_xsd_cacheDuration_;
    }

    void EntityDescriptorType::
    cacheDuration (const cacheDuration::type& cacheDuration)
    {
      this->_xsd_cacheDuration_.set (cacheDuration);
    }

    void EntityDescriptorType::
    cacheDuration (const cacheDuration::container& cacheDuration)
    {
      this->_xsd_cacheDuration_ = cacheDuration;
    }

    void EntityDescriptorType::
    cacheDuration (::std::auto_ptr< cacheDuration::type > cacheDuration)
    {
      this->_xsd_cacheDuration_.set (cacheDuration);
    }

    const EntityDescriptorType::ID::container& EntityDescriptorType::
    ID () const
    {
      return this->_xsd_ID_;
    }

    EntityDescriptorType::ID::container& EntityDescriptorType::
    ID ()
    {
      return this->_xsd_ID_;
    }

    void EntityDescriptorType::
    ID (const ID::type& ID)
    {
      this->_xsd_ID_.set (ID);
    }

    void EntityDescriptorType::
    ID (const ID::container& ID)
    {
      this->_xsd_ID_ = ID;
    }

    void EntityDescriptorType::
    ID (::std::auto_ptr< ID::type > ID)
    {
      this->_xsd_ID_.set (ID);
    }


    // OrganizationType
    // 

    const OrganizationType::Extensions::container& OrganizationType::
    Extensions () const
    {
      return this->_xsd_Extensions_;
    }

    OrganizationType::Extensions::container& OrganizationType::
    Extensions ()
    {
      return this->_xsd_Extensions_;
    }

    void OrganizationType::
    Extensions (const Extensions::type& Extensions)
    {
      this->_xsd_Extensions_.set (Extensions);
    }

    void OrganizationType::
    Extensions (const Extensions::container& Extensions)
    {
      this->_xsd_Extensions_ = Extensions;
    }

    void OrganizationType::
    Extensions (::std::auto_ptr< Extensions::type > Extensions)
    {
      this->_xsd_Extensions_.set (Extensions);
    }

    const OrganizationType::OrganizationName::container& OrganizationType::
    OrganizationName () const
    {
      return this->_xsd_OrganizationName_;
    }

    OrganizationType::OrganizationName::container& OrganizationType::
    OrganizationName ()
    {
      return this->_xsd_OrganizationName_;
    }

    void OrganizationType::
    OrganizationName (const OrganizationName::container& OrganizationName)
    {
      this->_xsd_OrganizationName_ = OrganizationName;
    }

    const OrganizationType::OrganizationDisplayName::container& OrganizationType::
    OrganizationDisplayName () const
    {
      return this->_xsd_OrganizationDisplayName_;
    }

    OrganizationType::OrganizationDisplayName::container& OrganizationType::
    OrganizationDisplayName ()
    {
      return this->_xsd_OrganizationDisplayName_;
    }

    void OrganizationType::
    OrganizationDisplayName (const OrganizationDisplayName::container& OrganizationDisplayName)
    {
      this->_xsd_OrganizationDisplayName_ = OrganizationDisplayName;
    }

    const OrganizationType::OrganizationURL::container& OrganizationType::
    OrganizationURL () const
    {
      return this->_xsd_OrganizationURL_;
    }

    OrganizationType::OrganizationURL::container& OrganizationType::
    OrganizationURL ()
    {
      return this->_xsd_OrganizationURL_;
    }

    void OrganizationType::
    OrganizationURL (const OrganizationURL::container& OrganizationURL)
    {
      this->_xsd_OrganizationURL_ = OrganizationURL;
    }


    // ContactType
    // 

    const ContactType::Extensions::container& ContactType::
    Extensions () const
    {
      return this->_xsd_Extensions_;
    }

    ContactType::Extensions::container& ContactType::
    Extensions ()
    {
      return this->_xsd_Extensions_;
    }

    void ContactType::
    Extensions (const Extensions::type& Extensions)
    {
      this->_xsd_Extensions_.set (Extensions);
    }

    void ContactType::
    Extensions (const Extensions::container& Extensions)
    {
      this->_xsd_Extensions_ = Extensions;
    }

    void ContactType::
    Extensions (::std::auto_ptr< Extensions::type > Extensions)
    {
      this->_xsd_Extensions_.set (Extensions);
    }

    const ContactType::Company::container& ContactType::
    Company () const
    {
      return this->_xsd_Company_;
    }

    ContactType::Company::container& ContactType::
    Company ()
    {
      return this->_xsd_Company_;
    }

    void ContactType::
    Company (const Company::type& Company)
    {
      this->_xsd_Company_.set (Company);
    }

    void ContactType::
    Company (const Company::container& Company)
    {
      this->_xsd_Company_ = Company;
    }

    void ContactType::
    Company (::std::auto_ptr< Company::type > Company)
    {
      this->_xsd_Company_.set (Company);
    }

    const ContactType::GivenName::container& ContactType::
    GivenName () const
    {
      return this->_xsd_GivenName_;
    }

    ContactType::GivenName::container& ContactType::
    GivenName ()
    {
      return this->_xsd_GivenName_;
    }

    void ContactType::
    GivenName (const GivenName::type& GivenName)
    {
      this->_xsd_GivenName_.set (GivenName);
    }

    void ContactType::
    GivenName (const GivenName::container& GivenName)
    {
      this->_xsd_GivenName_ = GivenName;
    }

    void ContactType::
    GivenName (::std::auto_ptr< GivenName::type > GivenName)
    {
      this->_xsd_GivenName_.set (GivenName);
    }

    const ContactType::SurName::container& ContactType::
    SurName () const
    {
      return this->_xsd_SurName_;
    }

    ContactType::SurName::container& ContactType::
    SurName ()
    {
      return this->_xsd_SurName_;
    }

    void ContactType::
    SurName (const SurName::type& SurName)
    {
      this->_xsd_SurName_.set (SurName);
    }

    void ContactType::
    SurName (const SurName::container& SurName)
    {
      this->_xsd_SurName_ = SurName;
    }

    void ContactType::
    SurName (::std::auto_ptr< SurName::type > SurName)
    {
      this->_xsd_SurName_.set (SurName);
    }

    const ContactType::EmailAddress::container& ContactType::
    EmailAddress () const
    {
      return this->_xsd_EmailAddress_;
    }

    ContactType::EmailAddress::container& ContactType::
    EmailAddress ()
    {
      return this->_xsd_EmailAddress_;
    }

    void ContactType::
    EmailAddress (const EmailAddress::container& EmailAddress)
    {
      this->_xsd_EmailAddress_ = EmailAddress;
    }

    const ContactType::TelephoneNumber::container& ContactType::
    TelephoneNumber () const
    {
      return this->_xsd_TelephoneNumber_;
    }

    ContactType::TelephoneNumber::container& ContactType::
    TelephoneNumber ()
    {
      return this->_xsd_TelephoneNumber_;
    }

    void ContactType::
    TelephoneNumber (const TelephoneNumber::container& TelephoneNumber)
    {
      this->_xsd_TelephoneNumber_ = TelephoneNumber;
    }

    const ContactType::contactType::type& ContactType::
    contactType () const
    {
      return this->_xsd_contactType_.get ();
    }

    ContactType::contactType::type& ContactType::
    contactType ()
    {
      return this->_xsd_contactType_.get ();
    }

    void ContactType::
    contactType (const contactType::type& contactType)
    {
      this->_xsd_contactType_.set (contactType);
    }

    void ContactType::
    contactType (::std::auto_ptr< contactType::type > contactType)
    {
      this->_xsd_contactType_.set (contactType);
    }


    // ContactTypeType
    // 

    ContactTypeType::
    ContactTypeType ()
    : ::xml_schema::string ()
    {
    }

    ContactTypeType::
    ContactTypeType (_xsd_ContactTypeType v)
    : ::xml_schema::string (_xsd_ContactTypeType_literals_[v])
    {
    }

    ContactTypeType::
    ContactTypeType (const ::xml_schema::string& _xsd_ContactTypeType)
    : ::xml_schema::string (_xsd_ContactTypeType)
    {
    }

    ContactTypeType::
    ContactTypeType (const ContactTypeType& v,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    ContactTypeType& ContactTypeType::
    operator= (_xsd_ContactTypeType v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_ContactTypeType_literals_[v]);

      return *this;
    }


    // AdditionalMetadataLocationType
    // 

    const AdditionalMetadataLocationType::namespace_::type& AdditionalMetadataLocationType::
    namespace_ () const
    {
      return this->_xsd_namespace__.get ();
    }

    AdditionalMetadataLocationType::namespace_::type& AdditionalMetadataLocationType::
    namespace_ ()
    {
      return this->_xsd_namespace__.get ();
    }

    void AdditionalMetadataLocationType::
    namespace_ (const namespace_::type& namespace_)
    {
      this->_xsd_namespace__.set (namespace_);
    }

    void AdditionalMetadataLocationType::
    namespace_ (::std::auto_ptr< namespace_::type > namespace_)
    {
      this->_xsd_namespace__.set (namespace_);
    }


    // RoleDescriptorType
    // 

    const RoleDescriptorType::Signature::container& RoleDescriptorType::
    Signature () const
    {
      return this->_xsd_Signature_;
    }

    RoleDescriptorType::Signature::container& RoleDescriptorType::
    Signature ()
    {
      return this->_xsd_Signature_;
    }

    void RoleDescriptorType::
    Signature (const Signature::type& Signature)
    {
      this->_xsd_Signature_.set (Signature);
    }

    void RoleDescriptorType::
    Signature (const Signature::container& Signature)
    {
      this->_xsd_Signature_ = Signature;
    }

    void RoleDescriptorType::
    Signature (::std::auto_ptr< Signature::type > Signature)
    {
      this->_xsd_Signature_.set (Signature);
    }

    const RoleDescriptorType::Extensions::container& RoleDescriptorType::
    Extensions () const
    {
      return this->_xsd_Extensions_;
    }

    RoleDescriptorType::Extensions::container& RoleDescriptorType::
    Extensions ()
    {
      return this->_xsd_Extensions_;
    }

    void RoleDescriptorType::
    Extensions (const Extensions::type& Extensions)
    {
      this->_xsd_Extensions_.set (Extensions);
    }

    void RoleDescriptorType::
    Extensions (const Extensions::container& Extensions)
    {
      this->_xsd_Extensions_ = Extensions;
    }

    void RoleDescriptorType::
    Extensions (::std::auto_ptr< Extensions::type > Extensions)
    {
      this->_xsd_Extensions_.set (Extensions);
    }

    const RoleDescriptorType::KeyDescriptor::container& RoleDescriptorType::
    KeyDescriptor () const
    {
      return this->_xsd_KeyDescriptor_;
    }

    RoleDescriptorType::KeyDescriptor::container& RoleDescriptorType::
    KeyDescriptor ()
    {
      return this->_xsd_KeyDescriptor_;
    }

    void RoleDescriptorType::
    KeyDescriptor (const KeyDescriptor::container& KeyDescriptor)
    {
      this->_xsd_KeyDescriptor_ = KeyDescriptor;
    }

    const RoleDescriptorType::Organization::container& RoleDescriptorType::
    Organization () const
    {
      return this->_xsd_Organization_;
    }

    RoleDescriptorType::Organization::container& RoleDescriptorType::
    Organization ()
    {
      return this->_xsd_Organization_;
    }

    void RoleDescriptorType::
    Organization (const Organization::type& Organization)
    {
      this->_xsd_Organization_.set (Organization);
    }

    void RoleDescriptorType::
    Organization (const Organization::container& Organization)
    {
      this->_xsd_Organization_ = Organization;
    }

    void RoleDescriptorType::
    Organization (::std::auto_ptr< Organization::type > Organization)
    {
      this->_xsd_Organization_.set (Organization);
    }

    const RoleDescriptorType::ContactPerson::container& RoleDescriptorType::
    ContactPerson () const
    {
      return this->_xsd_ContactPerson_;
    }

    RoleDescriptorType::ContactPerson::container& RoleDescriptorType::
    ContactPerson ()
    {
      return this->_xsd_ContactPerson_;
    }

    void RoleDescriptorType::
    ContactPerson (const ContactPerson::container& ContactPerson)
    {
      this->_xsd_ContactPerson_ = ContactPerson;
    }

    const RoleDescriptorType::ID::container& RoleDescriptorType::
    ID () const
    {
      return this->_xsd_ID_;
    }

    RoleDescriptorType::ID::container& RoleDescriptorType::
    ID ()
    {
      return this->_xsd_ID_;
    }

    void RoleDescriptorType::
    ID (const ID::type& ID)
    {
      this->_xsd_ID_.set (ID);
    }

    void RoleDescriptorType::
    ID (const ID::container& ID)
    {
      this->_xsd_ID_ = ID;
    }

    void RoleDescriptorType::
    ID (::std::auto_ptr< ID::type > ID)
    {
      this->_xsd_ID_.set (ID);
    }

    const RoleDescriptorType::validUntil::container& RoleDescriptorType::
    validUntil () const
    {
      return this->_xsd_validUntil_;
    }

    RoleDescriptorType::validUntil::container& RoleDescriptorType::
    validUntil ()
    {
      return this->_xsd_validUntil_;
    }

    void RoleDescriptorType::
    validUntil (const validUntil::type& validUntil)
    {
      this->_xsd_validUntil_.set (validUntil);
    }

    void RoleDescriptorType::
    validUntil (const validUntil::container& validUntil)
    {
      this->_xsd_validUntil_ = validUntil;
    }

    void RoleDescriptorType::
    validUntil (::std::auto_ptr< validUntil::type > validUntil)
    {
      this->_xsd_validUntil_.set (validUntil);
    }

    const RoleDescriptorType::cacheDuration::container& RoleDescriptorType::
    cacheDuration () const
    {
      return this->_xsd_cacheDuration_;
    }

    RoleDescriptorType::cacheDuration::container& RoleDescriptorType::
    cacheDuration ()
    {
      return this->_xsd_cacheDuration_;
    }

    void RoleDescriptorType::
    cacheDuration (const cacheDuration::type& cacheDuration)
    {
      this->_xsd_cacheDuration_.set (cacheDuration);
    }

    void RoleDescriptorType::
    cacheDuration (const cacheDuration::container& cacheDuration)
    {
      this->_xsd_cacheDuration_ = cacheDuration;
    }

    void RoleDescriptorType::
    cacheDuration (::std::auto_ptr< cacheDuration::type > cacheDuration)
    {
      this->_xsd_cacheDuration_.set (cacheDuration);
    }

    const RoleDescriptorType::protocolSupportEnumeration::type& RoleDescriptorType::
    protocolSupportEnumeration () const
    {
      return this->_xsd_protocolSupportEnumeration_.get ();
    }

    RoleDescriptorType::protocolSupportEnumeration::type& RoleDescriptorType::
    protocolSupportEnumeration ()
    {
      return this->_xsd_protocolSupportEnumeration_.get ();
    }

    void RoleDescriptorType::
    protocolSupportEnumeration (const protocolSupportEnumeration::type& protocolSupportEnumeration)
    {
      this->_xsd_protocolSupportEnumeration_.set (protocolSupportEnumeration);
    }

    void RoleDescriptorType::
    protocolSupportEnumeration (::std::auto_ptr< protocolSupportEnumeration::type > protocolSupportEnumeration)
    {
      this->_xsd_protocolSupportEnumeration_.set (protocolSupportEnumeration);
    }

    const RoleDescriptorType::errorURL::container& RoleDescriptorType::
    errorURL () const
    {
      return this->_xsd_errorURL_;
    }

    RoleDescriptorType::errorURL::container& RoleDescriptorType::
    errorURL ()
    {
      return this->_xsd_errorURL_;
    }

    void RoleDescriptorType::
    errorURL (const errorURL::type& errorURL)
    {
      this->_xsd_errorURL_.set (errorURL);
    }

    void RoleDescriptorType::
    errorURL (const errorURL::container& errorURL)
    {
      this->_xsd_errorURL_ = errorURL;
    }

    void RoleDescriptorType::
    errorURL (::std::auto_ptr< errorURL::type > errorURL)
    {
      this->_xsd_errorURL_.set (errorURL);
    }


    // anyURIListType
    //

    anyURIListType::
    anyURIListType ()
    {
    }

    anyURIListType::
    anyURIListType (const anyURIListType& o,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::simple_type (o, f, c),
    ::xsd::cxx::tree::list< ::xml_schema::uri, wchar_t > (o, f, c)
    {
    }

    // KeyDescriptorType
    // 

    const KeyDescriptorType::KeyInfo::type& KeyDescriptorType::
    KeyInfo () const
    {
      return this->_xsd_KeyInfo_.get ();
    }

    KeyDescriptorType::KeyInfo::type& KeyDescriptorType::
    KeyInfo ()
    {
      return this->_xsd_KeyInfo_.get ();
    }

    void KeyDescriptorType::
    KeyInfo (const KeyInfo::type& KeyInfo)
    {
      this->_xsd_KeyInfo_.set (KeyInfo);
    }

    void KeyDescriptorType::
    KeyInfo (::std::auto_ptr< KeyInfo::type > KeyInfo)
    {
      this->_xsd_KeyInfo_.set (KeyInfo);
    }

    const KeyDescriptorType::EncryptionMethod::container& KeyDescriptorType::
    EncryptionMethod () const
    {
      return this->_xsd_EncryptionMethod_;
    }

    KeyDescriptorType::EncryptionMethod::container& KeyDescriptorType::
    EncryptionMethod ()
    {
      return this->_xsd_EncryptionMethod_;
    }

    void KeyDescriptorType::
    EncryptionMethod (const EncryptionMethod::container& EncryptionMethod)
    {
      this->_xsd_EncryptionMethod_ = EncryptionMethod;
    }

    const KeyDescriptorType::use::container& KeyDescriptorType::
    use () const
    {
      return this->_xsd_use_;
    }

    KeyDescriptorType::use::container& KeyDescriptorType::
    use ()
    {
      return this->_xsd_use_;
    }

    void KeyDescriptorType::
    use (const use::type& use)
    {
      this->_xsd_use_.set (use);
    }

    void KeyDescriptorType::
    use (const use::container& use)
    {
      this->_xsd_use_ = use;
    }

    void KeyDescriptorType::
    use (::std::auto_ptr< use::type > use)
    {
      this->_xsd_use_.set (use);
    }


    // KeyTypes
    // 

    KeyTypes::
    KeyTypes ()
    : ::xml_schema::string ()
    {
    }

    KeyTypes::
    KeyTypes (_xsd_KeyTypes v)
    : ::xml_schema::string (_xsd_KeyTypes_literals_[v])
    {
    }

    KeyTypes::
    KeyTypes (const ::xml_schema::string& _xsd_KeyTypes)
    : ::xml_schema::string (_xsd_KeyTypes)
    {
    }

    KeyTypes::
    KeyTypes (const KeyTypes& v,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    KeyTypes& KeyTypes::
    operator= (_xsd_KeyTypes v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_KeyTypes_literals_[v]);

      return *this;
    }


    // SSODescriptorType
    // 

    const SSODescriptorType::ArtifactResolutionService::container& SSODescriptorType::
    ArtifactResolutionService () const
    {
      return this->_xsd_ArtifactResolutionService_;
    }

    SSODescriptorType::ArtifactResolutionService::container& SSODescriptorType::
    ArtifactResolutionService ()
    {
      return this->_xsd_ArtifactResolutionService_;
    }

    void SSODescriptorType::
    ArtifactResolutionService (const ArtifactResolutionService::container& ArtifactResolutionService)
    {
      this->_xsd_ArtifactResolutionService_ = ArtifactResolutionService;
    }

    const SSODescriptorType::SingleLogoutService::container& SSODescriptorType::
    SingleLogoutService () const
    {
      return this->_xsd_SingleLogoutService_;
    }

    SSODescriptorType::SingleLogoutService::container& SSODescriptorType::
    SingleLogoutService ()
    {
      return this->_xsd_SingleLogoutService_;
    }

    void SSODescriptorType::
    SingleLogoutService (const SingleLogoutService::container& SingleLogoutService)
    {
      this->_xsd_SingleLogoutService_ = SingleLogoutService;
    }

    const SSODescriptorType::ManageNameIDService::container& SSODescriptorType::
    ManageNameIDService () const
    {
      return this->_xsd_ManageNameIDService_;
    }

    SSODescriptorType::ManageNameIDService::container& SSODescriptorType::
    ManageNameIDService ()
    {
      return this->_xsd_ManageNameIDService_;
    }

    void SSODescriptorType::
    ManageNameIDService (const ManageNameIDService::container& ManageNameIDService)
    {
      this->_xsd_ManageNameIDService_ = ManageNameIDService;
    }

    const SSODescriptorType::NameIDFormat::container& SSODescriptorType::
    NameIDFormat () const
    {
      return this->_xsd_NameIDFormat_;
    }

    SSODescriptorType::NameIDFormat::container& SSODescriptorType::
    NameIDFormat ()
    {
      return this->_xsd_NameIDFormat_;
    }

    void SSODescriptorType::
    NameIDFormat (const NameIDFormat::container& NameIDFormat)
    {
      this->_xsd_NameIDFormat_ = NameIDFormat;
    }


    // IDPSSODescriptorType
    // 

    const IDPSSODescriptorType::SingleSignOnService::container& IDPSSODescriptorType::
    SingleSignOnService () const
    {
      return this->_xsd_SingleSignOnService_;
    }

    IDPSSODescriptorType::SingleSignOnService::container& IDPSSODescriptorType::
    SingleSignOnService ()
    {
      return this->_xsd_SingleSignOnService_;
    }

    void IDPSSODescriptorType::
    SingleSignOnService (const SingleSignOnService::container& SingleSignOnService)
    {
      this->_xsd_SingleSignOnService_ = SingleSignOnService;
    }

    const IDPSSODescriptorType::NameIDMappingService::container& IDPSSODescriptorType::
    NameIDMappingService () const
    {
      return this->_xsd_NameIDMappingService_;
    }

    IDPSSODescriptorType::NameIDMappingService::container& IDPSSODescriptorType::
    NameIDMappingService ()
    {
      return this->_xsd_NameIDMappingService_;
    }

    void IDPSSODescriptorType::
    NameIDMappingService (const NameIDMappingService::container& NameIDMappingService)
    {
      this->_xsd_NameIDMappingService_ = NameIDMappingService;
    }

    const IDPSSODescriptorType::AssertionIDRequestService::container& IDPSSODescriptorType::
    AssertionIDRequestService () const
    {
      return this->_xsd_AssertionIDRequestService_;
    }

    IDPSSODescriptorType::AssertionIDRequestService::container& IDPSSODescriptorType::
    AssertionIDRequestService ()
    {
      return this->_xsd_AssertionIDRequestService_;
    }

    void IDPSSODescriptorType::
    AssertionIDRequestService (const AssertionIDRequestService::container& AssertionIDRequestService)
    {
      this->_xsd_AssertionIDRequestService_ = AssertionIDRequestService;
    }

    const IDPSSODescriptorType::AttributeProfile::container& IDPSSODescriptorType::
    AttributeProfile () const
    {
      return this->_xsd_AttributeProfile_;
    }

    IDPSSODescriptorType::AttributeProfile::container& IDPSSODescriptorType::
    AttributeProfile ()
    {
      return this->_xsd_AttributeProfile_;
    }

    void IDPSSODescriptorType::
    AttributeProfile (const AttributeProfile::container& AttributeProfile)
    {
      this->_xsd_AttributeProfile_ = AttributeProfile;
    }

    const IDPSSODescriptorType::Attribute::container& IDPSSODescriptorType::
    Attribute () const
    {
      return this->_xsd_Attribute_;
    }

    IDPSSODescriptorType::Attribute::container& IDPSSODescriptorType::
    Attribute ()
    {
      return this->_xsd_Attribute_;
    }

    void IDPSSODescriptorType::
    Attribute (const Attribute::container& Attribute)
    {
      this->_xsd_Attribute_ = Attribute;
    }

    const IDPSSODescriptorType::WantAuthnRequestsSigned::container& IDPSSODescriptorType::
    WantAuthnRequestsSigned () const
    {
      return this->_xsd_WantAuthnRequestsSigned_;
    }

    IDPSSODescriptorType::WantAuthnRequestsSigned::container& IDPSSODescriptorType::
    WantAuthnRequestsSigned ()
    {
      return this->_xsd_WantAuthnRequestsSigned_;
    }

    void IDPSSODescriptorType::
    WantAuthnRequestsSigned (const WantAuthnRequestsSigned::type& WantAuthnRequestsSigned)
    {
      this->_xsd_WantAuthnRequestsSigned_.set (WantAuthnRequestsSigned);
    }

    void IDPSSODescriptorType::
    WantAuthnRequestsSigned (const WantAuthnRequestsSigned::container& WantAuthnRequestsSigned)
    {
      this->_xsd_WantAuthnRequestsSigned_ = WantAuthnRequestsSigned;
    }


    // SPSSODescriptorType
    // 

    const SPSSODescriptorType::AssertionConsumerService::container& SPSSODescriptorType::
    AssertionConsumerService () const
    {
      return this->_xsd_AssertionConsumerService_;
    }

    SPSSODescriptorType::AssertionConsumerService::container& SPSSODescriptorType::
    AssertionConsumerService ()
    {
      return this->_xsd_AssertionConsumerService_;
    }

    void SPSSODescriptorType::
    AssertionConsumerService (const AssertionConsumerService::container& AssertionConsumerService)
    {
      this->_xsd_AssertionConsumerService_ = AssertionConsumerService;
    }

    const SPSSODescriptorType::AttributeConsumingService::container& SPSSODescriptorType::
    AttributeConsumingService () const
    {
      return this->_xsd_AttributeConsumingService_;
    }

    SPSSODescriptorType::AttributeConsumingService::container& SPSSODescriptorType::
    AttributeConsumingService ()
    {
      return this->_xsd_AttributeConsumingService_;
    }

    void SPSSODescriptorType::
    AttributeConsumingService (const AttributeConsumingService::container& AttributeConsumingService)
    {
      this->_xsd_AttributeConsumingService_ = AttributeConsumingService;
    }

    const SPSSODescriptorType::AuthnRequestsSigned::container& SPSSODescriptorType::
    AuthnRequestsSigned () const
    {
      return this->_xsd_AuthnRequestsSigned_;
    }

    SPSSODescriptorType::AuthnRequestsSigned::container& SPSSODescriptorType::
    AuthnRequestsSigned ()
    {
      return this->_xsd_AuthnRequestsSigned_;
    }

    void SPSSODescriptorType::
    AuthnRequestsSigned (const AuthnRequestsSigned::type& AuthnRequestsSigned)
    {
      this->_xsd_AuthnRequestsSigned_.set (AuthnRequestsSigned);
    }

    void SPSSODescriptorType::
    AuthnRequestsSigned (const AuthnRequestsSigned::container& AuthnRequestsSigned)
    {
      this->_xsd_AuthnRequestsSigned_ = AuthnRequestsSigned;
    }

    const SPSSODescriptorType::WantAssertionsSigned::container& SPSSODescriptorType::
    WantAssertionsSigned () const
    {
      return this->_xsd_WantAssertionsSigned_;
    }

    SPSSODescriptorType::WantAssertionsSigned::container& SPSSODescriptorType::
    WantAssertionsSigned ()
    {
      return this->_xsd_WantAssertionsSigned_;
    }

    void SPSSODescriptorType::
    WantAssertionsSigned (const WantAssertionsSigned::type& WantAssertionsSigned)
    {
      this->_xsd_WantAssertionsSigned_.set (WantAssertionsSigned);
    }

    void SPSSODescriptorType::
    WantAssertionsSigned (const WantAssertionsSigned::container& WantAssertionsSigned)
    {
      this->_xsd_WantAssertionsSigned_ = WantAssertionsSigned;
    }


    // AttributeConsumingServiceType
    // 

    const AttributeConsumingServiceType::ServiceName::container& AttributeConsumingServiceType::
    ServiceName () const
    {
      return this->_xsd_ServiceName_;
    }

    AttributeConsumingServiceType::ServiceName::container& AttributeConsumingServiceType::
    ServiceName ()
    {
      return this->_xsd_ServiceName_;
    }

    void AttributeConsumingServiceType::
    ServiceName (const ServiceName::container& ServiceName)
    {
      this->_xsd_ServiceName_ = ServiceName;
    }

    const AttributeConsumingServiceType::ServiceDescription::container& AttributeConsumingServiceType::
    ServiceDescription () const
    {
      return this->_xsd_ServiceDescription_;
    }

    AttributeConsumingServiceType::ServiceDescription::container& AttributeConsumingServiceType::
    ServiceDescription ()
    {
      return this->_xsd_ServiceDescription_;
    }

    void AttributeConsumingServiceType::
    ServiceDescription (const ServiceDescription::container& ServiceDescription)
    {
      this->_xsd_ServiceDescription_ = ServiceDescription;
    }

    const AttributeConsumingServiceType::RequestedAttribute::container& AttributeConsumingServiceType::
    RequestedAttribute () const
    {
      return this->_xsd_RequestedAttribute_;
    }

    AttributeConsumingServiceType::RequestedAttribute::container& AttributeConsumingServiceType::
    RequestedAttribute ()
    {
      return this->_xsd_RequestedAttribute_;
    }

    void AttributeConsumingServiceType::
    RequestedAttribute (const RequestedAttribute::container& RequestedAttribute)
    {
      this->_xsd_RequestedAttribute_ = RequestedAttribute;
    }

    const AttributeConsumingServiceType::index::type& AttributeConsumingServiceType::
    index () const
    {
      return this->_xsd_index_.get ();
    }

    AttributeConsumingServiceType::index::type& AttributeConsumingServiceType::
    index ()
    {
      return this->_xsd_index_.get ();
    }

    void AttributeConsumingServiceType::
    index (const index::type& index)
    {
      this->_xsd_index_.set (index);
    }

    const AttributeConsumingServiceType::isDefault::container& AttributeConsumingServiceType::
    isDefault () const
    {
      return this->_xsd_isDefault_;
    }

    AttributeConsumingServiceType::isDefault::container& AttributeConsumingServiceType::
    isDefault ()
    {
      return this->_xsd_isDefault_;
    }

    void AttributeConsumingServiceType::
    isDefault (const isDefault::type& isDefault)
    {
      this->_xsd_isDefault_.set (isDefault);
    }

    void AttributeConsumingServiceType::
    isDefault (const isDefault::container& isDefault)
    {
      this->_xsd_isDefault_ = isDefault;
    }


    // RequestedAttributeType
    // 

    const RequestedAttributeType::isRequired::container& RequestedAttributeType::
    isRequired () const
    {
      return this->_xsd_isRequired_;
    }

    RequestedAttributeType::isRequired::container& RequestedAttributeType::
    isRequired ()
    {
      return this->_xsd_isRequired_;
    }

    void RequestedAttributeType::
    isRequired (const isRequired::type& isRequired)
    {
      this->_xsd_isRequired_.set (isRequired);
    }

    void RequestedAttributeType::
    isRequired (const isRequired::container& isRequired)
    {
      this->_xsd_isRequired_ = isRequired;
    }


    // AuthnAuthorityDescriptorType
    // 

    const AuthnAuthorityDescriptorType::AuthnQueryService::container& AuthnAuthorityDescriptorType::
    AuthnQueryService () const
    {
      return this->_xsd_AuthnQueryService_;
    }

    AuthnAuthorityDescriptorType::AuthnQueryService::container& AuthnAuthorityDescriptorType::
    AuthnQueryService ()
    {
      return this->_xsd_AuthnQueryService_;
    }

    void AuthnAuthorityDescriptorType::
    AuthnQueryService (const AuthnQueryService::container& AuthnQueryService)
    {
      this->_xsd_AuthnQueryService_ = AuthnQueryService;
    }

    const AuthnAuthorityDescriptorType::AssertionIDRequestService::container& AuthnAuthorityDescriptorType::
    AssertionIDRequestService () const
    {
      return this->_xsd_AssertionIDRequestService_;
    }

    AuthnAuthorityDescriptorType::AssertionIDRequestService::container& AuthnAuthorityDescriptorType::
    AssertionIDRequestService ()
    {
      return this->_xsd_AssertionIDRequestService_;
    }

    void AuthnAuthorityDescriptorType::
    AssertionIDRequestService (const AssertionIDRequestService::container& AssertionIDRequestService)
    {
      this->_xsd_AssertionIDRequestService_ = AssertionIDRequestService;
    }

    const AuthnAuthorityDescriptorType::NameIDFormat::container& AuthnAuthorityDescriptorType::
    NameIDFormat () const
    {
      return this->_xsd_NameIDFormat_;
    }

    AuthnAuthorityDescriptorType::NameIDFormat::container& AuthnAuthorityDescriptorType::
    NameIDFormat ()
    {
      return this->_xsd_NameIDFormat_;
    }

    void AuthnAuthorityDescriptorType::
    NameIDFormat (const NameIDFormat::container& NameIDFormat)
    {
      this->_xsd_NameIDFormat_ = NameIDFormat;
    }


    // PDPDescriptorType
    // 

    const PDPDescriptorType::AuthzService::container& PDPDescriptorType::
    AuthzService () const
    {
      return this->_xsd_AuthzService_;
    }

    PDPDescriptorType::AuthzService::container& PDPDescriptorType::
    AuthzService ()
    {
      return this->_xsd_AuthzService_;
    }

    void PDPDescriptorType::
    AuthzService (const AuthzService::container& AuthzService)
    {
      this->_xsd_AuthzService_ = AuthzService;
    }

    const PDPDescriptorType::AssertionIDRequestService::container& PDPDescriptorType::
    AssertionIDRequestService () const
    {
      return this->_xsd_AssertionIDRequestService_;
    }

    PDPDescriptorType::AssertionIDRequestService::container& PDPDescriptorType::
    AssertionIDRequestService ()
    {
      return this->_xsd_AssertionIDRequestService_;
    }

    void PDPDescriptorType::
    AssertionIDRequestService (const AssertionIDRequestService::container& AssertionIDRequestService)
    {
      this->_xsd_AssertionIDRequestService_ = AssertionIDRequestService;
    }

    const PDPDescriptorType::NameIDFormat::container& PDPDescriptorType::
    NameIDFormat () const
    {
      return this->_xsd_NameIDFormat_;
    }

    PDPDescriptorType::NameIDFormat::container& PDPDescriptorType::
    NameIDFormat ()
    {
      return this->_xsd_NameIDFormat_;
    }

    void PDPDescriptorType::
    NameIDFormat (const NameIDFormat::container& NameIDFormat)
    {
      this->_xsd_NameIDFormat_ = NameIDFormat;
    }


    // AttributeAuthorityDescriptorType
    // 

    const AttributeAuthorityDescriptorType::AttributeService::container& AttributeAuthorityDescriptorType::
    AttributeService () const
    {
      return this->_xsd_AttributeService_;
    }

    AttributeAuthorityDescriptorType::AttributeService::container& AttributeAuthorityDescriptorType::
    AttributeService ()
    {
      return this->_xsd_AttributeService_;
    }

    void AttributeAuthorityDescriptorType::
    AttributeService (const AttributeService::container& AttributeService)
    {
      this->_xsd_AttributeService_ = AttributeService;
    }

    const AttributeAuthorityDescriptorType::AssertionIDRequestService::container& AttributeAuthorityDescriptorType::
    AssertionIDRequestService () const
    {
      return this->_xsd_AssertionIDRequestService_;
    }

    AttributeAuthorityDescriptorType::AssertionIDRequestService::container& AttributeAuthorityDescriptorType::
    AssertionIDRequestService ()
    {
      return this->_xsd_AssertionIDRequestService_;
    }

    void AttributeAuthorityDescriptorType::
    AssertionIDRequestService (const AssertionIDRequestService::container& AssertionIDRequestService)
    {
      this->_xsd_AssertionIDRequestService_ = AssertionIDRequestService;
    }

    const AttributeAuthorityDescriptorType::NameIDFormat::container& AttributeAuthorityDescriptorType::
    NameIDFormat () const
    {
      return this->_xsd_NameIDFormat_;
    }

    AttributeAuthorityDescriptorType::NameIDFormat::container& AttributeAuthorityDescriptorType::
    NameIDFormat ()
    {
      return this->_xsd_NameIDFormat_;
    }

    void AttributeAuthorityDescriptorType::
    NameIDFormat (const NameIDFormat::container& NameIDFormat)
    {
      this->_xsd_NameIDFormat_ = NameIDFormat;
    }

    const AttributeAuthorityDescriptorType::AttributeProfile::container& AttributeAuthorityDescriptorType::
    AttributeProfile () const
    {
      return this->_xsd_AttributeProfile_;
    }

    AttributeAuthorityDescriptorType::AttributeProfile::container& AttributeAuthorityDescriptorType::
    AttributeProfile ()
    {
      return this->_xsd_AttributeProfile_;
    }

    void AttributeAuthorityDescriptorType::
    AttributeProfile (const AttributeProfile::container& AttributeProfile)
    {
      this->_xsd_AttributeProfile_ = AttributeProfile;
    }

    const AttributeAuthorityDescriptorType::Attribute::container& AttributeAuthorityDescriptorType::
    Attribute () const
    {
      return this->_xsd_Attribute_;
    }

    AttributeAuthorityDescriptorType::Attribute::container& AttributeAuthorityDescriptorType::
    Attribute ()
    {
      return this->_xsd_Attribute_;
    }

    void AttributeAuthorityDescriptorType::
    Attribute (const Attribute::container& Attribute)
    {
      this->_xsd_Attribute_ = Attribute;
    }


    // AffiliationDescriptorType
    // 

    const AffiliationDescriptorType::Signature::container& AffiliationDescriptorType::
    Signature () const
    {
      return this->_xsd_Signature_;
    }

    AffiliationDescriptorType::Signature::container& AffiliationDescriptorType::
    Signature ()
    {
      return this->_xsd_Signature_;
    }

    void AffiliationDescriptorType::
    Signature (const Signature::type& Signature)
    {
      this->_xsd_Signature_.set (Signature);
    }

    void AffiliationDescriptorType::
    Signature (const Signature::container& Signature)
    {
      this->_xsd_Signature_ = Signature;
    }

    void AffiliationDescriptorType::
    Signature (::std::auto_ptr< Signature::type > Signature)
    {
      this->_xsd_Signature_.set (Signature);
    }

    const AffiliationDescriptorType::Extensions::container& AffiliationDescriptorType::
    Extensions () const
    {
      return this->_xsd_Extensions_;
    }

    AffiliationDescriptorType::Extensions::container& AffiliationDescriptorType::
    Extensions ()
    {
      return this->_xsd_Extensions_;
    }

    void AffiliationDescriptorType::
    Extensions (const Extensions::type& Extensions)
    {
      this->_xsd_Extensions_.set (Extensions);
    }

    void AffiliationDescriptorType::
    Extensions (const Extensions::container& Extensions)
    {
      this->_xsd_Extensions_ = Extensions;
    }

    void AffiliationDescriptorType::
    Extensions (::std::auto_ptr< Extensions::type > Extensions)
    {
      this->_xsd_Extensions_.set (Extensions);
    }

    const AffiliationDescriptorType::AffiliateMember::container& AffiliationDescriptorType::
    AffiliateMember () const
    {
      return this->_xsd_AffiliateMember_;
    }

    AffiliationDescriptorType::AffiliateMember::container& AffiliationDescriptorType::
    AffiliateMember ()
    {
      return this->_xsd_AffiliateMember_;
    }

    void AffiliationDescriptorType::
    AffiliateMember (const AffiliateMember::container& AffiliateMember)
    {
      this->_xsd_AffiliateMember_ = AffiliateMember;
    }

    const AffiliationDescriptorType::KeyDescriptor::container& AffiliationDescriptorType::
    KeyDescriptor () const
    {
      return this->_xsd_KeyDescriptor_;
    }

    AffiliationDescriptorType::KeyDescriptor::container& AffiliationDescriptorType::
    KeyDescriptor ()
    {
      return this->_xsd_KeyDescriptor_;
    }

    void AffiliationDescriptorType::
    KeyDescriptor (const KeyDescriptor::container& KeyDescriptor)
    {
      this->_xsd_KeyDescriptor_ = KeyDescriptor;
    }

    const AffiliationDescriptorType::affiliationOwnerID::type& AffiliationDescriptorType::
    affiliationOwnerID () const
    {
      return this->_xsd_affiliationOwnerID_.get ();
    }

    AffiliationDescriptorType::affiliationOwnerID::type& AffiliationDescriptorType::
    affiliationOwnerID ()
    {
      return this->_xsd_affiliationOwnerID_.get ();
    }

    void AffiliationDescriptorType::
    affiliationOwnerID (const affiliationOwnerID::type& affiliationOwnerID)
    {
      this->_xsd_affiliationOwnerID_.set (affiliationOwnerID);
    }

    void AffiliationDescriptorType::
    affiliationOwnerID (::std::auto_ptr< affiliationOwnerID::type > affiliationOwnerID)
    {
      this->_xsd_affiliationOwnerID_.set (affiliationOwnerID);
    }

    const AffiliationDescriptorType::validUntil::container& AffiliationDescriptorType::
    validUntil () const
    {
      return this->_xsd_validUntil_;
    }

    AffiliationDescriptorType::validUntil::container& AffiliationDescriptorType::
    validUntil ()
    {
      return this->_xsd_validUntil_;
    }

    void AffiliationDescriptorType::
    validUntil (const validUntil::type& validUntil)
    {
      this->_xsd_validUntil_.set (validUntil);
    }

    void AffiliationDescriptorType::
    validUntil (const validUntil::container& validUntil)
    {
      this->_xsd_validUntil_ = validUntil;
    }

    void AffiliationDescriptorType::
    validUntil (::std::auto_ptr< validUntil::type > validUntil)
    {
      this->_xsd_validUntil_.set (validUntil);
    }

    const AffiliationDescriptorType::cacheDuration::container& AffiliationDescriptorType::
    cacheDuration () const
    {
      return this->_xsd_cacheDuration_;
    }

    AffiliationDescriptorType::cacheDuration::container& AffiliationDescriptorType::
    cacheDuration ()
    {
      return this->_xsd_cacheDuration_;
    }

    void AffiliationDescriptorType::
    cacheDuration (const cacheDuration::type& cacheDuration)
    {
      this->_xsd_cacheDuration_.set (cacheDuration);
    }

    void AffiliationDescriptorType::
    cacheDuration (const cacheDuration::container& cacheDuration)
    {
      this->_xsd_cacheDuration_ = cacheDuration;
    }

    void AffiliationDescriptorType::
    cacheDuration (::std::auto_ptr< cacheDuration::type > cacheDuration)
    {
      this->_xsd_cacheDuration_.set (cacheDuration);
    }

    const AffiliationDescriptorType::ID::container& AffiliationDescriptorType::
    ID () const
    {
      return this->_xsd_ID_;
    }

    AffiliationDescriptorType::ID::container& AffiliationDescriptorType::
    ID ()
    {
      return this->_xsd_ID_;
    }

    void AffiliationDescriptorType::
    ID (const ID::type& ID)
    {
      this->_xsd_ID_.set (ID);
    }

    void AffiliationDescriptorType::
    ID (const ID::container& ID)
    {
      this->_xsd_ID_ = ID;
    }

    void AffiliationDescriptorType::
    ID (::std::auto_ptr< ID::type > ID)
    {
      this->_xsd_ID_.set (ID);
    }
  }
}

#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/parser.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_factory_plate< 0, wchar_t >
  type_factory_plate_init;
}

namespace saml2
{
  namespace metadata
  {
    // entityIDType
    //

    entityIDType::
    entityIDType ()
    : ::xml_schema::uri ()
    {
    }

    entityIDType::
    entityIDType (const _xsd_entityIDType::base_& _xsd_entityIDType)
    : ::xml_schema::uri (_xsd_entityIDType)
    {
    }

    entityIDType::
    entityIDType (const entityIDType& _xsd_entityIDType,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::uri (_xsd_entityIDType, f, c)
    {
    }

    entityIDType::
    entityIDType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::uri (e, f, c)
    {
    }

    entityIDType::
    entityIDType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::uri (a, f, c)
    {
    }

    entityIDType::
    entityIDType (const ::std::basic_string< wchar_t >& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::uri (s, e, f, c)
    {
    }

    entityIDType* entityIDType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new entityIDType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, entityIDType >
    _xsd_entityIDType_type_factory_init (
      L"entityIDType urn:oasis:names:tc:SAML:2.0:metadata");


    // localizedNameType
    //

    localizedNameType::
    localizedNameType ()
    : ::xml_schema::string (),
    _xsd_lang_ (::xml_schema::flags (), this)
    {
    }

    localizedNameType::
    localizedNameType (const _xsd_localizedNameType::base_& _xsd_localizedNameType,
                       const lang::type& _xsd_lang)
    : ::xml_schema::string (_xsd_localizedNameType),
    _xsd_lang_ (_xsd_lang,
                ::xml_schema::flags (),
                this)
    {
    }

    localizedNameType::
    localizedNameType (const localizedNameType& _xsd_localizedNameType,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
    : ::xml_schema::string (_xsd_localizedNameType, f, c),
    _xsd_lang_ (_xsd_localizedNameType._xsd_lang_,
                f | ::xml_schema::flags::not_root,
                this)
    {
    }

    localizedNameType::
    localizedNameType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
    : ::xml_schema::string (e, f, c),
    _xsd_lang_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void localizedNameType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"lang" && a.namespace_ () == L"http://www.w3.org/XML/1998/namespace")
        {
          ::std::auto_ptr< lang::type > r (
            lang::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->lang (r);
          continue;
        }
      }

      if (!_xsd_lang_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"lang",
          L"http://www.w3.org/XML/1998/namespace");
      }
    }

    localizedNameType* localizedNameType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new localizedNameType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, localizedNameType >
    _xsd_localizedNameType_type_factory_init (
      L"localizedNameType urn:oasis:names:tc:SAML:2.0:metadata");


    // localizedURIType
    //

    localizedURIType::
    localizedURIType ()
    : ::xml_schema::uri (),
    _xsd_lang_ (::xml_schema::flags (), this)
    {
    }

    localizedURIType::
    localizedURIType (const _xsd_localizedURIType::base_& _xsd_localizedURIType,
                      const lang::type& _xsd_lang)
    : ::xml_schema::uri (_xsd_localizedURIType),
    _xsd_lang_ (_xsd_lang,
                ::xml_schema::flags (),
                this)
    {
    }

    localizedURIType::
    localizedURIType (const localizedURIType& _xsd_localizedURIType,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
    : ::xml_schema::uri (_xsd_localizedURIType, f, c),
    _xsd_lang_ (_xsd_localizedURIType._xsd_lang_,
                f | ::xml_schema::flags::not_root,
                this)
    {
    }

    localizedURIType::
    localizedURIType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
    : ::xml_schema::uri (e, f, c),
    _xsd_lang_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void localizedURIType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"lang" && a.namespace_ () == L"http://www.w3.org/XML/1998/namespace")
        {
          ::std::auto_ptr< lang::type > r (
            lang::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->lang (r);
          continue;
        }
      }

      if (!_xsd_lang_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"lang",
          L"http://www.w3.org/XML/1998/namespace");
      }
    }

    localizedURIType* localizedURIType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new localizedURIType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, localizedURIType >
    _xsd_localizedURIType_type_factory_init (
      L"localizedURIType urn:oasis:names:tc:SAML:2.0:metadata");


    // ExtensionsType
    //

    ExtensionsType::
    ExtensionsType ()
    : ::xml_schema::type ()
    {
    }

    ExtensionsType::
    ExtensionsType (const ExtensionsType& _xsd_ExtensionsType,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_ExtensionsType, f, c)
    {
    }

    ExtensionsType::
    ExtensionsType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c)
    {
    }

    ExtensionsType::
    ExtensionsType (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (a, f, c)
    {
    }

    ExtensionsType::
    ExtensionsType (const ::std::basic_string< wchar_t >& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (s, e, f, c)
    {
    }

    ExtensionsType* ExtensionsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ExtensionsType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ExtensionsType >
    _xsd_ExtensionsType_type_factory_init (
      L"ExtensionsType urn:oasis:names:tc:SAML:2.0:metadata");


    // EndpointType
    //

    EndpointType::
    EndpointType ()
    : ::xml_schema::type (),
    _xsd_Binding_ (::xml_schema::flags (), this),
    _xsd_Location_ (::xml_schema::flags (), this),
    _xsd_ResponseLocation_ (::xml_schema::flags (), this)
    {
    }

    EndpointType::
    EndpointType (const Binding::type& _xsd_Binding,
                  const Location::type& _xsd_Location)
    : ::xml_schema::type (),
    _xsd_Binding_ (_xsd_Binding,
                   ::xml_schema::flags (),
                   this),
    _xsd_Location_ (_xsd_Location,
                    ::xml_schema::flags (),
                    this),
    _xsd_ResponseLocation_ (::xml_schema::flags (), this)
    {
    }

    EndpointType::
    EndpointType (const EndpointType& _xsd_EndpointType,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_EndpointType, f, c),
    _xsd_Binding_ (_xsd_EndpointType._xsd_Binding_,
                   f | ::xml_schema::flags::not_root,
                   this),
    _xsd_Location_ (_xsd_EndpointType._xsd_Location_,
                    f | ::xml_schema::flags::not_root,
                    this),
    _xsd_ResponseLocation_ (_xsd_EndpointType._xsd_ResponseLocation_,
                            f | ::xml_schema::flags::not_root,
                            this)
    {
    }

    EndpointType::
    EndpointType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Binding_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Location_ (f | ::xml_schema::flags::not_root, this),
    _xsd_ResponseLocation_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void EndpointType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Binding" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Binding::type > r (
            Binding::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Binding (r);
          continue;
        }

        if (a.name () == L"Location" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Location::type > r (
            Location::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Location (r);
          continue;
        }

        if (a.name () == L"ResponseLocation" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< ResponseLocation::type > r (
            ResponseLocation::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->ResponseLocation (r);
          continue;
        }
      }

      if (!_xsd_Binding_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Binding",
          L"");
      }

      if (!_xsd_Location_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Location",
          L"");
      }
    }

    EndpointType* EndpointType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new EndpointType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, EndpointType >
    _xsd_EndpointType_type_factory_init (
      L"EndpointType urn:oasis:names:tc:SAML:2.0:metadata");


    // IndexedEndpointType
    //

    IndexedEndpointType::
    IndexedEndpointType ()
    : ::saml2::metadata::EndpointType (),
    _xsd_index_ (::xml_schema::flags (), this),
    _xsd_isDefault_ (::xml_schema::flags (), this)
    {
    }

    IndexedEndpointType::
    IndexedEndpointType (const Binding::type& _xsd_Binding,
                         const Location::type& _xsd_Location,
                         const index::type& _xsd_index)
    : ::saml2::metadata::EndpointType (_xsd_Binding,
                                       _xsd_Location),
    _xsd_index_ (_xsd_index,
                 ::xml_schema::flags (),
                 this),
    _xsd_isDefault_ (::xml_schema::flags (), this)
    {
    }

    IndexedEndpointType::
    IndexedEndpointType (const IndexedEndpointType& _xsd_IndexedEndpointType,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
    : ::saml2::metadata::EndpointType (_xsd_IndexedEndpointType, f, c),
    _xsd_index_ (_xsd_IndexedEndpointType._xsd_index_,
                 f | ::xml_schema::flags::not_root,
                 this),
    _xsd_isDefault_ (_xsd_IndexedEndpointType._xsd_isDefault_,
                     f | ::xml_schema::flags::not_root,
                     this)
    {
    }

    IndexedEndpointType::
    IndexedEndpointType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
    : ::saml2::metadata::EndpointType (e, f, c),
    _xsd_index_ (f | ::xml_schema::flags::not_root, this),
    _xsd_isDefault_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void IndexedEndpointType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"index" && a.namespace_ ().empty ())
        {
          this->index (
            index::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));
          continue;
        }

        if (a.name () == L"isDefault" && a.namespace_ ().empty ())
        {
          this->isDefault (
            isDefault::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));
          continue;
        }
      }

      if (!_xsd_index_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"index",
          L"");
      }
    }

    IndexedEndpointType* IndexedEndpointType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new IndexedEndpointType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, IndexedEndpointType >
    _xsd_IndexedEndpointType_type_factory_init (
      L"IndexedEndpointType urn:oasis:names:tc:SAML:2.0:metadata");


    // EntitiesDescriptorType
    //

    EntitiesDescriptorType::
    EntitiesDescriptorType ()
    : ::xml_schema::type (),
    _xsd_Signature_ (::xml_schema::flags (), this),
    _xsd_Extensions_ (::xml_schema::flags (), this),
    _xsd_EntityDescriptor_ (::xml_schema::flags (), this),
    _xsd_EntitiesDescriptor_ (::xml_schema::flags (), this),
    _xsd_validUntil_ (::xml_schema::flags (), this),
    _xsd_cacheDuration_ (::xml_schema::flags (), this),
    _xsd_ID_ (::xml_schema::flags (), this),
    _xsd_Name_ (::xml_schema::flags (), this)
    {
    }

    EntitiesDescriptorType::
    EntitiesDescriptorType (const EntitiesDescriptorType& _xsd_EntitiesDescriptorType,
                            ::xml_schema::flags f,
                            ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_EntitiesDescriptorType, f, c),
    _xsd_Signature_ (_xsd_EntitiesDescriptorType._xsd_Signature_,
                     f | ::xml_schema::flags::not_root,
                     this),
    _xsd_Extensions_ (_xsd_EntitiesDescriptorType._xsd_Extensions_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_EntityDescriptor_ (_xsd_EntitiesDescriptorType._xsd_EntityDescriptor_,
                            f | ::xml_schema::flags::not_root,
                            this),
    _xsd_EntitiesDescriptor_ (_xsd_EntitiesDescriptorType._xsd_EntitiesDescriptor_,
                              f | ::xml_schema::flags::not_root,
                              this),
    _xsd_validUntil_ (_xsd_EntitiesDescriptorType._xsd_validUntil_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_cacheDuration_ (_xsd_EntitiesDescriptorType._xsd_cacheDuration_,
                         f | ::xml_schema::flags::not_root,
                         this),
    _xsd_ID_ (_xsd_EntitiesDescriptorType._xsd_ID_,
              f | ::xml_schema::flags::not_root,
              this),
    _xsd_Name_ (_xsd_EntitiesDescriptorType._xsd_Name_,
                f | ::xml_schema::flags::not_root,
                this)
    {
    }

    EntitiesDescriptorType::
    EntitiesDescriptorType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Signature_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Extensions_ (f | ::xml_schema::flags::not_root, this),
    _xsd_EntityDescriptor_ (f | ::xml_schema::flags::not_root, this),
    _xsd_EntitiesDescriptor_ (f | ::xml_schema::flags::not_root, this),
    _xsd_validUntil_ (f | ::xml_schema::flags::not_root, this),
    _xsd_cacheDuration_ (f | ::xml_schema::flags::not_root, this),
    _xsd_ID_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Name_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void EntitiesDescriptorType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Signature
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Signature::type > r (
            tfm.create< Signature::type > (
              L"Signature",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Signature ())
              continue;
            this->Signature (r);
            continue;
          }
        }

        // Extensions
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Extensions::type > r (
            tfm.create< Extensions::type > (
              L"Extensions",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Extensions ())
              continue;
            this->Extensions (r);
            continue;
          }
        }

        // EntityDescriptor
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< EntityDescriptor::type > r (
            tfm.create< EntityDescriptor::type > (
              L"EntityDescriptor",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->EntityDescriptor ().push_back (r);
            continue;
          }
        }

        // EntitiesDescriptor
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< EntitiesDescriptor::type > r (
            tfm.create< EntitiesDescriptor::type > (
              L"EntitiesDescriptor",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->EntitiesDescriptor ().push_back (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"validUntil" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< validUntil::type > r (
            validUntil::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->validUntil (r);
          continue;
        }

        if (a.name () == L"cacheDuration" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< cacheDuration::type > r (
            cacheDuration::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->cacheDuration (r);
          continue;
        }

        if (a.name () == L"ID" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< ID::type > r (
            ID::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->ID (r);
          continue;
        }

        if (a.name () == L"Name" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Name::type > r (
            Name::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Name (r);
          continue;
        }
      }
    }

    EntitiesDescriptorType* EntitiesDescriptorType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new EntitiesDescriptorType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, EntitiesDescriptorType >
    _xsd_EntitiesDescriptorType_type_factory_init (
      L"EntitiesDescriptorType urn:oasis:names:tc:SAML:2.0:metadata");


    // EntityDescriptorType
    //

    EntityDescriptorType::
    EntityDescriptorType ()
    : ::xml_schema::type (),
    _xsd_Signature_ (::xml_schema::flags (), this),
    _xsd_Extensions_ (::xml_schema::flags (), this),
    _xsd_RoleDescriptor_ (::xml_schema::flags (), this),
    _xsd_IDPSSODescriptor_ (::xml_schema::flags (), this),
    _xsd_SPSSODescriptor_ (::xml_schema::flags (), this),
    _xsd_AuthnAuthorityDescriptor_ (::xml_schema::flags (), this),
    _xsd_AttributeAuthorityDescriptor_ (::xml_schema::flags (), this),
    _xsd_PDPDescriptor_ (::xml_schema::flags (), this),
    _xsd_AffiliationDescriptor_ (::xml_schema::flags (), this),
    _xsd_Organization_ (::xml_schema::flags (), this),
    _xsd_ContactPerson_ (::xml_schema::flags (), this),
    _xsd_AdditionalMetadataLocation_ (::xml_schema::flags (), this),
    _xsd_entityID_ (::xml_schema::flags (), this),
    _xsd_validUntil_ (::xml_schema::flags (), this),
    _xsd_cacheDuration_ (::xml_schema::flags (), this),
    _xsd_ID_ (::xml_schema::flags (), this)
    {
    }

    EntityDescriptorType::
    EntityDescriptorType (const entityID::type& _xsd_entityID)
    : ::xml_schema::type (),
    _xsd_Signature_ (::xml_schema::flags (), this),
    _xsd_Extensions_ (::xml_schema::flags (), this),
    _xsd_RoleDescriptor_ (::xml_schema::flags (), this),
    _xsd_IDPSSODescriptor_ (::xml_schema::flags (), this),
    _xsd_SPSSODescriptor_ (::xml_schema::flags (), this),
    _xsd_AuthnAuthorityDescriptor_ (::xml_schema::flags (), this),
    _xsd_AttributeAuthorityDescriptor_ (::xml_schema::flags (), this),
    _xsd_PDPDescriptor_ (::xml_schema::flags (), this),
    _xsd_AffiliationDescriptor_ (::xml_schema::flags (), this),
    _xsd_Organization_ (::xml_schema::flags (), this),
    _xsd_ContactPerson_ (::xml_schema::flags (), this),
    _xsd_AdditionalMetadataLocation_ (::xml_schema::flags (), this),
    _xsd_entityID_ (_xsd_entityID,
                    ::xml_schema::flags (),
                    this),
    _xsd_validUntil_ (::xml_schema::flags (), this),
    _xsd_cacheDuration_ (::xml_schema::flags (), this),
    _xsd_ID_ (::xml_schema::flags (), this)
    {
    }

    EntityDescriptorType::
    EntityDescriptorType (const EntityDescriptorType& _xsd_EntityDescriptorType,
                          ::xml_schema::flags f,
                          ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_EntityDescriptorType, f, c),
    _xsd_Signature_ (_xsd_EntityDescriptorType._xsd_Signature_,
                     f | ::xml_schema::flags::not_root,
                     this),
    _xsd_Extensions_ (_xsd_EntityDescriptorType._xsd_Extensions_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_RoleDescriptor_ (_xsd_EntityDescriptorType._xsd_RoleDescriptor_,
                          f | ::xml_schema::flags::not_root,
                          this),
    _xsd_IDPSSODescriptor_ (_xsd_EntityDescriptorType._xsd_IDPSSODescriptor_,
                            f | ::xml_schema::flags::not_root,
                            this),
    _xsd_SPSSODescriptor_ (_xsd_EntityDescriptorType._xsd_SPSSODescriptor_,
                           f | ::xml_schema::flags::not_root,
                           this),
    _xsd_AuthnAuthorityDescriptor_ (_xsd_EntityDescriptorType._xsd_AuthnAuthorityDescriptor_,
                                    f | ::xml_schema::flags::not_root,
                                    this),
    _xsd_AttributeAuthorityDescriptor_ (_xsd_EntityDescriptorType._xsd_AttributeAuthorityDescriptor_,
                                        f | ::xml_schema::flags::not_root,
                                        this),
    _xsd_PDPDescriptor_ (_xsd_EntityDescriptorType._xsd_PDPDescriptor_,
                         f | ::xml_schema::flags::not_root,
                         this),
    _xsd_AffiliationDescriptor_ (_xsd_EntityDescriptorType._xsd_AffiliationDescriptor_,
                                 f | ::xml_schema::flags::not_root,
                                 this),
    _xsd_Organization_ (_xsd_EntityDescriptorType._xsd_Organization_,
                        f | ::xml_schema::flags::not_root,
                        this),
    _xsd_ContactPerson_ (_xsd_EntityDescriptorType._xsd_ContactPerson_,
                         f | ::xml_schema::flags::not_root,
                         this),
    _xsd_AdditionalMetadataLocation_ (_xsd_EntityDescriptorType._xsd_AdditionalMetadataLocation_,
                                      f | ::xml_schema::flags::not_root,
                                      this),
    _xsd_entityID_ (_xsd_EntityDescriptorType._xsd_entityID_,
                    f | ::xml_schema::flags::not_root,
                    this),
    _xsd_validUntil_ (_xsd_EntityDescriptorType._xsd_validUntil_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_cacheDuration_ (_xsd_EntityDescriptorType._xsd_cacheDuration_,
                         f | ::xml_schema::flags::not_root,
                         this),
    _xsd_ID_ (_xsd_EntityDescriptorType._xsd_ID_,
              f | ::xml_schema::flags::not_root,
              this)
    {
    }

    EntityDescriptorType::
    EntityDescriptorType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Signature_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Extensions_ (f | ::xml_schema::flags::not_root, this),
    _xsd_RoleDescriptor_ (f | ::xml_schema::flags::not_root, this),
    _xsd_IDPSSODescriptor_ (f | ::xml_schema::flags::not_root, this),
    _xsd_SPSSODescriptor_ (f | ::xml_schema::flags::not_root, this),
    _xsd_AuthnAuthorityDescriptor_ (f | ::xml_schema::flags::not_root, this),
    _xsd_AttributeAuthorityDescriptor_ (f | ::xml_schema::flags::not_root, this),
    _xsd_PDPDescriptor_ (f | ::xml_schema::flags::not_root, this),
    _xsd_AffiliationDescriptor_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Organization_ (f | ::xml_schema::flags::not_root, this),
    _xsd_ContactPerson_ (f | ::xml_schema::flags::not_root, this),
    _xsd_AdditionalMetadataLocation_ (f | ::xml_schema::flags::not_root, this),
    _xsd_entityID_ (f | ::xml_schema::flags::not_root, this),
    _xsd_validUntil_ (f | ::xml_schema::flags::not_root, this),
    _xsd_cacheDuration_ (f | ::xml_schema::flags::not_root, this),
    _xsd_ID_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void EntityDescriptorType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Signature
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Signature::type > r (
            tfm.create< Signature::type > (
              L"Signature",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Signature ())
              continue;
            this->Signature (r);
            continue;
          }
        }

        // Extensions
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Extensions::type > r (
            tfm.create< Extensions::type > (
              L"Extensions",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Extensions ())
              continue;
            this->Extensions (r);
            continue;
          }
        }

        // RoleDescriptor
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< RoleDescriptor::type > r (
            tfm.create< RoleDescriptor::type > (
              L"RoleDescriptor",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->RoleDescriptor ().push_back (r);
            continue;
          }
        }

        // IDPSSODescriptor
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< IDPSSODescriptor::type > r (
            tfm.create< IDPSSODescriptor::type > (
              L"IDPSSODescriptor",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->IDPSSODescriptor ().push_back (r);
            continue;
          }
        }

        // SPSSODescriptor
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< SPSSODescriptor::type > r (
            tfm.create< SPSSODescriptor::type > (
              L"SPSSODescriptor",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->SPSSODescriptor ().push_back (r);
            continue;
          }
        }

        // AuthnAuthorityDescriptor
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< AuthnAuthorityDescriptor::type > r (
            tfm.create< AuthnAuthorityDescriptor::type > (
              L"AuthnAuthorityDescriptor",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->AuthnAuthorityDescriptor ().push_back (r);
            continue;
          }
        }

        // AttributeAuthorityDescriptor
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< AttributeAuthorityDescriptor::type > r (
            tfm.create< AttributeAuthorityDescriptor::type > (
              L"AttributeAuthorityDescriptor",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->AttributeAuthorityDescriptor ().push_back (r);
            continue;
          }
        }

        // PDPDescriptor
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< PDPDescriptor::type > r (
            tfm.create< PDPDescriptor::type > (
              L"PDPDescriptor",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->PDPDescriptor ().push_back (r);
            continue;
          }
        }

        // AffiliationDescriptor
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< AffiliationDescriptor::type > r (
            tfm.create< AffiliationDescriptor::type > (
              L"AffiliationDescriptor",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->AffiliationDescriptor ())
              continue;
            this->AffiliationDescriptor (r);
            continue;
          }
        }

        // Organization
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Organization::type > r (
            tfm.create< Organization::type > (
              L"Organization",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Organization ())
              continue;
            this->Organization (r);
            continue;
          }
        }

        // ContactPerson
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ContactPerson::type > r (
            tfm.create< ContactPerson::type > (
              L"ContactPerson",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->ContactPerson ().push_back (r);
            continue;
          }
        }

        // AdditionalMetadataLocation
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< AdditionalMetadataLocation::type > r (
            tfm.create< AdditionalMetadataLocation::type > (
              L"AdditionalMetadataLocation",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->AdditionalMetadataLocation ().push_back (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"entityID" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< entityID::type > r (
            entityID::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->entityID (r);
          continue;
        }

        if (a.name () == L"validUntil" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< validUntil::type > r (
            validUntil::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->validUntil (r);
          continue;
        }

        if (a.name () == L"cacheDuration" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< cacheDuration::type > r (
            cacheDuration::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->cacheDuration (r);
          continue;
        }

        if (a.name () == L"ID" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< ID::type > r (
            ID::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->ID (r);
          continue;
        }
      }

      if (!_xsd_entityID_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"entityID",
          L"");
      }
    }

    EntityDescriptorType* EntityDescriptorType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new EntityDescriptorType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, EntityDescriptorType >
    _xsd_EntityDescriptorType_type_factory_init (
      L"EntityDescriptorType urn:oasis:names:tc:SAML:2.0:metadata");


    // OrganizationType
    //

    OrganizationType::
    OrganizationType ()
    : ::xml_schema::type (),
    _xsd_Extensions_ (::xml_schema::flags (), this),
    _xsd_OrganizationName_ (::xml_schema::flags (), this),
    _xsd_OrganizationDisplayName_ (::xml_schema::flags (), this),
    _xsd_OrganizationURL_ (::xml_schema::flags (), this)
    {
    }

    OrganizationType::
    OrganizationType (const OrganizationType& _xsd_OrganizationType,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_OrganizationType, f, c),
    _xsd_Extensions_ (_xsd_OrganizationType._xsd_Extensions_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_OrganizationName_ (_xsd_OrganizationType._xsd_OrganizationName_,
                            f | ::xml_schema::flags::not_root,
                            this),
    _xsd_OrganizationDisplayName_ (_xsd_OrganizationType._xsd_OrganizationDisplayName_,
                                   f | ::xml_schema::flags::not_root,
                                   this),
    _xsd_OrganizationURL_ (_xsd_OrganizationType._xsd_OrganizationURL_,
                           f | ::xml_schema::flags::not_root,
                           this)
    {
    }

    OrganizationType::
    OrganizationType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Extensions_ (f | ::xml_schema::flags::not_root, this),
    _xsd_OrganizationName_ (f | ::xml_schema::flags::not_root, this),
    _xsd_OrganizationDisplayName_ (f | ::xml_schema::flags::not_root, this),
    _xsd_OrganizationURL_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void OrganizationType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Extensions
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Extensions::type > r (
            tfm.create< Extensions::type > (
              L"Extensions",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Extensions ())
              continue;
            this->Extensions (r);
            continue;
          }
        }

        // OrganizationName
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< OrganizationName::type > r (
            tfm.create< OrganizationName::type > (
              L"OrganizationName",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->OrganizationName ().push_back (r);
            continue;
          }
        }

        // OrganizationDisplayName
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< OrganizationDisplayName::type > r (
            tfm.create< OrganizationDisplayName::type > (
              L"OrganizationDisplayName",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->OrganizationDisplayName ().push_back (r);
            continue;
          }
        }

        // OrganizationURL
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< OrganizationURL::type > r (
            tfm.create< OrganizationURL::type > (
              L"OrganizationURL",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->OrganizationURL ().push_back (r);
            continue;
          }
        }
      }
    }

    OrganizationType* OrganizationType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new OrganizationType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, OrganizationType >
    _xsd_OrganizationType_type_factory_init (
      L"OrganizationType urn:oasis:names:tc:SAML:2.0:metadata");


    // ContactType
    //

    ContactType::
    ContactType ()
    : ::xml_schema::type (),
    _xsd_Extensions_ (::xml_schema::flags (), this),
    _xsd_Company_ (::xml_schema::flags (), this),
    _xsd_GivenName_ (::xml_schema::flags (), this),
    _xsd_SurName_ (::xml_schema::flags (), this),
    _xsd_EmailAddress_ (::xml_schema::flags (), this),
    _xsd_TelephoneNumber_ (::xml_schema::flags (), this),
    _xsd_contactType_ (::xml_schema::flags (), this)
    {
    }

    ContactType::
    ContactType (const contactType::type& _xsd_contactType)
    : ::xml_schema::type (),
    _xsd_Extensions_ (::xml_schema::flags (), this),
    _xsd_Company_ (::xml_schema::flags (), this),
    _xsd_GivenName_ (::xml_schema::flags (), this),
    _xsd_SurName_ (::xml_schema::flags (), this),
    _xsd_EmailAddress_ (::xml_schema::flags (), this),
    _xsd_TelephoneNumber_ (::xml_schema::flags (), this),
    _xsd_contactType_ (_xsd_contactType,
                       ::xml_schema::flags (),
                       this)
    {
    }

    ContactType::
    ContactType (const ContactType& _xsd_ContactType,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_ContactType, f, c),
    _xsd_Extensions_ (_xsd_ContactType._xsd_Extensions_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_Company_ (_xsd_ContactType._xsd_Company_,
                   f | ::xml_schema::flags::not_root,
                   this),
    _xsd_GivenName_ (_xsd_ContactType._xsd_GivenName_,
                     f | ::xml_schema::flags::not_root,
                     this),
    _xsd_SurName_ (_xsd_ContactType._xsd_SurName_,
                   f | ::xml_schema::flags::not_root,
                   this),
    _xsd_EmailAddress_ (_xsd_ContactType._xsd_EmailAddress_,
                        f | ::xml_schema::flags::not_root,
                        this),
    _xsd_TelephoneNumber_ (_xsd_ContactType._xsd_TelephoneNumber_,
                           f | ::xml_schema::flags::not_root,
                           this),
    _xsd_contactType_ (_xsd_ContactType._xsd_contactType_,
                       f | ::xml_schema::flags::not_root,
                       this)
    {
    }

    ContactType::
    ContactType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Extensions_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Company_ (f | ::xml_schema::flags::not_root, this),
    _xsd_GivenName_ (f | ::xml_schema::flags::not_root, this),
    _xsd_SurName_ (f | ::xml_schema::flags::not_root, this),
    _xsd_EmailAddress_ (f | ::xml_schema::flags::not_root, this),
    _xsd_TelephoneNumber_ (f | ::xml_schema::flags::not_root, this),
    _xsd_contactType_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void ContactType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Extensions
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Extensions::type > r (
            tfm.create< Extensions::type > (
              L"Extensions",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Extensions ())
              continue;
            this->Extensions (r);
            continue;
          }
        }

        // Company
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Company::type > r (
            tfm.create< Company::type > (
              L"Company",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Company ())
              continue;
            this->Company (r);
            continue;
          }
        }

        // GivenName
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< GivenName::type > r (
            tfm.create< GivenName::type > (
              L"GivenName",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->GivenName ())
              continue;
            this->GivenName (r);
            continue;
          }
        }

        // SurName
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< SurName::type > r (
            tfm.create< SurName::type > (
              L"SurName",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->SurName ())
              continue;
            this->SurName (r);
            continue;
          }
        }

        // EmailAddress
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< EmailAddress::type > r (
            tfm.create< EmailAddress::type > (
              L"EmailAddress",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->EmailAddress ().push_back (r);
            continue;
          }
        }

        // TelephoneNumber
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< TelephoneNumber::type > r (
            tfm.create< TelephoneNumber::type > (
              L"TelephoneNumber",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->TelephoneNumber ().push_back (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"contactType" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< contactType::type > r (
            contactType::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->contactType (r);
          continue;
        }
      }

      if (!_xsd_contactType_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"contactType",
          L"");
      }
    }

    ContactType* ContactType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ContactType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ContactType >
    _xsd_ContactType_type_factory_init (
      L"ContactType urn:oasis:names:tc:SAML:2.0:metadata");


    // ContactTypeType
    //

    ContactTypeType::
    ContactTypeType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_ContactTypeType_convert ();
    }

    ContactTypeType::
    ContactTypeType (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_ContactTypeType_convert ();
    }

    ContactTypeType::
    ContactTypeType (const ::std::basic_string< wchar_t >& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_ContactTypeType_convert ();
    }

    ContactTypeType* ContactTypeType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ContactTypeType (*this, f, c);
    }

    ContactTypeType::_xsd_ContactTypeType ContactTypeType::
    _xsd_ContactTypeType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_ContactTypeType_literals_);
      const _xsd_ContactTypeType* i (::std::lower_bound (
                                       _xsd_ContactTypeType_indexes_,
                                       _xsd_ContactTypeType_indexes_ + 5,
                                       *this,
                                       c));

      if (i == _xsd_ContactTypeType_indexes_ + 5 || _xsd_ContactTypeType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const ContactTypeType::
    _xsd_ContactTypeType_literals_[5] =
    {
      L"technical",
      L"support",
      L"administrative",
      L"billing",
      L"other"
    };

    const ContactTypeType::_xsd_ContactTypeType ContactTypeType::
    _xsd_ContactTypeType_indexes_[5] =
    {
      ::saml2::metadata::ContactTypeType::administrative,
      ::saml2::metadata::ContactTypeType::billing,
      ::saml2::metadata::ContactTypeType::other,
      ::saml2::metadata::ContactTypeType::support,
      ::saml2::metadata::ContactTypeType::technical
    };

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ContactTypeType >
    _xsd_ContactTypeType_type_factory_init (
      L"ContactTypeType urn:oasis:names:tc:SAML:2.0:metadata");


    // AdditionalMetadataLocationType
    //

    AdditionalMetadataLocationType::
    AdditionalMetadataLocationType ()
    : ::xml_schema::uri (),
    _xsd_namespace__ (::xml_schema::flags (), this)
    {
    }

    AdditionalMetadataLocationType::
    AdditionalMetadataLocationType (const _xsd_AdditionalMetadataLocationType::base_& _xsd_AdditionalMetadataLocationType,
                                    const namespace_::type& _xsd_namespace_)
    : ::xml_schema::uri (_xsd_AdditionalMetadataLocationType),
    _xsd_namespace__ (_xsd_namespace_,
                      ::xml_schema::flags (),
                      this)
    {
    }

    AdditionalMetadataLocationType::
    AdditionalMetadataLocationType (const AdditionalMetadataLocationType& _xsd_AdditionalMetadataLocationType,
                                    ::xml_schema::flags f,
                                    ::xml_schema::type* c)
    : ::xml_schema::uri (_xsd_AdditionalMetadataLocationType, f, c),
    _xsd_namespace__ (_xsd_AdditionalMetadataLocationType._xsd_namespace__,
                      f | ::xml_schema::flags::not_root,
                      this)
    {
    }

    AdditionalMetadataLocationType::
    AdditionalMetadataLocationType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::type* c)
    : ::xml_schema::uri (e, f, c),
    _xsd_namespace__ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void AdditionalMetadataLocationType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"namespace" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< namespace_::type > r (
            namespace_::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->namespace_ (r);
          continue;
        }
      }

      if (!_xsd_namespace__.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"namespace",
          L"");
      }
    }

    AdditionalMetadataLocationType* AdditionalMetadataLocationType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new AdditionalMetadataLocationType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AdditionalMetadataLocationType >
    _xsd_AdditionalMetadataLocationType_type_factory_init (
      L"AdditionalMetadataLocationType urn:oasis:names:tc:SAML:2.0:metadata");


    // RoleDescriptorType
    //

    RoleDescriptorType::
    RoleDescriptorType ()
    : ::xml_schema::type (),
    _xsd_Signature_ (::xml_schema::flags (), this),
    _xsd_Extensions_ (::xml_schema::flags (), this),
    _xsd_KeyDescriptor_ (::xml_schema::flags (), this),
    _xsd_Organization_ (::xml_schema::flags (), this),
    _xsd_ContactPerson_ (::xml_schema::flags (), this),
    _xsd_ID_ (::xml_schema::flags (), this),
    _xsd_validUntil_ (::xml_schema::flags (), this),
    _xsd_cacheDuration_ (::xml_schema::flags (), this),
    _xsd_protocolSupportEnumeration_ (::xml_schema::flags (), this),
    _xsd_errorURL_ (::xml_schema::flags (), this)
    {
    }

    RoleDescriptorType::
    RoleDescriptorType (const protocolSupportEnumeration::type& _xsd_protocolSupportEnumeration)
    : ::xml_schema::type (),
    _xsd_Signature_ (::xml_schema::flags (), this),
    _xsd_Extensions_ (::xml_schema::flags (), this),
    _xsd_KeyDescriptor_ (::xml_schema::flags (), this),
    _xsd_Organization_ (::xml_schema::flags (), this),
    _xsd_ContactPerson_ (::xml_schema::flags (), this),
    _xsd_ID_ (::xml_schema::flags (), this),
    _xsd_validUntil_ (::xml_schema::flags (), this),
    _xsd_cacheDuration_ (::xml_schema::flags (), this),
    _xsd_protocolSupportEnumeration_ (_xsd_protocolSupportEnumeration,
                                      ::xml_schema::flags (),
                                      this),
    _xsd_errorURL_ (::xml_schema::flags (), this)
    {
    }

    RoleDescriptorType::
    RoleDescriptorType (const RoleDescriptorType& _xsd_RoleDescriptorType,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_RoleDescriptorType, f, c),
    _xsd_Signature_ (_xsd_RoleDescriptorType._xsd_Signature_,
                     f | ::xml_schema::flags::not_root,
                     this),
    _xsd_Extensions_ (_xsd_RoleDescriptorType._xsd_Extensions_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_KeyDescriptor_ (_xsd_RoleDescriptorType._xsd_KeyDescriptor_,
                         f | ::xml_schema::flags::not_root,
                         this),
    _xsd_Organization_ (_xsd_RoleDescriptorType._xsd_Organization_,
                        f | ::xml_schema::flags::not_root,
                        this),
    _xsd_ContactPerson_ (_xsd_RoleDescriptorType._xsd_ContactPerson_,
                         f | ::xml_schema::flags::not_root,
                         this),
    _xsd_ID_ (_xsd_RoleDescriptorType._xsd_ID_,
              f | ::xml_schema::flags::not_root,
              this),
    _xsd_validUntil_ (_xsd_RoleDescriptorType._xsd_validUntil_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_cacheDuration_ (_xsd_RoleDescriptorType._xsd_cacheDuration_,
                         f | ::xml_schema::flags::not_root,
                         this),
    _xsd_protocolSupportEnumeration_ (_xsd_RoleDescriptorType._xsd_protocolSupportEnumeration_,
                                      f | ::xml_schema::flags::not_root,
                                      this),
    _xsd_errorURL_ (_xsd_RoleDescriptorType._xsd_errorURL_,
                    f | ::xml_schema::flags::not_root,
                    this)
    {
    }

    RoleDescriptorType::
    RoleDescriptorType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Signature_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Extensions_ (f | ::xml_schema::flags::not_root, this),
    _xsd_KeyDescriptor_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Organization_ (f | ::xml_schema::flags::not_root, this),
    _xsd_ContactPerson_ (f | ::xml_schema::flags::not_root, this),
    _xsd_ID_ (f | ::xml_schema::flags::not_root, this),
    _xsd_validUntil_ (f | ::xml_schema::flags::not_root, this),
    _xsd_cacheDuration_ (f | ::xml_schema::flags::not_root, this),
    _xsd_protocolSupportEnumeration_ (f | ::xml_schema::flags::not_root, this),
    _xsd_errorURL_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void RoleDescriptorType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Signature
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Signature::type > r (
            tfm.create< Signature::type > (
              L"Signature",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Signature ())
              continue;
            this->Signature (r);
            continue;
          }
        }

        // Extensions
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Extensions::type > r (
            tfm.create< Extensions::type > (
              L"Extensions",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Extensions ())
              continue;
            this->Extensions (r);
            continue;
          }
        }

        // KeyDescriptor
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< KeyDescriptor::type > r (
            tfm.create< KeyDescriptor::type > (
              L"KeyDescriptor",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->KeyDescriptor ().push_back (r);
            continue;
          }
        }

        // Organization
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Organization::type > r (
            tfm.create< Organization::type > (
              L"Organization",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Organization ())
              continue;
            this->Organization (r);
            continue;
          }
        }

        // ContactPerson
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ContactPerson::type > r (
            tfm.create< ContactPerson::type > (
              L"ContactPerson",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->ContactPerson ().push_back (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"ID" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< ID::type > r (
            ID::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->ID (r);
          continue;
        }

        if (a.name () == L"validUntil" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< validUntil::type > r (
            validUntil::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->validUntil (r);
          continue;
        }

        if (a.name () == L"cacheDuration" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< cacheDuration::type > r (
            cacheDuration::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->cacheDuration (r);
          continue;
        }

        if (a.name () == L"protocolSupportEnumeration" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< protocolSupportEnumeration::type > r (
            protocolSupportEnumeration::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->protocolSupportEnumeration (r);
          continue;
        }

        if (a.name () == L"errorURL" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< errorURL::type > r (
            errorURL::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->errorURL (r);
          continue;
        }
      }

      if (!_xsd_protocolSupportEnumeration_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"protocolSupportEnumeration",
          L"");
      }
    }

    RoleDescriptorType* RoleDescriptorType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new RoleDescriptorType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, RoleDescriptorType >
    _xsd_RoleDescriptorType_type_factory_init (
      L"RoleDescriptorType urn:oasis:names:tc:SAML:2.0:metadata");


    // anyURIListType
    //

    anyURIListType::
    anyURIListType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::simple_type (e, f, c),
    ::xsd::cxx::tree::list< ::xml_schema::uri, wchar_t > (e, f, c)
    {
    }

    anyURIListType::
    anyURIListType (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::simple_type (a, f, c),
    ::xsd::cxx::tree::list< ::xml_schema::uri, wchar_t > (a, f, c)
    {
    }

    anyURIListType::
    anyURIListType (const ::std::basic_string< wchar_t >& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::simple_type (s, e, f, c),
    ::xsd::cxx::tree::list< ::xml_schema::uri, wchar_t > (s, e, f, c)
    {
    }

    anyURIListType* anyURIListType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new anyURIListType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, anyURIListType >
    _xsd_anyURIListType_type_factory_init (
      L"anyURIListType urn:oasis:names:tc:SAML:2.0:metadata");


    // KeyDescriptorType
    //

    KeyDescriptorType::
    KeyDescriptorType ()
    : ::xml_schema::type (),
    _xsd_KeyInfo_ (::xml_schema::flags (), this),
    _xsd_EncryptionMethod_ (::xml_schema::flags (), this),
    _xsd_use_ (::xml_schema::flags (), this)
    {
    }

    KeyDescriptorType::
    KeyDescriptorType (const KeyInfo::type& _xsd_KeyInfo)
    : ::xml_schema::type (),
    _xsd_KeyInfo_ (_xsd_KeyInfo,
                   ::xml_schema::flags (),
                   this),
    _xsd_EncryptionMethod_ (::xml_schema::flags (), this),
    _xsd_use_ (::xml_schema::flags (), this)
    {
    }

    KeyDescriptorType::
    KeyDescriptorType (const KeyDescriptorType& _xsd_KeyDescriptorType,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_KeyDescriptorType, f, c),
    _xsd_KeyInfo_ (_xsd_KeyDescriptorType._xsd_KeyInfo_,
                   f | ::xml_schema::flags::not_root,
                   this),
    _xsd_EncryptionMethod_ (_xsd_KeyDescriptorType._xsd_EncryptionMethod_,
                            f | ::xml_schema::flags::not_root,
                            this),
    _xsd_use_ (_xsd_KeyDescriptorType._xsd_use_,
               f | ::xml_schema::flags::not_root,
               this)
    {
    }

    KeyDescriptorType::
    KeyDescriptorType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_KeyInfo_ (f | ::xml_schema::flags::not_root, this),
    _xsd_EncryptionMethod_ (f | ::xml_schema::flags::not_root, this),
    _xsd_use_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void KeyDescriptorType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // KeyInfo
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< KeyInfo::type > r (
            tfm.create< KeyInfo::type > (
              L"KeyInfo",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_KeyInfo_.present ())
              continue;
            this->KeyInfo (r);
            continue;
          }
        }

        // EncryptionMethod
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< EncryptionMethod::type > r (
            tfm.create< EncryptionMethod::type > (
              L"EncryptionMethod",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->EncryptionMethod ().push_back (r);
            continue;
          }
        }
      }

      if (!_xsd_KeyInfo_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"KeyInfo",
          L"http://www.w3.org/2000/09/xmldsig#");
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"use" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< use::type > r (
            use::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->use (r);
          continue;
        }
      }
    }

    KeyDescriptorType* KeyDescriptorType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new KeyDescriptorType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, KeyDescriptorType >
    _xsd_KeyDescriptorType_type_factory_init (
      L"KeyDescriptorType urn:oasis:names:tc:SAML:2.0:metadata");


    // KeyTypes
    //

    KeyTypes::
    KeyTypes (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_KeyTypes_convert ();
    }

    KeyTypes::
    KeyTypes (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_KeyTypes_convert ();
    }

    KeyTypes::
    KeyTypes (const ::std::basic_string< wchar_t >& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_KeyTypes_convert ();
    }

    KeyTypes* KeyTypes::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new KeyTypes (*this, f, c);
    }

    KeyTypes::_xsd_KeyTypes KeyTypes::
    _xsd_KeyTypes_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_KeyTypes_literals_);
      const _xsd_KeyTypes* i (::std::lower_bound (
                                _xsd_KeyTypes_indexes_,
                                _xsd_KeyTypes_indexes_ + 2,
                                *this,
                                c));

      if (i == _xsd_KeyTypes_indexes_ + 2 || _xsd_KeyTypes_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const KeyTypes::
    _xsd_KeyTypes_literals_[2] =
    {
      L"encryption",
      L"signing"
    };

    const KeyTypes::_xsd_KeyTypes KeyTypes::
    _xsd_KeyTypes_indexes_[2] =
    {
      ::saml2::metadata::KeyTypes::encryption,
      ::saml2::metadata::KeyTypes::signing
    };

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, KeyTypes >
    _xsd_KeyTypes_type_factory_init (
      L"KeyTypes urn:oasis:names:tc:SAML:2.0:metadata");


    // SSODescriptorType
    //

    SSODescriptorType::
    SSODescriptorType ()
    : ::saml2::metadata::RoleDescriptorType (),
    _xsd_ArtifactResolutionService_ (::xml_schema::flags (), this),
    _xsd_SingleLogoutService_ (::xml_schema::flags (), this),
    _xsd_ManageNameIDService_ (::xml_schema::flags (), this),
    _xsd_NameIDFormat_ (::xml_schema::flags (), this)
    {
    }

    SSODescriptorType::
    SSODescriptorType (const protocolSupportEnumeration::type& _xsd_protocolSupportEnumeration)
    : ::saml2::metadata::RoleDescriptorType (_xsd_protocolSupportEnumeration),
    _xsd_ArtifactResolutionService_ (::xml_schema::flags (), this),
    _xsd_SingleLogoutService_ (::xml_schema::flags (), this),
    _xsd_ManageNameIDService_ (::xml_schema::flags (), this),
    _xsd_NameIDFormat_ (::xml_schema::flags (), this)
    {
    }

    SSODescriptorType::
    SSODescriptorType (const SSODescriptorType& _xsd_SSODescriptorType,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
    : ::saml2::metadata::RoleDescriptorType (_xsd_SSODescriptorType, f, c),
    _xsd_ArtifactResolutionService_ (_xsd_SSODescriptorType._xsd_ArtifactResolutionService_,
                                     f | ::xml_schema::flags::not_root,
                                     this),
    _xsd_SingleLogoutService_ (_xsd_SSODescriptorType._xsd_SingleLogoutService_,
                               f | ::xml_schema::flags::not_root,
                               this),
    _xsd_ManageNameIDService_ (_xsd_SSODescriptorType._xsd_ManageNameIDService_,
                               f | ::xml_schema::flags::not_root,
                               this),
    _xsd_NameIDFormat_ (_xsd_SSODescriptorType._xsd_NameIDFormat_,
                        f | ::xml_schema::flags::not_root,
                        this)
    {
    }

    SSODescriptorType::
    SSODescriptorType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
    : ::saml2::metadata::RoleDescriptorType (e, f, c),
    _xsd_ArtifactResolutionService_ (f | ::xml_schema::flags::not_root, this),
    _xsd_SingleLogoutService_ (f | ::xml_schema::flags::not_root, this),
    _xsd_ManageNameIDService_ (f | ::xml_schema::flags::not_root, this),
    _xsd_NameIDFormat_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void SSODescriptorType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // ArtifactResolutionService
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ArtifactResolutionService::type > r (
            tfm.create< ArtifactResolutionService::type > (
              L"ArtifactResolutionService",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->ArtifactResolutionService ().push_back (r);
            continue;
          }
        }

        // SingleLogoutService
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< SingleLogoutService::type > r (
            tfm.create< SingleLogoutService::type > (
              L"SingleLogoutService",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->SingleLogoutService ().push_back (r);
            continue;
          }
        }

        // ManageNameIDService
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ManageNameIDService::type > r (
            tfm.create< ManageNameIDService::type > (
              L"ManageNameIDService",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->ManageNameIDService ().push_back (r);
            continue;
          }
        }

        // NameIDFormat
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< NameIDFormat::type > r (
            tfm.create< NameIDFormat::type > (
              L"NameIDFormat",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->NameIDFormat ().push_back (r);
            continue;
          }
        }
      }
    }

    SSODescriptorType* SSODescriptorType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new SSODescriptorType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SSODescriptorType >
    _xsd_SSODescriptorType_type_factory_init (
      L"SSODescriptorType urn:oasis:names:tc:SAML:2.0:metadata");


    // IDPSSODescriptorType
    //

    IDPSSODescriptorType::
    IDPSSODescriptorType ()
    : ::saml2::metadata::SSODescriptorType (),
    _xsd_SingleSignOnService_ (::xml_schema::flags (), this),
    _xsd_NameIDMappingService_ (::xml_schema::flags (), this),
    _xsd_AssertionIDRequestService_ (::xml_schema::flags (), this),
    _xsd_AttributeProfile_ (::xml_schema::flags (), this),
    _xsd_Attribute_ (::xml_schema::flags (), this),
    _xsd_WantAuthnRequestsSigned_ (::xml_schema::flags (), this)
    {
    }

    IDPSSODescriptorType::
    IDPSSODescriptorType (const protocolSupportEnumeration::type& _xsd_protocolSupportEnumeration)
    : ::saml2::metadata::SSODescriptorType (_xsd_protocolSupportEnumeration),
    _xsd_SingleSignOnService_ (::xml_schema::flags (), this),
    _xsd_NameIDMappingService_ (::xml_schema::flags (), this),
    _xsd_AssertionIDRequestService_ (::xml_schema::flags (), this),
    _xsd_AttributeProfile_ (::xml_schema::flags (), this),
    _xsd_Attribute_ (::xml_schema::flags (), this),
    _xsd_WantAuthnRequestsSigned_ (::xml_schema::flags (), this)
    {
    }

    IDPSSODescriptorType::
    IDPSSODescriptorType (const IDPSSODescriptorType& _xsd_IDPSSODescriptorType,
                          ::xml_schema::flags f,
                          ::xml_schema::type* c)
    : ::saml2::metadata::SSODescriptorType (_xsd_IDPSSODescriptorType, f, c),
    _xsd_SingleSignOnService_ (_xsd_IDPSSODescriptorType._xsd_SingleSignOnService_,
                               f | ::xml_schema::flags::not_root,
                               this),
    _xsd_NameIDMappingService_ (_xsd_IDPSSODescriptorType._xsd_NameIDMappingService_,
                                f | ::xml_schema::flags::not_root,
                                this),
    _xsd_AssertionIDRequestService_ (_xsd_IDPSSODescriptorType._xsd_AssertionIDRequestService_,
                                     f | ::xml_schema::flags::not_root,
                                     this),
    _xsd_AttributeProfile_ (_xsd_IDPSSODescriptorType._xsd_AttributeProfile_,
                            f | ::xml_schema::flags::not_root,
                            this),
    _xsd_Attribute_ (_xsd_IDPSSODescriptorType._xsd_Attribute_,
                     f | ::xml_schema::flags::not_root,
                     this),
    _xsd_WantAuthnRequestsSigned_ (_xsd_IDPSSODescriptorType._xsd_WantAuthnRequestsSigned_,
                                   f | ::xml_schema::flags::not_root,
                                   this)
    {
    }

    IDPSSODescriptorType::
    IDPSSODescriptorType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::type* c)
    : ::saml2::metadata::SSODescriptorType (e, f, c),
    _xsd_SingleSignOnService_ (f | ::xml_schema::flags::not_root, this),
    _xsd_NameIDMappingService_ (f | ::xml_schema::flags::not_root, this),
    _xsd_AssertionIDRequestService_ (f | ::xml_schema::flags::not_root, this),
    _xsd_AttributeProfile_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Attribute_ (f | ::xml_schema::flags::not_root, this),
    _xsd_WantAuthnRequestsSigned_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void IDPSSODescriptorType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // SingleSignOnService
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< SingleSignOnService::type > r (
            tfm.create< SingleSignOnService::type > (
              L"SingleSignOnService",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->SingleSignOnService ().push_back (r);
            continue;
          }
        }

        // NameIDMappingService
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< NameIDMappingService::type > r (
            tfm.create< NameIDMappingService::type > (
              L"NameIDMappingService",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->NameIDMappingService ().push_back (r);
            continue;
          }
        }

        // AssertionIDRequestService
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< AssertionIDRequestService::type > r (
            tfm.create< AssertionIDRequestService::type > (
              L"AssertionIDRequestService",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->AssertionIDRequestService ().push_back (r);
            continue;
          }
        }

        // AttributeProfile
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< AttributeProfile::type > r (
            tfm.create< AttributeProfile::type > (
              L"AttributeProfile",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->AttributeProfile ().push_back (r);
            continue;
          }
        }

        // Attribute
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Attribute::type > r (
            tfm.create< Attribute::type > (
              L"Attribute",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->Attribute ().push_back (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"WantAuthnRequestsSigned" && a.namespace_ ().empty ())
        {
          this->WantAuthnRequestsSigned (
            WantAuthnRequestsSigned::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));
          continue;
        }
      }
    }

    IDPSSODescriptorType* IDPSSODescriptorType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new IDPSSODescriptorType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, IDPSSODescriptorType >
    _xsd_IDPSSODescriptorType_type_factory_init (
      L"IDPSSODescriptorType urn:oasis:names:tc:SAML:2.0:metadata");


    // SPSSODescriptorType
    //

    SPSSODescriptorType::
    SPSSODescriptorType ()
    : ::saml2::metadata::SSODescriptorType (),
    _xsd_AssertionConsumerService_ (::xml_schema::flags (), this),
    _xsd_AttributeConsumingService_ (::xml_schema::flags (), this),
    _xsd_AuthnRequestsSigned_ (::xml_schema::flags (), this),
    _xsd_WantAssertionsSigned_ (::xml_schema::flags (), this)
    {
    }

    SPSSODescriptorType::
    SPSSODescriptorType (const protocolSupportEnumeration::type& _xsd_protocolSupportEnumeration)
    : ::saml2::metadata::SSODescriptorType (_xsd_protocolSupportEnumeration),
    _xsd_AssertionConsumerService_ (::xml_schema::flags (), this),
    _xsd_AttributeConsumingService_ (::xml_schema::flags (), this),
    _xsd_AuthnRequestsSigned_ (::xml_schema::flags (), this),
    _xsd_WantAssertionsSigned_ (::xml_schema::flags (), this)
    {
    }

    SPSSODescriptorType::
    SPSSODescriptorType (const SPSSODescriptorType& _xsd_SPSSODescriptorType,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
    : ::saml2::metadata::SSODescriptorType (_xsd_SPSSODescriptorType, f, c),
    _xsd_AssertionConsumerService_ (_xsd_SPSSODescriptorType._xsd_AssertionConsumerService_,
                                    f | ::xml_schema::flags::not_root,
                                    this),
    _xsd_AttributeConsumingService_ (_xsd_SPSSODescriptorType._xsd_AttributeConsumingService_,
                                     f | ::xml_schema::flags::not_root,
                                     this),
    _xsd_AuthnRequestsSigned_ (_xsd_SPSSODescriptorType._xsd_AuthnRequestsSigned_,
                               f | ::xml_schema::flags::not_root,
                               this),
    _xsd_WantAssertionsSigned_ (_xsd_SPSSODescriptorType._xsd_WantAssertionsSigned_,
                                f | ::xml_schema::flags::not_root,
                                this)
    {
    }

    SPSSODescriptorType::
    SPSSODescriptorType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
    : ::saml2::metadata::SSODescriptorType (e, f, c),
    _xsd_AssertionConsumerService_ (f | ::xml_schema::flags::not_root, this),
    _xsd_AttributeConsumingService_ (f | ::xml_schema::flags::not_root, this),
    _xsd_AuthnRequestsSigned_ (f | ::xml_schema::flags::not_root, this),
    _xsd_WantAssertionsSigned_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void SPSSODescriptorType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // AssertionConsumerService
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< AssertionConsumerService::type > r (
            tfm.create< AssertionConsumerService::type > (
              L"AssertionConsumerService",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->AssertionConsumerService ().push_back (r);
            continue;
          }
        }

        // AttributeConsumingService
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< AttributeConsumingService::type > r (
            tfm.create< AttributeConsumingService::type > (
              L"AttributeConsumingService",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->AttributeConsumingService ().push_back (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"AuthnRequestsSigned" && a.namespace_ ().empty ())
        {
          this->AuthnRequestsSigned (
            AuthnRequestsSigned::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));
          continue;
        }

        if (a.name () == L"WantAssertionsSigned" && a.namespace_ ().empty ())
        {
          this->WantAssertionsSigned (
            WantAssertionsSigned::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));
          continue;
        }
      }
    }

    SPSSODescriptorType* SPSSODescriptorType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new SPSSODescriptorType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SPSSODescriptorType >
    _xsd_SPSSODescriptorType_type_factory_init (
      L"SPSSODescriptorType urn:oasis:names:tc:SAML:2.0:metadata");


    // AttributeConsumingServiceType
    //

    AttributeConsumingServiceType::
    AttributeConsumingServiceType ()
    : ::xml_schema::type (),
    _xsd_ServiceName_ (::xml_schema::flags (), this),
    _xsd_ServiceDescription_ (::xml_schema::flags (), this),
    _xsd_RequestedAttribute_ (::xml_schema::flags (), this),
    _xsd_index_ (::xml_schema::flags (), this),
    _xsd_isDefault_ (::xml_schema::flags (), this)
    {
    }

    AttributeConsumingServiceType::
    AttributeConsumingServiceType (const index::type& _xsd_index)
    : ::xml_schema::type (),
    _xsd_ServiceName_ (::xml_schema::flags (), this),
    _xsd_ServiceDescription_ (::xml_schema::flags (), this),
    _xsd_RequestedAttribute_ (::xml_schema::flags (), this),
    _xsd_index_ (_xsd_index,
                 ::xml_schema::flags (),
                 this),
    _xsd_isDefault_ (::xml_schema::flags (), this)
    {
    }

    AttributeConsumingServiceType::
    AttributeConsumingServiceType (const AttributeConsumingServiceType& _xsd_AttributeConsumingServiceType,
                                   ::xml_schema::flags f,
                                   ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_AttributeConsumingServiceType, f, c),
    _xsd_ServiceName_ (_xsd_AttributeConsumingServiceType._xsd_ServiceName_,
                       f | ::xml_schema::flags::not_root,
                       this),
    _xsd_ServiceDescription_ (_xsd_AttributeConsumingServiceType._xsd_ServiceDescription_,
                              f | ::xml_schema::flags::not_root,
                              this),
    _xsd_RequestedAttribute_ (_xsd_AttributeConsumingServiceType._xsd_RequestedAttribute_,
                              f | ::xml_schema::flags::not_root,
                              this),
    _xsd_index_ (_xsd_AttributeConsumingServiceType._xsd_index_,
                 f | ::xml_schema::flags::not_root,
                 this),
    _xsd_isDefault_ (_xsd_AttributeConsumingServiceType._xsd_isDefault_,
                     f | ::xml_schema::flags::not_root,
                     this)
    {
    }

    AttributeConsumingServiceType::
    AttributeConsumingServiceType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_ServiceName_ (f | ::xml_schema::flags::not_root, this),
    _xsd_ServiceDescription_ (f | ::xml_schema::flags::not_root, this),
    _xsd_RequestedAttribute_ (f | ::xml_schema::flags::not_root, this),
    _xsd_index_ (f | ::xml_schema::flags::not_root, this),
    _xsd_isDefault_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void AttributeConsumingServiceType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // ServiceName
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ServiceName::type > r (
            tfm.create< ServiceName::type > (
              L"ServiceName",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->ServiceName ().push_back (r);
            continue;
          }
        }

        // ServiceDescription
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ServiceDescription::type > r (
            tfm.create< ServiceDescription::type > (
              L"ServiceDescription",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->ServiceDescription ().push_back (r);
            continue;
          }
        }

        // RequestedAttribute
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< RequestedAttribute::type > r (
            tfm.create< RequestedAttribute::type > (
              L"RequestedAttribute",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->RequestedAttribute ().push_back (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"index" && a.namespace_ ().empty ())
        {
          this->index (
            index::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));
          continue;
        }

        if (a.name () == L"isDefault" && a.namespace_ ().empty ())
        {
          this->isDefault (
            isDefault::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));
          continue;
        }
      }

      if (!_xsd_index_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"index",
          L"");
      }
    }

    AttributeConsumingServiceType* AttributeConsumingServiceType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new AttributeConsumingServiceType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AttributeConsumingServiceType >
    _xsd_AttributeConsumingServiceType_type_factory_init (
      L"AttributeConsumingServiceType urn:oasis:names:tc:SAML:2.0:metadata");


    // RequestedAttributeType
    //

    RequestedAttributeType::
    RequestedAttributeType ()
    : ::saml2::assertion::AttributeType (),
    _xsd_isRequired_ (::xml_schema::flags (), this)
    {
    }

    RequestedAttributeType::
    RequestedAttributeType (const Name::type& _xsd_Name)
    : ::saml2::assertion::AttributeType (_xsd_Name),
    _xsd_isRequired_ (::xml_schema::flags (), this)
    {
    }

    RequestedAttributeType::
    RequestedAttributeType (const RequestedAttributeType& _xsd_RequestedAttributeType,
                            ::xml_schema::flags f,
                            ::xml_schema::type* c)
    : ::saml2::assertion::AttributeType (_xsd_RequestedAttributeType, f, c),
    _xsd_isRequired_ (_xsd_RequestedAttributeType._xsd_isRequired_,
                      f | ::xml_schema::flags::not_root,
                      this)
    {
    }

    RequestedAttributeType::
    RequestedAttributeType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::type* c)
    : ::saml2::assertion::AttributeType (e, f, c),
    _xsd_isRequired_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void RequestedAttributeType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"isRequired" && a.namespace_ ().empty ())
        {
          this->isRequired (
            isRequired::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));
          continue;
        }
      }
    }

    RequestedAttributeType* RequestedAttributeType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new RequestedAttributeType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, RequestedAttributeType >
    _xsd_RequestedAttributeType_type_factory_init (
      L"RequestedAttributeType urn:oasis:names:tc:SAML:2.0:metadata");


    // AuthnAuthorityDescriptorType
    //

    AuthnAuthorityDescriptorType::
    AuthnAuthorityDescriptorType ()
    : ::saml2::metadata::RoleDescriptorType (),
    _xsd_AuthnQueryService_ (::xml_schema::flags (), this),
    _xsd_AssertionIDRequestService_ (::xml_schema::flags (), this),
    _xsd_NameIDFormat_ (::xml_schema::flags (), this)
    {
    }

    AuthnAuthorityDescriptorType::
    AuthnAuthorityDescriptorType (const protocolSupportEnumeration::type& _xsd_protocolSupportEnumeration)
    : ::saml2::metadata::RoleDescriptorType (_xsd_protocolSupportEnumeration),
    _xsd_AuthnQueryService_ (::xml_schema::flags (), this),
    _xsd_AssertionIDRequestService_ (::xml_schema::flags (), this),
    _xsd_NameIDFormat_ (::xml_schema::flags (), this)
    {
    }

    AuthnAuthorityDescriptorType::
    AuthnAuthorityDescriptorType (const AuthnAuthorityDescriptorType& _xsd_AuthnAuthorityDescriptorType,
                                  ::xml_schema::flags f,
                                  ::xml_schema::type* c)
    : ::saml2::metadata::RoleDescriptorType (_xsd_AuthnAuthorityDescriptorType, f, c),
    _xsd_AuthnQueryService_ (_xsd_AuthnAuthorityDescriptorType._xsd_AuthnQueryService_,
                             f | ::xml_schema::flags::not_root,
                             this),
    _xsd_AssertionIDRequestService_ (_xsd_AuthnAuthorityDescriptorType._xsd_AssertionIDRequestService_,
                                     f | ::xml_schema::flags::not_root,
                                     this),
    _xsd_NameIDFormat_ (_xsd_AuthnAuthorityDescriptorType._xsd_NameIDFormat_,
                        f | ::xml_schema::flags::not_root,
                        this)
    {
    }

    AuthnAuthorityDescriptorType::
    AuthnAuthorityDescriptorType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::type* c)
    : ::saml2::metadata::RoleDescriptorType (e, f, c),
    _xsd_AuthnQueryService_ (f | ::xml_schema::flags::not_root, this),
    _xsd_AssertionIDRequestService_ (f | ::xml_schema::flags::not_root, this),
    _xsd_NameIDFormat_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void AuthnAuthorityDescriptorType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // AuthnQueryService
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< AuthnQueryService::type > r (
            tfm.create< AuthnQueryService::type > (
              L"AuthnQueryService",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->AuthnQueryService ().push_back (r);
            continue;
          }
        }

        // AssertionIDRequestService
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< AssertionIDRequestService::type > r (
            tfm.create< AssertionIDRequestService::type > (
              L"AssertionIDRequestService",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->AssertionIDRequestService ().push_back (r);
            continue;
          }
        }

        // NameIDFormat
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< NameIDFormat::type > r (
            tfm.create< NameIDFormat::type > (
              L"NameIDFormat",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->NameIDFormat ().push_back (r);
            continue;
          }
        }
      }
    }

    AuthnAuthorityDescriptorType* AuthnAuthorityDescriptorType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new AuthnAuthorityDescriptorType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AuthnAuthorityDescriptorType >
    _xsd_AuthnAuthorityDescriptorType_type_factory_init (
      L"AuthnAuthorityDescriptorType urn:oasis:names:tc:SAML:2.0:metadata");


    // PDPDescriptorType
    //

    PDPDescriptorType::
    PDPDescriptorType ()
    : ::saml2::metadata::RoleDescriptorType (),
    _xsd_AuthzService_ (::xml_schema::flags (), this),
    _xsd_AssertionIDRequestService_ (::xml_schema::flags (), this),
    _xsd_NameIDFormat_ (::xml_schema::flags (), this)
    {
    }

    PDPDescriptorType::
    PDPDescriptorType (const protocolSupportEnumeration::type& _xsd_protocolSupportEnumeration)
    : ::saml2::metadata::RoleDescriptorType (_xsd_protocolSupportEnumeration),
    _xsd_AuthzService_ (::xml_schema::flags (), this),
    _xsd_AssertionIDRequestService_ (::xml_schema::flags (), this),
    _xsd_NameIDFormat_ (::xml_schema::flags (), this)
    {
    }

    PDPDescriptorType::
    PDPDescriptorType (const PDPDescriptorType& _xsd_PDPDescriptorType,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
    : ::saml2::metadata::RoleDescriptorType (_xsd_PDPDescriptorType, f, c),
    _xsd_AuthzService_ (_xsd_PDPDescriptorType._xsd_AuthzService_,
                        f | ::xml_schema::flags::not_root,
                        this),
    _xsd_AssertionIDRequestService_ (_xsd_PDPDescriptorType._xsd_AssertionIDRequestService_,
                                     f | ::xml_schema::flags::not_root,
                                     this),
    _xsd_NameIDFormat_ (_xsd_PDPDescriptorType._xsd_NameIDFormat_,
                        f | ::xml_schema::flags::not_root,
                        this)
    {
    }

    PDPDescriptorType::
    PDPDescriptorType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
    : ::saml2::metadata::RoleDescriptorType (e, f, c),
    _xsd_AuthzService_ (f | ::xml_schema::flags::not_root, this),
    _xsd_AssertionIDRequestService_ (f | ::xml_schema::flags::not_root, this),
    _xsd_NameIDFormat_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void PDPDescriptorType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // AuthzService
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< AuthzService::type > r (
            tfm.create< AuthzService::type > (
              L"AuthzService",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->AuthzService ().push_back (r);
            continue;
          }
        }

        // AssertionIDRequestService
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< AssertionIDRequestService::type > r (
            tfm.create< AssertionIDRequestService::type > (
              L"AssertionIDRequestService",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->AssertionIDRequestService ().push_back (r);
            continue;
          }
        }

        // NameIDFormat
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< NameIDFormat::type > r (
            tfm.create< NameIDFormat::type > (
              L"NameIDFormat",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->NameIDFormat ().push_back (r);
            continue;
          }
        }
      }
    }

    PDPDescriptorType* PDPDescriptorType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new PDPDescriptorType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, PDPDescriptorType >
    _xsd_PDPDescriptorType_type_factory_init (
      L"PDPDescriptorType urn:oasis:names:tc:SAML:2.0:metadata");


    // AttributeAuthorityDescriptorType
    //

    AttributeAuthorityDescriptorType::
    AttributeAuthorityDescriptorType ()
    : ::saml2::metadata::RoleDescriptorType (),
    _xsd_AttributeService_ (::xml_schema::flags (), this),
    _xsd_AssertionIDRequestService_ (::xml_schema::flags (), this),
    _xsd_NameIDFormat_ (::xml_schema::flags (), this),
    _xsd_AttributeProfile_ (::xml_schema::flags (), this),
    _xsd_Attribute_ (::xml_schema::flags (), this)
    {
    }

    AttributeAuthorityDescriptorType::
    AttributeAuthorityDescriptorType (const protocolSupportEnumeration::type& _xsd_protocolSupportEnumeration)
    : ::saml2::metadata::RoleDescriptorType (_xsd_protocolSupportEnumeration),
    _xsd_AttributeService_ (::xml_schema::flags (), this),
    _xsd_AssertionIDRequestService_ (::xml_schema::flags (), this),
    _xsd_NameIDFormat_ (::xml_schema::flags (), this),
    _xsd_AttributeProfile_ (::xml_schema::flags (), this),
    _xsd_Attribute_ (::xml_schema::flags (), this)
    {
    }

    AttributeAuthorityDescriptorType::
    AttributeAuthorityDescriptorType (const AttributeAuthorityDescriptorType& _xsd_AttributeAuthorityDescriptorType,
                                      ::xml_schema::flags f,
                                      ::xml_schema::type* c)
    : ::saml2::metadata::RoleDescriptorType (_xsd_AttributeAuthorityDescriptorType, f, c),
    _xsd_AttributeService_ (_xsd_AttributeAuthorityDescriptorType._xsd_AttributeService_,
                            f | ::xml_schema::flags::not_root,
                            this),
    _xsd_AssertionIDRequestService_ (_xsd_AttributeAuthorityDescriptorType._xsd_AssertionIDRequestService_,
                                     f | ::xml_schema::flags::not_root,
                                     this),
    _xsd_NameIDFormat_ (_xsd_AttributeAuthorityDescriptorType._xsd_NameIDFormat_,
                        f | ::xml_schema::flags::not_root,
                        this),
    _xsd_AttributeProfile_ (_xsd_AttributeAuthorityDescriptorType._xsd_AttributeProfile_,
                            f | ::xml_schema::flags::not_root,
                            this),
    _xsd_Attribute_ (_xsd_AttributeAuthorityDescriptorType._xsd_Attribute_,
                     f | ::xml_schema::flags::not_root,
                     this)
    {
    }

    AttributeAuthorityDescriptorType::
    AttributeAuthorityDescriptorType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::type* c)
    : ::saml2::metadata::RoleDescriptorType (e, f, c),
    _xsd_AttributeService_ (f | ::xml_schema::flags::not_root, this),
    _xsd_AssertionIDRequestService_ (f | ::xml_schema::flags::not_root, this),
    _xsd_NameIDFormat_ (f | ::xml_schema::flags::not_root, this),
    _xsd_AttributeProfile_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Attribute_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void AttributeAuthorityDescriptorType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // AttributeService
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< AttributeService::type > r (
            tfm.create< AttributeService::type > (
              L"AttributeService",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->AttributeService ().push_back (r);
            continue;
          }
        }

        // AssertionIDRequestService
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< AssertionIDRequestService::type > r (
            tfm.create< AssertionIDRequestService::type > (
              L"AssertionIDRequestService",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->AssertionIDRequestService ().push_back (r);
            continue;
          }
        }

        // NameIDFormat
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< NameIDFormat::type > r (
            tfm.create< NameIDFormat::type > (
              L"NameIDFormat",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->NameIDFormat ().push_back (r);
            continue;
          }
        }

        // AttributeProfile
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< AttributeProfile::type > r (
            tfm.create< AttributeProfile::type > (
              L"AttributeProfile",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->AttributeProfile ().push_back (r);
            continue;
          }
        }

        // Attribute
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Attribute::type > r (
            tfm.create< Attribute::type > (
              L"Attribute",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->Attribute ().push_back (r);
            continue;
          }
        }
      }
    }

    AttributeAuthorityDescriptorType* AttributeAuthorityDescriptorType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new AttributeAuthorityDescriptorType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AttributeAuthorityDescriptorType >
    _xsd_AttributeAuthorityDescriptorType_type_factory_init (
      L"AttributeAuthorityDescriptorType urn:oasis:names:tc:SAML:2.0:metadata");


    // AffiliationDescriptorType
    //

    AffiliationDescriptorType::
    AffiliationDescriptorType ()
    : ::xml_schema::type (),
    _xsd_Signature_ (::xml_schema::flags (), this),
    _xsd_Extensions_ (::xml_schema::flags (), this),
    _xsd_AffiliateMember_ (::xml_schema::flags (), this),
    _xsd_KeyDescriptor_ (::xml_schema::flags (), this),
    _xsd_affiliationOwnerID_ (::xml_schema::flags (), this),
    _xsd_validUntil_ (::xml_schema::flags (), this),
    _xsd_cacheDuration_ (::xml_schema::flags (), this),
    _xsd_ID_ (::xml_schema::flags (), this)
    {
    }

    AffiliationDescriptorType::
    AffiliationDescriptorType (const affiliationOwnerID::type& _xsd_affiliationOwnerID)
    : ::xml_schema::type (),
    _xsd_Signature_ (::xml_schema::flags (), this),
    _xsd_Extensions_ (::xml_schema::flags (), this),
    _xsd_AffiliateMember_ (::xml_schema::flags (), this),
    _xsd_KeyDescriptor_ (::xml_schema::flags (), this),
    _xsd_affiliationOwnerID_ (_xsd_affiliationOwnerID,
                              ::xml_schema::flags (),
                              this),
    _xsd_validUntil_ (::xml_schema::flags (), this),
    _xsd_cacheDuration_ (::xml_schema::flags (), this),
    _xsd_ID_ (::xml_schema::flags (), this)
    {
    }

    AffiliationDescriptorType::
    AffiliationDescriptorType (const AffiliationDescriptorType& _xsd_AffiliationDescriptorType,
                               ::xml_schema::flags f,
                               ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_AffiliationDescriptorType, f, c),
    _xsd_Signature_ (_xsd_AffiliationDescriptorType._xsd_Signature_,
                     f | ::xml_schema::flags::not_root,
                     this),
    _xsd_Extensions_ (_xsd_AffiliationDescriptorType._xsd_Extensions_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_AffiliateMember_ (_xsd_AffiliationDescriptorType._xsd_AffiliateMember_,
                           f | ::xml_schema::flags::not_root,
                           this),
    _xsd_KeyDescriptor_ (_xsd_AffiliationDescriptorType._xsd_KeyDescriptor_,
                         f | ::xml_schema::flags::not_root,
                         this),
    _xsd_affiliationOwnerID_ (_xsd_AffiliationDescriptorType._xsd_affiliationOwnerID_,
                              f | ::xml_schema::flags::not_root,
                              this),
    _xsd_validUntil_ (_xsd_AffiliationDescriptorType._xsd_validUntil_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_cacheDuration_ (_xsd_AffiliationDescriptorType._xsd_cacheDuration_,
                         f | ::xml_schema::flags::not_root,
                         this),
    _xsd_ID_ (_xsd_AffiliationDescriptorType._xsd_ID_,
              f | ::xml_schema::flags::not_root,
              this)
    {
    }

    AffiliationDescriptorType::
    AffiliationDescriptorType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Signature_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Extensions_ (f | ::xml_schema::flags::not_root, this),
    _xsd_AffiliateMember_ (f | ::xml_schema::flags::not_root, this),
    _xsd_KeyDescriptor_ (f | ::xml_schema::flags::not_root, this),
    _xsd_affiliationOwnerID_ (f | ::xml_schema::flags::not_root, this),
    _xsd_validUntil_ (f | ::xml_schema::flags::not_root, this),
    _xsd_cacheDuration_ (f | ::xml_schema::flags::not_root, this),
    _xsd_ID_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void AffiliationDescriptorType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Signature
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Signature::type > r (
            tfm.create< Signature::type > (
              L"Signature",
              L"http://www.w3.org/2000/09/xmldsig#",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Signature ())
              continue;
            this->Signature (r);
            continue;
          }
        }

        // Extensions
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Extensions::type > r (
            tfm.create< Extensions::type > (
              L"Extensions",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Extensions ())
              continue;
            this->Extensions (r);
            continue;
          }
        }

        // AffiliateMember
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< AffiliateMember::type > r (
            tfm.create< AffiliateMember::type > (
              L"AffiliateMember",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->AffiliateMember ().push_back (r);
            continue;
          }
        }

        // KeyDescriptor
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< KeyDescriptor::type > r (
            tfm.create< KeyDescriptor::type > (
              L"KeyDescriptor",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->KeyDescriptor ().push_back (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"affiliationOwnerID" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< affiliationOwnerID::type > r (
            affiliationOwnerID::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->affiliationOwnerID (r);
          continue;
        }

        if (a.name () == L"validUntil" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< validUntil::type > r (
            validUntil::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->validUntil (r);
          continue;
        }

        if (a.name () == L"cacheDuration" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< cacheDuration::type > r (
            cacheDuration::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->cacheDuration (r);
          continue;
        }

        if (a.name () == L"ID" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< ID::type > r (
            ID::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->ID (r);
          continue;
        }
      }

      if (!_xsd_affiliationOwnerID_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"affiliationOwnerID",
          L"");
      }
    }

    AffiliationDescriptorType* AffiliationDescriptorType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new AffiliationDescriptorType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AffiliationDescriptorType >
    _xsd_AffiliationDescriptorType_type_factory_init (
      L"AffiliationDescriptorType urn:oasis:names:tc:SAML:2.0:metadata");
  }
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace saml2
{
  namespace metadata
  {
    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (const ::std::basic_string< wchar_t >& u,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::Extensions (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (const ::std::basic_string< wchar_t >& u,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::Extensions (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (const ::std::basic_string< wchar_t >& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::Extensions (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (::std::istream& is,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::Extensions (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (::std::istream& is,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::Extensions (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::Extensions (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::Extensions (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::Extensions (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (::std::istream& is,
                const ::std::basic_string< wchar_t >& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::Extensions (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (const ::xercesc::DOMInputSource& i,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::Extensions (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (const ::xercesc::DOMInputSource& i,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::Extensions (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (const ::xercesc::DOMInputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::Extensions (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::ExtensionsType > r (
        tfm.create< ::saml2::metadata::ExtensionsType > (
          L"Extensions",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Extensions",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (const ::std::basic_string< wchar_t >& u,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::EntitiesDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (const ::std::basic_string< wchar_t >& u,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::EntitiesDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (const ::std::basic_string< wchar_t >& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::EntitiesDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::EntitiesDescriptor (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (::std::istream& is,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::EntitiesDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::EntitiesDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (::std::istream& is,
                        const ::std::basic_string< wchar_t >& sid,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::EntitiesDescriptor (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (::std::istream& is,
                        const ::std::basic_string< wchar_t >& sid,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::EntitiesDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (::std::istream& is,
                        const ::std::basic_string< wchar_t >& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::EntitiesDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (const ::xercesc::DOMInputSource& i,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::EntitiesDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (const ::xercesc::DOMInputSource& i,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::EntitiesDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (const ::xercesc::DOMInputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::EntitiesDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType > r (
        tfm.create< ::saml2::metadata::EntitiesDescriptorType > (
          L"EntitiesDescriptor",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"EntitiesDescriptor",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (const ::std::basic_string< wchar_t >& u,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::EntityDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (const ::std::basic_string< wchar_t >& u,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::EntityDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (const ::std::basic_string< wchar_t >& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::EntityDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::EntityDescriptor (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (::std::istream& is,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::EntityDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::EntityDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (::std::istream& is,
                      const ::std::basic_string< wchar_t >& sid,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::EntityDescriptor (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (::std::istream& is,
                      const ::std::basic_string< wchar_t >& sid,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::EntityDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (::std::istream& is,
                      const ::std::basic_string< wchar_t >& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::EntityDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (const ::xercesc::DOMInputSource& i,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::EntityDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (const ::xercesc::DOMInputSource& i,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::EntityDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (const ::xercesc::DOMInputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::EntityDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType > r (
        tfm.create< ::saml2::metadata::EntityDescriptorType > (
          L"EntityDescriptor",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"EntityDescriptor",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (const ::std::basic_string< wchar_t >& u,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::Organization (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (const ::std::basic_string< wchar_t >& u,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::Organization (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (const ::std::basic_string< wchar_t >& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::Organization (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::Organization (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (::std::istream& is,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::Organization (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::Organization (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::Organization (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::Organization (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::Organization (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (const ::xercesc::DOMInputSource& i,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::Organization (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (const ::xercesc::DOMInputSource& i,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::Organization (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (const ::xercesc::DOMInputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::Organization (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::OrganizationType > r (
        tfm.create< ::saml2::metadata::OrganizationType > (
          L"Organization",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Organization",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (const ::std::basic_string< wchar_t >& u,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::OrganizationName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (const ::std::basic_string< wchar_t >& u,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::OrganizationName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (const ::std::basic_string< wchar_t >& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::OrganizationName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::OrganizationName (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (::std::istream& is,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::OrganizationName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::OrganizationName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (::std::istream& is,
                      const ::std::basic_string< wchar_t >& sid,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::OrganizationName (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (::std::istream& is,
                      const ::std::basic_string< wchar_t >& sid,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::OrganizationName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (::std::istream& is,
                      const ::std::basic_string< wchar_t >& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::OrganizationName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (const ::xercesc::DOMInputSource& i,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::OrganizationName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (const ::xercesc::DOMInputSource& i,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::OrganizationName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (const ::xercesc::DOMInputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::OrganizationName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::localizedNameType > r (
        tfm.create< ::saml2::metadata::localizedNameType > (
          L"OrganizationName",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"OrganizationName",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (const ::std::basic_string< wchar_t >& u,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::OrganizationDisplayName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (const ::std::basic_string< wchar_t >& u,
                             ::xsd::cxx::xml::error_handler< wchar_t >& h,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::OrganizationDisplayName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (const ::std::basic_string< wchar_t >& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::OrganizationDisplayName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::OrganizationDisplayName (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (::std::istream& is,
                             ::xsd::cxx::xml::error_handler< wchar_t >& h,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::OrganizationDisplayName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::OrganizationDisplayName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (::std::istream& is,
                             const ::std::basic_string< wchar_t >& sid,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::OrganizationDisplayName (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (::std::istream& is,
                             const ::std::basic_string< wchar_t >& sid,
                             ::xsd::cxx::xml::error_handler< wchar_t >& h,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::OrganizationDisplayName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (::std::istream& is,
                             const ::std::basic_string< wchar_t >& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::OrganizationDisplayName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (const ::xercesc::DOMInputSource& i,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::OrganizationDisplayName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (const ::xercesc::DOMInputSource& i,
                             ::xsd::cxx::xml::error_handler< wchar_t >& h,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::OrganizationDisplayName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (const ::xercesc::DOMInputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::OrganizationDisplayName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::localizedNameType > r (
        tfm.create< ::saml2::metadata::localizedNameType > (
          L"OrganizationDisplayName",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"OrganizationDisplayName",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (const ::std::basic_string< wchar_t >& u,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::OrganizationURL (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (const ::std::basic_string< wchar_t >& u,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::OrganizationURL (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (const ::std::basic_string< wchar_t >& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::OrganizationURL (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::OrganizationURL (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (::std::istream& is,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::OrganizationURL (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::OrganizationURL (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::OrganizationURL (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::OrganizationURL (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::OrganizationURL (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (const ::xercesc::DOMInputSource& i,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::OrganizationURL (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (const ::xercesc::DOMInputSource& i,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::OrganizationURL (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (const ::xercesc::DOMInputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::OrganizationURL (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::localizedURIType > r (
        tfm.create< ::saml2::metadata::localizedURIType > (
          L"OrganizationURL",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"OrganizationURL",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (const ::std::basic_string< wchar_t >& u,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::ContactPerson (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (const ::std::basic_string< wchar_t >& u,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::ContactPerson (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (const ::std::basic_string< wchar_t >& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::ContactPerson (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ContactPerson (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (::std::istream& is,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ContactPerson (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ContactPerson (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (::std::istream& is,
                   const ::std::basic_string< wchar_t >& sid,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ContactPerson (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (::std::istream& is,
                   const ::std::basic_string< wchar_t >& sid,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ContactPerson (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (::std::istream& is,
                   const ::std::basic_string< wchar_t >& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ContactPerson (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (const ::xercesc::DOMInputSource& i,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::ContactPerson (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (const ::xercesc::DOMInputSource& i,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::ContactPerson (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (const ::xercesc::DOMInputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::ContactPerson (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::ContactType > r (
        tfm.create< ::saml2::metadata::ContactType > (
          L"ContactPerson",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"ContactPerson",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::xml_schema::string >
    Company (const ::std::basic_string< wchar_t >& u,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::Company (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Company (const ::std::basic_string< wchar_t >& u,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::Company (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Company (const ::std::basic_string< wchar_t >& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::Company (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Company (::std::istream& is,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::Company (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Company (::std::istream& is,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::Company (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Company (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::Company (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Company (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::Company (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Company (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::Company (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Company (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::Company (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Company (const ::xercesc::DOMInputSource& i,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::Company (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Company (const ::xercesc::DOMInputSource& i,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::Company (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Company (const ::xercesc::DOMInputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::Company (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Company (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::string > r (
        tfm.create< ::xml_schema::string > (
          L"Company",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Company",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (const ::std::basic_string< wchar_t >& u,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::GivenName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (const ::std::basic_string< wchar_t >& u,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::GivenName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (const ::std::basic_string< wchar_t >& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::GivenName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (::std::istream& is,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::GivenName (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (::std::istream& is,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::GivenName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::GivenName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::GivenName (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::GivenName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::GivenName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (const ::xercesc::DOMInputSource& i,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::GivenName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (const ::xercesc::DOMInputSource& i,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::GivenName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (const ::xercesc::DOMInputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::GivenName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::string > r (
        tfm.create< ::xml_schema::string > (
          L"GivenName",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"GivenName",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::xml_schema::string >
    SurName (const ::std::basic_string< wchar_t >& u,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::SurName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    SurName (const ::std::basic_string< wchar_t >& u,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::SurName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    SurName (const ::std::basic_string< wchar_t >& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::SurName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    SurName (::std::istream& is,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::SurName (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    SurName (::std::istream& is,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::SurName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    SurName (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::SurName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    SurName (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::SurName (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    SurName (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::SurName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    SurName (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::SurName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    SurName (const ::xercesc::DOMInputSource& i,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::SurName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    SurName (const ::xercesc::DOMInputSource& i,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::SurName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    SurName (const ::xercesc::DOMInputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::SurName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    SurName (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::string > r (
        tfm.create< ::xml_schema::string > (
          L"SurName",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"SurName",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (const ::std::basic_string< wchar_t >& u,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::EmailAddress (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (const ::std::basic_string< wchar_t >& u,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::EmailAddress (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (const ::std::basic_string< wchar_t >& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::EmailAddress (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::EmailAddress (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (::std::istream& is,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::EmailAddress (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::EmailAddress (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::EmailAddress (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::EmailAddress (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::EmailAddress (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (const ::xercesc::DOMInputSource& i,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::EmailAddress (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (const ::xercesc::DOMInputSource& i,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::EmailAddress (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (const ::xercesc::DOMInputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::EmailAddress (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::uri > r (
        tfm.create< ::xml_schema::uri > (
          L"EmailAddress",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"EmailAddress",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (const ::std::basic_string< wchar_t >& u,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::TelephoneNumber (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (const ::std::basic_string< wchar_t >& u,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::TelephoneNumber (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (const ::std::basic_string< wchar_t >& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::TelephoneNumber (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::TelephoneNumber (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (::std::istream& is,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::TelephoneNumber (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::TelephoneNumber (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::TelephoneNumber (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::TelephoneNumber (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::TelephoneNumber (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (const ::xercesc::DOMInputSource& i,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::TelephoneNumber (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (const ::xercesc::DOMInputSource& i,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::TelephoneNumber (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (const ::xercesc::DOMInputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::TelephoneNumber (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::string > r (
        tfm.create< ::xml_schema::string > (
          L"TelephoneNumber",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"TelephoneNumber",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (const ::std::basic_string< wchar_t >& u,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::AdditionalMetadataLocation (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (const ::std::basic_string< wchar_t >& u,
                                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AdditionalMetadataLocation (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (const ::std::basic_string< wchar_t >& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AdditionalMetadataLocation (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AdditionalMetadataLocation (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (::std::istream& is,
                                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AdditionalMetadataLocation (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AdditionalMetadataLocation (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (::std::istream& is,
                                const ::std::basic_string< wchar_t >& sid,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AdditionalMetadataLocation (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (::std::istream& is,
                                const ::std::basic_string< wchar_t >& sid,
                                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AdditionalMetadataLocation (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (::std::istream& is,
                                const ::std::basic_string< wchar_t >& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AdditionalMetadataLocation (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (const ::xercesc::DOMInputSource& i,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::AdditionalMetadataLocation (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (const ::xercesc::DOMInputSource& i,
                                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AdditionalMetadataLocation (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (const ::xercesc::DOMInputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AdditionalMetadataLocation (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f,
                                const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType > r (
        tfm.create< ::saml2::metadata::AdditionalMetadataLocationType > (
          L"AdditionalMetadataLocation",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"AdditionalMetadataLocation",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (const ::std::basic_string< wchar_t >& u,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::RoleDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (const ::std::basic_string< wchar_t >& u,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::RoleDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (const ::std::basic_string< wchar_t >& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::RoleDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::RoleDescriptor (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (::std::istream& is,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::RoleDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::RoleDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (::std::istream& is,
                    const ::std::basic_string< wchar_t >& sid,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::RoleDescriptor (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (::std::istream& is,
                    const ::std::basic_string< wchar_t >& sid,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::RoleDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (::std::istream& is,
                    const ::std::basic_string< wchar_t >& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::RoleDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (const ::xercesc::DOMInputSource& i,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::RoleDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (const ::xercesc::DOMInputSource& i,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::RoleDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (const ::xercesc::DOMInputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::RoleDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType > r (
        tfm.create< ::saml2::metadata::RoleDescriptorType > (
          L"RoleDescriptor",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"RoleDescriptor",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (const ::std::basic_string< wchar_t >& u,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::KeyDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (const ::std::basic_string< wchar_t >& u,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::KeyDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (const ::std::basic_string< wchar_t >& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::KeyDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::KeyDescriptor (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (::std::istream& is,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::KeyDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::KeyDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (::std::istream& is,
                   const ::std::basic_string< wchar_t >& sid,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::KeyDescriptor (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (::std::istream& is,
                   const ::std::basic_string< wchar_t >& sid,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::KeyDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (::std::istream& is,
                   const ::std::basic_string< wchar_t >& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::KeyDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (const ::xercesc::DOMInputSource& i,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::KeyDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (const ::xercesc::DOMInputSource& i,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::KeyDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (const ::xercesc::DOMInputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::KeyDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType > r (
        tfm.create< ::saml2::metadata::KeyDescriptorType > (
          L"KeyDescriptor",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"KeyDescriptor",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (const ::std::basic_string< wchar_t >& u,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::EncryptionMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (const ::std::basic_string< wchar_t >& u,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::EncryptionMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (const ::std::basic_string< wchar_t >& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::EncryptionMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::EncryptionMethod (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (::std::istream& is,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::EncryptionMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::EncryptionMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (::std::istream& is,
                      const ::std::basic_string< wchar_t >& sid,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::EncryptionMethod (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (::std::istream& is,
                      const ::std::basic_string< wchar_t >& sid,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::EncryptionMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (::std::istream& is,
                      const ::std::basic_string< wchar_t >& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::EncryptionMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (const ::xercesc::DOMInputSource& i,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::EncryptionMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (const ::xercesc::DOMInputSource& i,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::EncryptionMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (const ::xercesc::DOMInputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::EncryptionMethod (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType > r (
        tfm.create< ::w3::xmlenc::EncryptionMethodType > (
          L"EncryptionMethod",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"EncryptionMethod",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (const ::std::basic_string< wchar_t >& u,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::ArtifactResolutionService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (const ::std::basic_string< wchar_t >& u,
                               ::xsd::cxx::xml::error_handler< wchar_t >& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::ArtifactResolutionService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (const ::std::basic_string< wchar_t >& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::ArtifactResolutionService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ArtifactResolutionService (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (::std::istream& is,
                               ::xsd::cxx::xml::error_handler< wchar_t >& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ArtifactResolutionService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ArtifactResolutionService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (::std::istream& is,
                               const ::std::basic_string< wchar_t >& sid,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ArtifactResolutionService (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (::std::istream& is,
                               const ::std::basic_string< wchar_t >& sid,
                               ::xsd::cxx::xml::error_handler< wchar_t >& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ArtifactResolutionService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (::std::istream& is,
                               const ::std::basic_string< wchar_t >& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ArtifactResolutionService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (const ::xercesc::DOMInputSource& i,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::ArtifactResolutionService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (const ::xercesc::DOMInputSource& i,
                               ::xsd::cxx::xml::error_handler< wchar_t >& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::ArtifactResolutionService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (const ::xercesc::DOMInputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::ArtifactResolutionService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType > r (
        tfm.create< ::saml2::metadata::IndexedEndpointType > (
          L"ArtifactResolutionService",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"ArtifactResolutionService",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (const ::std::basic_string< wchar_t >& u,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::SingleLogoutService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (const ::std::basic_string< wchar_t >& u,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::SingleLogoutService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (const ::std::basic_string< wchar_t >& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::SingleLogoutService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::SingleLogoutService (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (::std::istream& is,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::SingleLogoutService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::SingleLogoutService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (::std::istream& is,
                         const ::std::basic_string< wchar_t >& sid,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::SingleLogoutService (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (::std::istream& is,
                         const ::std::basic_string< wchar_t >& sid,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::SingleLogoutService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (::std::istream& is,
                         const ::std::basic_string< wchar_t >& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::SingleLogoutService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (const ::xercesc::DOMInputSource& i,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::SingleLogoutService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (const ::xercesc::DOMInputSource& i,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::SingleLogoutService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (const ::xercesc::DOMInputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::SingleLogoutService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::EndpointType > r (
        tfm.create< ::saml2::metadata::EndpointType > (
          L"SingleLogoutService",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"SingleLogoutService",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (const ::std::basic_string< wchar_t >& u,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::ManageNameIDService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (const ::std::basic_string< wchar_t >& u,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::ManageNameIDService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (const ::std::basic_string< wchar_t >& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::ManageNameIDService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ManageNameIDService (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (::std::istream& is,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ManageNameIDService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ManageNameIDService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (::std::istream& is,
                         const ::std::basic_string< wchar_t >& sid,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ManageNameIDService (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (::std::istream& is,
                         const ::std::basic_string< wchar_t >& sid,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ManageNameIDService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (::std::istream& is,
                         const ::std::basic_string< wchar_t >& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ManageNameIDService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (const ::xercesc::DOMInputSource& i,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::ManageNameIDService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (const ::xercesc::DOMInputSource& i,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::ManageNameIDService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (const ::xercesc::DOMInputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::ManageNameIDService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::EndpointType > r (
        tfm.create< ::saml2::metadata::EndpointType > (
          L"ManageNameIDService",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"ManageNameIDService",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (const ::std::basic_string< wchar_t >& u,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::NameIDFormat (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (const ::std::basic_string< wchar_t >& u,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::NameIDFormat (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (const ::std::basic_string< wchar_t >& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::NameIDFormat (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::NameIDFormat (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (::std::istream& is,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::NameIDFormat (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::NameIDFormat (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::NameIDFormat (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::NameIDFormat (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::NameIDFormat (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (const ::xercesc::DOMInputSource& i,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::NameIDFormat (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (const ::xercesc::DOMInputSource& i,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::NameIDFormat (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (const ::xercesc::DOMInputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::NameIDFormat (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::uri > r (
        tfm.create< ::xml_schema::uri > (
          L"NameIDFormat",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"NameIDFormat",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (const ::std::basic_string< wchar_t >& u,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::IDPSSODescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (const ::std::basic_string< wchar_t >& u,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::IDPSSODescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (const ::std::basic_string< wchar_t >& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::IDPSSODescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::IDPSSODescriptor (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (::std::istream& is,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::IDPSSODescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::IDPSSODescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (::std::istream& is,
                      const ::std::basic_string< wchar_t >& sid,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::IDPSSODescriptor (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (::std::istream& is,
                      const ::std::basic_string< wchar_t >& sid,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::IDPSSODescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (::std::istream& is,
                      const ::std::basic_string< wchar_t >& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::IDPSSODescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (const ::xercesc::DOMInputSource& i,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::IDPSSODescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (const ::xercesc::DOMInputSource& i,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::IDPSSODescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (const ::xercesc::DOMInputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::IDPSSODescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType > r (
        tfm.create< ::saml2::metadata::IDPSSODescriptorType > (
          L"IDPSSODescriptor",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"IDPSSODescriptor",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (const ::std::basic_string< wchar_t >& u,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::SingleSignOnService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (const ::std::basic_string< wchar_t >& u,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::SingleSignOnService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (const ::std::basic_string< wchar_t >& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::SingleSignOnService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::SingleSignOnService (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (::std::istream& is,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::SingleSignOnService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::SingleSignOnService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (::std::istream& is,
                         const ::std::basic_string< wchar_t >& sid,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::SingleSignOnService (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (::std::istream& is,
                         const ::std::basic_string< wchar_t >& sid,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::SingleSignOnService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (::std::istream& is,
                         const ::std::basic_string< wchar_t >& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::SingleSignOnService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (const ::xercesc::DOMInputSource& i,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::SingleSignOnService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (const ::xercesc::DOMInputSource& i,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::SingleSignOnService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (const ::xercesc::DOMInputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::SingleSignOnService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::EndpointType > r (
        tfm.create< ::saml2::metadata::EndpointType > (
          L"SingleSignOnService",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"SingleSignOnService",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (const ::std::basic_string< wchar_t >& u,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::NameIDMappingService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (const ::std::basic_string< wchar_t >& u,
                          ::xsd::cxx::xml::error_handler< wchar_t >& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::NameIDMappingService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (const ::std::basic_string< wchar_t >& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::NameIDMappingService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::NameIDMappingService (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (::std::istream& is,
                          ::xsd::cxx::xml::error_handler< wchar_t >& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::NameIDMappingService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::NameIDMappingService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (::std::istream& is,
                          const ::std::basic_string< wchar_t >& sid,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::NameIDMappingService (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (::std::istream& is,
                          const ::std::basic_string< wchar_t >& sid,
                          ::xsd::cxx::xml::error_handler< wchar_t >& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::NameIDMappingService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (::std::istream& is,
                          const ::std::basic_string< wchar_t >& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::NameIDMappingService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (const ::xercesc::DOMInputSource& i,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::NameIDMappingService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (const ::xercesc::DOMInputSource& i,
                          ::xsd::cxx::xml::error_handler< wchar_t >& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::NameIDMappingService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (const ::xercesc::DOMInputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::NameIDMappingService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f,
                          const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::EndpointType > r (
        tfm.create< ::saml2::metadata::EndpointType > (
          L"NameIDMappingService",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"NameIDMappingService",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (const ::std::basic_string< wchar_t >& u,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::AssertionIDRequestService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (const ::std::basic_string< wchar_t >& u,
                               ::xsd::cxx::xml::error_handler< wchar_t >& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AssertionIDRequestService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (const ::std::basic_string< wchar_t >& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AssertionIDRequestService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AssertionIDRequestService (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (::std::istream& is,
                               ::xsd::cxx::xml::error_handler< wchar_t >& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AssertionIDRequestService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AssertionIDRequestService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (::std::istream& is,
                               const ::std::basic_string< wchar_t >& sid,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AssertionIDRequestService (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (::std::istream& is,
                               const ::std::basic_string< wchar_t >& sid,
                               ::xsd::cxx::xml::error_handler< wchar_t >& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AssertionIDRequestService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (::std::istream& is,
                               const ::std::basic_string< wchar_t >& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AssertionIDRequestService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (const ::xercesc::DOMInputSource& i,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::AssertionIDRequestService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (const ::xercesc::DOMInputSource& i,
                               ::xsd::cxx::xml::error_handler< wchar_t >& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AssertionIDRequestService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (const ::xercesc::DOMInputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AssertionIDRequestService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::EndpointType > r (
        tfm.create< ::saml2::metadata::EndpointType > (
          L"AssertionIDRequestService",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"AssertionIDRequestService",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (const ::std::basic_string< wchar_t >& u,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::AttributeProfile (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (const ::std::basic_string< wchar_t >& u,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AttributeProfile (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (const ::std::basic_string< wchar_t >& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AttributeProfile (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AttributeProfile (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (::std::istream& is,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AttributeProfile (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AttributeProfile (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (::std::istream& is,
                      const ::std::basic_string< wchar_t >& sid,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AttributeProfile (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (::std::istream& is,
                      const ::std::basic_string< wchar_t >& sid,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AttributeProfile (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (::std::istream& is,
                      const ::std::basic_string< wchar_t >& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AttributeProfile (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (const ::xercesc::DOMInputSource& i,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::AttributeProfile (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (const ::xercesc::DOMInputSource& i,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AttributeProfile (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (const ::xercesc::DOMInputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AttributeProfile (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::uri > r (
        tfm.create< ::xml_schema::uri > (
          L"AttributeProfile",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"AttributeProfile",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (const ::std::basic_string< wchar_t >& u,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::SPSSODescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (const ::std::basic_string< wchar_t >& u,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::SPSSODescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (const ::std::basic_string< wchar_t >& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::SPSSODescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::SPSSODescriptor (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (::std::istream& is,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::SPSSODescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::SPSSODescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::SPSSODescriptor (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::SPSSODescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::SPSSODescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (const ::xercesc::DOMInputSource& i,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::SPSSODescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (const ::xercesc::DOMInputSource& i,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::SPSSODescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (const ::xercesc::DOMInputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::SPSSODescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType > r (
        tfm.create< ::saml2::metadata::SPSSODescriptorType > (
          L"SPSSODescriptor",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"SPSSODescriptor",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (const ::std::basic_string< wchar_t >& u,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::AssertionConsumerService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (const ::std::basic_string< wchar_t >& u,
                              ::xsd::cxx::xml::error_handler< wchar_t >& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AssertionConsumerService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (const ::std::basic_string< wchar_t >& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AssertionConsumerService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AssertionConsumerService (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (::std::istream& is,
                              ::xsd::cxx::xml::error_handler< wchar_t >& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AssertionConsumerService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AssertionConsumerService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (::std::istream& is,
                              const ::std::basic_string< wchar_t >& sid,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AssertionConsumerService (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (::std::istream& is,
                              const ::std::basic_string< wchar_t >& sid,
                              ::xsd::cxx::xml::error_handler< wchar_t >& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AssertionConsumerService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (::std::istream& is,
                              const ::std::basic_string< wchar_t >& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AssertionConsumerService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (const ::xercesc::DOMInputSource& i,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::AssertionConsumerService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (const ::xercesc::DOMInputSource& i,
                              ::xsd::cxx::xml::error_handler< wchar_t >& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AssertionConsumerService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (const ::xercesc::DOMInputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AssertionConsumerService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType > r (
        tfm.create< ::saml2::metadata::IndexedEndpointType > (
          L"AssertionConsumerService",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"AssertionConsumerService",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (const ::std::basic_string< wchar_t >& u,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::AttributeConsumingService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (const ::std::basic_string< wchar_t >& u,
                               ::xsd::cxx::xml::error_handler< wchar_t >& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AttributeConsumingService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (const ::std::basic_string< wchar_t >& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AttributeConsumingService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AttributeConsumingService (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (::std::istream& is,
                               ::xsd::cxx::xml::error_handler< wchar_t >& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AttributeConsumingService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AttributeConsumingService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (::std::istream& is,
                               const ::std::basic_string< wchar_t >& sid,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AttributeConsumingService (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (::std::istream& is,
                               const ::std::basic_string< wchar_t >& sid,
                               ::xsd::cxx::xml::error_handler< wchar_t >& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AttributeConsumingService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (::std::istream& is,
                               const ::std::basic_string< wchar_t >& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AttributeConsumingService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (const ::xercesc::DOMInputSource& i,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::AttributeConsumingService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (const ::xercesc::DOMInputSource& i,
                               ::xsd::cxx::xml::error_handler< wchar_t >& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AttributeConsumingService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (const ::xercesc::DOMInputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AttributeConsumingService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f,
                               const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType > r (
        tfm.create< ::saml2::metadata::AttributeConsumingServiceType > (
          L"AttributeConsumingService",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"AttributeConsumingService",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (const ::std::basic_string< wchar_t >& u,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::ServiceName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (const ::std::basic_string< wchar_t >& u,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::ServiceName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (const ::std::basic_string< wchar_t >& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::ServiceName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ServiceName (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (::std::istream& is,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ServiceName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ServiceName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ServiceName (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ServiceName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (::std::istream& is,
                 const ::std::basic_string< wchar_t >& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ServiceName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (const ::xercesc::DOMInputSource& i,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::ServiceName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (const ::xercesc::DOMInputSource& i,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::ServiceName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (const ::xercesc::DOMInputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::ServiceName (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::localizedNameType > r (
        tfm.create< ::saml2::metadata::localizedNameType > (
          L"ServiceName",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"ServiceName",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (const ::std::basic_string< wchar_t >& u,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::ServiceDescription (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (const ::std::basic_string< wchar_t >& u,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::ServiceDescription (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (const ::std::basic_string< wchar_t >& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::ServiceDescription (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ServiceDescription (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (::std::istream& is,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ServiceDescription (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ServiceDescription (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (::std::istream& is,
                        const ::std::basic_string< wchar_t >& sid,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ServiceDescription (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (::std::istream& is,
                        const ::std::basic_string< wchar_t >& sid,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ServiceDescription (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (::std::istream& is,
                        const ::std::basic_string< wchar_t >& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::ServiceDescription (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (const ::xercesc::DOMInputSource& i,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::ServiceDescription (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (const ::xercesc::DOMInputSource& i,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::ServiceDescription (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (const ::xercesc::DOMInputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::ServiceDescription (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::localizedNameType > r (
        tfm.create< ::saml2::metadata::localizedNameType > (
          L"ServiceDescription",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"ServiceDescription",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (const ::std::basic_string< wchar_t >& u,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::RequestedAttribute (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (const ::std::basic_string< wchar_t >& u,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::RequestedAttribute (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (const ::std::basic_string< wchar_t >& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::RequestedAttribute (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::RequestedAttribute (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (::std::istream& is,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::RequestedAttribute (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::RequestedAttribute (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (::std::istream& is,
                        const ::std::basic_string< wchar_t >& sid,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::RequestedAttribute (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (::std::istream& is,
                        const ::std::basic_string< wchar_t >& sid,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::RequestedAttribute (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (::std::istream& is,
                        const ::std::basic_string< wchar_t >& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::RequestedAttribute (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (const ::xercesc::DOMInputSource& i,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::RequestedAttribute (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (const ::xercesc::DOMInputSource& i,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::RequestedAttribute (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (const ::xercesc::DOMInputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::RequestedAttribute (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f,
                        const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType > r (
        tfm.create< ::saml2::metadata::RequestedAttributeType > (
          L"RequestedAttribute",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"RequestedAttribute",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (const ::std::basic_string< wchar_t >& u,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::AuthnAuthorityDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (const ::std::basic_string< wchar_t >& u,
                              ::xsd::cxx::xml::error_handler< wchar_t >& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AuthnAuthorityDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (const ::std::basic_string< wchar_t >& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AuthnAuthorityDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AuthnAuthorityDescriptor (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (::std::istream& is,
                              ::xsd::cxx::xml::error_handler< wchar_t >& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AuthnAuthorityDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AuthnAuthorityDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (::std::istream& is,
                              const ::std::basic_string< wchar_t >& sid,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AuthnAuthorityDescriptor (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (::std::istream& is,
                              const ::std::basic_string< wchar_t >& sid,
                              ::xsd::cxx::xml::error_handler< wchar_t >& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AuthnAuthorityDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (::std::istream& is,
                              const ::std::basic_string< wchar_t >& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AuthnAuthorityDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (const ::xercesc::DOMInputSource& i,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::AuthnAuthorityDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (const ::xercesc::DOMInputSource& i,
                              ::xsd::cxx::xml::error_handler< wchar_t >& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AuthnAuthorityDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (const ::xercesc::DOMInputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AuthnAuthorityDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType > r (
        tfm.create< ::saml2::metadata::AuthnAuthorityDescriptorType > (
          L"AuthnAuthorityDescriptor",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"AuthnAuthorityDescriptor",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (const ::std::basic_string< wchar_t >& u,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::AuthnQueryService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (const ::std::basic_string< wchar_t >& u,
                       ::xsd::cxx::xml::error_handler< wchar_t >& h,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AuthnQueryService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (const ::std::basic_string< wchar_t >& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AuthnQueryService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AuthnQueryService (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (::std::istream& is,
                       ::xsd::cxx::xml::error_handler< wchar_t >& h,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AuthnQueryService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AuthnQueryService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (::std::istream& is,
                       const ::std::basic_string< wchar_t >& sid,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AuthnQueryService (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (::std::istream& is,
                       const ::std::basic_string< wchar_t >& sid,
                       ::xsd::cxx::xml::error_handler< wchar_t >& h,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AuthnQueryService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (::std::istream& is,
                       const ::std::basic_string< wchar_t >& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AuthnQueryService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (const ::xercesc::DOMInputSource& i,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::AuthnQueryService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (const ::xercesc::DOMInputSource& i,
                       ::xsd::cxx::xml::error_handler< wchar_t >& h,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AuthnQueryService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (const ::xercesc::DOMInputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AuthnQueryService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::EndpointType > r (
        tfm.create< ::saml2::metadata::EndpointType > (
          L"AuthnQueryService",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"AuthnQueryService",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (const ::std::basic_string< wchar_t >& u,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::PDPDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (const ::std::basic_string< wchar_t >& u,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::PDPDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (const ::std::basic_string< wchar_t >& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::PDPDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::PDPDescriptor (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (::std::istream& is,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::PDPDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::PDPDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (::std::istream& is,
                   const ::std::basic_string< wchar_t >& sid,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::PDPDescriptor (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (::std::istream& is,
                   const ::std::basic_string< wchar_t >& sid,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::PDPDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (::std::istream& is,
                   const ::std::basic_string< wchar_t >& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::PDPDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (const ::xercesc::DOMInputSource& i,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::PDPDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (const ::xercesc::DOMInputSource& i,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::PDPDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (const ::xercesc::DOMInputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::PDPDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType > r (
        tfm.create< ::saml2::metadata::PDPDescriptorType > (
          L"PDPDescriptor",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"PDPDescriptor",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (const ::std::basic_string< wchar_t >& u,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::AuthzService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (const ::std::basic_string< wchar_t >& u,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AuthzService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (const ::std::basic_string< wchar_t >& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AuthzService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AuthzService (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (::std::istream& is,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AuthzService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AuthzService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AuthzService (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AuthzService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (::std::istream& is,
                  const ::std::basic_string< wchar_t >& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AuthzService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (const ::xercesc::DOMInputSource& i,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::AuthzService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (const ::xercesc::DOMInputSource& i,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AuthzService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (const ::xercesc::DOMInputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AuthzService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::EndpointType > r (
        tfm.create< ::saml2::metadata::EndpointType > (
          L"AuthzService",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"AuthzService",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (const ::std::basic_string< wchar_t >& u,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::AttributeAuthorityDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (const ::std::basic_string< wchar_t >& u,
                                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AttributeAuthorityDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (const ::std::basic_string< wchar_t >& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AttributeAuthorityDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AttributeAuthorityDescriptor (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (::std::istream& is,
                                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AttributeAuthorityDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AttributeAuthorityDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (::std::istream& is,
                                  const ::std::basic_string< wchar_t >& sid,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AttributeAuthorityDescriptor (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (::std::istream& is,
                                  const ::std::basic_string< wchar_t >& sid,
                                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AttributeAuthorityDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (::std::istream& is,
                                  const ::std::basic_string< wchar_t >& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AttributeAuthorityDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (const ::xercesc::DOMInputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::AttributeAuthorityDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (const ::xercesc::DOMInputSource& i,
                                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AttributeAuthorityDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (const ::xercesc::DOMInputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AttributeAuthorityDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f,
                                  const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType > r (
        tfm.create< ::saml2::metadata::AttributeAuthorityDescriptorType > (
          L"AttributeAuthorityDescriptor",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"AttributeAuthorityDescriptor",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (const ::std::basic_string< wchar_t >& u,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::AttributeService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (const ::std::basic_string< wchar_t >& u,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AttributeService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (const ::std::basic_string< wchar_t >& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AttributeService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AttributeService (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (::std::istream& is,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AttributeService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AttributeService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (::std::istream& is,
                      const ::std::basic_string< wchar_t >& sid,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AttributeService (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (::std::istream& is,
                      const ::std::basic_string< wchar_t >& sid,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AttributeService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (::std::istream& is,
                      const ::std::basic_string< wchar_t >& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AttributeService (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (const ::xercesc::DOMInputSource& i,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::AttributeService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (const ::xercesc::DOMInputSource& i,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AttributeService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (const ::xercesc::DOMInputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AttributeService (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::EndpointType > r (
        tfm.create< ::saml2::metadata::EndpointType > (
          L"AttributeService",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"AttributeService",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (const ::std::basic_string< wchar_t >& u,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::AffiliationDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (const ::std::basic_string< wchar_t >& u,
                           ::xsd::cxx::xml::error_handler< wchar_t >& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AffiliationDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (const ::std::basic_string< wchar_t >& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AffiliationDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AffiliationDescriptor (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (::std::istream& is,
                           ::xsd::cxx::xml::error_handler< wchar_t >& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AffiliationDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AffiliationDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (::std::istream& is,
                           const ::std::basic_string< wchar_t >& sid,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AffiliationDescriptor (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (::std::istream& is,
                           const ::std::basic_string< wchar_t >& sid,
                           ::xsd::cxx::xml::error_handler< wchar_t >& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AffiliationDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (::std::istream& is,
                           const ::std::basic_string< wchar_t >& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AffiliationDescriptor (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (const ::xercesc::DOMInputSource& i,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::AffiliationDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (const ::xercesc::DOMInputSource& i,
                           ::xsd::cxx::xml::error_handler< wchar_t >& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AffiliationDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (const ::xercesc::DOMInputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AffiliationDescriptor (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f,
                           const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType > r (
        tfm.create< ::saml2::metadata::AffiliationDescriptorType > (
          L"AffiliationDescriptor",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"AffiliationDescriptor",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (const ::std::basic_string< wchar_t >& u,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::AffiliateMember (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (const ::std::basic_string< wchar_t >& u,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AffiliateMember (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (const ::std::basic_string< wchar_t >& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AffiliateMember (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AffiliateMember (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (::std::istream& is,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AffiliateMember (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AffiliateMember (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AffiliateMember (wrap, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AffiliateMember (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (::std::istream& is,
                     const ::std::basic_string< wchar_t >& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::saml2::metadata::AffiliateMember (wrap, h, f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (const ::xercesc::DOMInputSource& i,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::saml2::metadata::AffiliateMember (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (const ::xercesc::DOMInputSource& i,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AffiliateMember (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (const ::xercesc::DOMInputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::saml2::metadata::AffiliateMember (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::saml2::metadata::entityIDType > r (
        tfm.create< ::saml2::metadata::entityIDType > (
          L"AffiliateMember",
          L"urn:oasis:names:tc:SAML:2.0:metadata",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"AffiliateMember",
        L"urn:oasis:names:tc:SAML:2.0:metadata");
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/serialization.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_serializer_plate< 0, wchar_t >
  type_serializer_plate_init;
}

namespace saml2
{
  namespace metadata
  {
    void
    operator<< (::xercesc::DOMElement& e,
                const entityIDType& i)
    {
      e << static_cast< const ::xml_schema::uri& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,
                const entityIDType& i)
    {
      a << static_cast< const ::xml_schema::uri& > (i);
    }

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >& l,
                const entityIDType& i)
    {
      l << static_cast< const ::xml_schema::uri& > (i);
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, entityIDType >
    _xsd_entityIDType_type_serializer_init (
      L"entityIDType",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    operator<< (::xercesc::DOMElement& e,
                const localizedNameType& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"lang",
          L"http://www.w3.org/XML/1998/namespace",
          e);

        a.dom_attribute () << i.lang ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, localizedNameType >
    _xsd_localizedNameType_type_serializer_init (
      L"localizedNameType",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    operator<< (::xercesc::DOMElement& e,
                const localizedURIType& i)
    {
      e << static_cast< const ::xml_schema::uri& > (i);

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"lang",
          L"http://www.w3.org/XML/1998/namespace",
          e);

        a.dom_attribute () << i.lang ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, localizedURIType >
    _xsd_localizedURIType_type_serializer_init (
      L"localizedURIType",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    Extensions (::xercesc::DOMDocument& d,
                const ::saml2::metadata::ExtensionsType& s,
                ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::ExtensionsType > (
        L"Extensions",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Extensions (const ::saml2::metadata::ExtensionsType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::ExtensionsType > (
            L"Extensions",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::Extensions (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Extensions (::xercesc::XMLFormatTarget& t,
                const ::saml2::metadata::ExtensionsType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::Extensions (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Extensions (::xercesc::XMLFormatTarget& t,
                const ::saml2::metadata::ExtensionsType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::Extensions (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Extensions (::xercesc::XMLFormatTarget& t,
                const ::saml2::metadata::ExtensionsType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::Extensions (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Extensions (::std::ostream& o,
                const ::saml2::metadata::ExtensionsType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::Extensions (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Extensions (::std::ostream& o,
                const ::saml2::metadata::ExtensionsType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::Extensions (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Extensions (::std::ostream& o,
                const ::saml2::metadata::ExtensionsType& s,
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::basic_string< wchar_t >& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::Extensions (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ExtensionsType&)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);
    }

    void
    operator<< (::xercesc::DOMAttr&,
                const ExtensionsType&)
    {
    }

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                const ExtensionsType&)
    {
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ExtensionsType >
    _xsd_ExtensionsType_type_serializer_init (
      L"ExtensionsType",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    operator<< (::xercesc::DOMElement& e,
                const EndpointType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Binding",
          e);

        a.dom_attribute () << i.Binding ();
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Location",
          e);

        a.dom_attribute () << i.Location ();
      }

      if (i.ResponseLocation ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"ResponseLocation",
          e);

        a.dom_attribute () << *i.ResponseLocation ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, EndpointType >
    _xsd_EndpointType_type_serializer_init (
      L"EndpointType",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    operator<< (::xercesc::DOMElement& e,
                const IndexedEndpointType& i)
    {
      e << static_cast< const ::saml2::metadata::EndpointType& > (i);

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"index",
          e);

        a.dom_attribute () << i.index ();
      }

      if (i.isDefault ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"isDefault",
          e);

        a.dom_attribute () << *i.isDefault ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, IndexedEndpointType >
    _xsd_IndexedEndpointType_type_serializer_init (
      L"IndexedEndpointType",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    EntitiesDescriptor (::xercesc::DOMDocument& d,
                        const ::saml2::metadata::EntitiesDescriptorType& s,
                        ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::EntitiesDescriptorType > (
        L"EntitiesDescriptor",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    EntitiesDescriptor (const ::saml2::metadata::EntitiesDescriptorType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::EntitiesDescriptorType > (
            L"EntitiesDescriptor",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::EntitiesDescriptor (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    EntitiesDescriptor (::xercesc::XMLFormatTarget& t,
                        const ::saml2::metadata::EntitiesDescriptorType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::EntitiesDescriptor (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    EntitiesDescriptor (::xercesc::XMLFormatTarget& t,
                        const ::saml2::metadata::EntitiesDescriptorType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::EntitiesDescriptor (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EntitiesDescriptor (::xercesc::XMLFormatTarget& t,
                        const ::saml2::metadata::EntitiesDescriptorType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xercesc::DOMErrorHandler& h,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::EntitiesDescriptor (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EntitiesDescriptor (::std::ostream& o,
                        const ::saml2::metadata::EntitiesDescriptorType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::EntitiesDescriptor (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    EntitiesDescriptor (::std::ostream& o,
                        const ::saml2::metadata::EntitiesDescriptorType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::EntitiesDescriptor (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EntitiesDescriptor (::std::ostream& o,
                        const ::saml2::metadata::EntitiesDescriptorType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xercesc::DOMErrorHandler& h,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::EntitiesDescriptor (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const EntitiesDescriptorType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Signature ())
        {
          tsm.serialize< EntitiesDescriptorType::Signature::type > (
            L"Signature",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *i.Signature ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Extensions ())
        {
          tsm.serialize< EntitiesDescriptorType::Extensions::type > (
            L"Extensions",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *i.Extensions ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (EntitiesDescriptorType::EntityDescriptor::const_iterator
             b (i.EntityDescriptor ().begin ()), n (i.EntityDescriptor ().end ());
             b != n; ++b)
        {
          tsm.serialize< EntitiesDescriptorType::EntityDescriptor::type > (
            L"EntityDescriptor",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (EntitiesDescriptorType::EntitiesDescriptor::const_iterator
             b (i.EntitiesDescriptor ().begin ()), n (i.EntitiesDescriptor ().end ());
             b != n; ++b)
        {
          tsm.serialize< EntitiesDescriptorType::EntitiesDescriptor::type > (
            L"EntitiesDescriptor",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      if (i.validUntil ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"validUntil",
          e);

        a.dom_attribute () << *i.validUntil ();
      }

      if (i.cacheDuration ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"cacheDuration",
          e);

        a.dom_attribute () << *i.cacheDuration ();
      }

      if (i.ID ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"ID",
          e);

        a.dom_attribute () << *i.ID ();
      }

      if (i.Name ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Name",
          e);

        a.dom_attribute () << *i.Name ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, EntitiesDescriptorType >
    _xsd_EntitiesDescriptorType_type_serializer_init (
      L"EntitiesDescriptorType",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    EntityDescriptor (::xercesc::DOMDocument& d,
                      const ::saml2::metadata::EntityDescriptorType& s,
                      ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::EntityDescriptorType > (
        L"EntityDescriptor",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    EntityDescriptor (const ::saml2::metadata::EntityDescriptorType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::EntityDescriptorType > (
            L"EntityDescriptor",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::EntityDescriptor (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    EntityDescriptor (::xercesc::XMLFormatTarget& t,
                      const ::saml2::metadata::EntityDescriptorType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::EntityDescriptor (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    EntityDescriptor (::xercesc::XMLFormatTarget& t,
                      const ::saml2::metadata::EntityDescriptorType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::EntityDescriptor (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EntityDescriptor (::xercesc::XMLFormatTarget& t,
                      const ::saml2::metadata::EntityDescriptorType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::EntityDescriptor (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EntityDescriptor (::std::ostream& o,
                      const ::saml2::metadata::EntityDescriptorType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::EntityDescriptor (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    EntityDescriptor (::std::ostream& o,
                      const ::saml2::metadata::EntityDescriptorType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::EntityDescriptor (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EntityDescriptor (::std::ostream& o,
                      const ::saml2::metadata::EntityDescriptorType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::EntityDescriptor (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const EntityDescriptorType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Signature ())
        {
          tsm.serialize< EntityDescriptorType::Signature::type > (
            L"Signature",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *i.Signature ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Extensions ())
        {
          tsm.serialize< EntityDescriptorType::Extensions::type > (
            L"Extensions",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *i.Extensions ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (EntityDescriptorType::RoleDescriptor::const_iterator
             b (i.RoleDescriptor ().begin ()), n (i.RoleDescriptor ().end ());
             b != n; ++b)
        {
          tsm.serialize< EntityDescriptorType::RoleDescriptor::type > (
            L"RoleDescriptor",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (EntityDescriptorType::IDPSSODescriptor::const_iterator
             b (i.IDPSSODescriptor ().begin ()), n (i.IDPSSODescriptor ().end ());
             b != n; ++b)
        {
          tsm.serialize< EntityDescriptorType::IDPSSODescriptor::type > (
            L"IDPSSODescriptor",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (EntityDescriptorType::SPSSODescriptor::const_iterator
             b (i.SPSSODescriptor ().begin ()), n (i.SPSSODescriptor ().end ());
             b != n; ++b)
        {
          tsm.serialize< EntityDescriptorType::SPSSODescriptor::type > (
            L"SPSSODescriptor",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (EntityDescriptorType::AuthnAuthorityDescriptor::const_iterator
             b (i.AuthnAuthorityDescriptor ().begin ()), n (i.AuthnAuthorityDescriptor ().end ());
             b != n; ++b)
        {
          tsm.serialize< EntityDescriptorType::AuthnAuthorityDescriptor::type > (
            L"AuthnAuthorityDescriptor",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (EntityDescriptorType::AttributeAuthorityDescriptor::const_iterator
             b (i.AttributeAuthorityDescriptor ().begin ()), n (i.AttributeAuthorityDescriptor ().end ());
             b != n; ++b)
        {
          tsm.serialize< EntityDescriptorType::AttributeAuthorityDescriptor::type > (
            L"AttributeAuthorityDescriptor",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (EntityDescriptorType::PDPDescriptor::const_iterator
             b (i.PDPDescriptor ().begin ()), n (i.PDPDescriptor ().end ());
             b != n; ++b)
        {
          tsm.serialize< EntityDescriptorType::PDPDescriptor::type > (
            L"PDPDescriptor",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.AffiliationDescriptor ())
        {
          tsm.serialize< EntityDescriptorType::AffiliationDescriptor::type > (
            L"AffiliationDescriptor",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *i.AffiliationDescriptor ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Organization ())
        {
          tsm.serialize< EntityDescriptorType::Organization::type > (
            L"Organization",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *i.Organization ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (EntityDescriptorType::ContactPerson::const_iterator
             b (i.ContactPerson ().begin ()), n (i.ContactPerson ().end ());
             b != n; ++b)
        {
          tsm.serialize< EntityDescriptorType::ContactPerson::type > (
            L"ContactPerson",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (EntityDescriptorType::AdditionalMetadataLocation::const_iterator
             b (i.AdditionalMetadataLocation ().begin ()), n (i.AdditionalMetadataLocation ().end ());
             b != n; ++b)
        {
          tsm.serialize< EntityDescriptorType::AdditionalMetadataLocation::type > (
            L"AdditionalMetadataLocation",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"entityID",
          e);

        a.dom_attribute () << i.entityID ();
      }

      if (i.validUntil ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"validUntil",
          e);

        a.dom_attribute () << *i.validUntil ();
      }

      if (i.cacheDuration ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"cacheDuration",
          e);

        a.dom_attribute () << *i.cacheDuration ();
      }

      if (i.ID ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"ID",
          e);

        a.dom_attribute () << *i.ID ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, EntityDescriptorType >
    _xsd_EntityDescriptorType_type_serializer_init (
      L"EntityDescriptorType",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    Organization (::xercesc::DOMDocument& d,
                  const ::saml2::metadata::OrganizationType& s,
                  ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::OrganizationType > (
        L"Organization",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Organization (const ::saml2::metadata::OrganizationType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::OrganizationType > (
            L"Organization",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::Organization (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Organization (::xercesc::XMLFormatTarget& t,
                  const ::saml2::metadata::OrganizationType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::Organization (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Organization (::xercesc::XMLFormatTarget& t,
                  const ::saml2::metadata::OrganizationType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::Organization (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Organization (::xercesc::XMLFormatTarget& t,
                  const ::saml2::metadata::OrganizationType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::Organization (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Organization (::std::ostream& o,
                  const ::saml2::metadata::OrganizationType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::Organization (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Organization (::std::ostream& o,
                  const ::saml2::metadata::OrganizationType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::Organization (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Organization (::std::ostream& o,
                  const ::saml2::metadata::OrganizationType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::Organization (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const OrganizationType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Extensions ())
        {
          tsm.serialize< OrganizationType::Extensions::type > (
            L"Extensions",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *i.Extensions ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (OrganizationType::OrganizationName::const_iterator
             b (i.OrganizationName ().begin ()), n (i.OrganizationName ().end ());
             b != n; ++b)
        {
          tsm.serialize< OrganizationType::OrganizationName::type > (
            L"OrganizationName",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (OrganizationType::OrganizationDisplayName::const_iterator
             b (i.OrganizationDisplayName ().begin ()), n (i.OrganizationDisplayName ().end ());
             b != n; ++b)
        {
          tsm.serialize< OrganizationType::OrganizationDisplayName::type > (
            L"OrganizationDisplayName",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (OrganizationType::OrganizationURL::const_iterator
             b (i.OrganizationURL ().begin ()), n (i.OrganizationURL ().end ());
             b != n; ++b)
        {
          tsm.serialize< OrganizationType::OrganizationURL::type > (
            L"OrganizationURL",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, OrganizationType >
    _xsd_OrganizationType_type_serializer_init (
      L"OrganizationType",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    OrganizationName (::xercesc::DOMDocument& d,
                      const ::saml2::metadata::localizedNameType& s,
                      ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::localizedNameType > (
        L"OrganizationName",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    OrganizationName (const ::saml2::metadata::localizedNameType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::localizedNameType > (
            L"OrganizationName",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::OrganizationName (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    OrganizationName (::xercesc::XMLFormatTarget& t,
                      const ::saml2::metadata::localizedNameType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::OrganizationName (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    OrganizationName (::xercesc::XMLFormatTarget& t,
                      const ::saml2::metadata::localizedNameType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::OrganizationName (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    OrganizationName (::xercesc::XMLFormatTarget& t,
                      const ::saml2::metadata::localizedNameType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::OrganizationName (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    OrganizationName (::std::ostream& o,
                      const ::saml2::metadata::localizedNameType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::OrganizationName (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    OrganizationName (::std::ostream& o,
                      const ::saml2::metadata::localizedNameType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::OrganizationName (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    OrganizationName (::std::ostream& o,
                      const ::saml2::metadata::localizedNameType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::OrganizationName (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    OrganizationDisplayName (::xercesc::DOMDocument& d,
                             const ::saml2::metadata::localizedNameType& s,
                             ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::localizedNameType > (
        L"OrganizationDisplayName",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    OrganizationDisplayName (const ::saml2::metadata::localizedNameType& s,
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                             ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::localizedNameType > (
            L"OrganizationDisplayName",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::OrganizationDisplayName (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    OrganizationDisplayName (::xercesc::XMLFormatTarget& t,
                             const ::saml2::metadata::localizedNameType& s,
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                             const ::std::basic_string< wchar_t >& e,
                             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::OrganizationDisplayName (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    OrganizationDisplayName (::xercesc::XMLFormatTarget& t,
                             const ::saml2::metadata::localizedNameType& s,
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                             ::xsd::cxx::xml::error_handler< wchar_t >& h,
                             const ::std::basic_string< wchar_t >& e,
                             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::OrganizationDisplayName (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    OrganizationDisplayName (::xercesc::XMLFormatTarget& t,
                             const ::saml2::metadata::localizedNameType& s,
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                             ::xercesc::DOMErrorHandler& h,
                             const ::std::basic_string< wchar_t >& e,
                             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::OrganizationDisplayName (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    OrganizationDisplayName (::std::ostream& o,
                             const ::saml2::metadata::localizedNameType& s,
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                             const ::std::basic_string< wchar_t >& e,
                             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::OrganizationDisplayName (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    OrganizationDisplayName (::std::ostream& o,
                             const ::saml2::metadata::localizedNameType& s,
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                             ::xsd::cxx::xml::error_handler< wchar_t >& h,
                             const ::std::basic_string< wchar_t >& e,
                             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::OrganizationDisplayName (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    OrganizationDisplayName (::std::ostream& o,
                             const ::saml2::metadata::localizedNameType& s,
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                             ::xercesc::DOMErrorHandler& h,
                             const ::std::basic_string< wchar_t >& e,
                             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::OrganizationDisplayName (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    OrganizationURL (::xercesc::DOMDocument& d,
                     const ::saml2::metadata::localizedURIType& s,
                     ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::localizedURIType > (
        L"OrganizationURL",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    OrganizationURL (const ::saml2::metadata::localizedURIType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::localizedURIType > (
            L"OrganizationURL",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::OrganizationURL (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    OrganizationURL (::xercesc::XMLFormatTarget& t,
                     const ::saml2::metadata::localizedURIType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::OrganizationURL (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    OrganizationURL (::xercesc::XMLFormatTarget& t,
                     const ::saml2::metadata::localizedURIType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::OrganizationURL (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    OrganizationURL (::xercesc::XMLFormatTarget& t,
                     const ::saml2::metadata::localizedURIType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::OrganizationURL (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    OrganizationURL (::std::ostream& o,
                     const ::saml2::metadata::localizedURIType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::OrganizationURL (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    OrganizationURL (::std::ostream& o,
                     const ::saml2::metadata::localizedURIType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::OrganizationURL (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    OrganizationURL (::std::ostream& o,
                     const ::saml2::metadata::localizedURIType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::OrganizationURL (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ContactPerson (::xercesc::DOMDocument& d,
                   const ::saml2::metadata::ContactType& s,
                   ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::ContactType > (
        L"ContactPerson",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ContactPerson (const ::saml2::metadata::ContactType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::ContactType > (
            L"ContactPerson",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::ContactPerson (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    ContactPerson (::xercesc::XMLFormatTarget& t,
                   const ::saml2::metadata::ContactType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ContactPerson (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ContactPerson (::xercesc::XMLFormatTarget& t,
                   const ::saml2::metadata::ContactType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ContactPerson (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ContactPerson (::xercesc::XMLFormatTarget& t,
                   const ::saml2::metadata::ContactType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xercesc::DOMErrorHandler& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ContactPerson (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ContactPerson (::std::ostream& o,
                   const ::saml2::metadata::ContactType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ContactPerson (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ContactPerson (::std::ostream& o,
                   const ::saml2::metadata::ContactType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ContactPerson (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ContactPerson (::std::ostream& o,
                   const ::saml2::metadata::ContactType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xercesc::DOMErrorHandler& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ContactPerson (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ContactType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Extensions ())
        {
          tsm.serialize< ContactType::Extensions::type > (
            L"Extensions",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *i.Extensions ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Company ())
        {
          tsm.serialize< ContactType::Company::type > (
            L"Company",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *i.Company ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.GivenName ())
        {
          tsm.serialize< ContactType::GivenName::type > (
            L"GivenName",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *i.GivenName ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.SurName ())
        {
          tsm.serialize< ContactType::SurName::type > (
            L"SurName",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *i.SurName ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (ContactType::EmailAddress::const_iterator
             b (i.EmailAddress ().begin ()), n (i.EmailAddress ().end ());
             b != n; ++b)
        {
          tsm.serialize< ContactType::EmailAddress::type > (
            L"EmailAddress",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (ContactType::TelephoneNumber::const_iterator
             b (i.TelephoneNumber ().begin ()), n (i.TelephoneNumber ().end ());
             b != n; ++b)
        {
          tsm.serialize< ContactType::TelephoneNumber::type > (
            L"TelephoneNumber",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"contactType",
          e);

        a.dom_attribute () << i.contactType ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ContactType >
    _xsd_ContactType_type_serializer_init (
      L"ContactType",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    Company (::xercesc::DOMDocument& d,
             const ::xml_schema::string& s,
             ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::xml_schema::string > (
        L"Company",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Company (const ::xml_schema::string& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::xml_schema::string > (
            L"Company",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::Company (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Company (::xercesc::XMLFormatTarget& t,
             const ::xml_schema::string& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::Company (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Company (::xercesc::XMLFormatTarget& t,
             const ::xml_schema::string& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::Company (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Company (::xercesc::XMLFormatTarget& t,
             const ::xml_schema::string& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::Company (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Company (::std::ostream& o,
             const ::xml_schema::string& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::Company (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Company (::std::ostream& o,
             const ::xml_schema::string& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::Company (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Company (::std::ostream& o,
             const ::xml_schema::string& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::Company (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    GivenName (::xercesc::DOMDocument& d,
               const ::xml_schema::string& s,
               ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::xml_schema::string > (
        L"GivenName",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    GivenName (const ::xml_schema::string& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::xml_schema::string > (
            L"GivenName",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::GivenName (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    GivenName (::xercesc::XMLFormatTarget& t,
               const ::xml_schema::string& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::GivenName (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    GivenName (::xercesc::XMLFormatTarget& t,
               const ::xml_schema::string& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::GivenName (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    GivenName (::xercesc::XMLFormatTarget& t,
               const ::xml_schema::string& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::GivenName (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    GivenName (::std::ostream& o,
               const ::xml_schema::string& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::GivenName (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    GivenName (::std::ostream& o,
               const ::xml_schema::string& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::GivenName (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    GivenName (::std::ostream& o,
               const ::xml_schema::string& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::GivenName (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SurName (::xercesc::DOMDocument& d,
             const ::xml_schema::string& s,
             ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::xml_schema::string > (
        L"SurName",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SurName (const ::xml_schema::string& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::xml_schema::string > (
            L"SurName",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::SurName (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    SurName (::xercesc::XMLFormatTarget& t,
             const ::xml_schema::string& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::SurName (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SurName (::xercesc::XMLFormatTarget& t,
             const ::xml_schema::string& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::SurName (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SurName (::xercesc::XMLFormatTarget& t,
             const ::xml_schema::string& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::SurName (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SurName (::std::ostream& o,
             const ::xml_schema::string& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::SurName (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SurName (::std::ostream& o,
             const ::xml_schema::string& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::SurName (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SurName (::std::ostream& o,
             const ::xml_schema::string& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::SurName (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EmailAddress (::xercesc::DOMDocument& d,
                  const ::xml_schema::uri& s,
                  ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::xml_schema::uri > (
        L"EmailAddress",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    EmailAddress (const ::xml_schema::uri& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::xml_schema::uri > (
            L"EmailAddress",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::EmailAddress (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    EmailAddress (::xercesc::XMLFormatTarget& t,
                  const ::xml_schema::uri& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::EmailAddress (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    EmailAddress (::xercesc::XMLFormatTarget& t,
                  const ::xml_schema::uri& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::EmailAddress (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EmailAddress (::xercesc::XMLFormatTarget& t,
                  const ::xml_schema::uri& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::EmailAddress (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EmailAddress (::std::ostream& o,
                  const ::xml_schema::uri& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::EmailAddress (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    EmailAddress (::std::ostream& o,
                  const ::xml_schema::uri& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::EmailAddress (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EmailAddress (::std::ostream& o,
                  const ::xml_schema::uri& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::EmailAddress (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    TelephoneNumber (::xercesc::DOMDocument& d,
                     const ::xml_schema::string& s,
                     ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::xml_schema::string > (
        L"TelephoneNumber",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    TelephoneNumber (const ::xml_schema::string& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::xml_schema::string > (
            L"TelephoneNumber",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::TelephoneNumber (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    TelephoneNumber (::xercesc::XMLFormatTarget& t,
                     const ::xml_schema::string& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::TelephoneNumber (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    TelephoneNumber (::xercesc::XMLFormatTarget& t,
                     const ::xml_schema::string& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::TelephoneNumber (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    TelephoneNumber (::xercesc::XMLFormatTarget& t,
                     const ::xml_schema::string& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::TelephoneNumber (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    TelephoneNumber (::std::ostream& o,
                     const ::xml_schema::string& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::TelephoneNumber (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    TelephoneNumber (::std::ostream& o,
                     const ::xml_schema::string& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::TelephoneNumber (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    TelephoneNumber (::std::ostream& o,
                     const ::xml_schema::string& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::TelephoneNumber (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                ContactTypeType i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,
                ContactTypeType i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >& l,
                ContactTypeType i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ContactTypeType >
    _xsd_ContactTypeType_type_serializer_init (
      L"ContactTypeType",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    AdditionalMetadataLocation (::xercesc::DOMDocument& d,
                                const ::saml2::metadata::AdditionalMetadataLocationType& s,
                                ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::AdditionalMetadataLocationType > (
        L"AdditionalMetadataLocation",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AdditionalMetadataLocation (const ::saml2::metadata::AdditionalMetadataLocationType& s,
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::AdditionalMetadataLocationType > (
            L"AdditionalMetadataLocation",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::AdditionalMetadataLocation (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    AdditionalMetadataLocation (::xercesc::XMLFormatTarget& t,
                                const ::saml2::metadata::AdditionalMetadataLocationType& s,
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                const ::std::basic_string< wchar_t >& e,
                                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AdditionalMetadataLocation (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AdditionalMetadataLocation (::xercesc::XMLFormatTarget& t,
                                const ::saml2::metadata::AdditionalMetadataLocationType& s,
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                const ::std::basic_string< wchar_t >& e,
                                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AdditionalMetadataLocation (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AdditionalMetadataLocation (::xercesc::XMLFormatTarget& t,
                                const ::saml2::metadata::AdditionalMetadataLocationType& s,
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                ::xercesc::DOMErrorHandler& h,
                                const ::std::basic_string< wchar_t >& e,
                                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AdditionalMetadataLocation (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AdditionalMetadataLocation (::std::ostream& o,
                                const ::saml2::metadata::AdditionalMetadataLocationType& s,
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                const ::std::basic_string< wchar_t >& e,
                                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AdditionalMetadataLocation (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AdditionalMetadataLocation (::std::ostream& o,
                                const ::saml2::metadata::AdditionalMetadataLocationType& s,
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                const ::std::basic_string< wchar_t >& e,
                                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AdditionalMetadataLocation (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AdditionalMetadataLocation (::std::ostream& o,
                                const ::saml2::metadata::AdditionalMetadataLocationType& s,
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                ::xercesc::DOMErrorHandler& h,
                                const ::std::basic_string< wchar_t >& e,
                                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AdditionalMetadataLocation (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const AdditionalMetadataLocationType& i)
    {
      e << static_cast< const ::xml_schema::uri& > (i);

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"namespace",
          e);

        a.dom_attribute () << i.namespace_ ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AdditionalMetadataLocationType >
    _xsd_AdditionalMetadataLocationType_type_serializer_init (
      L"AdditionalMetadataLocationType",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    RoleDescriptor (::xercesc::DOMDocument& d,
                    const ::saml2::metadata::RoleDescriptorType& s,
                    ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::RoleDescriptorType > (
        L"RoleDescriptor",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    RoleDescriptor (const ::saml2::metadata::RoleDescriptorType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::RoleDescriptorType > (
            L"RoleDescriptor",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::RoleDescriptor (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    RoleDescriptor (::xercesc::XMLFormatTarget& t,
                    const ::saml2::metadata::RoleDescriptorType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::RoleDescriptor (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    RoleDescriptor (::xercesc::XMLFormatTarget& t,
                    const ::saml2::metadata::RoleDescriptorType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::RoleDescriptor (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RoleDescriptor (::xercesc::XMLFormatTarget& t,
                    const ::saml2::metadata::RoleDescriptorType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::RoleDescriptor (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RoleDescriptor (::std::ostream& o,
                    const ::saml2::metadata::RoleDescriptorType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::RoleDescriptor (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    RoleDescriptor (::std::ostream& o,
                    const ::saml2::metadata::RoleDescriptorType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::RoleDescriptor (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RoleDescriptor (::std::ostream& o,
                    const ::saml2::metadata::RoleDescriptorType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::RoleDescriptor (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const RoleDescriptorType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Signature ())
        {
          tsm.serialize< RoleDescriptorType::Signature::type > (
            L"Signature",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *i.Signature ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Extensions ())
        {
          tsm.serialize< RoleDescriptorType::Extensions::type > (
            L"Extensions",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *i.Extensions ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (RoleDescriptorType::KeyDescriptor::const_iterator
             b (i.KeyDescriptor ().begin ()), n (i.KeyDescriptor ().end ());
             b != n; ++b)
        {
          tsm.serialize< RoleDescriptorType::KeyDescriptor::type > (
            L"KeyDescriptor",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Organization ())
        {
          tsm.serialize< RoleDescriptorType::Organization::type > (
            L"Organization",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *i.Organization ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (RoleDescriptorType::ContactPerson::const_iterator
             b (i.ContactPerson ().begin ()), n (i.ContactPerson ().end ());
             b != n; ++b)
        {
          tsm.serialize< RoleDescriptorType::ContactPerson::type > (
            L"ContactPerson",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      if (i.ID ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"ID",
          e);

        a.dom_attribute () << *i.ID ();
      }

      if (i.validUntil ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"validUntil",
          e);

        a.dom_attribute () << *i.validUntil ();
      }

      if (i.cacheDuration ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"cacheDuration",
          e);

        a.dom_attribute () << *i.cacheDuration ();
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"protocolSupportEnumeration",
          e);

        a.dom_attribute () << i.protocolSupportEnumeration ();
      }

      if (i.errorURL ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"errorURL",
          e);

        a.dom_attribute () << *i.errorURL ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, RoleDescriptorType >
    _xsd_RoleDescriptorType_type_serializer_init (
      L"RoleDescriptorType",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    operator<< (::xercesc::DOMElement& e,
                const anyURIListType& v)
    {
      e << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::uri, wchar_t >& > (v);
    }

    void
    operator<< (::xercesc::DOMAttr& a,
                const anyURIListType& v)
    {
      a << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::uri, wchar_t >& > (v);
    }

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >& l,
                const anyURIListType& v)
    {
      l << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::uri, wchar_t >& > (v);
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, anyURIListType >
    _xsd_anyURIListType_type_serializer_init (
      L"anyURIListType",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    KeyDescriptor (::xercesc::DOMDocument& d,
                   const ::saml2::metadata::KeyDescriptorType& s,
                   ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::KeyDescriptorType > (
        L"KeyDescriptor",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    KeyDescriptor (const ::saml2::metadata::KeyDescriptorType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::KeyDescriptorType > (
            L"KeyDescriptor",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::KeyDescriptor (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    KeyDescriptor (::xercesc::XMLFormatTarget& t,
                   const ::saml2::metadata::KeyDescriptorType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::KeyDescriptor (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    KeyDescriptor (::xercesc::XMLFormatTarget& t,
                   const ::saml2::metadata::KeyDescriptorType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::KeyDescriptor (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyDescriptor (::xercesc::XMLFormatTarget& t,
                   const ::saml2::metadata::KeyDescriptorType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xercesc::DOMErrorHandler& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::KeyDescriptor (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyDescriptor (::std::ostream& o,
                   const ::saml2::metadata::KeyDescriptorType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::KeyDescriptor (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    KeyDescriptor (::std::ostream& o,
                   const ::saml2::metadata::KeyDescriptorType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::KeyDescriptor (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyDescriptor (::std::ostream& o,
                   const ::saml2::metadata::KeyDescriptorType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xercesc::DOMErrorHandler& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::KeyDescriptor (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const KeyDescriptorType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< KeyDescriptorType::KeyInfo::type > (
          L"KeyInfo",
          L"http://www.w3.org/2000/09/xmldsig#",
          true,
          true,
          e,
          i.KeyInfo ());
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (KeyDescriptorType::EncryptionMethod::const_iterator
             b (i.EncryptionMethod ().begin ()), n (i.EncryptionMethod ().end ());
             b != n; ++b)
        {
          tsm.serialize< KeyDescriptorType::EncryptionMethod::type > (
            L"EncryptionMethod",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      if (i.use ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"use",
          e);

        a.dom_attribute () << *i.use ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, KeyDescriptorType >
    _xsd_KeyDescriptorType_type_serializer_init (
      L"KeyDescriptorType",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    operator<< (::xercesc::DOMElement& e,
                KeyTypes i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,
                KeyTypes i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >& l,
                KeyTypes i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, KeyTypes >
    _xsd_KeyTypes_type_serializer_init (
      L"KeyTypes",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    EncryptionMethod (::xercesc::DOMDocument& d,
                      const ::w3::xmlenc::EncryptionMethodType& s,
                      ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::w3::xmlenc::EncryptionMethodType > (
        L"EncryptionMethod",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    EncryptionMethod (const ::w3::xmlenc::EncryptionMethodType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::w3::xmlenc::EncryptionMethodType > (
            L"EncryptionMethod",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::EncryptionMethod (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    EncryptionMethod (::xercesc::XMLFormatTarget& t,
                      const ::w3::xmlenc::EncryptionMethodType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::EncryptionMethod (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    EncryptionMethod (::xercesc::XMLFormatTarget& t,
                      const ::w3::xmlenc::EncryptionMethodType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::EncryptionMethod (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EncryptionMethod (::xercesc::XMLFormatTarget& t,
                      const ::w3::xmlenc::EncryptionMethodType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::EncryptionMethod (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EncryptionMethod (::std::ostream& o,
                      const ::w3::xmlenc::EncryptionMethodType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::EncryptionMethod (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    EncryptionMethod (::std::ostream& o,
                      const ::w3::xmlenc::EncryptionMethodType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::EncryptionMethod (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    EncryptionMethod (::std::ostream& o,
                      const ::w3::xmlenc::EncryptionMethodType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::EncryptionMethod (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const SSODescriptorType& i)
    {
      e << static_cast< const ::saml2::metadata::RoleDescriptorType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (SSODescriptorType::ArtifactResolutionService::const_iterator
             b (i.ArtifactResolutionService ().begin ()), n (i.ArtifactResolutionService ().end ());
             b != n; ++b)
        {
          tsm.serialize< SSODescriptorType::ArtifactResolutionService::type > (
            L"ArtifactResolutionService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (SSODescriptorType::SingleLogoutService::const_iterator
             b (i.SingleLogoutService ().begin ()), n (i.SingleLogoutService ().end ());
             b != n; ++b)
        {
          tsm.serialize< SSODescriptorType::SingleLogoutService::type > (
            L"SingleLogoutService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (SSODescriptorType::ManageNameIDService::const_iterator
             b (i.ManageNameIDService ().begin ()), n (i.ManageNameIDService ().end ());
             b != n; ++b)
        {
          tsm.serialize< SSODescriptorType::ManageNameIDService::type > (
            L"ManageNameIDService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (SSODescriptorType::NameIDFormat::const_iterator
             b (i.NameIDFormat ().begin ()), n (i.NameIDFormat ().end ());
             b != n; ++b)
        {
          tsm.serialize< SSODescriptorType::NameIDFormat::type > (
            L"NameIDFormat",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SSODescriptorType >
    _xsd_SSODescriptorType_type_serializer_init (
      L"SSODescriptorType",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    ArtifactResolutionService (::xercesc::DOMDocument& d,
                               const ::saml2::metadata::IndexedEndpointType& s,
                               ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::IndexedEndpointType > (
        L"ArtifactResolutionService",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ArtifactResolutionService (const ::saml2::metadata::IndexedEndpointType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::IndexedEndpointType > (
            L"ArtifactResolutionService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::ArtifactResolutionService (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    ArtifactResolutionService (::xercesc::XMLFormatTarget& t,
                               const ::saml2::metadata::IndexedEndpointType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               const ::std::basic_string< wchar_t >& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ArtifactResolutionService (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ArtifactResolutionService (::xercesc::XMLFormatTarget& t,
                               const ::saml2::metadata::IndexedEndpointType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               ::xsd::cxx::xml::error_handler< wchar_t >& h,
                               const ::std::basic_string< wchar_t >& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ArtifactResolutionService (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ArtifactResolutionService (::xercesc::XMLFormatTarget& t,
                               const ::saml2::metadata::IndexedEndpointType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               ::xercesc::DOMErrorHandler& h,
                               const ::std::basic_string< wchar_t >& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ArtifactResolutionService (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ArtifactResolutionService (::std::ostream& o,
                               const ::saml2::metadata::IndexedEndpointType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               const ::std::basic_string< wchar_t >& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ArtifactResolutionService (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ArtifactResolutionService (::std::ostream& o,
                               const ::saml2::metadata::IndexedEndpointType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               ::xsd::cxx::xml::error_handler< wchar_t >& h,
                               const ::std::basic_string< wchar_t >& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ArtifactResolutionService (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ArtifactResolutionService (::std::ostream& o,
                               const ::saml2::metadata::IndexedEndpointType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               ::xercesc::DOMErrorHandler& h,
                               const ::std::basic_string< wchar_t >& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ArtifactResolutionService (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SingleLogoutService (::xercesc::DOMDocument& d,
                         const ::saml2::metadata::EndpointType& s,
                         ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::EndpointType > (
        L"SingleLogoutService",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SingleLogoutService (const ::saml2::metadata::EndpointType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::EndpointType > (
            L"SingleLogoutService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::SingleLogoutService (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    SingleLogoutService (::xercesc::XMLFormatTarget& t,
                         const ::saml2::metadata::EndpointType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::SingleLogoutService (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SingleLogoutService (::xercesc::XMLFormatTarget& t,
                         const ::saml2::metadata::EndpointType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::SingleLogoutService (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SingleLogoutService (::xercesc::XMLFormatTarget& t,
                         const ::saml2::metadata::EndpointType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xercesc::DOMErrorHandler& h,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::SingleLogoutService (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SingleLogoutService (::std::ostream& o,
                         const ::saml2::metadata::EndpointType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::SingleLogoutService (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SingleLogoutService (::std::ostream& o,
                         const ::saml2::metadata::EndpointType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::SingleLogoutService (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SingleLogoutService (::std::ostream& o,
                         const ::saml2::metadata::EndpointType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xercesc::DOMErrorHandler& h,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::SingleLogoutService (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ManageNameIDService (::xercesc::DOMDocument& d,
                         const ::saml2::metadata::EndpointType& s,
                         ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::EndpointType > (
        L"ManageNameIDService",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ManageNameIDService (const ::saml2::metadata::EndpointType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::EndpointType > (
            L"ManageNameIDService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::ManageNameIDService (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    ManageNameIDService (::xercesc::XMLFormatTarget& t,
                         const ::saml2::metadata::EndpointType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ManageNameIDService (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ManageNameIDService (::xercesc::XMLFormatTarget& t,
                         const ::saml2::metadata::EndpointType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ManageNameIDService (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ManageNameIDService (::xercesc::XMLFormatTarget& t,
                         const ::saml2::metadata::EndpointType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xercesc::DOMErrorHandler& h,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ManageNameIDService (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ManageNameIDService (::std::ostream& o,
                         const ::saml2::metadata::EndpointType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ManageNameIDService (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ManageNameIDService (::std::ostream& o,
                         const ::saml2::metadata::EndpointType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ManageNameIDService (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ManageNameIDService (::std::ostream& o,
                         const ::saml2::metadata::EndpointType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xercesc::DOMErrorHandler& h,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ManageNameIDService (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NameIDFormat (::xercesc::DOMDocument& d,
                  const ::xml_schema::uri& s,
                  ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::xml_schema::uri > (
        L"NameIDFormat",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    NameIDFormat (const ::xml_schema::uri& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::xml_schema::uri > (
            L"NameIDFormat",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::NameIDFormat (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    NameIDFormat (::xercesc::XMLFormatTarget& t,
                  const ::xml_schema::uri& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::NameIDFormat (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    NameIDFormat (::xercesc::XMLFormatTarget& t,
                  const ::xml_schema::uri& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::NameIDFormat (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NameIDFormat (::xercesc::XMLFormatTarget& t,
                  const ::xml_schema::uri& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::NameIDFormat (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NameIDFormat (::std::ostream& o,
                  const ::xml_schema::uri& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::NameIDFormat (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    NameIDFormat (::std::ostream& o,
                  const ::xml_schema::uri& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::NameIDFormat (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NameIDFormat (::std::ostream& o,
                  const ::xml_schema::uri& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::NameIDFormat (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    IDPSSODescriptor (::xercesc::DOMDocument& d,
                      const ::saml2::metadata::IDPSSODescriptorType& s,
                      ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::IDPSSODescriptorType > (
        L"IDPSSODescriptor",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    IDPSSODescriptor (const ::saml2::metadata::IDPSSODescriptorType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::IDPSSODescriptorType > (
            L"IDPSSODescriptor",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::IDPSSODescriptor (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    IDPSSODescriptor (::xercesc::XMLFormatTarget& t,
                      const ::saml2::metadata::IDPSSODescriptorType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::IDPSSODescriptor (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    IDPSSODescriptor (::xercesc::XMLFormatTarget& t,
                      const ::saml2::metadata::IDPSSODescriptorType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::IDPSSODescriptor (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    IDPSSODescriptor (::xercesc::XMLFormatTarget& t,
                      const ::saml2::metadata::IDPSSODescriptorType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::IDPSSODescriptor (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    IDPSSODescriptor (::std::ostream& o,
                      const ::saml2::metadata::IDPSSODescriptorType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::IDPSSODescriptor (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    IDPSSODescriptor (::std::ostream& o,
                      const ::saml2::metadata::IDPSSODescriptorType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::IDPSSODescriptor (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    IDPSSODescriptor (::std::ostream& o,
                      const ::saml2::metadata::IDPSSODescriptorType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::IDPSSODescriptor (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const IDPSSODescriptorType& i)
    {
      e << static_cast< const ::saml2::metadata::SSODescriptorType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (IDPSSODescriptorType::SingleSignOnService::const_iterator
             b (i.SingleSignOnService ().begin ()), n (i.SingleSignOnService ().end ());
             b != n; ++b)
        {
          tsm.serialize< IDPSSODescriptorType::SingleSignOnService::type > (
            L"SingleSignOnService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (IDPSSODescriptorType::NameIDMappingService::const_iterator
             b (i.NameIDMappingService ().begin ()), n (i.NameIDMappingService ().end ());
             b != n; ++b)
        {
          tsm.serialize< IDPSSODescriptorType::NameIDMappingService::type > (
            L"NameIDMappingService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (IDPSSODescriptorType::AssertionIDRequestService::const_iterator
             b (i.AssertionIDRequestService ().begin ()), n (i.AssertionIDRequestService ().end ());
             b != n; ++b)
        {
          tsm.serialize< IDPSSODescriptorType::AssertionIDRequestService::type > (
            L"AssertionIDRequestService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (IDPSSODescriptorType::AttributeProfile::const_iterator
             b (i.AttributeProfile ().begin ()), n (i.AttributeProfile ().end ());
             b != n; ++b)
        {
          tsm.serialize< IDPSSODescriptorType::AttributeProfile::type > (
            L"AttributeProfile",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (IDPSSODescriptorType::Attribute::const_iterator
             b (i.Attribute ().begin ()), n (i.Attribute ().end ());
             b != n; ++b)
        {
          tsm.serialize< IDPSSODescriptorType::Attribute::type > (
            L"Attribute",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *b);
        }
      }

      if (i.WantAuthnRequestsSigned ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"WantAuthnRequestsSigned",
          e);

        a.dom_attribute () << *i.WantAuthnRequestsSigned ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, IDPSSODescriptorType >
    _xsd_IDPSSODescriptorType_type_serializer_init (
      L"IDPSSODescriptorType",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    SingleSignOnService (::xercesc::DOMDocument& d,
                         const ::saml2::metadata::EndpointType& s,
                         ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::EndpointType > (
        L"SingleSignOnService",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SingleSignOnService (const ::saml2::metadata::EndpointType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::EndpointType > (
            L"SingleSignOnService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::SingleSignOnService (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    SingleSignOnService (::xercesc::XMLFormatTarget& t,
                         const ::saml2::metadata::EndpointType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::SingleSignOnService (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SingleSignOnService (::xercesc::XMLFormatTarget& t,
                         const ::saml2::metadata::EndpointType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::SingleSignOnService (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SingleSignOnService (::xercesc::XMLFormatTarget& t,
                         const ::saml2::metadata::EndpointType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xercesc::DOMErrorHandler& h,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::SingleSignOnService (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SingleSignOnService (::std::ostream& o,
                         const ::saml2::metadata::EndpointType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::SingleSignOnService (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SingleSignOnService (::std::ostream& o,
                         const ::saml2::metadata::EndpointType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xsd::cxx::xml::error_handler< wchar_t >& h,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::SingleSignOnService (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SingleSignOnService (::std::ostream& o,
                         const ::saml2::metadata::EndpointType& s,
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                         ::xercesc::DOMErrorHandler& h,
                         const ::std::basic_string< wchar_t >& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::SingleSignOnService (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NameIDMappingService (::xercesc::DOMDocument& d,
                          const ::saml2::metadata::EndpointType& s,
                          ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::EndpointType > (
        L"NameIDMappingService",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    NameIDMappingService (const ::saml2::metadata::EndpointType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::EndpointType > (
            L"NameIDMappingService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::NameIDMappingService (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    NameIDMappingService (::xercesc::XMLFormatTarget& t,
                          const ::saml2::metadata::EndpointType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          const ::std::basic_string< wchar_t >& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::NameIDMappingService (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    NameIDMappingService (::xercesc::XMLFormatTarget& t,
                          const ::saml2::metadata::EndpointType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          ::xsd::cxx::xml::error_handler< wchar_t >& h,
                          const ::std::basic_string< wchar_t >& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::NameIDMappingService (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NameIDMappingService (::xercesc::XMLFormatTarget& t,
                          const ::saml2::metadata::EndpointType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          ::xercesc::DOMErrorHandler& h,
                          const ::std::basic_string< wchar_t >& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::NameIDMappingService (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NameIDMappingService (::std::ostream& o,
                          const ::saml2::metadata::EndpointType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          const ::std::basic_string< wchar_t >& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::NameIDMappingService (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    NameIDMappingService (::std::ostream& o,
                          const ::saml2::metadata::EndpointType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          ::xsd::cxx::xml::error_handler< wchar_t >& h,
                          const ::std::basic_string< wchar_t >& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::NameIDMappingService (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    NameIDMappingService (::std::ostream& o,
                          const ::saml2::metadata::EndpointType& s,
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                          ::xercesc::DOMErrorHandler& h,
                          const ::std::basic_string< wchar_t >& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::NameIDMappingService (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AssertionIDRequestService (::xercesc::DOMDocument& d,
                               const ::saml2::metadata::EndpointType& s,
                               ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::EndpointType > (
        L"AssertionIDRequestService",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AssertionIDRequestService (const ::saml2::metadata::EndpointType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::EndpointType > (
            L"AssertionIDRequestService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::AssertionIDRequestService (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    AssertionIDRequestService (::xercesc::XMLFormatTarget& t,
                               const ::saml2::metadata::EndpointType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               const ::std::basic_string< wchar_t >& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AssertionIDRequestService (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AssertionIDRequestService (::xercesc::XMLFormatTarget& t,
                               const ::saml2::metadata::EndpointType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               ::xsd::cxx::xml::error_handler< wchar_t >& h,
                               const ::std::basic_string< wchar_t >& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AssertionIDRequestService (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AssertionIDRequestService (::xercesc::XMLFormatTarget& t,
                               const ::saml2::metadata::EndpointType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               ::xercesc::DOMErrorHandler& h,
                               const ::std::basic_string< wchar_t >& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AssertionIDRequestService (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AssertionIDRequestService (::std::ostream& o,
                               const ::saml2::metadata::EndpointType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               const ::std::basic_string< wchar_t >& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AssertionIDRequestService (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AssertionIDRequestService (::std::ostream& o,
                               const ::saml2::metadata::EndpointType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               ::xsd::cxx::xml::error_handler< wchar_t >& h,
                               const ::std::basic_string< wchar_t >& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AssertionIDRequestService (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AssertionIDRequestService (::std::ostream& o,
                               const ::saml2::metadata::EndpointType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               ::xercesc::DOMErrorHandler& h,
                               const ::std::basic_string< wchar_t >& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AssertionIDRequestService (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeProfile (::xercesc::DOMDocument& d,
                      const ::xml_schema::uri& s,
                      ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::xml_schema::uri > (
        L"AttributeProfile",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeProfile (const ::xml_schema::uri& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::xml_schema::uri > (
            L"AttributeProfile",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::AttributeProfile (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    AttributeProfile (::xercesc::XMLFormatTarget& t,
                      const ::xml_schema::uri& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AttributeProfile (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AttributeProfile (::xercesc::XMLFormatTarget& t,
                      const ::xml_schema::uri& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AttributeProfile (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeProfile (::xercesc::XMLFormatTarget& t,
                      const ::xml_schema::uri& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AttributeProfile (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeProfile (::std::ostream& o,
                      const ::xml_schema::uri& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AttributeProfile (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AttributeProfile (::std::ostream& o,
                      const ::xml_schema::uri& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AttributeProfile (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeProfile (::std::ostream& o,
                      const ::xml_schema::uri& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AttributeProfile (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SPSSODescriptor (::xercesc::DOMDocument& d,
                     const ::saml2::metadata::SPSSODescriptorType& s,
                     ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::SPSSODescriptorType > (
        L"SPSSODescriptor",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SPSSODescriptor (const ::saml2::metadata::SPSSODescriptorType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::SPSSODescriptorType > (
            L"SPSSODescriptor",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::SPSSODescriptor (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    SPSSODescriptor (::xercesc::XMLFormatTarget& t,
                     const ::saml2::metadata::SPSSODescriptorType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::SPSSODescriptor (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SPSSODescriptor (::xercesc::XMLFormatTarget& t,
                     const ::saml2::metadata::SPSSODescriptorType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::SPSSODescriptor (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SPSSODescriptor (::xercesc::XMLFormatTarget& t,
                     const ::saml2::metadata::SPSSODescriptorType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::SPSSODescriptor (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SPSSODescriptor (::std::ostream& o,
                     const ::saml2::metadata::SPSSODescriptorType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::SPSSODescriptor (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SPSSODescriptor (::std::ostream& o,
                     const ::saml2::metadata::SPSSODescriptorType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::SPSSODescriptor (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SPSSODescriptor (::std::ostream& o,
                     const ::saml2::metadata::SPSSODescriptorType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::SPSSODescriptor (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const SPSSODescriptorType& i)
    {
      e << static_cast< const ::saml2::metadata::SSODescriptorType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (SPSSODescriptorType::AssertionConsumerService::const_iterator
             b (i.AssertionConsumerService ().begin ()), n (i.AssertionConsumerService ().end ());
             b != n; ++b)
        {
          tsm.serialize< SPSSODescriptorType::AssertionConsumerService::type > (
            L"AssertionConsumerService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (SPSSODescriptorType::AttributeConsumingService::const_iterator
             b (i.AttributeConsumingService ().begin ()), n (i.AttributeConsumingService ().end ());
             b != n; ++b)
        {
          tsm.serialize< SPSSODescriptorType::AttributeConsumingService::type > (
            L"AttributeConsumingService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      if (i.AuthnRequestsSigned ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"AuthnRequestsSigned",
          e);

        a.dom_attribute () << *i.AuthnRequestsSigned ();
      }

      if (i.WantAssertionsSigned ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"WantAssertionsSigned",
          e);

        a.dom_attribute () << *i.WantAssertionsSigned ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SPSSODescriptorType >
    _xsd_SPSSODescriptorType_type_serializer_init (
      L"SPSSODescriptorType",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    AssertionConsumerService (::xercesc::DOMDocument& d,
                              const ::saml2::metadata::IndexedEndpointType& s,
                              ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::IndexedEndpointType > (
        L"AssertionConsumerService",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AssertionConsumerService (const ::saml2::metadata::IndexedEndpointType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::IndexedEndpointType > (
            L"AssertionConsumerService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::AssertionConsumerService (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    AssertionConsumerService (::xercesc::XMLFormatTarget& t,
                              const ::saml2::metadata::IndexedEndpointType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              const ::std::basic_string< wchar_t >& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AssertionConsumerService (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AssertionConsumerService (::xercesc::XMLFormatTarget& t,
                              const ::saml2::metadata::IndexedEndpointType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              ::xsd::cxx::xml::error_handler< wchar_t >& h,
                              const ::std::basic_string< wchar_t >& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AssertionConsumerService (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AssertionConsumerService (::xercesc::XMLFormatTarget& t,
                              const ::saml2::metadata::IndexedEndpointType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              ::xercesc::DOMErrorHandler& h,
                              const ::std::basic_string< wchar_t >& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AssertionConsumerService (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AssertionConsumerService (::std::ostream& o,
                              const ::saml2::metadata::IndexedEndpointType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              const ::std::basic_string< wchar_t >& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AssertionConsumerService (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AssertionConsumerService (::std::ostream& o,
                              const ::saml2::metadata::IndexedEndpointType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              ::xsd::cxx::xml::error_handler< wchar_t >& h,
                              const ::std::basic_string< wchar_t >& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AssertionConsumerService (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AssertionConsumerService (::std::ostream& o,
                              const ::saml2::metadata::IndexedEndpointType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              ::xercesc::DOMErrorHandler& h,
                              const ::std::basic_string< wchar_t >& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AssertionConsumerService (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeConsumingService (::xercesc::DOMDocument& d,
                               const ::saml2::metadata::AttributeConsumingServiceType& s,
                               ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::AttributeConsumingServiceType > (
        L"AttributeConsumingService",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeConsumingService (const ::saml2::metadata::AttributeConsumingServiceType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::AttributeConsumingServiceType > (
            L"AttributeConsumingService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::AttributeConsumingService (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    AttributeConsumingService (::xercesc::XMLFormatTarget& t,
                               const ::saml2::metadata::AttributeConsumingServiceType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               const ::std::basic_string< wchar_t >& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AttributeConsumingService (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AttributeConsumingService (::xercesc::XMLFormatTarget& t,
                               const ::saml2::metadata::AttributeConsumingServiceType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               ::xsd::cxx::xml::error_handler< wchar_t >& h,
                               const ::std::basic_string< wchar_t >& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AttributeConsumingService (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeConsumingService (::xercesc::XMLFormatTarget& t,
                               const ::saml2::metadata::AttributeConsumingServiceType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               ::xercesc::DOMErrorHandler& h,
                               const ::std::basic_string< wchar_t >& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AttributeConsumingService (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeConsumingService (::std::ostream& o,
                               const ::saml2::metadata::AttributeConsumingServiceType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               const ::std::basic_string< wchar_t >& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AttributeConsumingService (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AttributeConsumingService (::std::ostream& o,
                               const ::saml2::metadata::AttributeConsumingServiceType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               ::xsd::cxx::xml::error_handler< wchar_t >& h,
                               const ::std::basic_string< wchar_t >& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AttributeConsumingService (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeConsumingService (::std::ostream& o,
                               const ::saml2::metadata::AttributeConsumingServiceType& s,
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                               ::xercesc::DOMErrorHandler& h,
                               const ::std::basic_string< wchar_t >& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AttributeConsumingService (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const AttributeConsumingServiceType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (AttributeConsumingServiceType::ServiceName::const_iterator
             b (i.ServiceName ().begin ()), n (i.ServiceName ().end ());
             b != n; ++b)
        {
          tsm.serialize< AttributeConsumingServiceType::ServiceName::type > (
            L"ServiceName",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (AttributeConsumingServiceType::ServiceDescription::const_iterator
             b (i.ServiceDescription ().begin ()), n (i.ServiceDescription ().end ());
             b != n; ++b)
        {
          tsm.serialize< AttributeConsumingServiceType::ServiceDescription::type > (
            L"ServiceDescription",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (AttributeConsumingServiceType::RequestedAttribute::const_iterator
             b (i.RequestedAttribute ().begin ()), n (i.RequestedAttribute ().end ());
             b != n; ++b)
        {
          tsm.serialize< AttributeConsumingServiceType::RequestedAttribute::type > (
            L"RequestedAttribute",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"index",
          e);

        a.dom_attribute () << i.index ();
      }

      if (i.isDefault ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"isDefault",
          e);

        a.dom_attribute () << *i.isDefault ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AttributeConsumingServiceType >
    _xsd_AttributeConsumingServiceType_type_serializer_init (
      L"AttributeConsumingServiceType",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    ServiceName (::xercesc::DOMDocument& d,
                 const ::saml2::metadata::localizedNameType& s,
                 ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::localizedNameType > (
        L"ServiceName",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ServiceName (const ::saml2::metadata::localizedNameType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::localizedNameType > (
            L"ServiceName",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::ServiceName (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    ServiceName (::xercesc::XMLFormatTarget& t,
                 const ::saml2::metadata::localizedNameType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ServiceName (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ServiceName (::xercesc::XMLFormatTarget& t,
                 const ::saml2::metadata::localizedNameType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ServiceName (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ServiceName (::xercesc::XMLFormatTarget& t,
                 const ::saml2::metadata::localizedNameType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ServiceName (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ServiceName (::std::ostream& o,
                 const ::saml2::metadata::localizedNameType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ServiceName (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ServiceName (::std::ostream& o,
                 const ::saml2::metadata::localizedNameType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xsd::cxx::xml::error_handler< wchar_t >& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ServiceName (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ServiceName (::std::ostream& o,
                 const ::saml2::metadata::localizedNameType& s,
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::basic_string< wchar_t >& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ServiceName (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ServiceDescription (::xercesc::DOMDocument& d,
                        const ::saml2::metadata::localizedNameType& s,
                        ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::localizedNameType > (
        L"ServiceDescription",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ServiceDescription (const ::saml2::metadata::localizedNameType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::localizedNameType > (
            L"ServiceDescription",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::ServiceDescription (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    ServiceDescription (::xercesc::XMLFormatTarget& t,
                        const ::saml2::metadata::localizedNameType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ServiceDescription (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ServiceDescription (::xercesc::XMLFormatTarget& t,
                        const ::saml2::metadata::localizedNameType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ServiceDescription (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ServiceDescription (::xercesc::XMLFormatTarget& t,
                        const ::saml2::metadata::localizedNameType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xercesc::DOMErrorHandler& h,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ServiceDescription (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ServiceDescription (::std::ostream& o,
                        const ::saml2::metadata::localizedNameType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ServiceDescription (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ServiceDescription (::std::ostream& o,
                        const ::saml2::metadata::localizedNameType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ServiceDescription (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ServiceDescription (::std::ostream& o,
                        const ::saml2::metadata::localizedNameType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xercesc::DOMErrorHandler& h,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::ServiceDescription (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RequestedAttribute (::xercesc::DOMDocument& d,
                        const ::saml2::metadata::RequestedAttributeType& s,
                        ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::RequestedAttributeType > (
        L"RequestedAttribute",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    RequestedAttribute (const ::saml2::metadata::RequestedAttributeType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::RequestedAttributeType > (
            L"RequestedAttribute",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::RequestedAttribute (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    RequestedAttribute (::xercesc::XMLFormatTarget& t,
                        const ::saml2::metadata::RequestedAttributeType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::RequestedAttribute (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    RequestedAttribute (::xercesc::XMLFormatTarget& t,
                        const ::saml2::metadata::RequestedAttributeType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::RequestedAttribute (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RequestedAttribute (::xercesc::XMLFormatTarget& t,
                        const ::saml2::metadata::RequestedAttributeType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xercesc::DOMErrorHandler& h,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::RequestedAttribute (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RequestedAttribute (::std::ostream& o,
                        const ::saml2::metadata::RequestedAttributeType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::RequestedAttribute (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    RequestedAttribute (::std::ostream& o,
                        const ::saml2::metadata::RequestedAttributeType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xsd::cxx::xml::error_handler< wchar_t >& h,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::RequestedAttribute (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RequestedAttribute (::std::ostream& o,
                        const ::saml2::metadata::RequestedAttributeType& s,
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                        ::xercesc::DOMErrorHandler& h,
                        const ::std::basic_string< wchar_t >& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::RequestedAttribute (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const RequestedAttributeType& i)
    {
      e << static_cast< const ::saml2::assertion::AttributeType& > (i);

      if (i.isRequired ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"isRequired",
          e);

        a.dom_attribute () << *i.isRequired ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, RequestedAttributeType >
    _xsd_RequestedAttributeType_type_serializer_init (
      L"RequestedAttributeType",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    AuthnAuthorityDescriptor (::xercesc::DOMDocument& d,
                              const ::saml2::metadata::AuthnAuthorityDescriptorType& s,
                              ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::AuthnAuthorityDescriptorType > (
        L"AuthnAuthorityDescriptor",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthnAuthorityDescriptor (const ::saml2::metadata::AuthnAuthorityDescriptorType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::AuthnAuthorityDescriptorType > (
            L"AuthnAuthorityDescriptor",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::AuthnAuthorityDescriptor (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    AuthnAuthorityDescriptor (::xercesc::XMLFormatTarget& t,
                              const ::saml2::metadata::AuthnAuthorityDescriptorType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              const ::std::basic_string< wchar_t >& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AuthnAuthorityDescriptor (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AuthnAuthorityDescriptor (::xercesc::XMLFormatTarget& t,
                              const ::saml2::metadata::AuthnAuthorityDescriptorType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              ::xsd::cxx::xml::error_handler< wchar_t >& h,
                              const ::std::basic_string< wchar_t >& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AuthnAuthorityDescriptor (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AuthnAuthorityDescriptor (::xercesc::XMLFormatTarget& t,
                              const ::saml2::metadata::AuthnAuthorityDescriptorType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              ::xercesc::DOMErrorHandler& h,
                              const ::std::basic_string< wchar_t >& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AuthnAuthorityDescriptor (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AuthnAuthorityDescriptor (::std::ostream& o,
                              const ::saml2::metadata::AuthnAuthorityDescriptorType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              const ::std::basic_string< wchar_t >& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AuthnAuthorityDescriptor (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AuthnAuthorityDescriptor (::std::ostream& o,
                              const ::saml2::metadata::AuthnAuthorityDescriptorType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              ::xsd::cxx::xml::error_handler< wchar_t >& h,
                              const ::std::basic_string< wchar_t >& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AuthnAuthorityDescriptor (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AuthnAuthorityDescriptor (::std::ostream& o,
                              const ::saml2::metadata::AuthnAuthorityDescriptorType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              ::xercesc::DOMErrorHandler& h,
                              const ::std::basic_string< wchar_t >& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AuthnAuthorityDescriptor (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const AuthnAuthorityDescriptorType& i)
    {
      e << static_cast< const ::saml2::metadata::RoleDescriptorType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (AuthnAuthorityDescriptorType::AuthnQueryService::const_iterator
             b (i.AuthnQueryService ().begin ()), n (i.AuthnQueryService ().end ());
             b != n; ++b)
        {
          tsm.serialize< AuthnAuthorityDescriptorType::AuthnQueryService::type > (
            L"AuthnQueryService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (AuthnAuthorityDescriptorType::AssertionIDRequestService::const_iterator
             b (i.AssertionIDRequestService ().begin ()), n (i.AssertionIDRequestService ().end ());
             b != n; ++b)
        {
          tsm.serialize< AuthnAuthorityDescriptorType::AssertionIDRequestService::type > (
            L"AssertionIDRequestService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (AuthnAuthorityDescriptorType::NameIDFormat::const_iterator
             b (i.NameIDFormat ().begin ()), n (i.NameIDFormat ().end ());
             b != n; ++b)
        {
          tsm.serialize< AuthnAuthorityDescriptorType::NameIDFormat::type > (
            L"NameIDFormat",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AuthnAuthorityDescriptorType >
    _xsd_AuthnAuthorityDescriptorType_type_serializer_init (
      L"AuthnAuthorityDescriptorType",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    AuthnQueryService (::xercesc::DOMDocument& d,
                       const ::saml2::metadata::EndpointType& s,
                       ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::EndpointType > (
        L"AuthnQueryService",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthnQueryService (const ::saml2::metadata::EndpointType& s,
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                       ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::EndpointType > (
            L"AuthnQueryService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::AuthnQueryService (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    AuthnQueryService (::xercesc::XMLFormatTarget& t,
                       const ::saml2::metadata::EndpointType& s,
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                       const ::std::basic_string< wchar_t >& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AuthnQueryService (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AuthnQueryService (::xercesc::XMLFormatTarget& t,
                       const ::saml2::metadata::EndpointType& s,
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                       ::xsd::cxx::xml::error_handler< wchar_t >& h,
                       const ::std::basic_string< wchar_t >& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AuthnQueryService (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AuthnQueryService (::xercesc::XMLFormatTarget& t,
                       const ::saml2::metadata::EndpointType& s,
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                       ::xercesc::DOMErrorHandler& h,
                       const ::std::basic_string< wchar_t >& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AuthnQueryService (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AuthnQueryService (::std::ostream& o,
                       const ::saml2::metadata::EndpointType& s,
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                       const ::std::basic_string< wchar_t >& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AuthnQueryService (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AuthnQueryService (::std::ostream& o,
                       const ::saml2::metadata::EndpointType& s,
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                       ::xsd::cxx::xml::error_handler< wchar_t >& h,
                       const ::std::basic_string< wchar_t >& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AuthnQueryService (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AuthnQueryService (::std::ostream& o,
                       const ::saml2::metadata::EndpointType& s,
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                       ::xercesc::DOMErrorHandler& h,
                       const ::std::basic_string< wchar_t >& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AuthnQueryService (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    PDPDescriptor (::xercesc::DOMDocument& d,
                   const ::saml2::metadata::PDPDescriptorType& s,
                   ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::PDPDescriptorType > (
        L"PDPDescriptor",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    PDPDescriptor (const ::saml2::metadata::PDPDescriptorType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::PDPDescriptorType > (
            L"PDPDescriptor",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::PDPDescriptor (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    PDPDescriptor (::xercesc::XMLFormatTarget& t,
                   const ::saml2::metadata::PDPDescriptorType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::PDPDescriptor (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    PDPDescriptor (::xercesc::XMLFormatTarget& t,
                   const ::saml2::metadata::PDPDescriptorType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::PDPDescriptor (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    PDPDescriptor (::xercesc::XMLFormatTarget& t,
                   const ::saml2::metadata::PDPDescriptorType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xercesc::DOMErrorHandler& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::PDPDescriptor (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    PDPDescriptor (::std::ostream& o,
                   const ::saml2::metadata::PDPDescriptorType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::PDPDescriptor (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    PDPDescriptor (::std::ostream& o,
                   const ::saml2::metadata::PDPDescriptorType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::PDPDescriptor (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    PDPDescriptor (::std::ostream& o,
                   const ::saml2::metadata::PDPDescriptorType& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xercesc::DOMErrorHandler& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::PDPDescriptor (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const PDPDescriptorType& i)
    {
      e << static_cast< const ::saml2::metadata::RoleDescriptorType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (PDPDescriptorType::AuthzService::const_iterator
             b (i.AuthzService ().begin ()), n (i.AuthzService ().end ());
             b != n; ++b)
        {
          tsm.serialize< PDPDescriptorType::AuthzService::type > (
            L"AuthzService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (PDPDescriptorType::AssertionIDRequestService::const_iterator
             b (i.AssertionIDRequestService ().begin ()), n (i.AssertionIDRequestService ().end ());
             b != n; ++b)
        {
          tsm.serialize< PDPDescriptorType::AssertionIDRequestService::type > (
            L"AssertionIDRequestService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (PDPDescriptorType::NameIDFormat::const_iterator
             b (i.NameIDFormat ().begin ()), n (i.NameIDFormat ().end ());
             b != n; ++b)
        {
          tsm.serialize< PDPDescriptorType::NameIDFormat::type > (
            L"NameIDFormat",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, PDPDescriptorType >
    _xsd_PDPDescriptorType_type_serializer_init (
      L"PDPDescriptorType",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    AuthzService (::xercesc::DOMDocument& d,
                  const ::saml2::metadata::EndpointType& s,
                  ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::EndpointType > (
        L"AuthzService",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthzService (const ::saml2::metadata::EndpointType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::EndpointType > (
            L"AuthzService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::AuthzService (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    AuthzService (::xercesc::XMLFormatTarget& t,
                  const ::saml2::metadata::EndpointType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AuthzService (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AuthzService (::xercesc::XMLFormatTarget& t,
                  const ::saml2::metadata::EndpointType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AuthzService (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AuthzService (::xercesc::XMLFormatTarget& t,
                  const ::saml2::metadata::EndpointType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AuthzService (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AuthzService (::std::ostream& o,
                  const ::saml2::metadata::EndpointType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AuthzService (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AuthzService (::std::ostream& o,
                  const ::saml2::metadata::EndpointType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AuthzService (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AuthzService (::std::ostream& o,
                  const ::saml2::metadata::EndpointType& s,
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::basic_string< wchar_t >& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AuthzService (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeAuthorityDescriptor (::xercesc::DOMDocument& d,
                                  const ::saml2::metadata::AttributeAuthorityDescriptorType& s,
                                  ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::AttributeAuthorityDescriptorType > (
        L"AttributeAuthorityDescriptor",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeAuthorityDescriptor (const ::saml2::metadata::AttributeAuthorityDescriptorType& s,
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                  ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::AttributeAuthorityDescriptorType > (
            L"AttributeAuthorityDescriptor",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::AttributeAuthorityDescriptor (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    AttributeAuthorityDescriptor (::xercesc::XMLFormatTarget& t,
                                  const ::saml2::metadata::AttributeAuthorityDescriptorType& s,
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                  const ::std::basic_string< wchar_t >& e,
                                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AttributeAuthorityDescriptor (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AttributeAuthorityDescriptor (::xercesc::XMLFormatTarget& t,
                                  const ::saml2::metadata::AttributeAuthorityDescriptorType& s,
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                  const ::std::basic_string< wchar_t >& e,
                                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AttributeAuthorityDescriptor (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeAuthorityDescriptor (::xercesc::XMLFormatTarget& t,
                                  const ::saml2::metadata::AttributeAuthorityDescriptorType& s,
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                  ::xercesc::DOMErrorHandler& h,
                                  const ::std::basic_string< wchar_t >& e,
                                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AttributeAuthorityDescriptor (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeAuthorityDescriptor (::std::ostream& o,
                                  const ::saml2::metadata::AttributeAuthorityDescriptorType& s,
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                  const ::std::basic_string< wchar_t >& e,
                                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AttributeAuthorityDescriptor (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AttributeAuthorityDescriptor (::std::ostream& o,
                                  const ::saml2::metadata::AttributeAuthorityDescriptorType& s,
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                  ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                  const ::std::basic_string< wchar_t >& e,
                                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AttributeAuthorityDescriptor (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeAuthorityDescriptor (::std::ostream& o,
                                  const ::saml2::metadata::AttributeAuthorityDescriptorType& s,
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                  ::xercesc::DOMErrorHandler& h,
                                  const ::std::basic_string< wchar_t >& e,
                                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AttributeAuthorityDescriptor (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const AttributeAuthorityDescriptorType& i)
    {
      e << static_cast< const ::saml2::metadata::RoleDescriptorType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (AttributeAuthorityDescriptorType::AttributeService::const_iterator
             b (i.AttributeService ().begin ()), n (i.AttributeService ().end ());
             b != n; ++b)
        {
          tsm.serialize< AttributeAuthorityDescriptorType::AttributeService::type > (
            L"AttributeService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (AttributeAuthorityDescriptorType::AssertionIDRequestService::const_iterator
             b (i.AssertionIDRequestService ().begin ()), n (i.AssertionIDRequestService ().end ());
             b != n; ++b)
        {
          tsm.serialize< AttributeAuthorityDescriptorType::AssertionIDRequestService::type > (
            L"AssertionIDRequestService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (AttributeAuthorityDescriptorType::NameIDFormat::const_iterator
             b (i.NameIDFormat ().begin ()), n (i.NameIDFormat ().end ());
             b != n; ++b)
        {
          tsm.serialize< AttributeAuthorityDescriptorType::NameIDFormat::type > (
            L"NameIDFormat",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (AttributeAuthorityDescriptorType::AttributeProfile::const_iterator
             b (i.AttributeProfile ().begin ()), n (i.AttributeProfile ().end ());
             b != n; ++b)
        {
          tsm.serialize< AttributeAuthorityDescriptorType::AttributeProfile::type > (
            L"AttributeProfile",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (AttributeAuthorityDescriptorType::Attribute::const_iterator
             b (i.Attribute ().begin ()), n (i.Attribute ().end ());
             b != n; ++b)
        {
          tsm.serialize< AttributeAuthorityDescriptorType::Attribute::type > (
            L"Attribute",
            L"urn:oasis:names:tc:SAML:2.0:assertion",
            true,
            true,
            e,
            *b);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AttributeAuthorityDescriptorType >
    _xsd_AttributeAuthorityDescriptorType_type_serializer_init (
      L"AttributeAuthorityDescriptorType",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    AttributeService (::xercesc::DOMDocument& d,
                      const ::saml2::metadata::EndpointType& s,
                      ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::EndpointType > (
        L"AttributeService",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeService (const ::saml2::metadata::EndpointType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::EndpointType > (
            L"AttributeService",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::AttributeService (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    AttributeService (::xercesc::XMLFormatTarget& t,
                      const ::saml2::metadata::EndpointType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AttributeService (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AttributeService (::xercesc::XMLFormatTarget& t,
                      const ::saml2::metadata::EndpointType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AttributeService (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeService (::xercesc::XMLFormatTarget& t,
                      const ::saml2::metadata::EndpointType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AttributeService (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeService (::std::ostream& o,
                      const ::saml2::metadata::EndpointType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AttributeService (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AttributeService (::std::ostream& o,
                      const ::saml2::metadata::EndpointType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xsd::cxx::xml::error_handler< wchar_t >& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AttributeService (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeService (::std::ostream& o,
                      const ::saml2::metadata::EndpointType& s,
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::basic_string< wchar_t >& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AttributeService (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AffiliationDescriptor (::xercesc::DOMDocument& d,
                           const ::saml2::metadata::AffiliationDescriptorType& s,
                           ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::AffiliationDescriptorType > (
        L"AffiliationDescriptor",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AffiliationDescriptor (const ::saml2::metadata::AffiliationDescriptorType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::AffiliationDescriptorType > (
            L"AffiliationDescriptor",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::AffiliationDescriptor (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    AffiliationDescriptor (::xercesc::XMLFormatTarget& t,
                           const ::saml2::metadata::AffiliationDescriptorType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           const ::std::basic_string< wchar_t >& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AffiliationDescriptor (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AffiliationDescriptor (::xercesc::XMLFormatTarget& t,
                           const ::saml2::metadata::AffiliationDescriptorType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           ::xsd::cxx::xml::error_handler< wchar_t >& h,
                           const ::std::basic_string< wchar_t >& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AffiliationDescriptor (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AffiliationDescriptor (::xercesc::XMLFormatTarget& t,
                           const ::saml2::metadata::AffiliationDescriptorType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           ::xercesc::DOMErrorHandler& h,
                           const ::std::basic_string< wchar_t >& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AffiliationDescriptor (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AffiliationDescriptor (::std::ostream& o,
                           const ::saml2::metadata::AffiliationDescriptorType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           const ::std::basic_string< wchar_t >& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AffiliationDescriptor (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AffiliationDescriptor (::std::ostream& o,
                           const ::saml2::metadata::AffiliationDescriptorType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           ::xsd::cxx::xml::error_handler< wchar_t >& h,
                           const ::std::basic_string< wchar_t >& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AffiliationDescriptor (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AffiliationDescriptor (::std::ostream& o,
                           const ::saml2::metadata::AffiliationDescriptorType& s,
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                           ::xercesc::DOMErrorHandler& h,
                           const ::std::basic_string< wchar_t >& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AffiliationDescriptor (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const AffiliationDescriptorType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Signature ())
        {
          tsm.serialize< AffiliationDescriptorType::Signature::type > (
            L"Signature",
            L"http://www.w3.org/2000/09/xmldsig#",
            true,
            true,
            e,
            *i.Signature ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Extensions ())
        {
          tsm.serialize< AffiliationDescriptorType::Extensions::type > (
            L"Extensions",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *i.Extensions ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (AffiliationDescriptorType::AffiliateMember::const_iterator
             b (i.AffiliateMember ().begin ()), n (i.AffiliateMember ().end ());
             b != n; ++b)
        {
          tsm.serialize< AffiliationDescriptorType::AffiliateMember::type > (
            L"AffiliateMember",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (AffiliationDescriptorType::KeyDescriptor::const_iterator
             b (i.KeyDescriptor ().begin ()), n (i.KeyDescriptor ().end ());
             b != n; ++b)
        {
          tsm.serialize< AffiliationDescriptorType::KeyDescriptor::type > (
            L"KeyDescriptor",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            true,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"affiliationOwnerID",
          e);

        a.dom_attribute () << i.affiliationOwnerID ();
      }

      if (i.validUntil ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"validUntil",
          e);

        a.dom_attribute () << *i.validUntil ();
      }

      if (i.cacheDuration ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"cacheDuration",
          e);

        a.dom_attribute () << *i.cacheDuration ();
      }

      if (i.ID ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"ID",
          e);

        a.dom_attribute () << *i.ID ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AffiliationDescriptorType >
    _xsd_AffiliationDescriptorType_type_serializer_init (
      L"AffiliationDescriptorType",
      L"urn:oasis:names:tc:SAML:2.0:metadata");


    void
    AffiliateMember (::xercesc::DOMDocument& d,
                     const ::saml2::metadata::entityIDType& s,
                     ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::saml2::metadata::entityIDType > (
        L"AffiliateMember",
        L"urn:oasis:names:tc:SAML:2.0:metadata",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AffiliateMember (const ::saml2::metadata::entityIDType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::saml2::metadata::entityIDType > (
            L"AffiliateMember",
            L"urn:oasis:names:tc:SAML:2.0:metadata",
            m,
            s,
            f));
        ::saml2::metadata::AffiliateMember (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    AffiliateMember (::xercesc::XMLFormatTarget& t,
                     const ::saml2::metadata::entityIDType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AffiliateMember (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AffiliateMember (::xercesc::XMLFormatTarget& t,
                     const ::saml2::metadata::entityIDType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AffiliateMember (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AffiliateMember (::xercesc::XMLFormatTarget& t,
                     const ::saml2::metadata::entityIDType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AffiliateMember (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AffiliateMember (::std::ostream& o,
                     const ::saml2::metadata::entityIDType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AffiliateMember (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AffiliateMember (::std::ostream& o,
                     const ::saml2::metadata::entityIDType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xsd::cxx::xml::error_handler< wchar_t >& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AffiliateMember (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AffiliateMember (::std::ostream& o,
                     const ::saml2::metadata::entityIDType& s,
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::basic_string< wchar_t >& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::saml2::metadata::AffiliateMember (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

