// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

#ifndef SAML_SCHEMA_PROTOCOL_2_0_HXX
#define SAML_SCHEMA_PROTOCOL_2_0_HXX

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 2030100L)
#error XSD runtime version mismatch
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include "xsd/xml-schema.hxx"

// Forward declarations.
//
namespace saml2
{
  namespace protocol
  {
    class RequestAbstractType;
    class ExtensionsType;
    class StatusResponseType;
    class StatusType;
    class StatusCodeType;
    class StatusDetailType;
    class AssertionIDRequestType;
    class SubjectQueryAbstractType;
    class AuthnQueryType;
    class RequestedAuthnContextType;
    class AuthnContextComparisonType;
    class AttributeQueryType;
    class AuthzDecisionQueryType;
    class AuthnRequestType;
    class NameIDPolicyType;
    class ScopingType;
    class IDPListType;
    class IDPEntryType;
    class ResponseType;
    class ArtifactResolveType;
    class ArtifactResponseType;
    class ManageNameIDRequestType;
    class TerminateType;
    class LogoutRequestType;
    class NameIDMappingRequestType;
    class NameIDMappingResponseType;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include "saml-schema-assertion-2.0.hxx"

#include "xmldsig-core-schema.hxx"

namespace saml2
{
  namespace protocol
  {
    class RequestAbstractType: public ::xml_schema::type
    {
      public:

      struct _xsd_RequestAbstractType
      {
        typedef ::xml_schema::type base_;
      };

      // Issuer
      // 
      public:
      struct Issuer
      {
        typedef ::saml2::assertion::NameIDType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Issuer::container&
      Issuer () const;

      Issuer::container&
      Issuer ();

      void
      Issuer (const Issuer::type&);

      void
      Issuer (const Issuer::container&);

      void
      Issuer (::std::auto_ptr< Issuer::type >);

      // Signature
      // 
      public:
      struct Signature
      {
        typedef ::w3::xmldsig::SignatureType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Signature::container&
      Signature () const;

      Signature::container&
      Signature ();

      void
      Signature (const Signature::type&);

      void
      Signature (const Signature::container&);

      void
      Signature (::std::auto_ptr< Signature::type >);

      // Extensions
      // 
      public:
      struct Extensions
      {
        typedef ::saml2::protocol::ExtensionsType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Extensions::container&
      Extensions () const;

      Extensions::container&
      Extensions ();

      void
      Extensions (const Extensions::type&);

      void
      Extensions (const Extensions::container&);

      void
      Extensions (::std::auto_ptr< Extensions::type >);

      // ID
      // 
      public:
      struct ID
      {
        typedef ::xml_schema::id type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const ID::type&
      ID () const;

      ID::type&
      ID ();

      void
      ID (const ID::type&);

      void
      ID (::std::auto_ptr< ID::type >);

      // Version
      // 
      public:
      struct Version
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Version::type&
      Version () const;

      Version::type&
      Version ();

      void
      Version (const Version::type&);

      void
      Version (::std::auto_ptr< Version::type >);

      // IssueInstant
      // 
      public:
      struct IssueInstant
      {
        typedef ::xml_schema::date_time type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const IssueInstant::type&
      IssueInstant () const;

      IssueInstant::type&
      IssueInstant ();

      void
      IssueInstant (const IssueInstant::type&);

      void
      IssueInstant (::std::auto_ptr< IssueInstant::type >);

      // Destination
      // 
      public:
      struct Destination
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Destination::container&
      Destination () const;

      Destination::container&
      Destination ();

      void
      Destination (const Destination::type&);

      void
      Destination (const Destination::container&);

      void
      Destination (::std::auto_ptr< Destination::type >);

      // Consent
      // 
      public:
      struct Consent
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Consent::container&
      Consent () const;

      Consent::container&
      Consent ();

      void
      Consent (const Consent::type&);

      void
      Consent (const Consent::container&);

      void
      Consent (::std::auto_ptr< Consent::type >);

      // Constructors.
      //
      public:
      RequestAbstractType ();

      RequestAbstractType (const ID::type&,
                           const Version::type&,
                           const IssueInstant::type&);

      RequestAbstractType (const ::xercesc::DOMElement&,
                           ::xml_schema::flags = 0,
                           ::xml_schema::type* = 0);

      RequestAbstractType (const RequestAbstractType&,
                           ::xml_schema::flags = 0,
                           ::xml_schema::type* = 0);

      virtual RequestAbstractType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< Issuer::type > _xsd_Issuer_;
      ::xsd::cxx::tree::optional< Signature::type > _xsd_Signature_;
      ::xsd::cxx::tree::optional< Extensions::type > _xsd_Extensions_;
      ::xsd::cxx::tree::one< ID::type > _xsd_ID_;
      ::xsd::cxx::tree::one< Version::type > _xsd_Version_;
      ::xsd::cxx::tree::one< IssueInstant::type > _xsd_IssueInstant_;
      ::xsd::cxx::tree::optional< Destination::type > _xsd_Destination_;
      ::xsd::cxx::tree::optional< Consent::type > _xsd_Consent_;
    };

    class ExtensionsType: public ::xml_schema::type
    {
      public:

      struct _xsd_ExtensionsType
      {
        typedef ::xml_schema::type base_;
      };

      // Constructors.
      //
      public:
      ExtensionsType ();

      ExtensionsType (const ::xercesc::DOMElement&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      ExtensionsType (const ::xercesc::DOMAttr&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      ExtensionsType (const ::std::basic_string< wchar_t >&,
                      const ::xercesc::DOMElement*,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      ExtensionsType (const ExtensionsType&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      virtual ExtensionsType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;
    };

    class StatusResponseType: public ::xml_schema::type
    {
      public:

      struct _xsd_StatusResponseType
      {
        typedef ::xml_schema::type base_;
      };

      // Issuer
      // 
      public:
      struct Issuer
      {
        typedef ::saml2::assertion::NameIDType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Issuer::container&
      Issuer () const;

      Issuer::container&
      Issuer ();

      void
      Issuer (const Issuer::type&);

      void
      Issuer (const Issuer::container&);

      void
      Issuer (::std::auto_ptr< Issuer::type >);

      // Signature
      // 
      public:
      struct Signature
      {
        typedef ::w3::xmldsig::SignatureType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Signature::container&
      Signature () const;

      Signature::container&
      Signature ();

      void
      Signature (const Signature::type&);

      void
      Signature (const Signature::container&);

      void
      Signature (::std::auto_ptr< Signature::type >);

      // Extensions
      // 
      public:
      struct Extensions
      {
        typedef ::saml2::protocol::ExtensionsType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Extensions::container&
      Extensions () const;

      Extensions::container&
      Extensions ();

      void
      Extensions (const Extensions::type&);

      void
      Extensions (const Extensions::container&);

      void
      Extensions (::std::auto_ptr< Extensions::type >);

      // Status
      // 
      public:
      struct Status
      {
        typedef ::saml2::protocol::StatusType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Status::type&
      Status () const;

      Status::type&
      Status ();

      void
      Status (const Status::type&);

      void
      Status (::std::auto_ptr< Status::type >);

      // ID
      // 
      public:
      struct ID
      {
        typedef ::xml_schema::id type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const ID::type&
      ID () const;

      ID::type&
      ID ();

      void
      ID (const ID::type&);

      void
      ID (::std::auto_ptr< ID::type >);

      // InResponseTo
      // 
      public:
      struct InResponseTo
      {
        typedef ::xml_schema::ncname type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const InResponseTo::container&
      InResponseTo () const;

      InResponseTo::container&
      InResponseTo ();

      void
      InResponseTo (const InResponseTo::type&);

      void
      InResponseTo (const InResponseTo::container&);

      void
      InResponseTo (::std::auto_ptr< InResponseTo::type >);

      // Version
      // 
      public:
      struct Version
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Version::type&
      Version () const;

      Version::type&
      Version ();

      void
      Version (const Version::type&);

      void
      Version (::std::auto_ptr< Version::type >);

      // IssueInstant
      // 
      public:
      struct IssueInstant
      {
        typedef ::xml_schema::date_time type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const IssueInstant::type&
      IssueInstant () const;

      IssueInstant::type&
      IssueInstant ();

      void
      IssueInstant (const IssueInstant::type&);

      void
      IssueInstant (::std::auto_ptr< IssueInstant::type >);

      // Destination
      // 
      public:
      struct Destination
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Destination::container&
      Destination () const;

      Destination::container&
      Destination ();

      void
      Destination (const Destination::type&);

      void
      Destination (const Destination::container&);

      void
      Destination (::std::auto_ptr< Destination::type >);

      // Consent
      // 
      public:
      struct Consent
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Consent::container&
      Consent () const;

      Consent::container&
      Consent ();

      void
      Consent (const Consent::type&);

      void
      Consent (const Consent::container&);

      void
      Consent (::std::auto_ptr< Consent::type >);

      // Constructors.
      //
      public:
      StatusResponseType ();

      StatusResponseType (const Status::type&,
                          const ID::type&,
                          const Version::type&,
                          const IssueInstant::type&);

      StatusResponseType (const ::xercesc::DOMElement&,
                          ::xml_schema::flags = 0,
                          ::xml_schema::type* = 0);

      StatusResponseType (const StatusResponseType&,
                          ::xml_schema::flags = 0,
                          ::xml_schema::type* = 0);

      virtual StatusResponseType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< Issuer::type > _xsd_Issuer_;
      ::xsd::cxx::tree::optional< Signature::type > _xsd_Signature_;
      ::xsd::cxx::tree::optional< Extensions::type > _xsd_Extensions_;
      ::xsd::cxx::tree::one< Status::type > _xsd_Status_;
      ::xsd::cxx::tree::one< ID::type > _xsd_ID_;
      ::xsd::cxx::tree::optional< InResponseTo::type > _xsd_InResponseTo_;
      ::xsd::cxx::tree::one< Version::type > _xsd_Version_;
      ::xsd::cxx::tree::one< IssueInstant::type > _xsd_IssueInstant_;
      ::xsd::cxx::tree::optional< Destination::type > _xsd_Destination_;
      ::xsd::cxx::tree::optional< Consent::type > _xsd_Consent_;
    };

    class StatusType: public ::xml_schema::type
    {
      public:

      struct _xsd_StatusType
      {
        typedef ::xml_schema::type base_;
      };

      // StatusCode
      // 
      public:
      struct StatusCode
      {
        typedef ::saml2::protocol::StatusCodeType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const StatusCode::type&
      StatusCode () const;

      StatusCode::type&
      StatusCode ();

      void
      StatusCode (const StatusCode::type&);

      void
      StatusCode (::std::auto_ptr< StatusCode::type >);

      // StatusMessage
      // 
      public:
      struct StatusMessage
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const StatusMessage::container&
      StatusMessage () const;

      StatusMessage::container&
      StatusMessage ();

      void
      StatusMessage (const StatusMessage::type&);

      void
      StatusMessage (const StatusMessage::container&);

      void
      StatusMessage (::std::auto_ptr< StatusMessage::type >);

      // StatusDetail
      // 
      public:
      struct StatusDetail
      {
        typedef ::saml2::protocol::StatusDetailType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const StatusDetail::container&
      StatusDetail () const;

      StatusDetail::container&
      StatusDetail ();

      void
      StatusDetail (const StatusDetail::type&);

      void
      StatusDetail (const StatusDetail::container&);

      void
      StatusDetail (::std::auto_ptr< StatusDetail::type >);

      // Constructors.
      //
      public:
      StatusType ();

      StatusType (const StatusCode::type&);

      StatusType (const ::xercesc::DOMElement&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      StatusType (const StatusType&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      virtual StatusType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< StatusCode::type > _xsd_StatusCode_;
      ::xsd::cxx::tree::optional< StatusMessage::type > _xsd_StatusMessage_;
      ::xsd::cxx::tree::optional< StatusDetail::type > _xsd_StatusDetail_;
    };

    class StatusCodeType: public ::xml_schema::type
    {
      public:

      struct _xsd_StatusCodeType
      {
        typedef ::xml_schema::type base_;
      };

      // StatusCode
      // 
      public:
      struct StatusCode
      {
        typedef ::saml2::protocol::StatusCodeType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const StatusCode::container&
      StatusCode () const;

      StatusCode::container&
      StatusCode ();

      void
      StatusCode (const StatusCode::type&);

      void
      StatusCode (const StatusCode::container&);

      void
      StatusCode (::std::auto_ptr< StatusCode::type >);

      // Value
      // 
      public:
      struct Value
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Value::type&
      Value () const;

      Value::type&
      Value ();

      void
      Value (const Value::type&);

      void
      Value (::std::auto_ptr< Value::type >);

      // Constructors.
      //
      public:
      StatusCodeType ();

      StatusCodeType (const Value::type&);

      StatusCodeType (const ::xercesc::DOMElement&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      StatusCodeType (const StatusCodeType&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      virtual StatusCodeType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< StatusCode::type > _xsd_StatusCode_;
      ::xsd::cxx::tree::one< Value::type > _xsd_Value_;
    };

    class StatusDetailType: public ::xml_schema::type
    {
      public:

      struct _xsd_StatusDetailType
      {
        typedef ::xml_schema::type base_;
      };

      // Constructors.
      //
      public:
      StatusDetailType ();

      StatusDetailType (const ::xercesc::DOMElement&,
                        ::xml_schema::flags = 0,
                        ::xml_schema::type* = 0);

      StatusDetailType (const ::xercesc::DOMAttr&,
                        ::xml_schema::flags = 0,
                        ::xml_schema::type* = 0);

      StatusDetailType (const ::std::basic_string< wchar_t >&,
                        const ::xercesc::DOMElement*,
                        ::xml_schema::flags = 0,
                        ::xml_schema::type* = 0);

      StatusDetailType (const StatusDetailType&,
                        ::xml_schema::flags = 0,
                        ::xml_schema::type* = 0);

      virtual StatusDetailType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;
    };

    class AssertionIDRequestType: public ::saml2::protocol::RequestAbstractType
    {
      public:

      struct _xsd_AssertionIDRequestType
      {
        typedef ::saml2::protocol::RequestAbstractType base_;
      };

      // AssertionIDRef
      // 
      public:
      struct AssertionIDRef
      {
        typedef ::xml_schema::ncname type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AssertionIDRef::container&
      AssertionIDRef () const;

      AssertionIDRef::container&
      AssertionIDRef ();

      void
      AssertionIDRef (const AssertionIDRef::container&);

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_AssertionIDRequestType::base_::ID;
      using _xsd_AssertionIDRequestType::base_::Version;
      using _xsd_AssertionIDRequestType::base_::IssueInstant;
#endif

      // Constructors.
      //
      public:
      AssertionIDRequestType ();

      AssertionIDRequestType (const ID::type&,
                              const Version::type&,
                              const IssueInstant::type&);

      AssertionIDRequestType (const ::xercesc::DOMElement&,
                              ::xml_schema::flags = 0,
                              ::xml_schema::type* = 0);

      AssertionIDRequestType (const AssertionIDRequestType&,
                              ::xml_schema::flags = 0,
                              ::xml_schema::type* = 0);

      virtual AssertionIDRequestType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< AssertionIDRef::type > _xsd_AssertionIDRef_;
    };

    class SubjectQueryAbstractType: public ::saml2::protocol::RequestAbstractType
    {
      public:

      struct _xsd_SubjectQueryAbstractType
      {
        typedef ::saml2::protocol::RequestAbstractType base_;
      };

      // Subject
      // 
      public:
      struct Subject
      {
        typedef ::saml2::assertion::SubjectType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Subject::type&
      Subject () const;

      Subject::type&
      Subject ();

      void
      Subject (const Subject::type&);

      void
      Subject (::std::auto_ptr< Subject::type >);

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_SubjectQueryAbstractType::base_::ID;
      using _xsd_SubjectQueryAbstractType::base_::Version;
      using _xsd_SubjectQueryAbstractType::base_::IssueInstant;
#endif

      // Constructors.
      //
      public:
      SubjectQueryAbstractType ();

      SubjectQueryAbstractType (const ID::type&,
                                const Version::type&,
                                const IssueInstant::type&,
                                const Subject::type&);

      SubjectQueryAbstractType (const ::xercesc::DOMElement&,
                                ::xml_schema::flags = 0,
                                ::xml_schema::type* = 0);

      SubjectQueryAbstractType (const SubjectQueryAbstractType&,
                                ::xml_schema::flags = 0,
                                ::xml_schema::type* = 0);

      virtual SubjectQueryAbstractType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< Subject::type > _xsd_Subject_;
    };

    class AuthnQueryType: public ::saml2::protocol::SubjectQueryAbstractType
    {
      public:

      struct _xsd_AuthnQueryType
      {
        typedef ::saml2::protocol::SubjectQueryAbstractType base_;
      };

      // RequestedAuthnContext
      // 
      public:
      struct RequestedAuthnContext
      {
        typedef ::saml2::protocol::RequestedAuthnContextType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const RequestedAuthnContext::container&
      RequestedAuthnContext () const;

      RequestedAuthnContext::container&
      RequestedAuthnContext ();

      void
      RequestedAuthnContext (const RequestedAuthnContext::type&);

      void
      RequestedAuthnContext (const RequestedAuthnContext::container&);

      void
      RequestedAuthnContext (::std::auto_ptr< RequestedAuthnContext::type >);

      // SessionIndex
      // 
      public:
      struct SessionIndex
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const SessionIndex::container&
      SessionIndex () const;

      SessionIndex::container&
      SessionIndex ();

      void
      SessionIndex (const SessionIndex::type&);

      void
      SessionIndex (const SessionIndex::container&);

      void
      SessionIndex (::std::auto_ptr< SessionIndex::type >);

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_AuthnQueryType::base_::ID;
      using _xsd_AuthnQueryType::base_::Version;
      using _xsd_AuthnQueryType::base_::IssueInstant;
      using _xsd_AuthnQueryType::base_::Subject;
#endif

      // Constructors.
      //
      public:
      AuthnQueryType ();

      AuthnQueryType (const ID::type&,
                      const Version::type&,
                      const IssueInstant::type&,
                      const Subject::type&);

      AuthnQueryType (const ::xercesc::DOMElement&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      AuthnQueryType (const AuthnQueryType&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      virtual AuthnQueryType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< RequestedAuthnContext::type > _xsd_RequestedAuthnContext_;
      ::xsd::cxx::tree::optional< SessionIndex::type > _xsd_SessionIndex_;
    };

    class RequestedAuthnContextType: public ::xml_schema::type
    {
      public:

      struct _xsd_RequestedAuthnContextType
      {
        typedef ::xml_schema::type base_;
      };

      // AuthnContextClassRef
      // 
      public:
      struct AuthnContextClassRef
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AuthnContextClassRef::container&
      AuthnContextClassRef () const;

      AuthnContextClassRef::container&
      AuthnContextClassRef ();

      void
      AuthnContextClassRef (const AuthnContextClassRef::container&);

      // AuthnContextDeclRef
      // 
      public:
      struct AuthnContextDeclRef
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AuthnContextDeclRef::container&
      AuthnContextDeclRef () const;

      AuthnContextDeclRef::container&
      AuthnContextDeclRef ();

      void
      AuthnContextDeclRef (const AuthnContextDeclRef::container&);

      // Comparison
      // 
      public:
      struct Comparison
      {
        typedef ::saml2::protocol::AuthnContextComparisonType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Comparison::container&
      Comparison () const;

      Comparison::container&
      Comparison ();

      void
      Comparison (const Comparison::type&);

      void
      Comparison (const Comparison::container&);

      void
      Comparison (::std::auto_ptr< Comparison::type >);

      // Constructors.
      //
      public:
      RequestedAuthnContextType ();

      RequestedAuthnContextType (const ::xercesc::DOMElement&,
                                 ::xml_schema::flags = 0,
                                 ::xml_schema::type* = 0);

      RequestedAuthnContextType (const RequestedAuthnContextType&,
                                 ::xml_schema::flags = 0,
                                 ::xml_schema::type* = 0);

      virtual RequestedAuthnContextType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< AuthnContextClassRef::type > _xsd_AuthnContextClassRef_;
      ::xsd::cxx::tree::sequence< AuthnContextDeclRef::type > _xsd_AuthnContextDeclRef_;
      ::xsd::cxx::tree::optional< Comparison::type > _xsd_Comparison_;
    };

    class AuthnContextComparisonType: public ::xml_schema::string
    {
      public:
      enum _xsd_AuthnContextComparisonType
      {
        exact,
        minimum,
        maximum,
        better
      };

      AuthnContextComparisonType ();

      AuthnContextComparisonType (_xsd_AuthnContextComparisonType);

      AuthnContextComparisonType (const ::xml_schema::string&);

      AuthnContextComparisonType (const ::xercesc::DOMElement&,
                                  ::xml_schema::flags = 0,
                                  ::xml_schema::type* = 0);

      AuthnContextComparisonType (const ::xercesc::DOMAttr&,
                                  ::xml_schema::flags = 0,
                                  ::xml_schema::type* = 0);

      AuthnContextComparisonType (const ::std::basic_string< wchar_t >&,
                                  const ::xercesc::DOMElement*,
                                  ::xml_schema::flags = 0,
                                  ::xml_schema::type* = 0);

      AuthnContextComparisonType (const AuthnContextComparisonType&,
                                  ::xml_schema::flags = 0,
                                  ::xml_schema::type* = 0);

      virtual AuthnContextComparisonType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      AuthnContextComparisonType&
      operator= (_xsd_AuthnContextComparisonType);

      virtual
      operator _xsd_AuthnContextComparisonType () const
      {
        return _xsd_AuthnContextComparisonType_convert ();
      }

      protected:
      _xsd_AuthnContextComparisonType
      _xsd_AuthnContextComparisonType_convert () const;

      public:
      static const wchar_t* const _xsd_AuthnContextComparisonType_literals_[4];
      static const _xsd_AuthnContextComparisonType _xsd_AuthnContextComparisonType_indexes_[4];
    };

    class AttributeQueryType: public ::saml2::protocol::SubjectQueryAbstractType
    {
      public:

      struct _xsd_AttributeQueryType
      {
        typedef ::saml2::protocol::SubjectQueryAbstractType base_;
      };

      // Attribute
      // 
      public:
      struct Attribute
      {
        typedef ::saml2::assertion::AttributeType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Attribute::container&
      Attribute () const;

      Attribute::container&
      Attribute ();

      void
      Attribute (const Attribute::container&);

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_AttributeQueryType::base_::ID;
      using _xsd_AttributeQueryType::base_::Version;
      using _xsd_AttributeQueryType::base_::IssueInstant;
      using _xsd_AttributeQueryType::base_::Subject;
#endif

      // Constructors.
      //
      public:
      AttributeQueryType ();

      AttributeQueryType (const ID::type&,
                          const Version::type&,
                          const IssueInstant::type&,
                          const Subject::type&);

      AttributeQueryType (const ::xercesc::DOMElement&,
                          ::xml_schema::flags = 0,
                          ::xml_schema::type* = 0);

      AttributeQueryType (const AttributeQueryType&,
                          ::xml_schema::flags = 0,
                          ::xml_schema::type* = 0);

      virtual AttributeQueryType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< Attribute::type > _xsd_Attribute_;
    };

    class AuthzDecisionQueryType: public ::saml2::protocol::SubjectQueryAbstractType
    {
      public:

      struct _xsd_AuthzDecisionQueryType
      {
        typedef ::saml2::protocol::SubjectQueryAbstractType base_;
      };

      // Action
      // 
      public:
      struct Action
      {
        typedef ::saml2::assertion::ActionType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Action::container&
      Action () const;

      Action::container&
      Action ();

      void
      Action (const Action::container&);

      // Evidence
      // 
      public:
      struct Evidence
      {
        typedef ::saml2::assertion::EvidenceType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Evidence::container&
      Evidence () const;

      Evidence::container&
      Evidence ();

      void
      Evidence (const Evidence::type&);

      void
      Evidence (const Evidence::container&);

      void
      Evidence (::std::auto_ptr< Evidence::type >);

      // Resource
      // 
      public:
      struct Resource
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Resource::type&
      Resource () const;

      Resource::type&
      Resource ();

      void
      Resource (const Resource::type&);

      void
      Resource (::std::auto_ptr< Resource::type >);

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_AuthzDecisionQueryType::base_::ID;
      using _xsd_AuthzDecisionQueryType::base_::Version;
      using _xsd_AuthzDecisionQueryType::base_::IssueInstant;
      using _xsd_AuthzDecisionQueryType::base_::Subject;
#endif

      // Constructors.
      //
      public:
      AuthzDecisionQueryType ();

      AuthzDecisionQueryType (const ID::type&,
                              const Version::type&,
                              const IssueInstant::type&,
                              const Subject::type&,
                              const Resource::type&);

      AuthzDecisionQueryType (const ::xercesc::DOMElement&,
                              ::xml_schema::flags = 0,
                              ::xml_schema::type* = 0);

      AuthzDecisionQueryType (const AuthzDecisionQueryType&,
                              ::xml_schema::flags = 0,
                              ::xml_schema::type* = 0);

      virtual AuthzDecisionQueryType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< Action::type > _xsd_Action_;
      ::xsd::cxx::tree::optional< Evidence::type > _xsd_Evidence_;
      ::xsd::cxx::tree::one< Resource::type > _xsd_Resource_;
    };

    class AuthnRequestType: public ::saml2::protocol::RequestAbstractType
    {
      public:

      struct _xsd_AuthnRequestType
      {
        typedef ::saml2::protocol::RequestAbstractType base_;
      };

      // Subject
      // 
      public:
      struct Subject
      {
        typedef ::saml2::assertion::SubjectType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Subject::container&
      Subject () const;

      Subject::container&
      Subject ();

      void
      Subject (const Subject::type&);

      void
      Subject (const Subject::container&);

      void
      Subject (::std::auto_ptr< Subject::type >);

      // NameIDPolicy
      // 
      public:
      struct NameIDPolicy
      {
        typedef ::saml2::protocol::NameIDPolicyType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const NameIDPolicy::container&
      NameIDPolicy () const;

      NameIDPolicy::container&
      NameIDPolicy ();

      void
      NameIDPolicy (const NameIDPolicy::type&);

      void
      NameIDPolicy (const NameIDPolicy::container&);

      void
      NameIDPolicy (::std::auto_ptr< NameIDPolicy::type >);

      // Conditions
      // 
      public:
      struct Conditions
      {
        typedef ::saml2::assertion::ConditionsType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Conditions::container&
      Conditions () const;

      Conditions::container&
      Conditions ();

      void
      Conditions (const Conditions::type&);

      void
      Conditions (const Conditions::container&);

      void
      Conditions (::std::auto_ptr< Conditions::type >);

      // RequestedAuthnContext
      // 
      public:
      struct RequestedAuthnContext
      {
        typedef ::saml2::protocol::RequestedAuthnContextType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const RequestedAuthnContext::container&
      RequestedAuthnContext () const;

      RequestedAuthnContext::container&
      RequestedAuthnContext ();

      void
      RequestedAuthnContext (const RequestedAuthnContext::type&);

      void
      RequestedAuthnContext (const RequestedAuthnContext::container&);

      void
      RequestedAuthnContext (::std::auto_ptr< RequestedAuthnContext::type >);

      // Scoping
      // 
      public:
      struct Scoping
      {
        typedef ::saml2::protocol::ScopingType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Scoping::container&
      Scoping () const;

      Scoping::container&
      Scoping ();

      void
      Scoping (const Scoping::type&);

      void
      Scoping (const Scoping::container&);

      void
      Scoping (::std::auto_ptr< Scoping::type >);

      // ForceAuthn
      // 
      public:
      struct ForceAuthn
      {
        typedef ::xml_schema::boolean type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const ForceAuthn::container&
      ForceAuthn () const;

      ForceAuthn::container&
      ForceAuthn ();

      void
      ForceAuthn (const ForceAuthn::type&);

      void
      ForceAuthn (const ForceAuthn::container&);

      // IsPassive
      // 
      public:
      struct IsPassive
      {
        typedef ::xml_schema::boolean type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const IsPassive::container&
      IsPassive () const;

      IsPassive::container&
      IsPassive ();

      void
      IsPassive (const IsPassive::type&);

      void
      IsPassive (const IsPassive::container&);

      // ProtocolBinding
      // 
      public:
      struct ProtocolBinding
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const ProtocolBinding::container&
      ProtocolBinding () const;

      ProtocolBinding::container&
      ProtocolBinding ();

      void
      ProtocolBinding (const ProtocolBinding::type&);

      void
      ProtocolBinding (const ProtocolBinding::container&);

      void
      ProtocolBinding (::std::auto_ptr< ProtocolBinding::type >);

      // AssertionConsumerServiceIndex
      // 
      public:
      struct AssertionConsumerServiceIndex
      {
        typedef ::xml_schema::unsigned_short type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const AssertionConsumerServiceIndex::container&
      AssertionConsumerServiceIndex () const;

      AssertionConsumerServiceIndex::container&
      AssertionConsumerServiceIndex ();

      void
      AssertionConsumerServiceIndex (const AssertionConsumerServiceIndex::type&);

      void
      AssertionConsumerServiceIndex (const AssertionConsumerServiceIndex::container&);

      // AssertionConsumerServiceURL
      // 
      public:
      struct AssertionConsumerServiceURL
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const AssertionConsumerServiceURL::container&
      AssertionConsumerServiceURL () const;

      AssertionConsumerServiceURL::container&
      AssertionConsumerServiceURL ();

      void
      AssertionConsumerServiceURL (const AssertionConsumerServiceURL::type&);

      void
      AssertionConsumerServiceURL (const AssertionConsumerServiceURL::container&);

      void
      AssertionConsumerServiceURL (::std::auto_ptr< AssertionConsumerServiceURL::type >);

      // AttributeConsumingServiceIndex
      // 
      public:
      struct AttributeConsumingServiceIndex
      {
        typedef ::xml_schema::unsigned_short type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const AttributeConsumingServiceIndex::container&
      AttributeConsumingServiceIndex () const;

      AttributeConsumingServiceIndex::container&
      AttributeConsumingServiceIndex ();

      void
      AttributeConsumingServiceIndex (const AttributeConsumingServiceIndex::type&);

      void
      AttributeConsumingServiceIndex (const AttributeConsumingServiceIndex::container&);

      // ProviderName
      // 
      public:
      struct ProviderName
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const ProviderName::container&
      ProviderName () const;

      ProviderName::container&
      ProviderName ();

      void
      ProviderName (const ProviderName::type&);

      void
      ProviderName (const ProviderName::container&);

      void
      ProviderName (::std::auto_ptr< ProviderName::type >);

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_AuthnRequestType::base_::ID;
      using _xsd_AuthnRequestType::base_::Version;
      using _xsd_AuthnRequestType::base_::IssueInstant;
#endif

      // Constructors.
      //
      public:
      AuthnRequestType ();

      AuthnRequestType (const ID::type&,
                        const Version::type&,
                        const IssueInstant::type&);

      AuthnRequestType (const ::xercesc::DOMElement&,
                        ::xml_schema::flags = 0,
                        ::xml_schema::type* = 0);

      AuthnRequestType (const AuthnRequestType&,
                        ::xml_schema::flags = 0,
                        ::xml_schema::type* = 0);

      virtual AuthnRequestType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< Subject::type > _xsd_Subject_;
      ::xsd::cxx::tree::optional< NameIDPolicy::type > _xsd_NameIDPolicy_;
      ::xsd::cxx::tree::optional< Conditions::type > _xsd_Conditions_;
      ::xsd::cxx::tree::optional< RequestedAuthnContext::type > _xsd_RequestedAuthnContext_;
      ::xsd::cxx::tree::optional< Scoping::type > _xsd_Scoping_;
      ::xsd::cxx::tree::optional< ForceAuthn::type > _xsd_ForceAuthn_;
      ::xsd::cxx::tree::optional< IsPassive::type > _xsd_IsPassive_;
      ::xsd::cxx::tree::optional< ProtocolBinding::type > _xsd_ProtocolBinding_;
      ::xsd::cxx::tree::optional< AssertionConsumerServiceIndex::type > _xsd_AssertionConsumerServiceIndex_;
      ::xsd::cxx::tree::optional< AssertionConsumerServiceURL::type > _xsd_AssertionConsumerServiceURL_;
      ::xsd::cxx::tree::optional< AttributeConsumingServiceIndex::type > _xsd_AttributeConsumingServiceIndex_;
      ::xsd::cxx::tree::optional< ProviderName::type > _xsd_ProviderName_;
    };

    class NameIDPolicyType: public ::xml_schema::type
    {
      public:

      struct _xsd_NameIDPolicyType
      {
        typedef ::xml_schema::type base_;
      };

      // Format
      // 
      public:
      struct Format
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Format::container&
      Format () const;

      Format::container&
      Format ();

      void
      Format (const Format::type&);

      void
      Format (const Format::container&);

      void
      Format (::std::auto_ptr< Format::type >);

      // SPNameQualifier
      // 
      public:
      struct SPNameQualifier
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const SPNameQualifier::container&
      SPNameQualifier () const;

      SPNameQualifier::container&
      SPNameQualifier ();

      void
      SPNameQualifier (const SPNameQualifier::type&);

      void
      SPNameQualifier (const SPNameQualifier::container&);

      void
      SPNameQualifier (::std::auto_ptr< SPNameQualifier::type >);

      // AllowCreate
      // 
      public:
      struct AllowCreate
      {
        typedef ::xml_schema::boolean type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const AllowCreate::container&
      AllowCreate () const;

      AllowCreate::container&
      AllowCreate ();

      void
      AllowCreate (const AllowCreate::type&);

      void
      AllowCreate (const AllowCreate::container&);

      // Constructors.
      //
      public:
      NameIDPolicyType ();

      NameIDPolicyType (const ::xercesc::DOMElement&,
                        ::xml_schema::flags = 0,
                        ::xml_schema::type* = 0);

      NameIDPolicyType (const NameIDPolicyType&,
                        ::xml_schema::flags = 0,
                        ::xml_schema::type* = 0);

      virtual NameIDPolicyType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< Format::type > _xsd_Format_;
      ::xsd::cxx::tree::optional< SPNameQualifier::type > _xsd_SPNameQualifier_;
      ::xsd::cxx::tree::optional< AllowCreate::type > _xsd_AllowCreate_;
    };

    class ScopingType: public ::xml_schema::type
    {
      public:

      struct _xsd_ScopingType
      {
        typedef ::xml_schema::type base_;
      };

      // IDPList
      // 
      public:
      struct IDPList
      {
        typedef ::saml2::protocol::IDPListType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const IDPList::container&
      IDPList () const;

      IDPList::container&
      IDPList ();

      void
      IDPList (const IDPList::type&);

      void
      IDPList (const IDPList::container&);

      void
      IDPList (::std::auto_ptr< IDPList::type >);

      // RequesterID
      // 
      public:
      struct RequesterID
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const RequesterID::container&
      RequesterID () const;

      RequesterID::container&
      RequesterID ();

      void
      RequesterID (const RequesterID::container&);

      // ProxyCount
      // 
      public:
      struct ProxyCount
      {
        typedef ::xml_schema::non_negative_integer type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const ProxyCount::container&
      ProxyCount () const;

      ProxyCount::container&
      ProxyCount ();

      void
      ProxyCount (const ProxyCount::type&);

      void
      ProxyCount (const ProxyCount::container&);

      // Constructors.
      //
      public:
      ScopingType ();

      ScopingType (const ::xercesc::DOMElement&,
                   ::xml_schema::flags = 0,
                   ::xml_schema::type* = 0);

      ScopingType (const ScopingType&,
                   ::xml_schema::flags = 0,
                   ::xml_schema::type* = 0);

      virtual ScopingType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< IDPList::type > _xsd_IDPList_;
      ::xsd::cxx::tree::sequence< RequesterID::type > _xsd_RequesterID_;
      ::xsd::cxx::tree::optional< ProxyCount::type > _xsd_ProxyCount_;
    };

    class IDPListType: public ::xml_schema::type
    {
      public:

      struct _xsd_IDPListType
      {
        typedef ::xml_schema::type base_;
      };

      // IDPEntry
      // 
      public:
      struct IDPEntry
      {
        typedef ::saml2::protocol::IDPEntryType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const IDPEntry::container&
      IDPEntry () const;

      IDPEntry::container&
      IDPEntry ();

      void
      IDPEntry (const IDPEntry::container&);

      // GetComplete
      // 
      public:
      struct GetComplete
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const GetComplete::container&
      GetComplete () const;

      GetComplete::container&
      GetComplete ();

      void
      GetComplete (const GetComplete::type&);

      void
      GetComplete (const GetComplete::container&);

      void
      GetComplete (::std::auto_ptr< GetComplete::type >);

      // Constructors.
      //
      public:
      IDPListType ();

      IDPListType (const ::xercesc::DOMElement&,
                   ::xml_schema::flags = 0,
                   ::xml_schema::type* = 0);

      IDPListType (const IDPListType&,
                   ::xml_schema::flags = 0,
                   ::xml_schema::type* = 0);

      virtual IDPListType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< IDPEntry::type > _xsd_IDPEntry_;
      ::xsd::cxx::tree::optional< GetComplete::type > _xsd_GetComplete_;
    };

    class IDPEntryType: public ::xml_schema::type
    {
      public:

      struct _xsd_IDPEntryType
      {
        typedef ::xml_schema::type base_;
      };

      // ProviderID
      // 
      public:
      struct ProviderID
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const ProviderID::type&
      ProviderID () const;

      ProviderID::type&
      ProviderID ();

      void
      ProviderID (const ProviderID::type&);

      void
      ProviderID (::std::auto_ptr< ProviderID::type >);

      // Name
      // 
      public:
      struct Name
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Name::container&
      Name () const;

      Name::container&
      Name ();

      void
      Name (const Name::type&);

      void
      Name (const Name::container&);

      void
      Name (::std::auto_ptr< Name::type >);

      // Loc
      // 
      public:
      struct Loc
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Loc::container&
      Loc () const;

      Loc::container&
      Loc ();

      void
      Loc (const Loc::type&);

      void
      Loc (const Loc::container&);

      void
      Loc (::std::auto_ptr< Loc::type >);

      // Constructors.
      //
      public:
      IDPEntryType ();

      IDPEntryType (const ProviderID::type&);

      IDPEntryType (const ::xercesc::DOMElement&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      IDPEntryType (const IDPEntryType&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      virtual IDPEntryType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< ProviderID::type > _xsd_ProviderID_;
      ::xsd::cxx::tree::optional< Name::type > _xsd_Name_;
      ::xsd::cxx::tree::optional< Loc::type > _xsd_Loc_;
    };

    class ResponseType: public ::saml2::protocol::StatusResponseType
    {
      public:

      struct _xsd_ResponseType
      {
        typedef ::saml2::protocol::StatusResponseType base_;
      };

      // Assertion
      // 
      public:
      struct Assertion
      {
        typedef ::saml2::assertion::AssertionType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Assertion::container&
      Assertion () const;

      Assertion::container&
      Assertion ();

      void
      Assertion (const Assertion::container&);

      // EncryptedAssertion
      // 
      public:
      struct EncryptedAssertion
      {
        typedef ::saml2::assertion::EncryptedElementType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const EncryptedAssertion::container&
      EncryptedAssertion () const;

      EncryptedAssertion::container&
      EncryptedAssertion ();

      void
      EncryptedAssertion (const EncryptedAssertion::container&);

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_ResponseType::base_::Status;
      using _xsd_ResponseType::base_::ID;
      using _xsd_ResponseType::base_::Version;
      using _xsd_ResponseType::base_::IssueInstant;
#endif

      // Constructors.
      //
      public:
      ResponseType ();

      ResponseType (const Status::type&,
                    const ID::type&,
                    const Version::type&,
                    const IssueInstant::type&);

      ResponseType (const ::xercesc::DOMElement&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      ResponseType (const ResponseType&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      virtual ResponseType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< Assertion::type > _xsd_Assertion_;
      ::xsd::cxx::tree::sequence< EncryptedAssertion::type > _xsd_EncryptedAssertion_;
    };

    class ArtifactResolveType: public ::saml2::protocol::RequestAbstractType
    {
      public:

      struct _xsd_ArtifactResolveType
      {
        typedef ::saml2::protocol::RequestAbstractType base_;
      };

      // Artifact
      // 
      public:
      struct Artifact
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Artifact::type&
      Artifact () const;

      Artifact::type&
      Artifact ();

      void
      Artifact (const Artifact::type&);

      void
      Artifact (::std::auto_ptr< Artifact::type >);

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_ArtifactResolveType::base_::ID;
      using _xsd_ArtifactResolveType::base_::Version;
      using _xsd_ArtifactResolveType::base_::IssueInstant;
#endif

      // Constructors.
      //
      public:
      ArtifactResolveType ();

      ArtifactResolveType (const ID::type&,
                           const Version::type&,
                           const IssueInstant::type&,
                           const Artifact::type&);

      ArtifactResolveType (const ::xercesc::DOMElement&,
                           ::xml_schema::flags = 0,
                           ::xml_schema::type* = 0);

      ArtifactResolveType (const ArtifactResolveType&,
                           ::xml_schema::flags = 0,
                           ::xml_schema::type* = 0);

      virtual ArtifactResolveType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< Artifact::type > _xsd_Artifact_;
    };

    class ArtifactResponseType: public ::saml2::protocol::StatusResponseType
    {
      public:

      struct _xsd_ArtifactResponseType
      {
        typedef ::saml2::protocol::StatusResponseType base_;
      };

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_ArtifactResponseType::base_::Status;
      using _xsd_ArtifactResponseType::base_::ID;
      using _xsd_ArtifactResponseType::base_::Version;
      using _xsd_ArtifactResponseType::base_::IssueInstant;
#endif

      // Constructors.
      //
      public:
      ArtifactResponseType ();

      ArtifactResponseType (const Status::type&,
                            const ID::type&,
                            const Version::type&,
                            const IssueInstant::type&);

      ArtifactResponseType (const ::xercesc::DOMElement&,
                            ::xml_schema::flags = 0,
                            ::xml_schema::type* = 0);

      ArtifactResponseType (const ArtifactResponseType&,
                            ::xml_schema::flags = 0,
                            ::xml_schema::type* = 0);

      virtual ArtifactResponseType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;
    };

    class ManageNameIDRequestType: public ::saml2::protocol::RequestAbstractType
    {
      public:

      struct _xsd_ManageNameIDRequestType
      {
        typedef ::saml2::protocol::RequestAbstractType base_;
      };

      // NameID
      // 
      public:
      struct NameID
      {
        typedef ::saml2::assertion::NameIDType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const NameID::container&
      NameID () const;

      NameID::container&
      NameID ();

      void
      NameID (const NameID::type&);

      void
      NameID (const NameID::container&);

      void
      NameID (::std::auto_ptr< NameID::type >);

      // EncryptedID
      // 
      public:
      struct EncryptedID
      {
        typedef ::saml2::assertion::EncryptedElementType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const EncryptedID::container&
      EncryptedID () const;

      EncryptedID::container&
      EncryptedID ();

      void
      EncryptedID (const EncryptedID::type&);

      void
      EncryptedID (const EncryptedID::container&);

      void
      EncryptedID (::std::auto_ptr< EncryptedID::type >);

      // NewID
      // 
      public:
      struct NewID
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const NewID::container&
      NewID () const;

      NewID::container&
      NewID ();

      void
      NewID (const NewID::type&);

      void
      NewID (const NewID::container&);

      void
      NewID (::std::auto_ptr< NewID::type >);

      // NewEncryptedID
      // 
      public:
      struct NewEncryptedID
      {
        typedef ::saml2::assertion::EncryptedElementType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const NewEncryptedID::container&
      NewEncryptedID () const;

      NewEncryptedID::container&
      NewEncryptedID ();

      void
      NewEncryptedID (const NewEncryptedID::type&);

      void
      NewEncryptedID (const NewEncryptedID::container&);

      void
      NewEncryptedID (::std::auto_ptr< NewEncryptedID::type >);

      // Terminate
      // 
      public:
      struct Terminate
      {
        typedef ::saml2::protocol::TerminateType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Terminate::container&
      Terminate () const;

      Terminate::container&
      Terminate ();

      void
      Terminate (const Terminate::type&);

      void
      Terminate (const Terminate::container&);

      void
      Terminate (::std::auto_ptr< Terminate::type >);

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_ManageNameIDRequestType::base_::ID;
      using _xsd_ManageNameIDRequestType::base_::Version;
      using _xsd_ManageNameIDRequestType::base_::IssueInstant;
#endif

      // Constructors.
      //
      public:
      ManageNameIDRequestType ();

      ManageNameIDRequestType (const ID::type&,
                               const Version::type&,
                               const IssueInstant::type&);

      ManageNameIDRequestType (const ::xercesc::DOMElement&,
                               ::xml_schema::flags = 0,
                               ::xml_schema::type* = 0);

      ManageNameIDRequestType (const ManageNameIDRequestType&,
                               ::xml_schema::flags = 0,
                               ::xml_schema::type* = 0);

      virtual ManageNameIDRequestType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< NameID::type > _xsd_NameID_;
      ::xsd::cxx::tree::optional< EncryptedID::type > _xsd_EncryptedID_;
      ::xsd::cxx::tree::optional< NewID::type > _xsd_NewID_;
      ::xsd::cxx::tree::optional< NewEncryptedID::type > _xsd_NewEncryptedID_;
      ::xsd::cxx::tree::optional< Terminate::type > _xsd_Terminate_;
    };

    class TerminateType: public ::xml_schema::type
    {
      public:

      struct _xsd_TerminateType
      {
        typedef ::xml_schema::type base_;
      };

      // Constructors.
      //
      public:
      TerminateType ();

      TerminateType (const ::xercesc::DOMElement&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      TerminateType (const ::xercesc::DOMAttr&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      TerminateType (const ::std::basic_string< wchar_t >&,
                     const ::xercesc::DOMElement*,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      TerminateType (const TerminateType&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      virtual TerminateType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;
    };

    class LogoutRequestType: public ::saml2::protocol::RequestAbstractType
    {
      public:

      struct _xsd_LogoutRequestType
      {
        typedef ::saml2::protocol::RequestAbstractType base_;
      };

      // BaseID
      // 
      public:
      struct BaseID
      {
        typedef ::saml2::assertion::BaseIDAbstractType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const BaseID::container&
      BaseID () const;

      BaseID::container&
      BaseID ();

      void
      BaseID (const BaseID::type&);

      void
      BaseID (const BaseID::container&);

      void
      BaseID (::std::auto_ptr< BaseID::type >);

      // NameID
      // 
      public:
      struct NameID
      {
        typedef ::saml2::assertion::NameIDType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const NameID::container&
      NameID () const;

      NameID::container&
      NameID ();

      void
      NameID (const NameID::type&);

      void
      NameID (const NameID::container&);

      void
      NameID (::std::auto_ptr< NameID::type >);

      // EncryptedID
      // 
      public:
      struct EncryptedID
      {
        typedef ::saml2::assertion::EncryptedElementType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const EncryptedID::container&
      EncryptedID () const;

      EncryptedID::container&
      EncryptedID ();

      void
      EncryptedID (const EncryptedID::type&);

      void
      EncryptedID (const EncryptedID::container&);

      void
      EncryptedID (::std::auto_ptr< EncryptedID::type >);

      // SessionIndex
      // 
      public:
      struct SessionIndex
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const SessionIndex::container&
      SessionIndex () const;

      SessionIndex::container&
      SessionIndex ();

      void
      SessionIndex (const SessionIndex::container&);

      // Reason
      // 
      public:
      struct Reason
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Reason::container&
      Reason () const;

      Reason::container&
      Reason ();

      void
      Reason (const Reason::type&);

      void
      Reason (const Reason::container&);

      void
      Reason (::std::auto_ptr< Reason::type >);

      // NotOnOrAfter
      // 
      public:
      struct NotOnOrAfter
      {
        typedef ::xml_schema::date_time type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const NotOnOrAfter::container&
      NotOnOrAfter () const;

      NotOnOrAfter::container&
      NotOnOrAfter ();

      void
      NotOnOrAfter (const NotOnOrAfter::type&);

      void
      NotOnOrAfter (const NotOnOrAfter::container&);

      void
      NotOnOrAfter (::std::auto_ptr< NotOnOrAfter::type >);

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_LogoutRequestType::base_::ID;
      using _xsd_LogoutRequestType::base_::Version;
      using _xsd_LogoutRequestType::base_::IssueInstant;
#endif

      // Constructors.
      //
      public:
      LogoutRequestType ();

      LogoutRequestType (const ID::type&,
                         const Version::type&,
                         const IssueInstant::type&);

      LogoutRequestType (const ::xercesc::DOMElement&,
                         ::xml_schema::flags = 0,
                         ::xml_schema::type* = 0);

      LogoutRequestType (const LogoutRequestType&,
                         ::xml_schema::flags = 0,
                         ::xml_schema::type* = 0);

      virtual LogoutRequestType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< BaseID::type > _xsd_BaseID_;
      ::xsd::cxx::tree::optional< NameID::type > _xsd_NameID_;
      ::xsd::cxx::tree::optional< EncryptedID::type > _xsd_EncryptedID_;
      ::xsd::cxx::tree::sequence< SessionIndex::type > _xsd_SessionIndex_;
      ::xsd::cxx::tree::optional< Reason::type > _xsd_Reason_;
      ::xsd::cxx::tree::optional< NotOnOrAfter::type > _xsd_NotOnOrAfter_;
    };

    class NameIDMappingRequestType: public ::saml2::protocol::RequestAbstractType
    {
      public:

      struct _xsd_NameIDMappingRequestType
      {
        typedef ::saml2::protocol::RequestAbstractType base_;
      };

      // BaseID
      // 
      public:
      struct BaseID
      {
        typedef ::saml2::assertion::BaseIDAbstractType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const BaseID::container&
      BaseID () const;

      BaseID::container&
      BaseID ();

      void
      BaseID (const BaseID::type&);

      void
      BaseID (const BaseID::container&);

      void
      BaseID (::std::auto_ptr< BaseID::type >);

      // NameID
      // 
      public:
      struct NameID
      {
        typedef ::saml2::assertion::NameIDType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const NameID::container&
      NameID () const;

      NameID::container&
      NameID ();

      void
      NameID (const NameID::type&);

      void
      NameID (const NameID::container&);

      void
      NameID (::std::auto_ptr< NameID::type >);

      // EncryptedID
      // 
      public:
      struct EncryptedID
      {
        typedef ::saml2::assertion::EncryptedElementType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const EncryptedID::container&
      EncryptedID () const;

      EncryptedID::container&
      EncryptedID ();

      void
      EncryptedID (const EncryptedID::type&);

      void
      EncryptedID (const EncryptedID::container&);

      void
      EncryptedID (::std::auto_ptr< EncryptedID::type >);

      // NameIDPolicy
      // 
      public:
      struct NameIDPolicy
      {
        typedef ::saml2::protocol::NameIDPolicyType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const NameIDPolicy::type&
      NameIDPolicy () const;

      NameIDPolicy::type&
      NameIDPolicy ();

      void
      NameIDPolicy (const NameIDPolicy::type&);

      void
      NameIDPolicy (::std::auto_ptr< NameIDPolicy::type >);

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_NameIDMappingRequestType::base_::ID;
      using _xsd_NameIDMappingRequestType::base_::Version;
      using _xsd_NameIDMappingRequestType::base_::IssueInstant;
#endif

      // Constructors.
      //
      public:
      NameIDMappingRequestType ();

      NameIDMappingRequestType (const ID::type&,
                                const Version::type&,
                                const IssueInstant::type&,
                                const NameIDPolicy::type&);

      NameIDMappingRequestType (const ::xercesc::DOMElement&,
                                ::xml_schema::flags = 0,
                                ::xml_schema::type* = 0);

      NameIDMappingRequestType (const NameIDMappingRequestType&,
                                ::xml_schema::flags = 0,
                                ::xml_schema::type* = 0);

      virtual NameIDMappingRequestType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< BaseID::type > _xsd_BaseID_;
      ::xsd::cxx::tree::optional< NameID::type > _xsd_NameID_;
      ::xsd::cxx::tree::optional< EncryptedID::type > _xsd_EncryptedID_;
      ::xsd::cxx::tree::one< NameIDPolicy::type > _xsd_NameIDPolicy_;
    };

    class NameIDMappingResponseType: public ::saml2::protocol::StatusResponseType
    {
      public:

      struct _xsd_NameIDMappingResponseType
      {
        typedef ::saml2::protocol::StatusResponseType base_;
      };

      // NameID
      // 
      public:
      struct NameID
      {
        typedef ::saml2::assertion::NameIDType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const NameID::container&
      NameID () const;

      NameID::container&
      NameID ();

      void
      NameID (const NameID::type&);

      void
      NameID (const NameID::container&);

      void
      NameID (::std::auto_ptr< NameID::type >);

      // EncryptedID
      // 
      public:
      struct EncryptedID
      {
        typedef ::saml2::assertion::EncryptedElementType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const EncryptedID::container&
      EncryptedID () const;

      EncryptedID::container&
      EncryptedID ();

      void
      EncryptedID (const EncryptedID::type&);

      void
      EncryptedID (const EncryptedID::container&);

      void
      EncryptedID (::std::auto_ptr< EncryptedID::type >);

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_NameIDMappingResponseType::base_::Status;
      using _xsd_NameIDMappingResponseType::base_::ID;
      using _xsd_NameIDMappingResponseType::base_::Version;
      using _xsd_NameIDMappingResponseType::base_::IssueInstant;
#endif

      // Constructors.
      //
      public:
      NameIDMappingResponseType ();

      NameIDMappingResponseType (const Status::type&,
                                 const ID::type&,
                                 const Version::type&,
                                 const IssueInstant::type&);

      NameIDMappingResponseType (const ::xercesc::DOMElement&,
                                 ::xml_schema::flags = 0,
                                 ::xml_schema::type* = 0);

      NameIDMappingResponseType (const NameIDMappingResponseType&,
                                 ::xml_schema::flags = 0,
                                 ::xml_schema::type* = 0);

      virtual NameIDMappingResponseType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< NameID::type > _xsd_NameID_;
      ::xsd::cxx::tree::optional< EncryptedID::type > _xsd_EncryptedID_;
    };
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMInputSource.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace saml2
{
  namespace protocol
  {
    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (const ::std::basic_string< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (const ::std::basic_string< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (const ::std::basic_string< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (::std::istream&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (::std::istream&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (::std::istream&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (const ::xercesc::DOMInputSource&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (const ::xercesc::DOMInputSource&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (const ::xercesc::DOMInputSource&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (const ::xercesc::DOMDocument&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (const ::std::basic_string< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (const ::std::basic_string< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (const ::std::basic_string< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (::std::istream&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (::std::istream&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (::std::istream&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (const ::xercesc::DOMInputSource&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (const ::xercesc::DOMInputSource&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (const ::xercesc::DOMInputSource&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (const ::xercesc::DOMDocument&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (const ::std::basic_string< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (const ::std::basic_string< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (const ::std::basic_string< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (::std::istream&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (::std::istream&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (::std::istream&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (const ::xercesc::DOMInputSource&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (const ::xercesc::DOMInputSource&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (const ::xercesc::DOMInputSource&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (const ::xercesc::DOMDocument&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::std::basic_string< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::std::basic_string< wchar_t >&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::std::basic_string< wchar_t >&,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream&,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream&,
                   const ::std::basic_string< wchar_t >& id,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream&,
                   const ::std::basic_string< wchar_t >& id,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream&,
                   const ::std::basic_string< wchar_t >& id,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::xercesc::DOMInputSource&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::xercesc::DOMInputSource&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::xercesc::DOMInputSource&,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::xercesc::DOMDocument&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (const ::std::basic_string< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (const ::std::basic_string< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (const ::std::basic_string< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (::std::istream&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (::std::istream&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (::std::istream&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (const ::xercesc::DOMInputSource&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (const ::xercesc::DOMInputSource&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (const ::xercesc::DOMInputSource&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (const ::xercesc::DOMDocument&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (const ::std::basic_string< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (const ::std::basic_string< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (const ::std::basic_string< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (::std::istream&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (::std::istream&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (::std::istream&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (const ::xercesc::DOMInputSource&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (const ::xercesc::DOMInputSource&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (const ::xercesc::DOMInputSource&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (const ::xercesc::DOMDocument&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (const ::std::basic_string< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (const ::std::basic_string< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (const ::std::basic_string< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (::std::istream&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (::std::istream&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (::std::istream&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (const ::xercesc::DOMInputSource&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (const ::xercesc::DOMInputSource&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (const ::xercesc::DOMInputSource&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (const ::xercesc::DOMDocument&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (const ::std::basic_string< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (const ::std::basic_string< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (const ::std::basic_string< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (::std::istream&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (::std::istream&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (::std::istream&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (const ::xercesc::DOMInputSource&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (const ::xercesc::DOMInputSource&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (const ::xercesc::DOMInputSource&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (const ::xercesc::DOMDocument&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (const ::std::basic_string< wchar_t >&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (const ::std::basic_string< wchar_t >&,
                           ::xsd::cxx::xml::error_handler< wchar_t >&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (const ::std::basic_string< wchar_t >&,
                           ::xercesc::DOMErrorHandler&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (::std::istream&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (::std::istream&,
                           ::xsd::cxx::xml::error_handler< wchar_t >&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (::std::istream&,
                           ::xercesc::DOMErrorHandler&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (::std::istream&,
                           const ::std::basic_string< wchar_t >& id,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (::std::istream&,
                           const ::std::basic_string< wchar_t >& id,
                           ::xsd::cxx::xml::error_handler< wchar_t >&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (::std::istream&,
                           const ::std::basic_string< wchar_t >& id,
                           ::xercesc::DOMErrorHandler&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (const ::xercesc::DOMInputSource&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (const ::xercesc::DOMInputSource&,
                           ::xsd::cxx::xml::error_handler< wchar_t >&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (const ::xercesc::DOMInputSource&,
                           ::xercesc::DOMErrorHandler&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (const ::xercesc::DOMDocument&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (const ::std::basic_string< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (const ::std::basic_string< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (const ::std::basic_string< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (::std::istream&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (::std::istream&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (::std::istream&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (const ::xercesc::DOMInputSource&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (const ::xercesc::DOMInputSource&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (const ::xercesc::DOMInputSource&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (const ::xercesc::DOMDocument&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (const ::std::basic_string< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (const ::std::basic_string< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (const ::std::basic_string< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (::std::istream&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (::std::istream&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (::std::istream&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (const ::xercesc::DOMInputSource&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (const ::xercesc::DOMInputSource&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (const ::xercesc::DOMInputSource&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (const ::xercesc::DOMDocument&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (const ::std::basic_string< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (const ::std::basic_string< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (const ::std::basic_string< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (::std::istream&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (::std::istream&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (::std::istream&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (const ::xercesc::DOMInputSource&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (const ::xercesc::DOMInputSource&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (const ::xercesc::DOMInputSource&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (const ::xercesc::DOMDocument&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (const ::std::basic_string< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (const ::std::basic_string< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (const ::std::basic_string< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (::std::istream&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (::std::istream&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (::std::istream&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (const ::xercesc::DOMInputSource&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (const ::xercesc::DOMInputSource&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (const ::xercesc::DOMInputSource&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (const ::xercesc::DOMDocument&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (const ::std::basic_string< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (const ::std::basic_string< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (const ::std::basic_string< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (::std::istream&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (::std::istream&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (::std::istream&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (const ::xercesc::DOMInputSource&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (const ::xercesc::DOMInputSource&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (const ::xercesc::DOMInputSource&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (const ::xercesc::DOMDocument&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (const ::std::basic_string< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (const ::std::basic_string< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (const ::std::basic_string< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (::std::istream&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (::std::istream&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (::std::istream&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (const ::xercesc::DOMInputSource&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (const ::xercesc::DOMInputSource&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (const ::xercesc::DOMInputSource&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (const ::xercesc::DOMDocument&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (const ::std::basic_string< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (const ::std::basic_string< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (const ::std::basic_string< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (::std::istream&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (::std::istream&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (::std::istream&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (const ::xercesc::DOMInputSource&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (const ::xercesc::DOMInputSource&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (const ::xercesc::DOMInputSource&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (const ::xercesc::DOMDocument&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (const ::std::basic_string< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (const ::std::basic_string< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (const ::std::basic_string< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (::std::istream&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (::std::istream&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (::std::istream&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (const ::xercesc::DOMInputSource&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (const ::xercesc::DOMInputSource&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (const ::xercesc::DOMInputSource&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (const ::xercesc::DOMDocument&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (const ::std::basic_string< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (const ::std::basic_string< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (const ::std::basic_string< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (::std::istream&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (::std::istream&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (::std::istream&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (const ::xercesc::DOMInputSource&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (const ::xercesc::DOMInputSource&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (const ::xercesc::DOMInputSource&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (const ::xercesc::DOMDocument&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (const ::std::basic_string< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (const ::std::basic_string< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (const ::std::basic_string< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (::std::istream&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (::std::istream&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (::std::istream&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (const ::xercesc::DOMInputSource&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (const ::xercesc::DOMInputSource&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (const ::xercesc::DOMInputSource&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (const ::xercesc::DOMDocument&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (const ::std::basic_string< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (const ::std::basic_string< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (const ::std::basic_string< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (::std::istream&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (::std::istream&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (::std::istream&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (const ::xercesc::DOMInputSource&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (const ::xercesc::DOMInputSource&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (const ::xercesc::DOMInputSource&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (const ::xercesc::DOMDocument&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (const ::std::basic_string< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (const ::std::basic_string< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (const ::std::basic_string< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (::std::istream&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (::std::istream&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (::std::istream&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::string >
    Artifact (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (const ::xercesc::DOMInputSource&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (const ::xercesc::DOMInputSource&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (const ::xercesc::DOMInputSource&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (const ::xercesc::DOMDocument&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (const ::std::basic_string< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (const ::std::basic_string< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (const ::std::basic_string< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (::std::istream&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (::std::istream&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (::std::istream&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (const ::xercesc::DOMInputSource&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (const ::xercesc::DOMInputSource&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (const ::xercesc::DOMInputSource&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (const ::xercesc::DOMDocument&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (const ::std::basic_string< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (const ::std::basic_string< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (const ::std::basic_string< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (::std::istream&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (::std::istream&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (::std::istream&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (const ::xercesc::DOMInputSource&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (const ::xercesc::DOMInputSource&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (const ::xercesc::DOMInputSource&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (const ::xercesc::DOMDocument&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    NewID (const ::std::basic_string< wchar_t >&,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    NewID (const ::std::basic_string< wchar_t >&,
           ::xsd::cxx::xml::error_handler< wchar_t >&,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    NewID (const ::std::basic_string< wchar_t >&,
           ::xercesc::DOMErrorHandler&,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    NewID (::std::istream&,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    NewID (::std::istream&,
           ::xsd::cxx::xml::error_handler< wchar_t >&,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    NewID (::std::istream&,
           ::xercesc::DOMErrorHandler&,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::string >
    NewID (::std::istream&,
           const ::std::basic_string< wchar_t >& id,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    NewID (::std::istream&,
           const ::std::basic_string< wchar_t >& id,
           ::xsd::cxx::xml::error_handler< wchar_t >&,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    NewID (::std::istream&,
           const ::std::basic_string< wchar_t >& id,
           ::xercesc::DOMErrorHandler&,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    NewID (const ::xercesc::DOMInputSource&,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    NewID (const ::xercesc::DOMInputSource&,
           ::xsd::cxx::xml::error_handler< wchar_t >&,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    NewID (const ::xercesc::DOMInputSource&,
           ::xercesc::DOMErrorHandler&,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::string >
    NewID (const ::xercesc::DOMDocument&,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (const ::std::basic_string< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (const ::std::basic_string< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (const ::std::basic_string< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (::std::istream&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (::std::istream&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (::std::istream&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (const ::xercesc::DOMInputSource&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (const ::xercesc::DOMInputSource&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (const ::xercesc::DOMInputSource&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (const ::xercesc::DOMDocument&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (const ::std::basic_string< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (const ::std::basic_string< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (const ::std::basic_string< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (::std::istream&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (::std::istream&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (::std::istream&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (const ::xercesc::DOMInputSource&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (const ::xercesc::DOMInputSource&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (const ::xercesc::DOMInputSource&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (const ::xercesc::DOMDocument&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (const ::std::basic_string< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (const ::std::basic_string< wchar_t >&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (const ::std::basic_string< wchar_t >&,
                          ::xercesc::DOMErrorHandler&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (::std::istream&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (::std::istream&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (::std::istream&,
                          ::xercesc::DOMErrorHandler&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (::std::istream&,
                          const ::std::basic_string< wchar_t >& id,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (::std::istream&,
                          const ::std::basic_string< wchar_t >& id,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (::std::istream&,
                          const ::std::basic_string< wchar_t >& id,
                          ::xercesc::DOMErrorHandler&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (const ::xercesc::DOMInputSource&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (const ::xercesc::DOMInputSource&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (const ::xercesc::DOMInputSource&,
                          ::xercesc::DOMErrorHandler&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (const ::xercesc::DOMDocument&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (const ::std::basic_string< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (const ::std::basic_string< wchar_t >&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (const ::std::basic_string< wchar_t >&,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (::std::istream&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (::std::istream&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (::std::istream&,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (::std::istream&,
                   const ::std::basic_string< wchar_t >& id,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (::std::istream&,
                   const ::std::basic_string< wchar_t >& id,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (::std::istream&,
                   const ::std::basic_string< wchar_t >& id,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (const ::xercesc::DOMInputSource&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (const ::xercesc::DOMInputSource&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (const ::xercesc::DOMInputSource&,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (const ::xercesc::DOMDocument&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (const ::std::basic_string< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (const ::std::basic_string< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (const ::std::basic_string< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (::std::istream&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (::std::istream&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (::std::istream&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (const ::xercesc::DOMInputSource&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (const ::xercesc::DOMInputSource&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (const ::xercesc::DOMInputSource&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (const ::xercesc::DOMDocument&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (const ::std::basic_string< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (const ::std::basic_string< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (const ::std::basic_string< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (::std::istream&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (::std::istream&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (::std::istream&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (const ::xercesc::DOMInputSource&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (const ::xercesc::DOMInputSource&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (const ::xercesc::DOMInputSource&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (const ::xercesc::DOMDocument&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (const ::std::basic_string< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (const ::std::basic_string< wchar_t >&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (const ::std::basic_string< wchar_t >&,
                          ::xercesc::DOMErrorHandler&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (::std::istream&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (::std::istream&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (::std::istream&,
                          ::xercesc::DOMErrorHandler&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (::std::istream&,
                          const ::std::basic_string< wchar_t >& id,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (::std::istream&,
                          const ::std::basic_string< wchar_t >& id,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (::std::istream&,
                          const ::std::basic_string< wchar_t >& id,
                          ::xercesc::DOMErrorHandler&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (const ::xercesc::DOMInputSource&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (const ::xercesc::DOMInputSource&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (const ::xercesc::DOMInputSource&,
                          ::xercesc::DOMErrorHandler&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (const ::xercesc::DOMDocument&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (const ::std::basic_string< wchar_t >&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (const ::std::basic_string< wchar_t >&,
                           ::xsd::cxx::xml::error_handler< wchar_t >&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (const ::std::basic_string< wchar_t >&,
                           ::xercesc::DOMErrorHandler&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (::std::istream&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (::std::istream&,
                           ::xsd::cxx::xml::error_handler< wchar_t >&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (::std::istream&,
                           ::xercesc::DOMErrorHandler&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (::std::istream&,
                           const ::std::basic_string< wchar_t >& id,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (::std::istream&,
                           const ::std::basic_string< wchar_t >& id,
                           ::xsd::cxx::xml::error_handler< wchar_t >&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (::std::istream&,
                           const ::std::basic_string< wchar_t >& id,
                           ::xercesc::DOMErrorHandler&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (const ::xercesc::DOMInputSource&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (const ::xercesc::DOMInputSource&,
                           ::xsd::cxx::xml::error_handler< wchar_t >&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (const ::xercesc::DOMInputSource&,
                           ::xercesc::DOMErrorHandler&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (const ::xercesc::DOMDocument&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());
  }
}

#include <iosfwd> // std::ostream&

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace saml2
{
  namespace protocol
  {
    void
    operator<< (::xercesc::DOMElement&,
                const RequestAbstractType&);

    // Serialize to an existing DOM instance.
    //
    void
    Extensions (::xercesc::DOMDocument&,
                const ::saml2::protocol::ExtensionsType&,
                ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Extensions (const ::saml2::protocol::ExtensionsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Extensions (::xercesc::XMLFormatTarget&,
                const ::saml2::protocol::ExtensionsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    Extensions (::xercesc::XMLFormatTarget&,
                const ::saml2::protocol::ExtensionsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);

    void
    Extensions (::xercesc::XMLFormatTarget&,
                const ::saml2::protocol::ExtensionsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Extensions (::std::ostream&,
                const ::saml2::protocol::ExtensionsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    Extensions (::std::ostream&,
                const ::saml2::protocol::ExtensionsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);

    void
    Extensions (::std::ostream&,
                const ::saml2::protocol::ExtensionsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ExtensionsType&);

    void
    operator<< (::xercesc::DOMAttr&,
                const ExtensionsType&);

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                const ExtensionsType&);

    void
    operator<< (::xercesc::DOMElement&,
                const StatusResponseType&);

    // Serialize to an existing DOM instance.
    //
    void
    Status (::xercesc::DOMDocument&,
            const ::saml2::protocol::StatusType&,
            ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Status (const ::saml2::protocol::StatusType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Status (::xercesc::XMLFormatTarget&,
            const ::saml2::protocol::StatusType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    Status (::xercesc::XMLFormatTarget&,
            const ::saml2::protocol::StatusType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    Status (::xercesc::XMLFormatTarget&,
            const ::saml2::protocol::StatusType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Status (::std::ostream&,
            const ::saml2::protocol::StatusType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    Status (::std::ostream&,
            const ::saml2::protocol::StatusType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    Status (::std::ostream&,
            const ::saml2::protocol::StatusType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const StatusType&);

    // Serialize to an existing DOM instance.
    //
    void
    StatusCode (::xercesc::DOMDocument&,
                const ::saml2::protocol::StatusCodeType&,
                ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    StatusCode (const ::saml2::protocol::StatusCodeType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    StatusCode (::xercesc::XMLFormatTarget&,
                const ::saml2::protocol::StatusCodeType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    StatusCode (::xercesc::XMLFormatTarget&,
                const ::saml2::protocol::StatusCodeType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);

    void
    StatusCode (::xercesc::XMLFormatTarget&,
                const ::saml2::protocol::StatusCodeType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    StatusCode (::std::ostream&,
                const ::saml2::protocol::StatusCodeType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    StatusCode (::std::ostream&,
                const ::saml2::protocol::StatusCodeType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);

    void
    StatusCode (::std::ostream&,
                const ::saml2::protocol::StatusCodeType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const StatusCodeType&);

    // Serialize to an existing DOM instance.
    //
    void
    StatusMessage (::xercesc::DOMDocument&,
                   const ::xml_schema::string&,
                   ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    StatusMessage (const ::xml_schema::string&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    StatusMessage (::xercesc::XMLFormatTarget&,
                   const ::xml_schema::string&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    void
    StatusMessage (::xercesc::XMLFormatTarget&,
                   const ::xml_schema::string&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);

    void
    StatusMessage (::xercesc::XMLFormatTarget&,
                   const ::xml_schema::string&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xercesc::DOMErrorHandler&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    StatusMessage (::std::ostream&,
                   const ::xml_schema::string&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    void
    StatusMessage (::std::ostream&,
                   const ::xml_schema::string&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);

    void
    StatusMessage (::std::ostream&,
                   const ::xml_schema::string&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xercesc::DOMErrorHandler&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    StatusDetail (::xercesc::DOMDocument&,
                  const ::saml2::protocol::StatusDetailType&,
                  ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    StatusDetail (const ::saml2::protocol::StatusDetailType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    StatusDetail (::xercesc::XMLFormatTarget&,
                  const ::saml2::protocol::StatusDetailType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    StatusDetail (::xercesc::XMLFormatTarget&,
                  const ::saml2::protocol::StatusDetailType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);

    void
    StatusDetail (::xercesc::XMLFormatTarget&,
                  const ::saml2::protocol::StatusDetailType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    StatusDetail (::std::ostream&,
                  const ::saml2::protocol::StatusDetailType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    StatusDetail (::std::ostream&,
                  const ::saml2::protocol::StatusDetailType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);

    void
    StatusDetail (::std::ostream&,
                  const ::saml2::protocol::StatusDetailType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const StatusDetailType&);

    void
    operator<< (::xercesc::DOMAttr&,
                const StatusDetailType&);

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                const StatusDetailType&);

    // Serialize to an existing DOM instance.
    //
    void
    AssertionIDRequest (::xercesc::DOMDocument&,
                        const ::saml2::protocol::AssertionIDRequestType&,
                        ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AssertionIDRequest (const ::saml2::protocol::AssertionIDRequestType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AssertionIDRequest (::xercesc::XMLFormatTarget&,
                        const ::saml2::protocol::AssertionIDRequestType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    void
    AssertionIDRequest (::xercesc::XMLFormatTarget&,
                        const ::saml2::protocol::AssertionIDRequestType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);

    void
    AssertionIDRequest (::xercesc::XMLFormatTarget&,
                        const ::saml2::protocol::AssertionIDRequestType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AssertionIDRequest (::std::ostream&,
                        const ::saml2::protocol::AssertionIDRequestType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    void
    AssertionIDRequest (::std::ostream&,
                        const ::saml2::protocol::AssertionIDRequestType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);

    void
    AssertionIDRequest (::std::ostream&,
                        const ::saml2::protocol::AssertionIDRequestType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const AssertionIDRequestType&);

    // Serialize to an existing DOM instance.
    //
    void
    SubjectQuery (::xercesc::DOMDocument&,
                  const ::saml2::protocol::SubjectQueryAbstractType&,
                  ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SubjectQuery (const ::saml2::protocol::SubjectQueryAbstractType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    SubjectQuery (::xercesc::XMLFormatTarget&,
                  const ::saml2::protocol::SubjectQueryAbstractType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    SubjectQuery (::xercesc::XMLFormatTarget&,
                  const ::saml2::protocol::SubjectQueryAbstractType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);

    void
    SubjectQuery (::xercesc::XMLFormatTarget&,
                  const ::saml2::protocol::SubjectQueryAbstractType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    SubjectQuery (::std::ostream&,
                  const ::saml2::protocol::SubjectQueryAbstractType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    SubjectQuery (::std::ostream&,
                  const ::saml2::protocol::SubjectQueryAbstractType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);

    void
    SubjectQuery (::std::ostream&,
                  const ::saml2::protocol::SubjectQueryAbstractType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const SubjectQueryAbstractType&);

    // Serialize to an existing DOM instance.
    //
    void
    AuthnQuery (::xercesc::DOMDocument&,
                const ::saml2::protocol::AuthnQueryType&,
                ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthnQuery (const ::saml2::protocol::AuthnQueryType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AuthnQuery (::xercesc::XMLFormatTarget&,
                const ::saml2::protocol::AuthnQueryType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    AuthnQuery (::xercesc::XMLFormatTarget&,
                const ::saml2::protocol::AuthnQueryType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);

    void
    AuthnQuery (::xercesc::XMLFormatTarget&,
                const ::saml2::protocol::AuthnQueryType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AuthnQuery (::std::ostream&,
                const ::saml2::protocol::AuthnQueryType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    AuthnQuery (::std::ostream&,
                const ::saml2::protocol::AuthnQueryType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);

    void
    AuthnQuery (::std::ostream&,
                const ::saml2::protocol::AuthnQueryType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const AuthnQueryType&);

    // Serialize to an existing DOM instance.
    //
    void
    RequestedAuthnContext (::xercesc::DOMDocument&,
                           const ::saml2::protocol::RequestedAuthnContextType&,
                           ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    RequestedAuthnContext (const ::saml2::protocol::RequestedAuthnContextType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    RequestedAuthnContext (::xercesc::XMLFormatTarget&,
                           const ::saml2::protocol::RequestedAuthnContextType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           const ::std::basic_string< wchar_t >& = L"UTF-8",
                           ::xml_schema::flags = 0);


    void
    RequestedAuthnContext (::xercesc::XMLFormatTarget&,
                           const ::saml2::protocol::RequestedAuthnContextType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           ::xsd::cxx::xml::error_handler< wchar_t >&,
                           const ::std::basic_string< wchar_t >& = L"UTF-8",
                           ::xml_schema::flags = 0);

    void
    RequestedAuthnContext (::xercesc::XMLFormatTarget&,
                           const ::saml2::protocol::RequestedAuthnContextType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           ::xercesc::DOMErrorHandler&,
                           const ::std::basic_string< wchar_t >& = L"UTF-8",
                           ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    RequestedAuthnContext (::std::ostream&,
                           const ::saml2::protocol::RequestedAuthnContextType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           const ::std::basic_string< wchar_t >& = L"UTF-8",
                           ::xml_schema::flags = 0);


    void
    RequestedAuthnContext (::std::ostream&,
                           const ::saml2::protocol::RequestedAuthnContextType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           ::xsd::cxx::xml::error_handler< wchar_t >&,
                           const ::std::basic_string< wchar_t >& = L"UTF-8",
                           ::xml_schema::flags = 0);

    void
    RequestedAuthnContext (::std::ostream&,
                           const ::saml2::protocol::RequestedAuthnContextType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           ::xercesc::DOMErrorHandler&,
                           const ::std::basic_string< wchar_t >& = L"UTF-8",
                           ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const RequestedAuthnContextType&);

    void
    operator<< (::xercesc::DOMElement&,
                AuthnContextComparisonType);

    void
    operator<< (::xercesc::DOMAttr&,
                AuthnContextComparisonType);

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                AuthnContextComparisonType);

    // Serialize to an existing DOM instance.
    //
    void
    AttributeQuery (::xercesc::DOMDocument&,
                    const ::saml2::protocol::AttributeQueryType&,
                    ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeQuery (const ::saml2::protocol::AttributeQueryType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AttributeQuery (::xercesc::XMLFormatTarget&,
                    const ::saml2::protocol::AttributeQueryType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    AttributeQuery (::xercesc::XMLFormatTarget&,
                    const ::saml2::protocol::AttributeQueryType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);

    void
    AttributeQuery (::xercesc::XMLFormatTarget&,
                    const ::saml2::protocol::AttributeQueryType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AttributeQuery (::std::ostream&,
                    const ::saml2::protocol::AttributeQueryType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    AttributeQuery (::std::ostream&,
                    const ::saml2::protocol::AttributeQueryType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);

    void
    AttributeQuery (::std::ostream&,
                    const ::saml2::protocol::AttributeQueryType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const AttributeQueryType&);

    // Serialize to an existing DOM instance.
    //
    void
    AuthzDecisionQuery (::xercesc::DOMDocument&,
                        const ::saml2::protocol::AuthzDecisionQueryType&,
                        ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthzDecisionQuery (const ::saml2::protocol::AuthzDecisionQueryType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AuthzDecisionQuery (::xercesc::XMLFormatTarget&,
                        const ::saml2::protocol::AuthzDecisionQueryType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    void
    AuthzDecisionQuery (::xercesc::XMLFormatTarget&,
                        const ::saml2::protocol::AuthzDecisionQueryType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);

    void
    AuthzDecisionQuery (::xercesc::XMLFormatTarget&,
                        const ::saml2::protocol::AuthzDecisionQueryType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AuthzDecisionQuery (::std::ostream&,
                        const ::saml2::protocol::AuthzDecisionQueryType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    void
    AuthzDecisionQuery (::std::ostream&,
                        const ::saml2::protocol::AuthzDecisionQueryType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);

    void
    AuthzDecisionQuery (::std::ostream&,
                        const ::saml2::protocol::AuthzDecisionQueryType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const AuthzDecisionQueryType&);

    // Serialize to an existing DOM instance.
    //
    void
    AuthnRequest (::xercesc::DOMDocument&,
                  const ::saml2::protocol::AuthnRequestType&,
                  ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthnRequest (const ::saml2::protocol::AuthnRequestType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AuthnRequest (::xercesc::XMLFormatTarget&,
                  const ::saml2::protocol::AuthnRequestType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    AuthnRequest (::xercesc::XMLFormatTarget&,
                  const ::saml2::protocol::AuthnRequestType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);

    void
    AuthnRequest (::xercesc::XMLFormatTarget&,
                  const ::saml2::protocol::AuthnRequestType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AuthnRequest (::std::ostream&,
                  const ::saml2::protocol::AuthnRequestType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    AuthnRequest (::std::ostream&,
                  const ::saml2::protocol::AuthnRequestType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);

    void
    AuthnRequest (::std::ostream&,
                  const ::saml2::protocol::AuthnRequestType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const AuthnRequestType&);

    // Serialize to an existing DOM instance.
    //
    void
    NameIDPolicy (::xercesc::DOMDocument&,
                  const ::saml2::protocol::NameIDPolicyType&,
                  ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    NameIDPolicy (const ::saml2::protocol::NameIDPolicyType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    NameIDPolicy (::xercesc::XMLFormatTarget&,
                  const ::saml2::protocol::NameIDPolicyType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    NameIDPolicy (::xercesc::XMLFormatTarget&,
                  const ::saml2::protocol::NameIDPolicyType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);

    void
    NameIDPolicy (::xercesc::XMLFormatTarget&,
                  const ::saml2::protocol::NameIDPolicyType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    NameIDPolicy (::std::ostream&,
                  const ::saml2::protocol::NameIDPolicyType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    NameIDPolicy (::std::ostream&,
                  const ::saml2::protocol::NameIDPolicyType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);

    void
    NameIDPolicy (::std::ostream&,
                  const ::saml2::protocol::NameIDPolicyType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const NameIDPolicyType&);

    // Serialize to an existing DOM instance.
    //
    void
    Scoping (::xercesc::DOMDocument&,
             const ::saml2::protocol::ScopingType&,
             ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Scoping (const ::saml2::protocol::ScopingType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Scoping (::xercesc::XMLFormatTarget&,
             const ::saml2::protocol::ScopingType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    Scoping (::xercesc::XMLFormatTarget&,
             const ::saml2::protocol::ScopingType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);

    void
    Scoping (::xercesc::XMLFormatTarget&,
             const ::saml2::protocol::ScopingType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Scoping (::std::ostream&,
             const ::saml2::protocol::ScopingType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    Scoping (::std::ostream&,
             const ::saml2::protocol::ScopingType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);

    void
    Scoping (::std::ostream&,
             const ::saml2::protocol::ScopingType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ScopingType&);

    // Serialize to an existing DOM instance.
    //
    void
    RequesterID (::xercesc::DOMDocument&,
                 const ::xml_schema::uri&,
                 ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    RequesterID (const ::xml_schema::uri&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    RequesterID (::xercesc::XMLFormatTarget&,
                 const ::xml_schema::uri&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    RequesterID (::xercesc::XMLFormatTarget&,
                 const ::xml_schema::uri&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);

    void
    RequesterID (::xercesc::XMLFormatTarget&,
                 const ::xml_schema::uri&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    RequesterID (::std::ostream&,
                 const ::xml_schema::uri&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    RequesterID (::std::ostream&,
                 const ::xml_schema::uri&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);

    void
    RequesterID (::std::ostream&,
                 const ::xml_schema::uri&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    IDPList (::xercesc::DOMDocument&,
             const ::saml2::protocol::IDPListType&,
             ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    IDPList (const ::saml2::protocol::IDPListType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    IDPList (::xercesc::XMLFormatTarget&,
             const ::saml2::protocol::IDPListType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    IDPList (::xercesc::XMLFormatTarget&,
             const ::saml2::protocol::IDPListType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);

    void
    IDPList (::xercesc::XMLFormatTarget&,
             const ::saml2::protocol::IDPListType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    IDPList (::std::ostream&,
             const ::saml2::protocol::IDPListType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    IDPList (::std::ostream&,
             const ::saml2::protocol::IDPListType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);

    void
    IDPList (::std::ostream&,
             const ::saml2::protocol::IDPListType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const IDPListType&);

    // Serialize to an existing DOM instance.
    //
    void
    IDPEntry (::xercesc::DOMDocument&,
              const ::saml2::protocol::IDPEntryType&,
              ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    IDPEntry (const ::saml2::protocol::IDPEntryType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    IDPEntry (::xercesc::XMLFormatTarget&,
              const ::saml2::protocol::IDPEntryType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    IDPEntry (::xercesc::XMLFormatTarget&,
              const ::saml2::protocol::IDPEntryType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    IDPEntry (::xercesc::XMLFormatTarget&,
              const ::saml2::protocol::IDPEntryType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    IDPEntry (::std::ostream&,
              const ::saml2::protocol::IDPEntryType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    IDPEntry (::std::ostream&,
              const ::saml2::protocol::IDPEntryType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    IDPEntry (::std::ostream&,
              const ::saml2::protocol::IDPEntryType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const IDPEntryType&);

    // Serialize to an existing DOM instance.
    //
    void
    GetComplete (::xercesc::DOMDocument&,
                 const ::xml_schema::uri&,
                 ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    GetComplete (const ::xml_schema::uri&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    GetComplete (::xercesc::XMLFormatTarget&,
                 const ::xml_schema::uri&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    GetComplete (::xercesc::XMLFormatTarget&,
                 const ::xml_schema::uri&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);

    void
    GetComplete (::xercesc::XMLFormatTarget&,
                 const ::xml_schema::uri&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    GetComplete (::std::ostream&,
                 const ::xml_schema::uri&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    GetComplete (::std::ostream&,
                 const ::xml_schema::uri&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);

    void
    GetComplete (::std::ostream&,
                 const ::xml_schema::uri&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    Response (::xercesc::DOMDocument&,
              const ::saml2::protocol::ResponseType&,
              ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Response (const ::saml2::protocol::ResponseType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Response (::xercesc::XMLFormatTarget&,
              const ::saml2::protocol::ResponseType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    Response (::xercesc::XMLFormatTarget&,
              const ::saml2::protocol::ResponseType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    Response (::xercesc::XMLFormatTarget&,
              const ::saml2::protocol::ResponseType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Response (::std::ostream&,
              const ::saml2::protocol::ResponseType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    Response (::std::ostream&,
              const ::saml2::protocol::ResponseType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    Response (::std::ostream&,
              const ::saml2::protocol::ResponseType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ResponseType&);

    // Serialize to an existing DOM instance.
    //
    void
    ArtifactResolve (::xercesc::DOMDocument&,
                     const ::saml2::protocol::ArtifactResolveType&,
                     ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ArtifactResolve (const ::saml2::protocol::ArtifactResolveType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    ArtifactResolve (::xercesc::XMLFormatTarget&,
                     const ::saml2::protocol::ArtifactResolveType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    ArtifactResolve (::xercesc::XMLFormatTarget&,
                     const ::saml2::protocol::ArtifactResolveType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);

    void
    ArtifactResolve (::xercesc::XMLFormatTarget&,
                     const ::saml2::protocol::ArtifactResolveType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    ArtifactResolve (::std::ostream&,
                     const ::saml2::protocol::ArtifactResolveType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    ArtifactResolve (::std::ostream&,
                     const ::saml2::protocol::ArtifactResolveType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);

    void
    ArtifactResolve (::std::ostream&,
                     const ::saml2::protocol::ArtifactResolveType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ArtifactResolveType&);

    // Serialize to an existing DOM instance.
    //
    void
    Artifact (::xercesc::DOMDocument&,
              const ::xml_schema::string&,
              ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Artifact (const ::xml_schema::string&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Artifact (::xercesc::XMLFormatTarget&,
              const ::xml_schema::string&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    Artifact (::xercesc::XMLFormatTarget&,
              const ::xml_schema::string&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    Artifact (::xercesc::XMLFormatTarget&,
              const ::xml_schema::string&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Artifact (::std::ostream&,
              const ::xml_schema::string&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    Artifact (::std::ostream&,
              const ::xml_schema::string&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    Artifact (::std::ostream&,
              const ::xml_schema::string&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    ArtifactResponse (::xercesc::DOMDocument&,
                      const ::saml2::protocol::ArtifactResponseType&,
                      ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ArtifactResponse (const ::saml2::protocol::ArtifactResponseType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    ArtifactResponse (::xercesc::XMLFormatTarget&,
                      const ::saml2::protocol::ArtifactResponseType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    void
    ArtifactResponse (::xercesc::XMLFormatTarget&,
                      const ::saml2::protocol::ArtifactResponseType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);

    void
    ArtifactResponse (::xercesc::XMLFormatTarget&,
                      const ::saml2::protocol::ArtifactResponseType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    ArtifactResponse (::std::ostream&,
                      const ::saml2::protocol::ArtifactResponseType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    void
    ArtifactResponse (::std::ostream&,
                      const ::saml2::protocol::ArtifactResponseType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);

    void
    ArtifactResponse (::std::ostream&,
                      const ::saml2::protocol::ArtifactResponseType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ArtifactResponseType&);

    // Serialize to an existing DOM instance.
    //
    void
    ManageNameIDRequest (::xercesc::DOMDocument&,
                         const ::saml2::protocol::ManageNameIDRequestType&,
                         ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ManageNameIDRequest (const ::saml2::protocol::ManageNameIDRequestType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    ManageNameIDRequest (::xercesc::XMLFormatTarget&,
                         const ::saml2::protocol::ManageNameIDRequestType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    void
    ManageNameIDRequest (::xercesc::XMLFormatTarget&,
                         const ::saml2::protocol::ManageNameIDRequestType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);

    void
    ManageNameIDRequest (::xercesc::XMLFormatTarget&,
                         const ::saml2::protocol::ManageNameIDRequestType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    ManageNameIDRequest (::std::ostream&,
                         const ::saml2::protocol::ManageNameIDRequestType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    void
    ManageNameIDRequest (::std::ostream&,
                         const ::saml2::protocol::ManageNameIDRequestType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);

    void
    ManageNameIDRequest (::std::ostream&,
                         const ::saml2::protocol::ManageNameIDRequestType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ManageNameIDRequestType&);

    // Serialize to an existing DOM instance.
    //
    void
    NewID (::xercesc::DOMDocument&,
           const ::xml_schema::string&,
           ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    NewID (const ::xml_schema::string&, 
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
           ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    NewID (::xercesc::XMLFormatTarget&,
           const ::xml_schema::string&, 
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
           const ::std::basic_string< wchar_t >& = L"UTF-8",
           ::xml_schema::flags = 0);


    void
    NewID (::xercesc::XMLFormatTarget&,
           const ::xml_schema::string&, 
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
           ::xsd::cxx::xml::error_handler< wchar_t >&,
           const ::std::basic_string< wchar_t >& = L"UTF-8",
           ::xml_schema::flags = 0);

    void
    NewID (::xercesc::XMLFormatTarget&,
           const ::xml_schema::string&, 
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
           ::xercesc::DOMErrorHandler&,
           const ::std::basic_string< wchar_t >& = L"UTF-8",
           ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    NewID (::std::ostream&,
           const ::xml_schema::string&, 
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
           const ::std::basic_string< wchar_t >& = L"UTF-8",
           ::xml_schema::flags = 0);


    void
    NewID (::std::ostream&,
           const ::xml_schema::string&, 
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
           ::xsd::cxx::xml::error_handler< wchar_t >&,
           const ::std::basic_string< wchar_t >& = L"UTF-8",
           ::xml_schema::flags = 0);

    void
    NewID (::std::ostream&,
           const ::xml_schema::string&, 
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
           ::xercesc::DOMErrorHandler&,
           const ::std::basic_string< wchar_t >& = L"UTF-8",
           ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    NewEncryptedID (::xercesc::DOMDocument&,
                    const ::saml2::assertion::EncryptedElementType&,
                    ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    NewEncryptedID (const ::saml2::assertion::EncryptedElementType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    NewEncryptedID (::xercesc::XMLFormatTarget&,
                    const ::saml2::assertion::EncryptedElementType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    NewEncryptedID (::xercesc::XMLFormatTarget&,
                    const ::saml2::assertion::EncryptedElementType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);

    void
    NewEncryptedID (::xercesc::XMLFormatTarget&,
                    const ::saml2::assertion::EncryptedElementType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    NewEncryptedID (::std::ostream&,
                    const ::saml2::assertion::EncryptedElementType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    NewEncryptedID (::std::ostream&,
                    const ::saml2::assertion::EncryptedElementType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);

    void
    NewEncryptedID (::std::ostream&,
                    const ::saml2::assertion::EncryptedElementType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    Terminate (::xercesc::DOMDocument&,
               const ::saml2::protocol::TerminateType&,
               ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Terminate (const ::saml2::protocol::TerminateType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Terminate (::xercesc::XMLFormatTarget&,
               const ::saml2::protocol::TerminateType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    Terminate (::xercesc::XMLFormatTarget&,
               const ::saml2::protocol::TerminateType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    Terminate (::xercesc::XMLFormatTarget&,
               const ::saml2::protocol::TerminateType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Terminate (::std::ostream&,
               const ::saml2::protocol::TerminateType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    Terminate (::std::ostream&,
               const ::saml2::protocol::TerminateType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    Terminate (::std::ostream&,
               const ::saml2::protocol::TerminateType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const TerminateType&);

    void
    operator<< (::xercesc::DOMAttr&,
                const TerminateType&);

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                const TerminateType&);

    // Serialize to an existing DOM instance.
    //
    void
    ManageNameIDResponse (::xercesc::DOMDocument&,
                          const ::saml2::protocol::StatusResponseType&,
                          ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ManageNameIDResponse (const ::saml2::protocol::StatusResponseType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    ManageNameIDResponse (::xercesc::XMLFormatTarget&,
                          const ::saml2::protocol::StatusResponseType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);


    void
    ManageNameIDResponse (::xercesc::XMLFormatTarget&,
                          const ::saml2::protocol::StatusResponseType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);

    void
    ManageNameIDResponse (::xercesc::XMLFormatTarget&,
                          const ::saml2::protocol::StatusResponseType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xercesc::DOMErrorHandler&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    ManageNameIDResponse (::std::ostream&,
                          const ::saml2::protocol::StatusResponseType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);


    void
    ManageNameIDResponse (::std::ostream&,
                          const ::saml2::protocol::StatusResponseType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);

    void
    ManageNameIDResponse (::std::ostream&,
                          const ::saml2::protocol::StatusResponseType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xercesc::DOMErrorHandler&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    LogoutRequest (::xercesc::DOMDocument&,
                   const ::saml2::protocol::LogoutRequestType&,
                   ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    LogoutRequest (const ::saml2::protocol::LogoutRequestType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    LogoutRequest (::xercesc::XMLFormatTarget&,
                   const ::saml2::protocol::LogoutRequestType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    void
    LogoutRequest (::xercesc::XMLFormatTarget&,
                   const ::saml2::protocol::LogoutRequestType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);

    void
    LogoutRequest (::xercesc::XMLFormatTarget&,
                   const ::saml2::protocol::LogoutRequestType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xercesc::DOMErrorHandler&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    LogoutRequest (::std::ostream&,
                   const ::saml2::protocol::LogoutRequestType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    void
    LogoutRequest (::std::ostream&,
                   const ::saml2::protocol::LogoutRequestType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);

    void
    LogoutRequest (::std::ostream&,
                   const ::saml2::protocol::LogoutRequestType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xercesc::DOMErrorHandler&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const LogoutRequestType&);

    // Serialize to an existing DOM instance.
    //
    void
    SessionIndex (::xercesc::DOMDocument&,
                  const ::xml_schema::string&,
                  ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SessionIndex (const ::xml_schema::string&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    SessionIndex (::xercesc::XMLFormatTarget&,
                  const ::xml_schema::string&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    SessionIndex (::xercesc::XMLFormatTarget&,
                  const ::xml_schema::string&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);

    void
    SessionIndex (::xercesc::XMLFormatTarget&,
                  const ::xml_schema::string&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    SessionIndex (::std::ostream&,
                  const ::xml_schema::string&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    SessionIndex (::std::ostream&,
                  const ::xml_schema::string&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);

    void
    SessionIndex (::std::ostream&,
                  const ::xml_schema::string&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    LogoutResponse (::xercesc::DOMDocument&,
                    const ::saml2::protocol::StatusResponseType&,
                    ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    LogoutResponse (const ::saml2::protocol::StatusResponseType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    LogoutResponse (::xercesc::XMLFormatTarget&,
                    const ::saml2::protocol::StatusResponseType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    LogoutResponse (::xercesc::XMLFormatTarget&,
                    const ::saml2::protocol::StatusResponseType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);

    void
    LogoutResponse (::xercesc::XMLFormatTarget&,
                    const ::saml2::protocol::StatusResponseType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    LogoutResponse (::std::ostream&,
                    const ::saml2::protocol::StatusResponseType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    LogoutResponse (::std::ostream&,
                    const ::saml2::protocol::StatusResponseType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);

    void
    LogoutResponse (::std::ostream&,
                    const ::saml2::protocol::StatusResponseType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    NameIDMappingRequest (::xercesc::DOMDocument&,
                          const ::saml2::protocol::NameIDMappingRequestType&,
                          ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    NameIDMappingRequest (const ::saml2::protocol::NameIDMappingRequestType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    NameIDMappingRequest (::xercesc::XMLFormatTarget&,
                          const ::saml2::protocol::NameIDMappingRequestType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);


    void
    NameIDMappingRequest (::xercesc::XMLFormatTarget&,
                          const ::saml2::protocol::NameIDMappingRequestType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);

    void
    NameIDMappingRequest (::xercesc::XMLFormatTarget&,
                          const ::saml2::protocol::NameIDMappingRequestType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xercesc::DOMErrorHandler&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    NameIDMappingRequest (::std::ostream&,
                          const ::saml2::protocol::NameIDMappingRequestType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);


    void
    NameIDMappingRequest (::std::ostream&,
                          const ::saml2::protocol::NameIDMappingRequestType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);

    void
    NameIDMappingRequest (::std::ostream&,
                          const ::saml2::protocol::NameIDMappingRequestType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xercesc::DOMErrorHandler&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const NameIDMappingRequestType&);

    // Serialize to an existing DOM instance.
    //
    void
    NameIDMappingResponse (::xercesc::DOMDocument&,
                           const ::saml2::protocol::NameIDMappingResponseType&,
                           ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    NameIDMappingResponse (const ::saml2::protocol::NameIDMappingResponseType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    NameIDMappingResponse (::xercesc::XMLFormatTarget&,
                           const ::saml2::protocol::NameIDMappingResponseType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           const ::std::basic_string< wchar_t >& = L"UTF-8",
                           ::xml_schema::flags = 0);


    void
    NameIDMappingResponse (::xercesc::XMLFormatTarget&,
                           const ::saml2::protocol::NameIDMappingResponseType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           ::xsd::cxx::xml::error_handler< wchar_t >&,
                           const ::std::basic_string< wchar_t >& = L"UTF-8",
                           ::xml_schema::flags = 0);

    void
    NameIDMappingResponse (::xercesc::XMLFormatTarget&,
                           const ::saml2::protocol::NameIDMappingResponseType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           ::xercesc::DOMErrorHandler&,
                           const ::std::basic_string< wchar_t >& = L"UTF-8",
                           ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    NameIDMappingResponse (::std::ostream&,
                           const ::saml2::protocol::NameIDMappingResponseType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           const ::std::basic_string< wchar_t >& = L"UTF-8",
                           ::xml_schema::flags = 0);


    void
    NameIDMappingResponse (::std::ostream&,
                           const ::saml2::protocol::NameIDMappingResponseType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           ::xsd::cxx::xml::error_handler< wchar_t >&,
                           const ::std::basic_string< wchar_t >& = L"UTF-8",
                           ::xml_schema::flags = 0);

    void
    NameIDMappingResponse (::std::ostream&,
                           const ::saml2::protocol::NameIDMappingResponseType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           ::xercesc::DOMErrorHandler&,
                           const ::std::basic_string< wchar_t >& = L"UTF-8",
                           ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const NameIDMappingResponseType&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SAML_SCHEMA_PROTOCOL_2_0_HXX
