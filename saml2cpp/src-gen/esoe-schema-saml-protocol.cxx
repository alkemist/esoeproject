// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "esoe-schema-saml-protocol.hxx"

namespace middleware
{
  namespace ESOEProtocolSchema
  {
    // ClearAuthzCacheRequestType
    // 

    const ClearAuthzCacheRequestType::Subject::container& ClearAuthzCacheRequestType::
    Subject () const
    {
      return this->_xsd_Subject_;
    }

    ClearAuthzCacheRequestType::Subject::container& ClearAuthzCacheRequestType::
    Subject ()
    {
      return this->_xsd_Subject_;
    }

    void ClearAuthzCacheRequestType::
    Subject (const Subject::type& Subject)
    {
      this->_xsd_Subject_.set (Subject);
    }

    void ClearAuthzCacheRequestType::
    Subject (const Subject::container& Subject)
    {
      this->_xsd_Subject_ = Subject;
    }

    void ClearAuthzCacheRequestType::
    Subject (::std::auto_ptr< Subject::type > Subject)
    {
      this->_xsd_Subject_.set (Subject);
    }

    const ClearAuthzCacheRequestType::Reason::type& ClearAuthzCacheRequestType::
    Reason () const
    {
      return this->_xsd_Reason_.get ();
    }

    ClearAuthzCacheRequestType::Reason::type& ClearAuthzCacheRequestType::
    Reason ()
    {
      return this->_xsd_Reason_.get ();
    }

    void ClearAuthzCacheRequestType::
    Reason (const Reason::type& Reason)
    {
      this->_xsd_Reason_.set (Reason);
    }

    void ClearAuthzCacheRequestType::
    Reason (::std::auto_ptr< Reason::type > Reason)
    {
      this->_xsd_Reason_.set (Reason);
    }


    // ClearAuthzCacheResponseType
    // 


    // ValidateInitializationRequestType
    // 

    const ValidateInitializationRequestType::ipAddress::container& ValidateInitializationRequestType::
    ipAddress () const
    {
      return this->_xsd_ipAddress_;
    }

    ValidateInitializationRequestType::ipAddress::container& ValidateInitializationRequestType::
    ipAddress ()
    {
      return this->_xsd_ipAddress_;
    }

    void ValidateInitializationRequestType::
    ipAddress (const ipAddress::container& ipAddress)
    {
      this->_xsd_ipAddress_ = ipAddress;
    }

    const ValidateInitializationRequestType::compileDate::type& ValidateInitializationRequestType::
    compileDate () const
    {
      return this->_xsd_compileDate_.get ();
    }

    ValidateInitializationRequestType::compileDate::type& ValidateInitializationRequestType::
    compileDate ()
    {
      return this->_xsd_compileDate_.get ();
    }

    void ValidateInitializationRequestType::
    compileDate (const compileDate::type& compileDate)
    {
      this->_xsd_compileDate_.set (compileDate);
    }

    void ValidateInitializationRequestType::
    compileDate (::std::auto_ptr< compileDate::type > compileDate)
    {
      this->_xsd_compileDate_.set (compileDate);
    }

    const ValidateInitializationRequestType::compileSystem::type& ValidateInitializationRequestType::
    compileSystem () const
    {
      return this->_xsd_compileSystem_.get ();
    }

    ValidateInitializationRequestType::compileSystem::type& ValidateInitializationRequestType::
    compileSystem ()
    {
      return this->_xsd_compileSystem_.get ();
    }

    void ValidateInitializationRequestType::
    compileSystem (const compileSystem::type& compileSystem)
    {
      this->_xsd_compileSystem_.set (compileSystem);
    }

    void ValidateInitializationRequestType::
    compileSystem (::std::auto_ptr< compileSystem::type > compileSystem)
    {
      this->_xsd_compileSystem_.set (compileSystem);
    }

    const ValidateInitializationRequestType::sw_version::type& ValidateInitializationRequestType::
    sw_version () const
    {
      return this->_xsd_sw_version_.get ();
    }

    ValidateInitializationRequestType::sw_version::type& ValidateInitializationRequestType::
    sw_version ()
    {
      return this->_xsd_sw_version_.get ();
    }

    void ValidateInitializationRequestType::
    sw_version (const sw_version::type& sw_version)
    {
      this->_xsd_sw_version_.set (sw_version);
    }

    void ValidateInitializationRequestType::
    sw_version (::std::auto_ptr< sw_version::type > sw_version)
    {
      this->_xsd_sw_version_.set (sw_version);
    }

    const ValidateInitializationRequestType::environment::type& ValidateInitializationRequestType::
    environment () const
    {
      return this->_xsd_environment_.get ();
    }

    ValidateInitializationRequestType::environment::type& ValidateInitializationRequestType::
    environment ()
    {
      return this->_xsd_environment_.get ();
    }

    void ValidateInitializationRequestType::
    environment (const environment::type& environment)
    {
      this->_xsd_environment_.set (environment);
    }

    void ValidateInitializationRequestType::
    environment (::std::auto_ptr< environment::type > environment)
    {
      this->_xsd_environment_.set (environment);
    }

    const ValidateInitializationRequestType::nodeId::type& ValidateInitializationRequestType::
    nodeId () const
    {
      return this->_xsd_nodeId_.get ();
    }

    ValidateInitializationRequestType::nodeId::type& ValidateInitializationRequestType::
    nodeId ()
    {
      return this->_xsd_nodeId_.get ();
    }

    void ValidateInitializationRequestType::
    nodeId (const nodeId::type& nodeId)
    {
      this->_xsd_nodeId_.set (nodeId);
    }

    void ValidateInitializationRequestType::
    nodeId (::std::auto_ptr< nodeId::type > nodeId)
    {
      this->_xsd_nodeId_.set (nodeId);
    }

    const ValidateInitializationRequestType::authzCacheIndex::type& ValidateInitializationRequestType::
    authzCacheIndex () const
    {
      return this->_xsd_authzCacheIndex_.get ();
    }

    ValidateInitializationRequestType::authzCacheIndex::type& ValidateInitializationRequestType::
    authzCacheIndex ()
    {
      return this->_xsd_authzCacheIndex_.get ();
    }

    void ValidateInitializationRequestType::
    authzCacheIndex (const authzCacheIndex::type& authzCacheIndex)
    {
      this->_xsd_authzCacheIndex_.set (authzCacheIndex);
    }


    // ValidateInitializationResponseType
    // 
  }
}

#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/parser.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_factory_plate< 0, wchar_t >
  type_factory_plate_init;
}

namespace middleware
{
  namespace ESOEProtocolSchema
  {
    // ClearAuthzCacheRequestType
    //

    ClearAuthzCacheRequestType::
    ClearAuthzCacheRequestType ()
    : ::saml2::protocol::RequestAbstractType (),
    _xsd_Subject_ (::xml_schema::flags (), this),
    _xsd_Reason_ (::xml_schema::flags (), this)
    {
    }

    ClearAuthzCacheRequestType::
    ClearAuthzCacheRequestType (const ID::type& _xsd_ID,
                                const Version::type& _xsd_Version,
                                const IssueInstant::type& _xsd_IssueInstant,
                                const Reason::type& _xsd_Reason)
    : ::saml2::protocol::RequestAbstractType (_xsd_ID,
                                              _xsd_Version,
                                              _xsd_IssueInstant),
    _xsd_Subject_ (::xml_schema::flags (), this),
    _xsd_Reason_ (_xsd_Reason,
                  ::xml_schema::flags (),
                  this)
    {
    }

    ClearAuthzCacheRequestType::
    ClearAuthzCacheRequestType (const ClearAuthzCacheRequestType& _xsd_ClearAuthzCacheRequestType,
                                ::xml_schema::flags f,
                                ::xml_schema::type* c)
    : ::saml2::protocol::RequestAbstractType (_xsd_ClearAuthzCacheRequestType, f, c),
    _xsd_Subject_ (_xsd_ClearAuthzCacheRequestType._xsd_Subject_,
                   f | ::xml_schema::flags::not_root,
                   this),
    _xsd_Reason_ (_xsd_ClearAuthzCacheRequestType._xsd_Reason_,
                  f | ::xml_schema::flags::not_root,
                  this)
    {
    }

    ClearAuthzCacheRequestType::
    ClearAuthzCacheRequestType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::type* c)
    : ::saml2::protocol::RequestAbstractType (e, f, c),
    _xsd_Subject_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Reason_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void ClearAuthzCacheRequestType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Subject
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Subject::type > r (
            tfm.create< Subject::type > (
              L"Subject",
              L"http://www.qut.com/middleware/ESOEProtocolSchema",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Subject ())
              continue;
            this->Subject (r);
            continue;
          }
        }
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Reason" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Reason::type > r (
            Reason::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Reason (r);
          continue;
        }
      }

      if (!_xsd_Reason_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Reason",
          L"");
      }
    }

    ClearAuthzCacheRequestType* ClearAuthzCacheRequestType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ClearAuthzCacheRequestType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ClearAuthzCacheRequestType >
    _xsd_ClearAuthzCacheRequestType_type_factory_init (
      L"ClearAuthzCacheRequestType http://www.qut.com/middleware/ESOEProtocolSchema");


    // ClearAuthzCacheResponseType
    //

    ClearAuthzCacheResponseType::
    ClearAuthzCacheResponseType ()
    : ::saml2::protocol::StatusResponseType ()
    {
    }

    ClearAuthzCacheResponseType::
    ClearAuthzCacheResponseType (const Status::type& _xsd_Status,
                                 const ID::type& _xsd_ID,
                                 const Version::type& _xsd_Version,
                                 const IssueInstant::type& _xsd_IssueInstant)
    : ::saml2::protocol::StatusResponseType (_xsd_Status,
                                             _xsd_ID,
                                             _xsd_Version,
                                             _xsd_IssueInstant)
    {
    }

    ClearAuthzCacheResponseType::
    ClearAuthzCacheResponseType (const ClearAuthzCacheResponseType& _xsd_ClearAuthzCacheResponseType,
                                 ::xml_schema::flags f,
                                 ::xml_schema::type* c)
    : ::saml2::protocol::StatusResponseType (_xsd_ClearAuthzCacheResponseType, f, c)
    {
    }

    ClearAuthzCacheResponseType::
    ClearAuthzCacheResponseType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::type* c)
    : ::saml2::protocol::StatusResponseType (e, f, c)
    {
    }

    ClearAuthzCacheResponseType* ClearAuthzCacheResponseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ClearAuthzCacheResponseType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ClearAuthzCacheResponseType >
    _xsd_ClearAuthzCacheResponseType_type_factory_init (
      L"ClearAuthzCacheResponseType http://www.qut.com/middleware/ESOEProtocolSchema");


    // ValidateInitializationRequestType
    //

    ValidateInitializationRequestType::
    ValidateInitializationRequestType ()
    : ::saml2::protocol::RequestAbstractType (),
    _xsd_ipAddress_ (::xml_schema::flags (), this),
    _xsd_compileDate_ (::xml_schema::flags (), this),
    _xsd_compileSystem_ (::xml_schema::flags (), this),
    _xsd_sw_version_ (::xml_schema::flags (), this),
    _xsd_environment_ (::xml_schema::flags (), this),
    _xsd_nodeId_ (::xml_schema::flags (), this),
    _xsd_authzCacheIndex_ (::xml_schema::flags (), this)
    {
    }

    ValidateInitializationRequestType::
    ValidateInitializationRequestType (const ID::type& _xsd_ID,
                                       const Version::type& _xsd_Version,
                                       const IssueInstant::type& _xsd_IssueInstant,
                                       const compileDate::type& _xsd_compileDate,
                                       const compileSystem::type& _xsd_compileSystem,
                                       const sw_version::type& _xsd_sw_version,
                                       const environment::type& _xsd_environment,
                                       const nodeId::type& _xsd_nodeId,
                                       const authzCacheIndex::type& _xsd_authzCacheIndex)
    : ::saml2::protocol::RequestAbstractType (_xsd_ID,
                                              _xsd_Version,
                                              _xsd_IssueInstant),
    _xsd_ipAddress_ (::xml_schema::flags (), this),
    _xsd_compileDate_ (_xsd_compileDate,
                       ::xml_schema::flags (),
                       this),
    _xsd_compileSystem_ (_xsd_compileSystem,
                         ::xml_schema::flags (),
                         this),
    _xsd_sw_version_ (_xsd_sw_version,
                      ::xml_schema::flags (),
                      this),
    _xsd_environment_ (_xsd_environment,
                       ::xml_schema::flags (),
                       this),
    _xsd_nodeId_ (_xsd_nodeId,
                  ::xml_schema::flags (),
                  this),
    _xsd_authzCacheIndex_ (_xsd_authzCacheIndex,
                           ::xml_schema::flags (),
                           this)
    {
    }

    ValidateInitializationRequestType::
    ValidateInitializationRequestType (const ValidateInitializationRequestType& _xsd_ValidateInitializationRequestType,
                                       ::xml_schema::flags f,
                                       ::xml_schema::type* c)
    : ::saml2::protocol::RequestAbstractType (_xsd_ValidateInitializationRequestType, f, c),
    _xsd_ipAddress_ (_xsd_ValidateInitializationRequestType._xsd_ipAddress_,
                     f | ::xml_schema::flags::not_root,
                     this),
    _xsd_compileDate_ (_xsd_ValidateInitializationRequestType._xsd_compileDate_,
                       f | ::xml_schema::flags::not_root,
                       this),
    _xsd_compileSystem_ (_xsd_ValidateInitializationRequestType._xsd_compileSystem_,
                         f | ::xml_schema::flags::not_root,
                         this),
    _xsd_sw_version_ (_xsd_ValidateInitializationRequestType._xsd_sw_version_,
                      f | ::xml_schema::flags::not_root,
                      this),
    _xsd_environment_ (_xsd_ValidateInitializationRequestType._xsd_environment_,
                       f | ::xml_schema::flags::not_root,
                       this),
    _xsd_nodeId_ (_xsd_ValidateInitializationRequestType._xsd_nodeId_,
                  f | ::xml_schema::flags::not_root,
                  this),
    _xsd_authzCacheIndex_ (_xsd_ValidateInitializationRequestType._xsd_authzCacheIndex_,
                           f | ::xml_schema::flags::not_root,
                           this)
    {
    }

    ValidateInitializationRequestType::
    ValidateInitializationRequestType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::type* c)
    : ::saml2::protocol::RequestAbstractType (e, f, c),
    _xsd_ipAddress_ (f | ::xml_schema::flags::not_root, this),
    _xsd_compileDate_ (f | ::xml_schema::flags::not_root, this),
    _xsd_compileSystem_ (f | ::xml_schema::flags::not_root, this),
    _xsd_sw_version_ (f | ::xml_schema::flags::not_root, this),
    _xsd_environment_ (f | ::xml_schema::flags::not_root, this),
    _xsd_nodeId_ (f | ::xml_schema::flags::not_root, this),
    _xsd_authzCacheIndex_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void ValidateInitializationRequestType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // ipAddress
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ipAddress::type > r (
            tfm.create< ipAddress::type > (
              L"ipAddress",
              L"http://www.qut.com/middleware/ESOEProtocolSchema",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            this->ipAddress ().push_back (r);
            continue;
          }
        }

        // compileDate
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< compileDate::type > r (
            tfm.create< compileDate::type > (
              L"compileDate",
              L"http://www.qut.com/middleware/ESOEProtocolSchema",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_compileDate_.present ())
              continue;
            this->compileDate (r);
            continue;
          }
        }

        // compileSystem
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< compileSystem::type > r (
            tfm.create< compileSystem::type > (
              L"compileSystem",
              L"http://www.qut.com/middleware/ESOEProtocolSchema",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_compileSystem_.present ())
              continue;
            this->compileSystem (r);
            continue;
          }
        }

        // sw_version
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< sw_version::type > r (
            tfm.create< sw_version::type > (
              L"sw-version",
              L"http://www.qut.com/middleware/ESOEProtocolSchema",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_sw_version_.present ())
              continue;
            this->sw_version (r);
            continue;
          }
        }

        // environment
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< environment::type > r (
            tfm.create< environment::type > (
              L"environment",
              L"http://www.qut.com/middleware/ESOEProtocolSchema",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_environment_.present ())
              continue;
            this->environment (r);
            continue;
          }
        }

        // nodeId
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< nodeId::type > r (
            tfm.create< nodeId::type > (
              L"nodeId",
              L"http://www.qut.com/middleware/ESOEProtocolSchema",
              false,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_nodeId_.present ())
              continue;
            this->nodeId (r);
            continue;
          }
        }

        // authzCacheIndex
        //
        {
          if (e.name () == L"authzCacheIndex" && e.namespace_ () == L"http://www.qut.com/middleware/ESOEProtocolSchema")
          {
            if (_xsd_authzCacheIndex_.present ())
              continue;
            this->authzCacheIndex (
              authzCacheIndex::traits::create (
                e.dom_element (),
                f | ::xml_schema::flags::not_root,
                this));
            continue;
          }
        }
      }

      if (!_xsd_compileDate_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"compileDate",
          L"http://www.qut.com/middleware/ESOEProtocolSchema");
      }

      if (!_xsd_compileSystem_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"compileSystem",
          L"http://www.qut.com/middleware/ESOEProtocolSchema");
      }

      if (!_xsd_sw_version_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"sw-version",
          L"http://www.qut.com/middleware/ESOEProtocolSchema");
      }

      if (!_xsd_environment_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"environment",
          L"http://www.qut.com/middleware/ESOEProtocolSchema");
      }

      if (!_xsd_nodeId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"nodeId",
          L"http://www.qut.com/middleware/ESOEProtocolSchema");
      }

      if (!_xsd_authzCacheIndex_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"authzCacheIndex",
          L"http://www.qut.com/middleware/ESOEProtocolSchema");
      }
    }

    ValidateInitializationRequestType* ValidateInitializationRequestType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ValidateInitializationRequestType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ValidateInitializationRequestType >
    _xsd_ValidateInitializationRequestType_type_factory_init (
      L"ValidateInitializationRequestType http://www.qut.com/middleware/ESOEProtocolSchema");


    // ValidateInitializationResponseType
    //

    ValidateInitializationResponseType::
    ValidateInitializationResponseType ()
    : ::saml2::protocol::StatusResponseType ()
    {
    }

    ValidateInitializationResponseType::
    ValidateInitializationResponseType (const Status::type& _xsd_Status,
                                        const ID::type& _xsd_ID,
                                        const Version::type& _xsd_Version,
                                        const IssueInstant::type& _xsd_IssueInstant)
    : ::saml2::protocol::StatusResponseType (_xsd_Status,
                                             _xsd_ID,
                                             _xsd_Version,
                                             _xsd_IssueInstant)
    {
    }

    ValidateInitializationResponseType::
    ValidateInitializationResponseType (const ValidateInitializationResponseType& _xsd_ValidateInitializationResponseType,
                                        ::xml_schema::flags f,
                                        ::xml_schema::type* c)
    : ::saml2::protocol::StatusResponseType (_xsd_ValidateInitializationResponseType, f, c)
    {
    }

    ValidateInitializationResponseType::
    ValidateInitializationResponseType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::type* c)
    : ::saml2::protocol::StatusResponseType (e, f, c)
    {
    }

    ValidateInitializationResponseType* ValidateInitializationResponseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ValidateInitializationResponseType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ValidateInitializationResponseType >
    _xsd_ValidateInitializationResponseType_type_factory_init (
      L"ValidateInitializationResponseType http://www.qut.com/middleware/ESOEProtocolSchema");
  }
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace middleware
{
  namespace ESOEProtocolSchema
  {
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::std::basic_string< wchar_t >& u,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::std::basic_string< wchar_t >& u,
                            ::xsd::cxx::xml::error_handler< wchar_t >& h,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::std::basic_string< wchar_t >& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream& is,
                            ::xsd::cxx::xml::error_handler< wchar_t >& h,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream& is,
                            const ::std::basic_string< wchar_t >& sid,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream& is,
                            const ::std::basic_string< wchar_t >& sid,
                            ::xsd::cxx::xml::error_handler< wchar_t >& h,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream& is,
                            const ::std::basic_string< wchar_t >& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::xercesc::DOMInputSource& i,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::xercesc::DOMInputSource& i,
                            ::xsd::cxx::xml::error_handler< wchar_t >& h,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::xercesc::DOMInputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f,
                            const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType > r (
        tfm.create< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType > (
          L"ClearAuthzCacheRequest",
          L"http://www.qut.com/middleware/ESOEProtocolSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"ClearAuthzCacheRequest",
        L"http://www.qut.com/middleware/ESOEProtocolSchema");
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::std::basic_string< wchar_t >& u,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::std::basic_string< wchar_t >& u,
                             ::xsd::cxx::xml::error_handler< wchar_t >& h,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::std::basic_string< wchar_t >& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream& is,
                             ::xsd::cxx::xml::error_handler< wchar_t >& h,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream& is,
                             const ::std::basic_string< wchar_t >& sid,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream& is,
                             const ::std::basic_string< wchar_t >& sid,
                             ::xsd::cxx::xml::error_handler< wchar_t >& h,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream& is,
                             const ::std::basic_string< wchar_t >& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::xercesc::DOMInputSource& i,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::xercesc::DOMInputSource& i,
                             ::xsd::cxx::xml::error_handler< wchar_t >& h,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::xercesc::DOMInputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f,
                             const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType > r (
        tfm.create< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType > (
          L"ClearAuthzCacheResponse",
          L"http://www.qut.com/middleware/ESOEProtocolSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"ClearAuthzCacheResponse",
        L"http://www.qut.com/middleware/ESOEProtocolSchema");
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::std::basic_string< wchar_t >& u,
                                   ::xml_schema::flags f,
                                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::std::basic_string< wchar_t >& u,
                                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                   ::xml_schema::flags f,
                                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::std::basic_string< wchar_t >& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream& is,
                                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                   ::xml_schema::flags f,
                                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream& is,
                                   const ::std::basic_string< wchar_t >& sid,
                                   ::xml_schema::flags f,
                                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream& is,
                                   const ::std::basic_string< wchar_t >& sid,
                                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                   ::xml_schema::flags f,
                                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream& is,
                                   const ::std::basic_string< wchar_t >& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::xercesc::DOMInputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::xercesc::DOMInputSource& i,
                                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                   ::xml_schema::flags f,
                                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::xercesc::DOMInputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f,
                                   const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType > r (
        tfm.create< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType > (
          L"ValidateInitializationRequest",
          L"http://www.qut.com/middleware/ESOEProtocolSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"ValidateInitializationRequest",
        L"http://www.qut.com/middleware/ESOEProtocolSchema");
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::std::basic_string< wchar_t >& u,
                                    ::xml_schema::flags f,
                                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::std::basic_string< wchar_t >& u,
                                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                    ::xml_schema::flags f,
                                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::std::basic_string< wchar_t >& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream& is,
                                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                    ::xml_schema::flags f,
                                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream& is,
                                    const ::std::basic_string< wchar_t >& sid,
                                    ::xml_schema::flags f,
                                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream& is,
                                    const ::std::basic_string< wchar_t >& sid,
                                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                    ::xml_schema::flags f,
                                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream& is,
                                    const ::std::basic_string< wchar_t >& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::xercesc::DOMInputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::xercesc::DOMInputSource& i,
                                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                    ::xml_schema::flags f,
                                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::xercesc::DOMInputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f,
                                    const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType > r (
        tfm.create< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType > (
          L"ValidateInitializationResponse",
          L"http://www.qut.com/middleware/ESOEProtocolSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"ValidateInitializationResponse",
        L"http://www.qut.com/middleware/ESOEProtocolSchema");
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/serialization.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_serializer_plate< 0, wchar_t >
  type_serializer_plate_init;
}

namespace middleware
{
  namespace ESOEProtocolSchema
  {
    void
    ClearAuthzCacheRequest (::xercesc::DOMDocument& d,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& s,
                            ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType > (
        L"ClearAuthzCacheRequest",
        L"http://www.qut.com/middleware/ESOEProtocolSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ClearAuthzCacheRequest (const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& s,
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                            ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType > (
            L"ClearAuthzCacheRequest",
            L"http://www.qut.com/middleware/ESOEProtocolSchema",
            m,
            s,
            f));
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    ClearAuthzCacheRequest (::xercesc::XMLFormatTarget& t,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& s,
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                            const ::std::basic_string< wchar_t >& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ClearAuthzCacheRequest (::xercesc::XMLFormatTarget& t,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& s,
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                            ::xsd::cxx::xml::error_handler< wchar_t >& h,
                            const ::std::basic_string< wchar_t >& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ClearAuthzCacheRequest (::xercesc::XMLFormatTarget& t,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& s,
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                            ::xercesc::DOMErrorHandler& h,
                            const ::std::basic_string< wchar_t >& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ClearAuthzCacheRequest (::std::ostream& o,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& s,
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                            const ::std::basic_string< wchar_t >& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ClearAuthzCacheRequest (::std::ostream& o,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& s,
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                            ::xsd::cxx::xml::error_handler< wchar_t >& h,
                            const ::std::basic_string< wchar_t >& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ClearAuthzCacheRequest (::std::ostream& o,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& s,
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                            ::xercesc::DOMErrorHandler& h,
                            const ::std::basic_string< wchar_t >& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ClearAuthzCacheRequestType& i)
    {
      e << static_cast< const ::saml2::protocol::RequestAbstractType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Subject ())
        {
          tsm.serialize< ClearAuthzCacheRequestType::Subject::type > (
            L"Subject",
            L"http://www.qut.com/middleware/ESOEProtocolSchema",
            false,
            true,
            e,
            *i.Subject ());
        }
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Reason",
          e);

        a.dom_attribute () << i.Reason ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ClearAuthzCacheRequestType >
    _xsd_ClearAuthzCacheRequestType_type_serializer_init (
      L"ClearAuthzCacheRequestType",
      L"http://www.qut.com/middleware/ESOEProtocolSchema");


    void
    ClearAuthzCacheResponse (::xercesc::DOMDocument& d,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& s,
                             ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType > (
        L"ClearAuthzCacheResponse",
        L"http://www.qut.com/middleware/ESOEProtocolSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ClearAuthzCacheResponse (const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& s,
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                             ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType > (
            L"ClearAuthzCacheResponse",
            L"http://www.qut.com/middleware/ESOEProtocolSchema",
            m,
            s,
            f));
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    ClearAuthzCacheResponse (::xercesc::XMLFormatTarget& t,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& s,
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                             const ::std::basic_string< wchar_t >& e,
                             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ClearAuthzCacheResponse (::xercesc::XMLFormatTarget& t,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& s,
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                             ::xsd::cxx::xml::error_handler< wchar_t >& h,
                             const ::std::basic_string< wchar_t >& e,
                             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ClearAuthzCacheResponse (::xercesc::XMLFormatTarget& t,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& s,
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                             ::xercesc::DOMErrorHandler& h,
                             const ::std::basic_string< wchar_t >& e,
                             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ClearAuthzCacheResponse (::std::ostream& o,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& s,
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                             const ::std::basic_string< wchar_t >& e,
                             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ClearAuthzCacheResponse (::std::ostream& o,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& s,
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                             ::xsd::cxx::xml::error_handler< wchar_t >& h,
                             const ::std::basic_string< wchar_t >& e,
                             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ClearAuthzCacheResponse (::std::ostream& o,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& s,
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                             ::xercesc::DOMErrorHandler& h,
                             const ::std::basic_string< wchar_t >& e,
                             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ClearAuthzCacheResponseType& i)
    {
      e << static_cast< const ::saml2::protocol::StatusResponseType& > (i);
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ClearAuthzCacheResponseType >
    _xsd_ClearAuthzCacheResponseType_type_serializer_init (
      L"ClearAuthzCacheResponseType",
      L"http://www.qut.com/middleware/ESOEProtocolSchema");


    void
    ValidateInitializationRequest (::xercesc::DOMDocument& d,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& s,
                                   ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType > (
        L"ValidateInitializationRequest",
        L"http://www.qut.com/middleware/ESOEProtocolSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ValidateInitializationRequest (const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& s,
                                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                   ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType > (
            L"ValidateInitializationRequest",
            L"http://www.qut.com/middleware/ESOEProtocolSchema",
            m,
            s,
            f));
        ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    ValidateInitializationRequest (::xercesc::XMLFormatTarget& t,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& s,
                                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                   const ::std::basic_string< wchar_t >& e,
                                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ValidateInitializationRequest (::xercesc::XMLFormatTarget& t,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& s,
                                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                   const ::std::basic_string< wchar_t >& e,
                                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ValidateInitializationRequest (::xercesc::XMLFormatTarget& t,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& s,
                                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                   ::xercesc::DOMErrorHandler& h,
                                   const ::std::basic_string< wchar_t >& e,
                                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ValidateInitializationRequest (::std::ostream& o,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& s,
                                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                   const ::std::basic_string< wchar_t >& e,
                                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ValidateInitializationRequest (::std::ostream& o,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& s,
                                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                   const ::std::basic_string< wchar_t >& e,
                                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ValidateInitializationRequest (::std::ostream& o,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& s,
                                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                   ::xercesc::DOMErrorHandler& h,
                                   const ::std::basic_string< wchar_t >& e,
                                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ValidateInitializationRequestType& i)
    {
      e << static_cast< const ::saml2::protocol::RequestAbstractType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (ValidateInitializationRequestType::ipAddress::const_iterator
             b (i.ipAddress ().begin ()), n (i.ipAddress ().end ());
             b != n; ++b)
        {
          tsm.serialize< ValidateInitializationRequestType::ipAddress::type > (
            L"ipAddress",
            L"http://www.qut.com/middleware/ESOEProtocolSchema",
            false,
            true,
            e,
            *b);
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< ValidateInitializationRequestType::compileDate::type > (
          L"compileDate",
          L"http://www.qut.com/middleware/ESOEProtocolSchema",
          false,
          true,
          e,
          i.compileDate ());
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< ValidateInitializationRequestType::compileSystem::type > (
          L"compileSystem",
          L"http://www.qut.com/middleware/ESOEProtocolSchema",
          false,
          true,
          e,
          i.compileSystem ());
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< ValidateInitializationRequestType::sw_version::type > (
          L"sw-version",
          L"http://www.qut.com/middleware/ESOEProtocolSchema",
          false,
          true,
          e,
          i.sw_version ());
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< ValidateInitializationRequestType::environment::type > (
          L"environment",
          L"http://www.qut.com/middleware/ESOEProtocolSchema",
          false,
          true,
          e,
          i.environment ());
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< ValidateInitializationRequestType::nodeId::type > (
          L"nodeId",
          L"http://www.qut.com/middleware/ESOEProtocolSchema",
          false,
          true,
          e,
          i.nodeId ());
      }

      {
        ::xsd::cxx::xml::dom::element< wchar_t > s (
          L"authzCacheIndex",
          L"http://www.qut.com/middleware/ESOEProtocolSchema",
          e);
        s.dom_element () << i.authzCacheIndex ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ValidateInitializationRequestType >
    _xsd_ValidateInitializationRequestType_type_serializer_init (
      L"ValidateInitializationRequestType",
      L"http://www.qut.com/middleware/ESOEProtocolSchema");


    void
    ValidateInitializationResponse (::xercesc::DOMDocument& d,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& s,
                                    ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType > (
        L"ValidateInitializationResponse",
        L"http://www.qut.com/middleware/ESOEProtocolSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ValidateInitializationResponse (const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& s,
                                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                    ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType > (
            L"ValidateInitializationResponse",
            L"http://www.qut.com/middleware/ESOEProtocolSchema",
            m,
            s,
            f));
        ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    ValidateInitializationResponse (::xercesc::XMLFormatTarget& t,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& s,
                                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                    const ::std::basic_string< wchar_t >& e,
                                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ValidateInitializationResponse (::xercesc::XMLFormatTarget& t,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& s,
                                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                    const ::std::basic_string< wchar_t >& e,
                                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ValidateInitializationResponse (::xercesc::XMLFormatTarget& t,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& s,
                                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                    ::xercesc::DOMErrorHandler& h,
                                    const ::std::basic_string< wchar_t >& e,
                                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ValidateInitializationResponse (::std::ostream& o,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& s,
                                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                    const ::std::basic_string< wchar_t >& e,
                                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ValidateInitializationResponse (::std::ostream& o,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& s,
                                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                                    const ::std::basic_string< wchar_t >& e,
                                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ValidateInitializationResponse (::std::ostream& o,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& s,
                                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                                    ::xercesc::DOMErrorHandler& h,
                                    const ::std::basic_string< wchar_t >& e,
                                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ValidateInitializationResponseType& i)
    {
      e << static_cast< const ::saml2::protocol::StatusResponseType& > (i);
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ValidateInitializationResponseType >
    _xsd_ValidateInitializationResponseType_type_serializer_init (
      L"ValidateInitializationResponseType",
      L"http://www.qut.com/middleware/ESOEProtocolSchema");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

