// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

#ifndef LXACML_SCHEMA_HXX
#define LXACML_SCHEMA_HXX

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 2030100L)
#error XSD runtime version mismatch
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include "xsd/xml-schema.hxx"

// Forward declarations.
//
namespace middleware
{
  namespace lxacmlSchema
  {
    class PolicySetType;
    class PolicyType;
    class RuleType;
    class TargetType;
    class ResourcesType;
    class ActionsType;
    class ResourceType;
    class ActionType;
    class ExpressionType;
    class ConditionType;
    class ApplyType;
    class AttributeDesignatorType;
    class SubjectAttributeDesignatorType;
    class AttributeValueType;
    class ObligationsType;
    class ObligationType;
    class EffectType;
    class AttributeAssignmentType;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

namespace middleware
{
  namespace lxacmlSchema
  {
    class PolicySetType: public ::xml_schema::type
    {
      public:

      struct _xsd_PolicySetType
      {
        typedef ::xml_schema::type base_;
      };

      // Description
      // 
      public:
      struct Description
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Description::container&
      Description () const;

      Description::container&
      Description ();

      void
      Description (const Description::type&);

      void
      Description (const Description::container&);

      void
      Description (::std::auto_ptr< Description::type >);

      // Policy
      // 
      public:
      struct Policy
      {
        typedef ::middleware::lxacmlSchema::PolicyType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Policy::container&
      Policy () const;

      Policy::container&
      Policy ();

      void
      Policy (const Policy::container&);

      // Constructors.
      //
      public:
      PolicySetType ();

      PolicySetType (const ::xercesc::DOMElement&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      PolicySetType (const PolicySetType&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      virtual PolicySetType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< Description::type > _xsd_Description_;
      ::xsd::cxx::tree::sequence< Policy::type > _xsd_Policy_;
    };

    class PolicyType: public ::xml_schema::type
    {
      public:

      struct _xsd_PolicyType
      {
        typedef ::xml_schema::type base_;
      };

      // Description
      // 
      public:
      struct Description
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Description::type&
      Description () const;

      Description::type&
      Description ();

      void
      Description (const Description::type&);

      void
      Description (::std::auto_ptr< Description::type >);

      // Target
      // 
      public:
      struct Target
      {
        typedef ::middleware::lxacmlSchema::TargetType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Target::type&
      Target () const;

      Target::type&
      Target ();

      void
      Target (const Target::type&);

      void
      Target (::std::auto_ptr< Target::type >);

      // Rule
      // 
      public:
      struct Rule
      {
        typedef ::middleware::lxacmlSchema::RuleType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Rule::container&
      Rule () const;

      Rule::container&
      Rule ();

      void
      Rule (const Rule::container&);

      // PolicyId
      // 
      public:
      struct PolicyId
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const PolicyId::type&
      PolicyId () const;

      PolicyId::type&
      PolicyId ();

      void
      PolicyId (const PolicyId::type&);

      void
      PolicyId (::std::auto_ptr< PolicyId::type >);

      // Constructors.
      //
      public:
      PolicyType ();

      PolicyType (const Description::type&,
                  const Target::type&,
                  const PolicyId::type&);

      PolicyType (const ::xercesc::DOMElement&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      PolicyType (const PolicyType&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      virtual PolicyType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< Description::type > _xsd_Description_;
      ::xsd::cxx::tree::one< Target::type > _xsd_Target_;
      ::xsd::cxx::tree::sequence< Rule::type > _xsd_Rule_;
      ::xsd::cxx::tree::one< PolicyId::type > _xsd_PolicyId_;
    };

    class RuleType: public ::xml_schema::type
    {
      public:

      struct _xsd_RuleType
      {
        typedef ::xml_schema::type base_;
      };

      // Description
      // 
      public:
      struct Description
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Description::type&
      Description () const;

      Description::type&
      Description ();

      void
      Description (const Description::type&);

      void
      Description (::std::auto_ptr< Description::type >);

      // Target
      // 
      public:
      struct Target
      {
        typedef ::middleware::lxacmlSchema::TargetType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Target::container&
      Target () const;

      Target::container&
      Target ();

      void
      Target (const Target::type&);

      void
      Target (const Target::container&);

      void
      Target (::std::auto_ptr< Target::type >);

      // Condition
      // 
      public:
      struct Condition
      {
        typedef ::middleware::lxacmlSchema::ConditionType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Condition::container&
      Condition () const;

      Condition::container&
      Condition ();

      void
      Condition (const Condition::type&);

      void
      Condition (const Condition::container&);

      void
      Condition (::std::auto_ptr< Condition::type >);

      // RuleId
      // 
      public:
      struct RuleId
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const RuleId::type&
      RuleId () const;

      RuleId::type&
      RuleId ();

      void
      RuleId (const RuleId::type&);

      void
      RuleId (::std::auto_ptr< RuleId::type >);

      // Effect
      // 
      public:
      struct Effect
      {
        typedef ::middleware::lxacmlSchema::EffectType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Effect::type&
      Effect () const;

      Effect::type&
      Effect ();

      void
      Effect (const Effect::type&);

      void
      Effect (::std::auto_ptr< Effect::type >);

      // Constructors.
      //
      public:
      RuleType ();

      RuleType (const Description::type&,
                const RuleId::type&,
                const Effect::type&);

      RuleType (const ::xercesc::DOMElement&,
                ::xml_schema::flags = 0,
                ::xml_schema::type* = 0);

      RuleType (const RuleType&,
                ::xml_schema::flags = 0,
                ::xml_schema::type* = 0);

      virtual RuleType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< Description::type > _xsd_Description_;
      ::xsd::cxx::tree::optional< Target::type > _xsd_Target_;
      ::xsd::cxx::tree::optional< Condition::type > _xsd_Condition_;
      ::xsd::cxx::tree::one< RuleId::type > _xsd_RuleId_;
      ::xsd::cxx::tree::one< Effect::type > _xsd_Effect_;
    };

    class TargetType: public ::xml_schema::type
    {
      public:

      struct _xsd_TargetType
      {
        typedef ::xml_schema::type base_;
      };

      // Resources
      // 
      public:
      struct Resources
      {
        typedef ::middleware::lxacmlSchema::ResourcesType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Resources::type&
      Resources () const;

      Resources::type&
      Resources ();

      void
      Resources (const Resources::type&);

      void
      Resources (::std::auto_ptr< Resources::type >);

      // Actions
      // 
      public:
      struct Actions
      {
        typedef ::middleware::lxacmlSchema::ActionsType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Actions::type&
      Actions () const;

      Actions::type&
      Actions ();

      void
      Actions (const Actions::type&);

      void
      Actions (::std::auto_ptr< Actions::type >);

      // Constructors.
      //
      public:
      TargetType ();

      TargetType (const Resources::type&,
                  const Actions::type&);

      TargetType (const ::xercesc::DOMElement&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      TargetType (const TargetType&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      virtual TargetType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< Resources::type > _xsd_Resources_;
      ::xsd::cxx::tree::one< Actions::type > _xsd_Actions_;
    };

    class ResourcesType: public ::xml_schema::type
    {
      public:

      struct _xsd_ResourcesType
      {
        typedef ::xml_schema::type base_;
      };

      // Resource
      // 
      public:
      struct Resource
      {
        typedef ::middleware::lxacmlSchema::ResourceType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Resource::container&
      Resource () const;

      Resource::container&
      Resource ();

      void
      Resource (const Resource::container&);

      // Constructors.
      //
      public:
      ResourcesType ();

      ResourcesType (const ::xercesc::DOMElement&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      ResourcesType (const ResourcesType&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      virtual ResourcesType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< Resource::type > _xsd_Resource_;
    };

    class ActionsType: public ::xml_schema::type
    {
      public:

      struct _xsd_ActionsType
      {
        typedef ::xml_schema::type base_;
      };

      // Action
      // 
      public:
      struct Action
      {
        typedef ::middleware::lxacmlSchema::ActionType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Action::container&
      Action () const;

      Action::container&
      Action ();

      void
      Action (const Action::container&);

      // Constructors.
      //
      public:
      ActionsType ();

      ActionsType (const ::xercesc::DOMElement&,
                   ::xml_schema::flags = 0,
                   ::xml_schema::type* = 0);

      ActionsType (const ActionsType&,
                   ::xml_schema::flags = 0,
                   ::xml_schema::type* = 0);

      virtual ActionsType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< Action::type > _xsd_Action_;
    };

    class ResourceType: public ::xml_schema::type
    {
      public:

      struct _xsd_ResourceType
      {
        typedef ::xml_schema::type base_;
      };

      // AttributeValue
      // 
      public:
      struct AttributeValue
      {
        typedef ::middleware::lxacmlSchema::AttributeValueType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const AttributeValue::type&
      AttributeValue () const;

      AttributeValue::type&
      AttributeValue ();

      void
      AttributeValue (const AttributeValue::type&);

      void
      AttributeValue (::std::auto_ptr< AttributeValue::type >);

      // Constructors.
      //
      public:
      ResourceType ();

      ResourceType (const AttributeValue::type&);

      ResourceType (const ::xercesc::DOMElement&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      ResourceType (const ResourceType&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      virtual ResourceType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< AttributeValue::type > _xsd_AttributeValue_;
    };

    class ActionType: public ::xml_schema::type
    {
      public:

      struct _xsd_ActionType
      {
        typedef ::xml_schema::type base_;
      };

      // AttributeValue
      // 
      public:
      struct AttributeValue
      {
        typedef ::middleware::lxacmlSchema::AttributeValueType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const AttributeValue::type&
      AttributeValue () const;

      AttributeValue::type&
      AttributeValue ();

      void
      AttributeValue (const AttributeValue::type&);

      void
      AttributeValue (::std::auto_ptr< AttributeValue::type >);

      // Constructors.
      //
      public:
      ActionType ();

      ActionType (const AttributeValue::type&);

      ActionType (const ::xercesc::DOMElement&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      ActionType (const ActionType&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      virtual ActionType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< AttributeValue::type > _xsd_AttributeValue_;
    };

    class ExpressionType: public ::xml_schema::type
    {
      public:

      struct _xsd_ExpressionType
      {
        typedef ::xml_schema::type base_;
      };

      // Constructors.
      //
      public:
      ExpressionType ();

      ExpressionType (const ::xercesc::DOMElement&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      ExpressionType (const ::xercesc::DOMAttr&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      ExpressionType (const ::std::basic_string< wchar_t >&,
                      const ::xercesc::DOMElement*,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      ExpressionType (const ExpressionType&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      virtual ExpressionType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;
    };

    class ConditionType: public ::middleware::lxacmlSchema::ExpressionType
    {
      public:

      struct _xsd_ConditionType
      {
        typedef ::middleware::lxacmlSchema::ExpressionType base_;
      };

      // Expression
      // 
      public:
      struct Expression
      {
        typedef ::middleware::lxacmlSchema::ExpressionType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Expression::type&
      Expression () const;

      Expression::type&
      Expression ();

      void
      Expression (const Expression::type&);

      void
      Expression (::std::auto_ptr< Expression::type >);

      // Constructors.
      //
      public:
      ConditionType ();

      ConditionType (const Expression::type&);

      ConditionType (const ::xercesc::DOMElement&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      ConditionType (const ConditionType&,
                     ::xml_schema::flags = 0,
                     ::xml_schema::type* = 0);

      virtual ConditionType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< Expression::type > _xsd_Expression_;
    };

    class ApplyType: public ::middleware::lxacmlSchema::ExpressionType
    {
      public:

      struct _xsd_ApplyType
      {
        typedef ::middleware::lxacmlSchema::ExpressionType base_;
      };

      // Expression
      // 
      public:
      struct Expression
      {
        typedef ::middleware::lxacmlSchema::ExpressionType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Expression::container&
      Expression () const;

      Expression::container&
      Expression ();

      void
      Expression (const Expression::container&);

      // FunctionId
      // 
      public:
      struct FunctionId
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const FunctionId::type&
      FunctionId () const;

      FunctionId::type&
      FunctionId ();

      void
      FunctionId (const FunctionId::type&);

      void
      FunctionId (::std::auto_ptr< FunctionId::type >);

      // Constructors.
      //
      public:
      ApplyType ();

      ApplyType (const FunctionId::type&);

      ApplyType (const ::xercesc::DOMElement&,
                 ::xml_schema::flags = 0,
                 ::xml_schema::type* = 0);

      ApplyType (const ApplyType&,
                 ::xml_schema::flags = 0,
                 ::xml_schema::type* = 0);

      virtual ApplyType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< Expression::type > _xsd_Expression_;
      ::xsd::cxx::tree::one< FunctionId::type > _xsd_FunctionId_;
    };

    class AttributeDesignatorType: public ::middleware::lxacmlSchema::ExpressionType
    {
      public:

      struct _xsd_AttributeDesignatorType
      {
        typedef ::middleware::lxacmlSchema::ExpressionType base_;
      };

      // AttributeId
      // 
      public:
      struct AttributeId
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const AttributeId::type&
      AttributeId () const;

      AttributeId::type&
      AttributeId ();

      void
      AttributeId (const AttributeId::type&);

      void
      AttributeId (::std::auto_ptr< AttributeId::type >);

      // Constructors.
      //
      public:
      AttributeDesignatorType ();

      AttributeDesignatorType (const AttributeId::type&);

      AttributeDesignatorType (const ::xercesc::DOMElement&,
                               ::xml_schema::flags = 0,
                               ::xml_schema::type* = 0);

      AttributeDesignatorType (const AttributeDesignatorType&,
                               ::xml_schema::flags = 0,
                               ::xml_schema::type* = 0);

      virtual AttributeDesignatorType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< AttributeId::type > _xsd_AttributeId_;
    };

    class SubjectAttributeDesignatorType: public ::middleware::lxacmlSchema::AttributeDesignatorType
    {
      public:

      struct _xsd_SubjectAttributeDesignatorType
      {
        typedef ::middleware::lxacmlSchema::AttributeDesignatorType base_;
      };

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_SubjectAttributeDesignatorType::base_::AttributeId;
#endif

      // Constructors.
      //
      public:
      SubjectAttributeDesignatorType ();

      SubjectAttributeDesignatorType (const AttributeId::type&);

      SubjectAttributeDesignatorType (const ::xercesc::DOMElement&,
                                      ::xml_schema::flags = 0,
                                      ::xml_schema::type* = 0);

      SubjectAttributeDesignatorType (const SubjectAttributeDesignatorType&,
                                      ::xml_schema::flags = 0,
                                      ::xml_schema::type* = 0);

      virtual SubjectAttributeDesignatorType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;
    };

    class AttributeValueType: public ::middleware::lxacmlSchema::ExpressionType
    {
      public:

      struct _xsd_AttributeValueType
      {
        typedef ::middleware::lxacmlSchema::ExpressionType base_;
      };

      // Constructors.
      //
      public:
      AttributeValueType ();

      AttributeValueType (const ::xercesc::DOMElement&,
                          ::xml_schema::flags = 0,
                          ::xml_schema::type* = 0);

      AttributeValueType (const ::xercesc::DOMAttr&,
                          ::xml_schema::flags = 0,
                          ::xml_schema::type* = 0);

      AttributeValueType (const ::std::basic_string< wchar_t >&,
                          const ::xercesc::DOMElement*,
                          ::xml_schema::flags = 0,
                          ::xml_schema::type* = 0);

      AttributeValueType (const AttributeValueType&,
                          ::xml_schema::flags = 0,
                          ::xml_schema::type* = 0);

      virtual AttributeValueType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;
    };

    class ObligationsType: public ::xml_schema::type
    {
      public:

      struct _xsd_ObligationsType
      {
        typedef ::xml_schema::type base_;
      };

      // Obligation
      // 
      public:
      struct Obligation
      {
        typedef ::middleware::lxacmlSchema::ObligationType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Obligation::container&
      Obligation () const;

      Obligation::container&
      Obligation ();

      void
      Obligation (const Obligation::container&);

      // Constructors.
      //
      public:
      ObligationsType ();

      ObligationsType (const ::xercesc::DOMElement&,
                       ::xml_schema::flags = 0,
                       ::xml_schema::type* = 0);

      ObligationsType (const ObligationsType&,
                       ::xml_schema::flags = 0,
                       ::xml_schema::type* = 0);

      virtual ObligationsType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< Obligation::type > _xsd_Obligation_;
    };

    class ObligationType: public ::xml_schema::type
    {
      public:

      struct _xsd_ObligationType
      {
        typedef ::xml_schema::type base_;
      };

      // AttributeAssignment
      // 
      public:
      struct AttributeAssignment
      {
        typedef ::middleware::lxacmlSchema::AttributeAssignmentType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AttributeAssignment::container&
      AttributeAssignment () const;

      AttributeAssignment::container&
      AttributeAssignment ();

      void
      AttributeAssignment (const AttributeAssignment::container&);

      // ObligationId
      // 
      public:
      struct ObligationId
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const ObligationId::type&
      ObligationId () const;

      ObligationId::type&
      ObligationId ();

      void
      ObligationId (const ObligationId::type&);

      void
      ObligationId (::std::auto_ptr< ObligationId::type >);

      // FulfillOn
      // 
      public:
      struct FulfillOn
      {
        typedef ::middleware::lxacmlSchema::EffectType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const FulfillOn::type&
      FulfillOn () const;

      FulfillOn::type&
      FulfillOn ();

      void
      FulfillOn (const FulfillOn::type&);

      void
      FulfillOn (::std::auto_ptr< FulfillOn::type >);

      // Constructors.
      //
      public:
      ObligationType ();

      ObligationType (const ObligationId::type&,
                      const FulfillOn::type&);

      ObligationType (const ::xercesc::DOMElement&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      ObligationType (const ObligationType&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      virtual ObligationType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< AttributeAssignment::type > _xsd_AttributeAssignment_;
      ::xsd::cxx::tree::one< ObligationId::type > _xsd_ObligationId_;
      ::xsd::cxx::tree::one< FulfillOn::type > _xsd_FulfillOn_;
    };

    class EffectType: public ::xml_schema::string
    {
      public:
      enum _xsd_EffectType
      {
        Permit,
        Deny
      };

      EffectType ();

      EffectType (_xsd_EffectType);

      EffectType (const ::xml_schema::string&);

      EffectType (const ::xercesc::DOMElement&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      EffectType (const ::xercesc::DOMAttr&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      EffectType (const ::std::basic_string< wchar_t >&,
                  const ::xercesc::DOMElement*,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      EffectType (const EffectType&,
                  ::xml_schema::flags = 0,
                  ::xml_schema::type* = 0);

      virtual EffectType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      EffectType&
      operator= (_xsd_EffectType);

      virtual
      operator _xsd_EffectType () const
      {
        return _xsd_EffectType_convert ();
      }

      protected:
      _xsd_EffectType
      _xsd_EffectType_convert () const;

      public:
      static const wchar_t* const _xsd_EffectType_literals_[2];
      static const _xsd_EffectType _xsd_EffectType_indexes_[2];
    };

    class AttributeAssignmentType: public ::middleware::lxacmlSchema::AttributeValueType
    {
      public:

      struct _xsd_AttributeAssignmentType
      {
        typedef ::middleware::lxacmlSchema::AttributeValueType base_;
      };

      // AttributeId
      // 
      public:
      struct AttributeId
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const AttributeId::type&
      AttributeId () const;

      AttributeId::type&
      AttributeId ();

      void
      AttributeId (const AttributeId::type&);

      void
      AttributeId (::std::auto_ptr< AttributeId::type >);

      // Constructors.
      //
      public:
      AttributeAssignmentType ();

      AttributeAssignmentType (const AttributeId::type&);

      AttributeAssignmentType (const ::xercesc::DOMElement&,
                               ::xml_schema::flags = 0,
                               ::xml_schema::type* = 0);

      AttributeAssignmentType (const AttributeAssignmentType&,
                               ::xml_schema::flags = 0,
                               ::xml_schema::type* = 0);

      virtual AttributeAssignmentType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< AttributeId::type > _xsd_AttributeId_;
    };
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMInputSource.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace middleware
{
  namespace lxacmlSchema
  {
    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (const ::std::basic_string< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (const ::std::basic_string< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (const ::std::basic_string< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::std::istream&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::std::istream&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::std::istream&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (const ::xercesc::DOMInputSource&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (const ::xercesc::DOMInputSource&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (const ::xercesc::DOMInputSource&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (const ::xercesc::DOMDocument&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (const ::std::basic_string< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (const ::std::basic_string< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (const ::std::basic_string< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::std::istream&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::std::istream&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::std::istream&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (const ::xercesc::DOMInputSource&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (const ::xercesc::DOMInputSource&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (const ::xercesc::DOMInputSource&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (const ::xercesc::DOMDocument&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (const ::std::basic_string< wchar_t >&,
          ::xml_schema::flags = 0,
          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (const ::std::basic_string< wchar_t >&,
          ::xsd::cxx::xml::error_handler< wchar_t >&,
          ::xml_schema::flags = 0,
          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (const ::std::basic_string< wchar_t >&,
          ::xercesc::DOMErrorHandler&,
          ::xml_schema::flags = 0,
          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::std::istream&,
          ::xml_schema::flags = 0,
          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::std::istream&,
          ::xsd::cxx::xml::error_handler< wchar_t >&,
          ::xml_schema::flags = 0,
          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::std::istream&,
          ::xercesc::DOMErrorHandler&,
          ::xml_schema::flags = 0,
          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::std::istream&,
          const ::std::basic_string< wchar_t >& id,
          ::xml_schema::flags = 0,
          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::std::istream&,
          const ::std::basic_string< wchar_t >& id,
          ::xsd::cxx::xml::error_handler< wchar_t >&,
          ::xml_schema::flags = 0,
          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::std::istream&,
          const ::std::basic_string< wchar_t >& id,
          ::xercesc::DOMErrorHandler&,
          ::xml_schema::flags = 0,
          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (const ::xercesc::DOMInputSource&,
          ::xml_schema::flags = 0,
          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (const ::xercesc::DOMInputSource&,
          ::xsd::cxx::xml::error_handler< wchar_t >&,
          ::xml_schema::flags = 0,
          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (const ::xercesc::DOMInputSource&,
          ::xercesc::DOMErrorHandler&,
          ::xml_schema::flags = 0,
          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (const ::xercesc::DOMDocument&,
          ::xml_schema::flags = 0,
          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (const ::std::basic_string< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (const ::std::basic_string< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (const ::std::basic_string< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::std::istream&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::std::istream&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::std::istream&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (const ::xercesc::DOMInputSource&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (const ::xercesc::DOMInputSource&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (const ::xercesc::DOMInputSource&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (const ::xercesc::DOMDocument&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (const ::std::basic_string< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (const ::std::basic_string< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (const ::std::basic_string< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::std::istream&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::std::istream&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::std::istream&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (const ::xercesc::DOMInputSource&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (const ::xercesc::DOMInputSource&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (const ::xercesc::DOMInputSource&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (const ::xercesc::DOMDocument&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (const ::std::basic_string< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (const ::std::basic_string< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (const ::std::basic_string< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::std::istream&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::std::istream&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::std::istream&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (const ::xercesc::DOMInputSource&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (const ::xercesc::DOMInputSource&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (const ::xercesc::DOMInputSource&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (const ::xercesc::DOMDocument&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (const ::std::basic_string< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (const ::std::basic_string< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (const ::std::basic_string< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::std::istream&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::std::istream&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::std::istream&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::std::istream&,
              const ::std::basic_string< wchar_t >& id,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (const ::xercesc::DOMInputSource&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (const ::xercesc::DOMInputSource&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (const ::xercesc::DOMInputSource&,
              ::xercesc::DOMErrorHandler&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (const ::xercesc::DOMDocument&,
              ::xml_schema::flags = 0,
              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (const ::std::basic_string< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (const ::std::basic_string< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (const ::std::basic_string< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::std::istream&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::std::istream&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::std::istream&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::std::istream&,
            const ::std::basic_string< wchar_t >& id,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (const ::xercesc::DOMInputSource&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (const ::xercesc::DOMInputSource&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (const ::xercesc::DOMInputSource&,
            ::xercesc::DOMErrorHandler&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (const ::xercesc::DOMDocument&,
            ::xml_schema::flags = 0,
            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (const ::std::basic_string< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (const ::std::basic_string< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (const ::std::basic_string< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::std::istream&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::std::istream&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::std::istream&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (const ::xercesc::DOMInputSource&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (const ::xercesc::DOMInputSource&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (const ::xercesc::DOMInputSource&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (const ::xercesc::DOMDocument&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (const ::std::basic_string< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (const ::std::basic_string< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (const ::std::basic_string< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::std::istream&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::std::istream&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::std::istream&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (const ::xercesc::DOMInputSource&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (const ::xercesc::DOMInputSource&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (const ::xercesc::DOMInputSource&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (const ::xercesc::DOMDocument&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (const ::std::basic_string< wchar_t >&,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (const ::std::basic_string< wchar_t >&,
           ::xsd::cxx::xml::error_handler< wchar_t >&,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (const ::std::basic_string< wchar_t >&,
           ::xercesc::DOMErrorHandler&,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::std::istream&,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::std::istream&,
           ::xsd::cxx::xml::error_handler< wchar_t >&,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::std::istream&,
           ::xercesc::DOMErrorHandler&,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::std::istream&,
           const ::std::basic_string< wchar_t >& id,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::std::istream&,
           const ::std::basic_string< wchar_t >& id,
           ::xsd::cxx::xml::error_handler< wchar_t >&,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::std::istream&,
           const ::std::basic_string< wchar_t >& id,
           ::xercesc::DOMErrorHandler&,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (const ::xercesc::DOMInputSource&,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (const ::xercesc::DOMInputSource&,
           ::xsd::cxx::xml::error_handler< wchar_t >&,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (const ::xercesc::DOMInputSource&,
           ::xercesc::DOMErrorHandler&,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (const ::xercesc::DOMDocument&,
           ::xml_schema::flags = 0,
           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (const ::std::basic_string< wchar_t >&,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (const ::std::basic_string< wchar_t >&,
                                ::xsd::cxx::xml::error_handler< wchar_t >&,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (const ::std::basic_string< wchar_t >&,
                                ::xercesc::DOMErrorHandler&,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::std::istream&,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::std::istream&,
                                ::xsd::cxx::xml::error_handler< wchar_t >&,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::std::istream&,
                                ::xercesc::DOMErrorHandler&,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::std::istream&,
                                const ::std::basic_string< wchar_t >& id,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::std::istream&,
                                const ::std::basic_string< wchar_t >& id,
                                ::xsd::cxx::xml::error_handler< wchar_t >&,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::std::istream&,
                                const ::std::basic_string< wchar_t >& id,
                                ::xercesc::DOMErrorHandler&,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (const ::xercesc::DOMInputSource&,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (const ::xercesc::DOMInputSource&,
                                ::xsd::cxx::xml::error_handler< wchar_t >&,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (const ::xercesc::DOMInputSource&,
                                ::xercesc::DOMErrorHandler&,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (const ::xercesc::DOMDocument&,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (const ::std::basic_string< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (const ::std::basic_string< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (const ::std::basic_string< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::std::istream&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::std::istream&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::std::istream&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (const ::xercesc::DOMInputSource&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (const ::xercesc::DOMInputSource&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (const ::xercesc::DOMInputSource&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (const ::xercesc::DOMDocument&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (const ::std::basic_string< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (const ::std::basic_string< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (const ::std::basic_string< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::std::istream&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::std::istream&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::std::istream&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (const ::xercesc::DOMInputSource&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (const ::xercesc::DOMInputSource&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (const ::xercesc::DOMInputSource&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (const ::xercesc::DOMDocument&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (const ::std::basic_string< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (const ::std::basic_string< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (const ::std::basic_string< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::std::istream&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::std::istream&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::std::istream&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (const ::xercesc::DOMInputSource&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (const ::xercesc::DOMInputSource&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (const ::xercesc::DOMInputSource&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (const ::xercesc::DOMDocument&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (const ::std::basic_string< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (const ::std::basic_string< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (const ::std::basic_string< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::std::istream&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::std::istream&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::std::istream&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (const ::xercesc::DOMInputSource&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (const ::xercesc::DOMInputSource&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (const ::xercesc::DOMInputSource&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (const ::xercesc::DOMDocument&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    Description (const ::std::basic_string< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    Description (const ::std::basic_string< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    Description (const ::std::basic_string< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    Description (::std::istream&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    Description (::std::istream&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    Description (::std::istream&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::string >
    Description (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    Description (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    Description (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    Description (const ::xercesc::DOMInputSource&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    Description (const ::xercesc::DOMInputSource&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    Description (const ::xercesc::DOMInputSource&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::string >
    Description (const ::xercesc::DOMDocument&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());
  }
}

#include <iosfwd> // std::ostream&

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace middleware
{
  namespace lxacmlSchema
  {
    // Serialize to an existing DOM instance.
    //
    void
    PolicySet (::xercesc::DOMDocument&,
               const ::middleware::lxacmlSchema::PolicySetType&,
               ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    PolicySet (const ::middleware::lxacmlSchema::PolicySetType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    PolicySet (::xercesc::XMLFormatTarget&,
               const ::middleware::lxacmlSchema::PolicySetType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    PolicySet (::xercesc::XMLFormatTarget&,
               const ::middleware::lxacmlSchema::PolicySetType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    PolicySet (::xercesc::XMLFormatTarget&,
               const ::middleware::lxacmlSchema::PolicySetType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    PolicySet (::std::ostream&,
               const ::middleware::lxacmlSchema::PolicySetType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    PolicySet (::std::ostream&,
               const ::middleware::lxacmlSchema::PolicySetType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    PolicySet (::std::ostream&,
               const ::middleware::lxacmlSchema::PolicySetType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const PolicySetType&);

    // Serialize to an existing DOM instance.
    //
    void
    Policy (::xercesc::DOMDocument&,
            const ::middleware::lxacmlSchema::PolicyType&,
            ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Policy (const ::middleware::lxacmlSchema::PolicyType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Policy (::xercesc::XMLFormatTarget&,
            const ::middleware::lxacmlSchema::PolicyType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    Policy (::xercesc::XMLFormatTarget&,
            const ::middleware::lxacmlSchema::PolicyType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    Policy (::xercesc::XMLFormatTarget&,
            const ::middleware::lxacmlSchema::PolicyType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Policy (::std::ostream&,
            const ::middleware::lxacmlSchema::PolicyType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    Policy (::std::ostream&,
            const ::middleware::lxacmlSchema::PolicyType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    Policy (::std::ostream&,
            const ::middleware::lxacmlSchema::PolicyType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const PolicyType&);

    // Serialize to an existing DOM instance.
    //
    void
    Rule (::xercesc::DOMDocument&,
          const ::middleware::lxacmlSchema::RuleType&,
          ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Rule (const ::middleware::lxacmlSchema::RuleType&, 
          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
          ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Rule (::xercesc::XMLFormatTarget&,
          const ::middleware::lxacmlSchema::RuleType&, 
          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
          const ::std::basic_string< wchar_t >& = L"UTF-8",
          ::xml_schema::flags = 0);


    void
    Rule (::xercesc::XMLFormatTarget&,
          const ::middleware::lxacmlSchema::RuleType&, 
          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
          ::xsd::cxx::xml::error_handler< wchar_t >&,
          const ::std::basic_string< wchar_t >& = L"UTF-8",
          ::xml_schema::flags = 0);

    void
    Rule (::xercesc::XMLFormatTarget&,
          const ::middleware::lxacmlSchema::RuleType&, 
          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
          ::xercesc::DOMErrorHandler&,
          const ::std::basic_string< wchar_t >& = L"UTF-8",
          ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Rule (::std::ostream&,
          const ::middleware::lxacmlSchema::RuleType&, 
          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
          const ::std::basic_string< wchar_t >& = L"UTF-8",
          ::xml_schema::flags = 0);


    void
    Rule (::std::ostream&,
          const ::middleware::lxacmlSchema::RuleType&, 
          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
          ::xsd::cxx::xml::error_handler< wchar_t >&,
          const ::std::basic_string< wchar_t >& = L"UTF-8",
          ::xml_schema::flags = 0);

    void
    Rule (::std::ostream&,
          const ::middleware::lxacmlSchema::RuleType&, 
          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
          ::xercesc::DOMErrorHandler&,
          const ::std::basic_string< wchar_t >& = L"UTF-8",
          ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const RuleType&);

    // Serialize to an existing DOM instance.
    //
    void
    Target (::xercesc::DOMDocument&,
            const ::middleware::lxacmlSchema::TargetType&,
            ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Target (const ::middleware::lxacmlSchema::TargetType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Target (::xercesc::XMLFormatTarget&,
            const ::middleware::lxacmlSchema::TargetType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    Target (::xercesc::XMLFormatTarget&,
            const ::middleware::lxacmlSchema::TargetType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    Target (::xercesc::XMLFormatTarget&,
            const ::middleware::lxacmlSchema::TargetType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Target (::std::ostream&,
            const ::middleware::lxacmlSchema::TargetType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    Target (::std::ostream&,
            const ::middleware::lxacmlSchema::TargetType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    Target (::std::ostream&,
            const ::middleware::lxacmlSchema::TargetType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const TargetType&);

    // Serialize to an existing DOM instance.
    //
    void
    Resources (::xercesc::DOMDocument&,
               const ::middleware::lxacmlSchema::ResourcesType&,
               ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Resources (const ::middleware::lxacmlSchema::ResourcesType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Resources (::xercesc::XMLFormatTarget&,
               const ::middleware::lxacmlSchema::ResourcesType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    Resources (::xercesc::XMLFormatTarget&,
               const ::middleware::lxacmlSchema::ResourcesType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    Resources (::xercesc::XMLFormatTarget&,
               const ::middleware::lxacmlSchema::ResourcesType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Resources (::std::ostream&,
               const ::middleware::lxacmlSchema::ResourcesType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    Resources (::std::ostream&,
               const ::middleware::lxacmlSchema::ResourcesType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    Resources (::std::ostream&,
               const ::middleware::lxacmlSchema::ResourcesType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ResourcesType&);

    // Serialize to an existing DOM instance.
    //
    void
    Actions (::xercesc::DOMDocument&,
             const ::middleware::lxacmlSchema::ActionsType&,
             ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Actions (const ::middleware::lxacmlSchema::ActionsType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Actions (::xercesc::XMLFormatTarget&,
             const ::middleware::lxacmlSchema::ActionsType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    Actions (::xercesc::XMLFormatTarget&,
             const ::middleware::lxacmlSchema::ActionsType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);

    void
    Actions (::xercesc::XMLFormatTarget&,
             const ::middleware::lxacmlSchema::ActionsType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Actions (::std::ostream&,
             const ::middleware::lxacmlSchema::ActionsType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    Actions (::std::ostream&,
             const ::middleware::lxacmlSchema::ActionsType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);

    void
    Actions (::std::ostream&,
             const ::middleware::lxacmlSchema::ActionsType&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ActionsType&);

    // Serialize to an existing DOM instance.
    //
    void
    Resource (::xercesc::DOMDocument&,
              const ::middleware::lxacmlSchema::ResourceType&,
              ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Resource (const ::middleware::lxacmlSchema::ResourceType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Resource (::xercesc::XMLFormatTarget&,
              const ::middleware::lxacmlSchema::ResourceType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    Resource (::xercesc::XMLFormatTarget&,
              const ::middleware::lxacmlSchema::ResourceType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    Resource (::xercesc::XMLFormatTarget&,
              const ::middleware::lxacmlSchema::ResourceType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Resource (::std::ostream&,
              const ::middleware::lxacmlSchema::ResourceType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    Resource (::std::ostream&,
              const ::middleware::lxacmlSchema::ResourceType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xsd::cxx::xml::error_handler< wchar_t >&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);

    void
    Resource (::std::ostream&,
              const ::middleware::lxacmlSchema::ResourceType&, 
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
              ::xercesc::DOMErrorHandler&,
              const ::std::basic_string< wchar_t >& = L"UTF-8",
              ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ResourceType&);

    // Serialize to an existing DOM instance.
    //
    void
    Action (::xercesc::DOMDocument&,
            const ::middleware::lxacmlSchema::ActionType&,
            ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Action (const ::middleware::lxacmlSchema::ActionType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Action (::xercesc::XMLFormatTarget&,
            const ::middleware::lxacmlSchema::ActionType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    Action (::xercesc::XMLFormatTarget&,
            const ::middleware::lxacmlSchema::ActionType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    Action (::xercesc::XMLFormatTarget&,
            const ::middleware::lxacmlSchema::ActionType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Action (::std::ostream&,
            const ::middleware::lxacmlSchema::ActionType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    Action (::std::ostream&,
            const ::middleware::lxacmlSchema::ActionType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xsd::cxx::xml::error_handler< wchar_t >&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);

    void
    Action (::std::ostream&,
            const ::middleware::lxacmlSchema::ActionType&, 
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
            ::xercesc::DOMErrorHandler&,
            const ::std::basic_string< wchar_t >& = L"UTF-8",
            ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ActionType&);

    // Serialize to an existing DOM instance.
    //
    void
    Expression (::xercesc::DOMDocument&,
                const ::middleware::lxacmlSchema::ExpressionType&,
                ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Expression (const ::middleware::lxacmlSchema::ExpressionType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Expression (::xercesc::XMLFormatTarget&,
                const ::middleware::lxacmlSchema::ExpressionType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    Expression (::xercesc::XMLFormatTarget&,
                const ::middleware::lxacmlSchema::ExpressionType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);

    void
    Expression (::xercesc::XMLFormatTarget&,
                const ::middleware::lxacmlSchema::ExpressionType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Expression (::std::ostream&,
                const ::middleware::lxacmlSchema::ExpressionType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    Expression (::std::ostream&,
                const ::middleware::lxacmlSchema::ExpressionType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);

    void
    Expression (::std::ostream&,
                const ::middleware::lxacmlSchema::ExpressionType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ExpressionType&);

    void
    operator<< (::xercesc::DOMAttr&,
                const ExpressionType&);

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                const ExpressionType&);

    // Serialize to an existing DOM instance.
    //
    void
    Condition (::xercesc::DOMDocument&,
               const ::middleware::lxacmlSchema::ConditionType&,
               ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Condition (const ::middleware::lxacmlSchema::ConditionType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Condition (::xercesc::XMLFormatTarget&,
               const ::middleware::lxacmlSchema::ConditionType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    Condition (::xercesc::XMLFormatTarget&,
               const ::middleware::lxacmlSchema::ConditionType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    Condition (::xercesc::XMLFormatTarget&,
               const ::middleware::lxacmlSchema::ConditionType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Condition (::std::ostream&,
               const ::middleware::lxacmlSchema::ConditionType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    Condition (::std::ostream&,
               const ::middleware::lxacmlSchema::ConditionType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    Condition (::std::ostream&,
               const ::middleware::lxacmlSchema::ConditionType&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ConditionType&);

    // Serialize to an existing DOM instance.
    //
    void
    Apply (::xercesc::DOMDocument&,
           const ::middleware::lxacmlSchema::ApplyType&,
           ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Apply (const ::middleware::lxacmlSchema::ApplyType&, 
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
           ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Apply (::xercesc::XMLFormatTarget&,
           const ::middleware::lxacmlSchema::ApplyType&, 
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
           const ::std::basic_string< wchar_t >& = L"UTF-8",
           ::xml_schema::flags = 0);


    void
    Apply (::xercesc::XMLFormatTarget&,
           const ::middleware::lxacmlSchema::ApplyType&, 
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
           ::xsd::cxx::xml::error_handler< wchar_t >&,
           const ::std::basic_string< wchar_t >& = L"UTF-8",
           ::xml_schema::flags = 0);

    void
    Apply (::xercesc::XMLFormatTarget&,
           const ::middleware::lxacmlSchema::ApplyType&, 
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
           ::xercesc::DOMErrorHandler&,
           const ::std::basic_string< wchar_t >& = L"UTF-8",
           ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Apply (::std::ostream&,
           const ::middleware::lxacmlSchema::ApplyType&, 
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
           const ::std::basic_string< wchar_t >& = L"UTF-8",
           ::xml_schema::flags = 0);


    void
    Apply (::std::ostream&,
           const ::middleware::lxacmlSchema::ApplyType&, 
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
           ::xsd::cxx::xml::error_handler< wchar_t >&,
           const ::std::basic_string< wchar_t >& = L"UTF-8",
           ::xml_schema::flags = 0);

    void
    Apply (::std::ostream&,
           const ::middleware::lxacmlSchema::ApplyType&, 
           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
           ::xercesc::DOMErrorHandler&,
           const ::std::basic_string< wchar_t >& = L"UTF-8",
           ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ApplyType&);

    void
    operator<< (::xercesc::DOMElement&,
                const AttributeDesignatorType&);

    // Serialize to an existing DOM instance.
    //
    void
    SubjectAttributeDesignator (::xercesc::DOMDocument&,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType&,
                                ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SubjectAttributeDesignator (const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType&, 
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    SubjectAttributeDesignator (::xercesc::XMLFormatTarget&,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType&, 
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                const ::std::basic_string< wchar_t >& = L"UTF-8",
                                ::xml_schema::flags = 0);


    void
    SubjectAttributeDesignator (::xercesc::XMLFormatTarget&,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType&, 
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                ::xsd::cxx::xml::error_handler< wchar_t >&,
                                const ::std::basic_string< wchar_t >& = L"UTF-8",
                                ::xml_schema::flags = 0);

    void
    SubjectAttributeDesignator (::xercesc::XMLFormatTarget&,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType&, 
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                ::xercesc::DOMErrorHandler&,
                                const ::std::basic_string< wchar_t >& = L"UTF-8",
                                ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    SubjectAttributeDesignator (::std::ostream&,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType&, 
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                const ::std::basic_string< wchar_t >& = L"UTF-8",
                                ::xml_schema::flags = 0);


    void
    SubjectAttributeDesignator (::std::ostream&,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType&, 
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                ::xsd::cxx::xml::error_handler< wchar_t >&,
                                const ::std::basic_string< wchar_t >& = L"UTF-8",
                                ::xml_schema::flags = 0);

    void
    SubjectAttributeDesignator (::std::ostream&,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType&, 
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                ::xercesc::DOMErrorHandler&,
                                const ::std::basic_string< wchar_t >& = L"UTF-8",
                                ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const SubjectAttributeDesignatorType&);

    // Serialize to an existing DOM instance.
    //
    void
    AttributeValue (::xercesc::DOMDocument&,
                    const ::middleware::lxacmlSchema::AttributeValueType&,
                    ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeValue (const ::middleware::lxacmlSchema::AttributeValueType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AttributeValue (::xercesc::XMLFormatTarget&,
                    const ::middleware::lxacmlSchema::AttributeValueType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    AttributeValue (::xercesc::XMLFormatTarget&,
                    const ::middleware::lxacmlSchema::AttributeValueType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);

    void
    AttributeValue (::xercesc::XMLFormatTarget&,
                    const ::middleware::lxacmlSchema::AttributeValueType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AttributeValue (::std::ostream&,
                    const ::middleware::lxacmlSchema::AttributeValueType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    AttributeValue (::std::ostream&,
                    const ::middleware::lxacmlSchema::AttributeValueType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);

    void
    AttributeValue (::std::ostream&,
                    const ::middleware::lxacmlSchema::AttributeValueType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const AttributeValueType&);

    void
    operator<< (::xercesc::DOMAttr&,
                const AttributeValueType&);

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                const AttributeValueType&);

    // Serialize to an existing DOM instance.
    //
    void
    Obligations (::xercesc::DOMDocument&,
                 const ::middleware::lxacmlSchema::ObligationsType&,
                 ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Obligations (const ::middleware::lxacmlSchema::ObligationsType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Obligations (::xercesc::XMLFormatTarget&,
                 const ::middleware::lxacmlSchema::ObligationsType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    Obligations (::xercesc::XMLFormatTarget&,
                 const ::middleware::lxacmlSchema::ObligationsType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);

    void
    Obligations (::xercesc::XMLFormatTarget&,
                 const ::middleware::lxacmlSchema::ObligationsType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Obligations (::std::ostream&,
                 const ::middleware::lxacmlSchema::ObligationsType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    Obligations (::std::ostream&,
                 const ::middleware::lxacmlSchema::ObligationsType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);

    void
    Obligations (::std::ostream&,
                 const ::middleware::lxacmlSchema::ObligationsType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ObligationsType&);

    // Serialize to an existing DOM instance.
    //
    void
    Obligation (::xercesc::DOMDocument&,
                const ::middleware::lxacmlSchema::ObligationType&,
                ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Obligation (const ::middleware::lxacmlSchema::ObligationType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Obligation (::xercesc::XMLFormatTarget&,
                const ::middleware::lxacmlSchema::ObligationType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    Obligation (::xercesc::XMLFormatTarget&,
                const ::middleware::lxacmlSchema::ObligationType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);

    void
    Obligation (::xercesc::XMLFormatTarget&,
                const ::middleware::lxacmlSchema::ObligationType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Obligation (::std::ostream&,
                const ::middleware::lxacmlSchema::ObligationType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    Obligation (::std::ostream&,
                const ::middleware::lxacmlSchema::ObligationType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);

    void
    Obligation (::std::ostream&,
                const ::middleware::lxacmlSchema::ObligationType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ObligationType&);

    void
    operator<< (::xercesc::DOMElement&,
                EffectType);

    void
    operator<< (::xercesc::DOMAttr&,
                EffectType);

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                EffectType);

    // Serialize to an existing DOM instance.
    //
    void
    AttributeAssignment (::xercesc::DOMDocument&,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType&,
                         ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeAssignment (const ::middleware::lxacmlSchema::AttributeAssignmentType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AttributeAssignment (::xercesc::XMLFormatTarget&,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    void
    AttributeAssignment (::xercesc::XMLFormatTarget&,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);

    void
    AttributeAssignment (::xercesc::XMLFormatTarget&,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AttributeAssignment (::std::ostream&,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    void
    AttributeAssignment (::std::ostream&,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);

    void
    AttributeAssignment (::std::ostream&,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const AttributeAssignmentType&);

    // Serialize to an existing DOM instance.
    //
    void
    Description (::xercesc::DOMDocument&,
                 const ::xml_schema::string&,
                 ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Description (const ::xml_schema::string&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Description (::xercesc::XMLFormatTarget&,
                 const ::xml_schema::string&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    Description (::xercesc::XMLFormatTarget&,
                 const ::xml_schema::string&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);

    void
    Description (::xercesc::XMLFormatTarget&,
                 const ::xml_schema::string&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Description (::std::ostream&,
                 const ::xml_schema::string&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    Description (::std::ostream&,
                 const ::xml_schema::string&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);

    void
    Description (::std::ostream&,
                 const ::xml_schema::string&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // LXACML_SCHEMA_HXX
