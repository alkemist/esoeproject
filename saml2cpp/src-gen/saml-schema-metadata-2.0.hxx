// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

#ifndef SAML_SCHEMA_METADATA_2_0_HXX
#define SAML_SCHEMA_METADATA_2_0_HXX

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 2030100L)
#error XSD runtime version mismatch
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include "xsd/xml-schema.hxx"

// Forward declarations.
//
namespace saml2
{
  namespace metadata
  {
    class entityIDType;
    class localizedNameType;
    class localizedURIType;
    class ExtensionsType;
    class EndpointType;
    class IndexedEndpointType;
    class EntitiesDescriptorType;
    class EntityDescriptorType;
    class OrganizationType;
    class ContactType;
    class ContactTypeType;
    class AdditionalMetadataLocationType;
    class RoleDescriptorType;
    class anyURIListType;
    class KeyDescriptorType;
    class KeyTypes;
    class SSODescriptorType;
    class IDPSSODescriptorType;
    class SPSSODescriptorType;
    class AttributeConsumingServiceType;
    class RequestedAttributeType;
    class AuthnAuthorityDescriptorType;
    class PDPDescriptorType;
    class AttributeAuthorityDescriptorType;
    class AffiliationDescriptorType;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include "xmldsig-core-schema.hxx"

#include "xenc-schema.hxx"

#include "saml-schema-assertion-2.0.hxx"

#include "xml.hxx"

namespace saml2
{
  namespace metadata
  {
    class entityIDType: public ::xml_schema::uri
    {
      public:

      struct _xsd_entityIDType
      {
        typedef ::xml_schema::uri base_;
      };

      // Constructors.
      //
      public:
      entityIDType ();

      entityIDType (const _xsd_entityIDType::base_& );

      entityIDType (const ::xercesc::DOMElement&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      entityIDType (const ::xercesc::DOMAttr&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      entityIDType (const ::std::basic_string< wchar_t >&,
                    const ::xercesc::DOMElement*,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      entityIDType (const entityIDType&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      virtual entityIDType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;
    };

    class localizedNameType: public ::xml_schema::string
    {
      public:

      struct _xsd_localizedNameType
      {
        typedef ::xml_schema::string base_;
      };

      // lang
      // 
      public:
      struct lang
      {
        typedef ::namespace_::lang type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const lang::type&
      lang () const;

      lang::type&
      lang ();

      void
      lang (const lang::type&);

      void
      lang (::std::auto_ptr< lang::type >);

      // Constructors.
      //
      public:
      localizedNameType ();

      localizedNameType (const _xsd_localizedNameType::base_& ,
                         const lang::type&);

      localizedNameType (const ::xercesc::DOMElement&,
                         ::xml_schema::flags = 0,
                         ::xml_schema::type* = 0);

      localizedNameType (const localizedNameType&,
                         ::xml_schema::flags = 0,
                         ::xml_schema::type* = 0);

      virtual localizedNameType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< lang::type > _xsd_lang_;
    };

    class localizedURIType: public ::xml_schema::uri
    {
      public:

      struct _xsd_localizedURIType
      {
        typedef ::xml_schema::uri base_;
      };

      // lang
      // 
      public:
      struct lang
      {
        typedef ::namespace_::lang type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const lang::type&
      lang () const;

      lang::type&
      lang ();

      void
      lang (const lang::type&);

      void
      lang (::std::auto_ptr< lang::type >);

      // Constructors.
      //
      public:
      localizedURIType ();

      localizedURIType (const _xsd_localizedURIType::base_& ,
                        const lang::type&);

      localizedURIType (const ::xercesc::DOMElement&,
                        ::xml_schema::flags = 0,
                        ::xml_schema::type* = 0);

      localizedURIType (const localizedURIType&,
                        ::xml_schema::flags = 0,
                        ::xml_schema::type* = 0);

      virtual localizedURIType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< lang::type > _xsd_lang_;
    };

    class ExtensionsType: public ::xml_schema::type
    {
      public:

      struct _xsd_ExtensionsType
      {
        typedef ::xml_schema::type base_;
      };

      // Constructors.
      //
      public:
      ExtensionsType ();

      ExtensionsType (const ::xercesc::DOMElement&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      ExtensionsType (const ::xercesc::DOMAttr&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      ExtensionsType (const ::std::basic_string< wchar_t >&,
                      const ::xercesc::DOMElement*,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      ExtensionsType (const ExtensionsType&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      virtual ExtensionsType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;
    };

    class EndpointType: public ::xml_schema::type
    {
      public:

      struct _xsd_EndpointType
      {
        typedef ::xml_schema::type base_;
      };

      // Binding
      // 
      public:
      struct Binding
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Binding::type&
      Binding () const;

      Binding::type&
      Binding ();

      void
      Binding (const Binding::type&);

      void
      Binding (::std::auto_ptr< Binding::type >);

      // Location
      // 
      public:
      struct Location
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Location::type&
      Location () const;

      Location::type&
      Location ();

      void
      Location (const Location::type&);

      void
      Location (::std::auto_ptr< Location::type >);

      // ResponseLocation
      // 
      public:
      struct ResponseLocation
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const ResponseLocation::container&
      ResponseLocation () const;

      ResponseLocation::container&
      ResponseLocation ();

      void
      ResponseLocation (const ResponseLocation::type&);

      void
      ResponseLocation (const ResponseLocation::container&);

      void
      ResponseLocation (::std::auto_ptr< ResponseLocation::type >);

      // Constructors.
      //
      public:
      EndpointType ();

      EndpointType (const Binding::type&,
                    const Location::type&);

      EndpointType (const ::xercesc::DOMElement&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      EndpointType (const EndpointType&,
                    ::xml_schema::flags = 0,
                    ::xml_schema::type* = 0);

      virtual EndpointType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< Binding::type > _xsd_Binding_;
      ::xsd::cxx::tree::one< Location::type > _xsd_Location_;
      ::xsd::cxx::tree::optional< ResponseLocation::type > _xsd_ResponseLocation_;
    };

    class IndexedEndpointType: public ::saml2::metadata::EndpointType
    {
      public:

      struct _xsd_IndexedEndpointType
      {
        typedef ::saml2::metadata::EndpointType base_;
      };

      // index
      // 
      public:
      struct index
      {
        typedef ::xml_schema::unsigned_short type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const index::type&
      index () const;

      index::type&
      index ();

      void
      index (const index::type&);

      // isDefault
      // 
      public:
      struct isDefault
      {
        typedef ::xml_schema::boolean type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const isDefault::container&
      isDefault () const;

      isDefault::container&
      isDefault ();

      void
      isDefault (const isDefault::type&);

      void
      isDefault (const isDefault::container&);

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_IndexedEndpointType::base_::Binding;
      using _xsd_IndexedEndpointType::base_::Location;
#endif

      // Constructors.
      //
      public:
      IndexedEndpointType ();

      IndexedEndpointType (const Binding::type&,
                           const Location::type&,
                           const index::type&);

      IndexedEndpointType (const ::xercesc::DOMElement&,
                           ::xml_schema::flags = 0,
                           ::xml_schema::type* = 0);

      IndexedEndpointType (const IndexedEndpointType&,
                           ::xml_schema::flags = 0,
                           ::xml_schema::type* = 0);

      virtual IndexedEndpointType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< index::type > _xsd_index_;
      ::xsd::cxx::tree::optional< isDefault::type > _xsd_isDefault_;
    };

    class EntitiesDescriptorType: public ::xml_schema::type
    {
      public:

      struct _xsd_EntitiesDescriptorType
      {
        typedef ::xml_schema::type base_;
      };

      // Signature
      // 
      public:
      struct Signature
      {
        typedef ::w3::xmldsig::SignatureType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Signature::container&
      Signature () const;

      Signature::container&
      Signature ();

      void
      Signature (const Signature::type&);

      void
      Signature (const Signature::container&);

      void
      Signature (::std::auto_ptr< Signature::type >);

      // Extensions
      // 
      public:
      struct Extensions
      {
        typedef ::saml2::metadata::ExtensionsType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Extensions::container&
      Extensions () const;

      Extensions::container&
      Extensions ();

      void
      Extensions (const Extensions::type&);

      void
      Extensions (const Extensions::container&);

      void
      Extensions (::std::auto_ptr< Extensions::type >);

      // EntityDescriptor
      // 
      public:
      struct EntityDescriptor
      {
        typedef ::saml2::metadata::EntityDescriptorType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const EntityDescriptor::container&
      EntityDescriptor () const;

      EntityDescriptor::container&
      EntityDescriptor ();

      void
      EntityDescriptor (const EntityDescriptor::container&);

      // EntitiesDescriptor
      // 
      public:
      struct EntitiesDescriptor
      {
        typedef ::saml2::metadata::EntitiesDescriptorType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const EntitiesDescriptor::container&
      EntitiesDescriptor () const;

      EntitiesDescriptor::container&
      EntitiesDescriptor ();

      void
      EntitiesDescriptor (const EntitiesDescriptor::container&);

      // validUntil
      // 
      public:
      struct validUntil
      {
        typedef ::xml_schema::date_time type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const validUntil::container&
      validUntil () const;

      validUntil::container&
      validUntil ();

      void
      validUntil (const validUntil::type&);

      void
      validUntil (const validUntil::container&);

      void
      validUntil (::std::auto_ptr< validUntil::type >);

      // cacheDuration
      // 
      public:
      struct cacheDuration
      {
        typedef ::xml_schema::duration type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const cacheDuration::container&
      cacheDuration () const;

      cacheDuration::container&
      cacheDuration ();

      void
      cacheDuration (const cacheDuration::type&);

      void
      cacheDuration (const cacheDuration::container&);

      void
      cacheDuration (::std::auto_ptr< cacheDuration::type >);

      // ID
      // 
      public:
      struct ID
      {
        typedef ::xml_schema::id type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const ID::container&
      ID () const;

      ID::container&
      ID ();

      void
      ID (const ID::type&);

      void
      ID (const ID::container&);

      void
      ID (::std::auto_ptr< ID::type >);

      // Name
      // 
      public:
      struct Name
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Name::container&
      Name () const;

      Name::container&
      Name ();

      void
      Name (const Name::type&);

      void
      Name (const Name::container&);

      void
      Name (::std::auto_ptr< Name::type >);

      // Constructors.
      //
      public:
      EntitiesDescriptorType ();

      EntitiesDescriptorType (const ::xercesc::DOMElement&,
                              ::xml_schema::flags = 0,
                              ::xml_schema::type* = 0);

      EntitiesDescriptorType (const EntitiesDescriptorType&,
                              ::xml_schema::flags = 0,
                              ::xml_schema::type* = 0);

      virtual EntitiesDescriptorType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< Signature::type > _xsd_Signature_;
      ::xsd::cxx::tree::optional< Extensions::type > _xsd_Extensions_;
      ::xsd::cxx::tree::sequence< EntityDescriptor::type > _xsd_EntityDescriptor_;
      ::xsd::cxx::tree::sequence< EntitiesDescriptor::type > _xsd_EntitiesDescriptor_;
      ::xsd::cxx::tree::optional< validUntil::type > _xsd_validUntil_;
      ::xsd::cxx::tree::optional< cacheDuration::type > _xsd_cacheDuration_;
      ::xsd::cxx::tree::optional< ID::type > _xsd_ID_;
      ::xsd::cxx::tree::optional< Name::type > _xsd_Name_;
    };

    class EntityDescriptorType: public ::xml_schema::type
    {
      public:

      struct _xsd_EntityDescriptorType
      {
        typedef ::xml_schema::type base_;
      };

      // Signature
      // 
      public:
      struct Signature
      {
        typedef ::w3::xmldsig::SignatureType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Signature::container&
      Signature () const;

      Signature::container&
      Signature ();

      void
      Signature (const Signature::type&);

      void
      Signature (const Signature::container&);

      void
      Signature (::std::auto_ptr< Signature::type >);

      // Extensions
      // 
      public:
      struct Extensions
      {
        typedef ::saml2::metadata::ExtensionsType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Extensions::container&
      Extensions () const;

      Extensions::container&
      Extensions ();

      void
      Extensions (const Extensions::type&);

      void
      Extensions (const Extensions::container&);

      void
      Extensions (::std::auto_ptr< Extensions::type >);

      // RoleDescriptor
      // 
      public:
      struct RoleDescriptor
      {
        typedef ::saml2::metadata::RoleDescriptorType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const RoleDescriptor::container&
      RoleDescriptor () const;

      RoleDescriptor::container&
      RoleDescriptor ();

      void
      RoleDescriptor (const RoleDescriptor::container&);

      // IDPSSODescriptor
      // 
      public:
      struct IDPSSODescriptor
      {
        typedef ::saml2::metadata::IDPSSODescriptorType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const IDPSSODescriptor::container&
      IDPSSODescriptor () const;

      IDPSSODescriptor::container&
      IDPSSODescriptor ();

      void
      IDPSSODescriptor (const IDPSSODescriptor::container&);

      // SPSSODescriptor
      // 
      public:
      struct SPSSODescriptor
      {
        typedef ::saml2::metadata::SPSSODescriptorType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const SPSSODescriptor::container&
      SPSSODescriptor () const;

      SPSSODescriptor::container&
      SPSSODescriptor ();

      void
      SPSSODescriptor (const SPSSODescriptor::container&);

      // AuthnAuthorityDescriptor
      // 
      public:
      struct AuthnAuthorityDescriptor
      {
        typedef ::saml2::metadata::AuthnAuthorityDescriptorType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AuthnAuthorityDescriptor::container&
      AuthnAuthorityDescriptor () const;

      AuthnAuthorityDescriptor::container&
      AuthnAuthorityDescriptor ();

      void
      AuthnAuthorityDescriptor (const AuthnAuthorityDescriptor::container&);

      // AttributeAuthorityDescriptor
      // 
      public:
      struct AttributeAuthorityDescriptor
      {
        typedef ::saml2::metadata::AttributeAuthorityDescriptorType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AttributeAuthorityDescriptor::container&
      AttributeAuthorityDescriptor () const;

      AttributeAuthorityDescriptor::container&
      AttributeAuthorityDescriptor ();

      void
      AttributeAuthorityDescriptor (const AttributeAuthorityDescriptor::container&);

      // PDPDescriptor
      // 
      public:
      struct PDPDescriptor
      {
        typedef ::saml2::metadata::PDPDescriptorType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const PDPDescriptor::container&
      PDPDescriptor () const;

      PDPDescriptor::container&
      PDPDescriptor ();

      void
      PDPDescriptor (const PDPDescriptor::container&);

      // AffiliationDescriptor
      // 
      public:
      struct AffiliationDescriptor
      {
        typedef ::saml2::metadata::AffiliationDescriptorType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const AffiliationDescriptor::container&
      AffiliationDescriptor () const;

      AffiliationDescriptor::container&
      AffiliationDescriptor ();

      void
      AffiliationDescriptor (const AffiliationDescriptor::type&);

      void
      AffiliationDescriptor (const AffiliationDescriptor::container&);

      void
      AffiliationDescriptor (::std::auto_ptr< AffiliationDescriptor::type >);

      // Organization
      // 
      public:
      struct Organization
      {
        typedef ::saml2::metadata::OrganizationType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Organization::container&
      Organization () const;

      Organization::container&
      Organization ();

      void
      Organization (const Organization::type&);

      void
      Organization (const Organization::container&);

      void
      Organization (::std::auto_ptr< Organization::type >);

      // ContactPerson
      // 
      public:
      struct ContactPerson
      {
        typedef ::saml2::metadata::ContactType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const ContactPerson::container&
      ContactPerson () const;

      ContactPerson::container&
      ContactPerson ();

      void
      ContactPerson (const ContactPerson::container&);

      // AdditionalMetadataLocation
      // 
      public:
      struct AdditionalMetadataLocation
      {
        typedef ::saml2::metadata::AdditionalMetadataLocationType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AdditionalMetadataLocation::container&
      AdditionalMetadataLocation () const;

      AdditionalMetadataLocation::container&
      AdditionalMetadataLocation ();

      void
      AdditionalMetadataLocation (const AdditionalMetadataLocation::container&);

      // entityID
      // 
      public:
      struct entityID
      {
        typedef ::saml2::metadata::entityIDType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const entityID::type&
      entityID () const;

      entityID::type&
      entityID ();

      void
      entityID (const entityID::type&);

      void
      entityID (::std::auto_ptr< entityID::type >);

      // validUntil
      // 
      public:
      struct validUntil
      {
        typedef ::xml_schema::date_time type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const validUntil::container&
      validUntil () const;

      validUntil::container&
      validUntil ();

      void
      validUntil (const validUntil::type&);

      void
      validUntil (const validUntil::container&);

      void
      validUntil (::std::auto_ptr< validUntil::type >);

      // cacheDuration
      // 
      public:
      struct cacheDuration
      {
        typedef ::xml_schema::duration type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const cacheDuration::container&
      cacheDuration () const;

      cacheDuration::container&
      cacheDuration ();

      void
      cacheDuration (const cacheDuration::type&);

      void
      cacheDuration (const cacheDuration::container&);

      void
      cacheDuration (::std::auto_ptr< cacheDuration::type >);

      // ID
      // 
      public:
      struct ID
      {
        typedef ::xml_schema::id type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const ID::container&
      ID () const;

      ID::container&
      ID ();

      void
      ID (const ID::type&);

      void
      ID (const ID::container&);

      void
      ID (::std::auto_ptr< ID::type >);

      // Constructors.
      //
      public:
      EntityDescriptorType ();

      EntityDescriptorType (const entityID::type&);

      EntityDescriptorType (const ::xercesc::DOMElement&,
                            ::xml_schema::flags = 0,
                            ::xml_schema::type* = 0);

      EntityDescriptorType (const EntityDescriptorType&,
                            ::xml_schema::flags = 0,
                            ::xml_schema::type* = 0);

      virtual EntityDescriptorType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< Signature::type > _xsd_Signature_;
      ::xsd::cxx::tree::optional< Extensions::type > _xsd_Extensions_;
      ::xsd::cxx::tree::sequence< RoleDescriptor::type > _xsd_RoleDescriptor_;
      ::xsd::cxx::tree::sequence< IDPSSODescriptor::type > _xsd_IDPSSODescriptor_;
      ::xsd::cxx::tree::sequence< SPSSODescriptor::type > _xsd_SPSSODescriptor_;
      ::xsd::cxx::tree::sequence< AuthnAuthorityDescriptor::type > _xsd_AuthnAuthorityDescriptor_;
      ::xsd::cxx::tree::sequence< AttributeAuthorityDescriptor::type > _xsd_AttributeAuthorityDescriptor_;
      ::xsd::cxx::tree::sequence< PDPDescriptor::type > _xsd_PDPDescriptor_;
      ::xsd::cxx::tree::optional< AffiliationDescriptor::type > _xsd_AffiliationDescriptor_;
      ::xsd::cxx::tree::optional< Organization::type > _xsd_Organization_;
      ::xsd::cxx::tree::sequence< ContactPerson::type > _xsd_ContactPerson_;
      ::xsd::cxx::tree::sequence< AdditionalMetadataLocation::type > _xsd_AdditionalMetadataLocation_;
      ::xsd::cxx::tree::one< entityID::type > _xsd_entityID_;
      ::xsd::cxx::tree::optional< validUntil::type > _xsd_validUntil_;
      ::xsd::cxx::tree::optional< cacheDuration::type > _xsd_cacheDuration_;
      ::xsd::cxx::tree::optional< ID::type > _xsd_ID_;
    };

    class OrganizationType: public ::xml_schema::type
    {
      public:

      struct _xsd_OrganizationType
      {
        typedef ::xml_schema::type base_;
      };

      // Extensions
      // 
      public:
      struct Extensions
      {
        typedef ::saml2::metadata::ExtensionsType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Extensions::container&
      Extensions () const;

      Extensions::container&
      Extensions ();

      void
      Extensions (const Extensions::type&);

      void
      Extensions (const Extensions::container&);

      void
      Extensions (::std::auto_ptr< Extensions::type >);

      // OrganizationName
      // 
      public:
      struct OrganizationName
      {
        typedef ::saml2::metadata::localizedNameType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const OrganizationName::container&
      OrganizationName () const;

      OrganizationName::container&
      OrganizationName ();

      void
      OrganizationName (const OrganizationName::container&);

      // OrganizationDisplayName
      // 
      public:
      struct OrganizationDisplayName
      {
        typedef ::saml2::metadata::localizedNameType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const OrganizationDisplayName::container&
      OrganizationDisplayName () const;

      OrganizationDisplayName::container&
      OrganizationDisplayName ();

      void
      OrganizationDisplayName (const OrganizationDisplayName::container&);

      // OrganizationURL
      // 
      public:
      struct OrganizationURL
      {
        typedef ::saml2::metadata::localizedURIType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const OrganizationURL::container&
      OrganizationURL () const;

      OrganizationURL::container&
      OrganizationURL ();

      void
      OrganizationURL (const OrganizationURL::container&);

      // Constructors.
      //
      public:
      OrganizationType ();

      OrganizationType (const ::xercesc::DOMElement&,
                        ::xml_schema::flags = 0,
                        ::xml_schema::type* = 0);

      OrganizationType (const OrganizationType&,
                        ::xml_schema::flags = 0,
                        ::xml_schema::type* = 0);

      virtual OrganizationType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< Extensions::type > _xsd_Extensions_;
      ::xsd::cxx::tree::sequence< OrganizationName::type > _xsd_OrganizationName_;
      ::xsd::cxx::tree::sequence< OrganizationDisplayName::type > _xsd_OrganizationDisplayName_;
      ::xsd::cxx::tree::sequence< OrganizationURL::type > _xsd_OrganizationURL_;
    };

    class ContactType: public ::xml_schema::type
    {
      public:

      struct _xsd_ContactType
      {
        typedef ::xml_schema::type base_;
      };

      // Extensions
      // 
      public:
      struct Extensions
      {
        typedef ::saml2::metadata::ExtensionsType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Extensions::container&
      Extensions () const;

      Extensions::container&
      Extensions ();

      void
      Extensions (const Extensions::type&);

      void
      Extensions (const Extensions::container&);

      void
      Extensions (::std::auto_ptr< Extensions::type >);

      // Company
      // 
      public:
      struct Company
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Company::container&
      Company () const;

      Company::container&
      Company ();

      void
      Company (const Company::type&);

      void
      Company (const Company::container&);

      void
      Company (::std::auto_ptr< Company::type >);

      // GivenName
      // 
      public:
      struct GivenName
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const GivenName::container&
      GivenName () const;

      GivenName::container&
      GivenName ();

      void
      GivenName (const GivenName::type&);

      void
      GivenName (const GivenName::container&);

      void
      GivenName (::std::auto_ptr< GivenName::type >);

      // SurName
      // 
      public:
      struct SurName
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const SurName::container&
      SurName () const;

      SurName::container&
      SurName ();

      void
      SurName (const SurName::type&);

      void
      SurName (const SurName::container&);

      void
      SurName (::std::auto_ptr< SurName::type >);

      // EmailAddress
      // 
      public:
      struct EmailAddress
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const EmailAddress::container&
      EmailAddress () const;

      EmailAddress::container&
      EmailAddress ();

      void
      EmailAddress (const EmailAddress::container&);

      // TelephoneNumber
      // 
      public:
      struct TelephoneNumber
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const TelephoneNumber::container&
      TelephoneNumber () const;

      TelephoneNumber::container&
      TelephoneNumber ();

      void
      TelephoneNumber (const TelephoneNumber::container&);

      // contactType
      // 
      public:
      struct contactType
      {
        typedef ::saml2::metadata::ContactTypeType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const contactType::type&
      contactType () const;

      contactType::type&
      contactType ();

      void
      contactType (const contactType::type&);

      void
      contactType (::std::auto_ptr< contactType::type >);

      // Constructors.
      //
      public:
      ContactType ();

      ContactType (const contactType::type&);

      ContactType (const ::xercesc::DOMElement&,
                   ::xml_schema::flags = 0,
                   ::xml_schema::type* = 0);

      ContactType (const ContactType&,
                   ::xml_schema::flags = 0,
                   ::xml_schema::type* = 0);

      virtual ContactType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< Extensions::type > _xsd_Extensions_;
      ::xsd::cxx::tree::optional< Company::type > _xsd_Company_;
      ::xsd::cxx::tree::optional< GivenName::type > _xsd_GivenName_;
      ::xsd::cxx::tree::optional< SurName::type > _xsd_SurName_;
      ::xsd::cxx::tree::sequence< EmailAddress::type > _xsd_EmailAddress_;
      ::xsd::cxx::tree::sequence< TelephoneNumber::type > _xsd_TelephoneNumber_;
      ::xsd::cxx::tree::one< contactType::type > _xsd_contactType_;
    };

    class ContactTypeType: public ::xml_schema::string
    {
      public:
      enum _xsd_ContactTypeType
      {
        technical,
        support,
        administrative,
        billing,
        other
      };

      ContactTypeType ();

      ContactTypeType (_xsd_ContactTypeType);

      ContactTypeType (const ::xml_schema::string&);

      ContactTypeType (const ::xercesc::DOMElement&,
                       ::xml_schema::flags = 0,
                       ::xml_schema::type* = 0);

      ContactTypeType (const ::xercesc::DOMAttr&,
                       ::xml_schema::flags = 0,
                       ::xml_schema::type* = 0);

      ContactTypeType (const ::std::basic_string< wchar_t >&,
                       const ::xercesc::DOMElement*,
                       ::xml_schema::flags = 0,
                       ::xml_schema::type* = 0);

      ContactTypeType (const ContactTypeType&,
                       ::xml_schema::flags = 0,
                       ::xml_schema::type* = 0);

      virtual ContactTypeType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      ContactTypeType&
      operator= (_xsd_ContactTypeType);

      virtual
      operator _xsd_ContactTypeType () const
      {
        return _xsd_ContactTypeType_convert ();
      }

      protected:
      _xsd_ContactTypeType
      _xsd_ContactTypeType_convert () const;

      public:
      static const wchar_t* const _xsd_ContactTypeType_literals_[5];
      static const _xsd_ContactTypeType _xsd_ContactTypeType_indexes_[5];
    };

    class AdditionalMetadataLocationType: public ::xml_schema::uri
    {
      public:

      struct _xsd_AdditionalMetadataLocationType
      {
        typedef ::xml_schema::uri base_;
      };

      // namespace
      // 
      public:
      struct namespace_
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const namespace_::type&
      namespace_ () const;

      namespace_::type&
      namespace_ ();

      void
      namespace_ (const namespace_::type&);

      void
      namespace_ (::std::auto_ptr< namespace_::type >);

      // Constructors.
      //
      public:
      AdditionalMetadataLocationType ();

      AdditionalMetadataLocationType (const _xsd_AdditionalMetadataLocationType::base_& ,
                                      const namespace_::type&);

      AdditionalMetadataLocationType (const ::xercesc::DOMElement&,
                                      ::xml_schema::flags = 0,
                                      ::xml_schema::type* = 0);

      AdditionalMetadataLocationType (const AdditionalMetadataLocationType&,
                                      ::xml_schema::flags = 0,
                                      ::xml_schema::type* = 0);

      virtual AdditionalMetadataLocationType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< namespace_::type > _xsd_namespace__;
    };

    class RoleDescriptorType: public ::xml_schema::type
    {
      public:

      struct _xsd_RoleDescriptorType
      {
        typedef ::xml_schema::type base_;
      };

      // Signature
      // 
      public:
      struct Signature
      {
        typedef ::w3::xmldsig::SignatureType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Signature::container&
      Signature () const;

      Signature::container&
      Signature ();

      void
      Signature (const Signature::type&);

      void
      Signature (const Signature::container&);

      void
      Signature (::std::auto_ptr< Signature::type >);

      // Extensions
      // 
      public:
      struct Extensions
      {
        typedef ::saml2::metadata::ExtensionsType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Extensions::container&
      Extensions () const;

      Extensions::container&
      Extensions ();

      void
      Extensions (const Extensions::type&);

      void
      Extensions (const Extensions::container&);

      void
      Extensions (::std::auto_ptr< Extensions::type >);

      // KeyDescriptor
      // 
      public:
      struct KeyDescriptor
      {
        typedef ::saml2::metadata::KeyDescriptorType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const KeyDescriptor::container&
      KeyDescriptor () const;

      KeyDescriptor::container&
      KeyDescriptor ();

      void
      KeyDescriptor (const KeyDescriptor::container&);

      // Organization
      // 
      public:
      struct Organization
      {
        typedef ::saml2::metadata::OrganizationType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Organization::container&
      Organization () const;

      Organization::container&
      Organization ();

      void
      Organization (const Organization::type&);

      void
      Organization (const Organization::container&);

      void
      Organization (::std::auto_ptr< Organization::type >);

      // ContactPerson
      // 
      public:
      struct ContactPerson
      {
        typedef ::saml2::metadata::ContactType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const ContactPerson::container&
      ContactPerson () const;

      ContactPerson::container&
      ContactPerson ();

      void
      ContactPerson (const ContactPerson::container&);

      // ID
      // 
      public:
      struct ID
      {
        typedef ::xml_schema::id type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const ID::container&
      ID () const;

      ID::container&
      ID ();

      void
      ID (const ID::type&);

      void
      ID (const ID::container&);

      void
      ID (::std::auto_ptr< ID::type >);

      // validUntil
      // 
      public:
      struct validUntil
      {
        typedef ::xml_schema::date_time type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const validUntil::container&
      validUntil () const;

      validUntil::container&
      validUntil ();

      void
      validUntil (const validUntil::type&);

      void
      validUntil (const validUntil::container&);

      void
      validUntil (::std::auto_ptr< validUntil::type >);

      // cacheDuration
      // 
      public:
      struct cacheDuration
      {
        typedef ::xml_schema::duration type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const cacheDuration::container&
      cacheDuration () const;

      cacheDuration::container&
      cacheDuration ();

      void
      cacheDuration (const cacheDuration::type&);

      void
      cacheDuration (const cacheDuration::container&);

      void
      cacheDuration (::std::auto_ptr< cacheDuration::type >);

      // protocolSupportEnumeration
      // 
      public:
      struct protocolSupportEnumeration
      {
        typedef ::saml2::metadata::anyURIListType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const protocolSupportEnumeration::type&
      protocolSupportEnumeration () const;

      protocolSupportEnumeration::type&
      protocolSupportEnumeration ();

      void
      protocolSupportEnumeration (const protocolSupportEnumeration::type&);

      void
      protocolSupportEnumeration (::std::auto_ptr< protocolSupportEnumeration::type >);

      // errorURL
      // 
      public:
      struct errorURL
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const errorURL::container&
      errorURL () const;

      errorURL::container&
      errorURL ();

      void
      errorURL (const errorURL::type&);

      void
      errorURL (const errorURL::container&);

      void
      errorURL (::std::auto_ptr< errorURL::type >);

      // Constructors.
      //
      public:
      RoleDescriptorType ();

      RoleDescriptorType (const protocolSupportEnumeration::type&);

      RoleDescriptorType (const ::xercesc::DOMElement&,
                          ::xml_schema::flags = 0,
                          ::xml_schema::type* = 0);

      RoleDescriptorType (const RoleDescriptorType&,
                          ::xml_schema::flags = 0,
                          ::xml_schema::type* = 0);

      virtual RoleDescriptorType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< Signature::type > _xsd_Signature_;
      ::xsd::cxx::tree::optional< Extensions::type > _xsd_Extensions_;
      ::xsd::cxx::tree::sequence< KeyDescriptor::type > _xsd_KeyDescriptor_;
      ::xsd::cxx::tree::optional< Organization::type > _xsd_Organization_;
      ::xsd::cxx::tree::sequence< ContactPerson::type > _xsd_ContactPerson_;
      ::xsd::cxx::tree::optional< ID::type > _xsd_ID_;
      ::xsd::cxx::tree::optional< validUntil::type > _xsd_validUntil_;
      ::xsd::cxx::tree::optional< cacheDuration::type > _xsd_cacheDuration_;
      ::xsd::cxx::tree::one< protocolSupportEnumeration::type > _xsd_protocolSupportEnumeration_;
      ::xsd::cxx::tree::optional< errorURL::type > _xsd_errorURL_;
    };

    class anyURIListType: public ::xml_schema::simple_type, public ::xsd::cxx::tree::list< ::xml_schema::uri, wchar_t >
    {
      public:
      anyURIListType ();

      anyURIListType (const ::xercesc::DOMElement&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      anyURIListType (const ::xercesc::DOMAttr&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      anyURIListType (const ::std::basic_string< wchar_t >&,
                      const ::xercesc::DOMElement*,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      anyURIListType (const anyURIListType&,
                      ::xml_schema::flags = 0,
                      ::xml_schema::type* = 0);

      virtual anyURIListType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;
    };

    class KeyDescriptorType: public ::xml_schema::type
    {
      public:

      struct _xsd_KeyDescriptorType
      {
        typedef ::xml_schema::type base_;
      };

      // KeyInfo
      // 
      public:
      struct KeyInfo
      {
        typedef ::w3::xmldsig::KeyInfoType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const KeyInfo::type&
      KeyInfo () const;

      KeyInfo::type&
      KeyInfo ();

      void
      KeyInfo (const KeyInfo::type&);

      void
      KeyInfo (::std::auto_ptr< KeyInfo::type >);

      // EncryptionMethod
      // 
      public:
      struct EncryptionMethod
      {
        typedef ::w3::xmlenc::EncryptionMethodType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const EncryptionMethod::container&
      EncryptionMethod () const;

      EncryptionMethod::container&
      EncryptionMethod ();

      void
      EncryptionMethod (const EncryptionMethod::container&);

      // use
      // 
      public:
      struct use
      {
        typedef ::saml2::metadata::KeyTypes type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const use::container&
      use () const;

      use::container&
      use ();

      void
      use (const use::type&);

      void
      use (const use::container&);

      void
      use (::std::auto_ptr< use::type >);

      // Constructors.
      //
      public:
      KeyDescriptorType ();

      KeyDescriptorType (const KeyInfo::type&);

      KeyDescriptorType (const ::xercesc::DOMElement&,
                         ::xml_schema::flags = 0,
                         ::xml_schema::type* = 0);

      KeyDescriptorType (const KeyDescriptorType&,
                         ::xml_schema::flags = 0,
                         ::xml_schema::type* = 0);

      virtual KeyDescriptorType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< KeyInfo::type > _xsd_KeyInfo_;
      ::xsd::cxx::tree::sequence< EncryptionMethod::type > _xsd_EncryptionMethod_;
      ::xsd::cxx::tree::optional< use::type > _xsd_use_;
    };

    class KeyTypes: public ::xml_schema::string
    {
      public:
      enum _xsd_KeyTypes
      {
        encryption,
        signing
      };

      KeyTypes ();

      KeyTypes (_xsd_KeyTypes);

      KeyTypes (const ::xml_schema::string&);

      KeyTypes (const ::xercesc::DOMElement&,
                ::xml_schema::flags = 0,
                ::xml_schema::type* = 0);

      KeyTypes (const ::xercesc::DOMAttr&,
                ::xml_schema::flags = 0,
                ::xml_schema::type* = 0);

      KeyTypes (const ::std::basic_string< wchar_t >&,
                const ::xercesc::DOMElement*,
                ::xml_schema::flags = 0,
                ::xml_schema::type* = 0);

      KeyTypes (const KeyTypes&,
                ::xml_schema::flags = 0,
                ::xml_schema::type* = 0);

      virtual KeyTypes*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      KeyTypes&
      operator= (_xsd_KeyTypes);

      virtual
      operator _xsd_KeyTypes () const
      {
        return _xsd_KeyTypes_convert ();
      }

      protected:
      _xsd_KeyTypes
      _xsd_KeyTypes_convert () const;

      public:
      static const wchar_t* const _xsd_KeyTypes_literals_[2];
      static const _xsd_KeyTypes _xsd_KeyTypes_indexes_[2];
    };

    class SSODescriptorType: public ::saml2::metadata::RoleDescriptorType
    {
      public:

      struct _xsd_SSODescriptorType
      {
        typedef ::saml2::metadata::RoleDescriptorType base_;
      };

      // ArtifactResolutionService
      // 
      public:
      struct ArtifactResolutionService
      {
        typedef ::saml2::metadata::IndexedEndpointType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const ArtifactResolutionService::container&
      ArtifactResolutionService () const;

      ArtifactResolutionService::container&
      ArtifactResolutionService ();

      void
      ArtifactResolutionService (const ArtifactResolutionService::container&);

      // SingleLogoutService
      // 
      public:
      struct SingleLogoutService
      {
        typedef ::saml2::metadata::EndpointType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const SingleLogoutService::container&
      SingleLogoutService () const;

      SingleLogoutService::container&
      SingleLogoutService ();

      void
      SingleLogoutService (const SingleLogoutService::container&);

      // ManageNameIDService
      // 
      public:
      struct ManageNameIDService
      {
        typedef ::saml2::metadata::EndpointType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const ManageNameIDService::container&
      ManageNameIDService () const;

      ManageNameIDService::container&
      ManageNameIDService ();

      void
      ManageNameIDService (const ManageNameIDService::container&);

      // NameIDFormat
      // 
      public:
      struct NameIDFormat
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const NameIDFormat::container&
      NameIDFormat () const;

      NameIDFormat::container&
      NameIDFormat ();

      void
      NameIDFormat (const NameIDFormat::container&);

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_SSODescriptorType::base_::protocolSupportEnumeration;
#endif

      // Constructors.
      //
      public:
      SSODescriptorType ();

      SSODescriptorType (const protocolSupportEnumeration::type&);

      SSODescriptorType (const ::xercesc::DOMElement&,
                         ::xml_schema::flags = 0,
                         ::xml_schema::type* = 0);

      SSODescriptorType (const SSODescriptorType&,
                         ::xml_schema::flags = 0,
                         ::xml_schema::type* = 0);

      virtual SSODescriptorType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< ArtifactResolutionService::type > _xsd_ArtifactResolutionService_;
      ::xsd::cxx::tree::sequence< SingleLogoutService::type > _xsd_SingleLogoutService_;
      ::xsd::cxx::tree::sequence< ManageNameIDService::type > _xsd_ManageNameIDService_;
      ::xsd::cxx::tree::sequence< NameIDFormat::type > _xsd_NameIDFormat_;
    };

    class IDPSSODescriptorType: public ::saml2::metadata::SSODescriptorType
    {
      public:

      struct _xsd_IDPSSODescriptorType
      {
        typedef ::saml2::metadata::SSODescriptorType base_;
      };

      // SingleSignOnService
      // 
      public:
      struct SingleSignOnService
      {
        typedef ::saml2::metadata::EndpointType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const SingleSignOnService::container&
      SingleSignOnService () const;

      SingleSignOnService::container&
      SingleSignOnService ();

      void
      SingleSignOnService (const SingleSignOnService::container&);

      // NameIDMappingService
      // 
      public:
      struct NameIDMappingService
      {
        typedef ::saml2::metadata::EndpointType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const NameIDMappingService::container&
      NameIDMappingService () const;

      NameIDMappingService::container&
      NameIDMappingService ();

      void
      NameIDMappingService (const NameIDMappingService::container&);

      // AssertionIDRequestService
      // 
      public:
      struct AssertionIDRequestService
      {
        typedef ::saml2::metadata::EndpointType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AssertionIDRequestService::container&
      AssertionIDRequestService () const;

      AssertionIDRequestService::container&
      AssertionIDRequestService ();

      void
      AssertionIDRequestService (const AssertionIDRequestService::container&);

      // AttributeProfile
      // 
      public:
      struct AttributeProfile
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AttributeProfile::container&
      AttributeProfile () const;

      AttributeProfile::container&
      AttributeProfile ();

      void
      AttributeProfile (const AttributeProfile::container&);

      // Attribute
      // 
      public:
      struct Attribute
      {
        typedef ::saml2::assertion::AttributeType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Attribute::container&
      Attribute () const;

      Attribute::container&
      Attribute ();

      void
      Attribute (const Attribute::container&);

      // WantAuthnRequestsSigned
      // 
      public:
      struct WantAuthnRequestsSigned
      {
        typedef ::xml_schema::boolean type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const WantAuthnRequestsSigned::container&
      WantAuthnRequestsSigned () const;

      WantAuthnRequestsSigned::container&
      WantAuthnRequestsSigned ();

      void
      WantAuthnRequestsSigned (const WantAuthnRequestsSigned::type&);

      void
      WantAuthnRequestsSigned (const WantAuthnRequestsSigned::container&);

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_IDPSSODescriptorType::base_::protocolSupportEnumeration;
#endif

      // Constructors.
      //
      public:
      IDPSSODescriptorType ();

      IDPSSODescriptorType (const protocolSupportEnumeration::type&);

      IDPSSODescriptorType (const ::xercesc::DOMElement&,
                            ::xml_schema::flags = 0,
                            ::xml_schema::type* = 0);

      IDPSSODescriptorType (const IDPSSODescriptorType&,
                            ::xml_schema::flags = 0,
                            ::xml_schema::type* = 0);

      virtual IDPSSODescriptorType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< SingleSignOnService::type > _xsd_SingleSignOnService_;
      ::xsd::cxx::tree::sequence< NameIDMappingService::type > _xsd_NameIDMappingService_;
      ::xsd::cxx::tree::sequence< AssertionIDRequestService::type > _xsd_AssertionIDRequestService_;
      ::xsd::cxx::tree::sequence< AttributeProfile::type > _xsd_AttributeProfile_;
      ::xsd::cxx::tree::sequence< Attribute::type > _xsd_Attribute_;
      ::xsd::cxx::tree::optional< WantAuthnRequestsSigned::type > _xsd_WantAuthnRequestsSigned_;
    };

    class SPSSODescriptorType: public ::saml2::metadata::SSODescriptorType
    {
      public:

      struct _xsd_SPSSODescriptorType
      {
        typedef ::saml2::metadata::SSODescriptorType base_;
      };

      // AssertionConsumerService
      // 
      public:
      struct AssertionConsumerService
      {
        typedef ::saml2::metadata::IndexedEndpointType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AssertionConsumerService::container&
      AssertionConsumerService () const;

      AssertionConsumerService::container&
      AssertionConsumerService ();

      void
      AssertionConsumerService (const AssertionConsumerService::container&);

      // AttributeConsumingService
      // 
      public:
      struct AttributeConsumingService
      {
        typedef ::saml2::metadata::AttributeConsumingServiceType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AttributeConsumingService::container&
      AttributeConsumingService () const;

      AttributeConsumingService::container&
      AttributeConsumingService ();

      void
      AttributeConsumingService (const AttributeConsumingService::container&);

      // AuthnRequestsSigned
      // 
      public:
      struct AuthnRequestsSigned
      {
        typedef ::xml_schema::boolean type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const AuthnRequestsSigned::container&
      AuthnRequestsSigned () const;

      AuthnRequestsSigned::container&
      AuthnRequestsSigned ();

      void
      AuthnRequestsSigned (const AuthnRequestsSigned::type&);

      void
      AuthnRequestsSigned (const AuthnRequestsSigned::container&);

      // WantAssertionsSigned
      // 
      public:
      struct WantAssertionsSigned
      {
        typedef ::xml_schema::boolean type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const WantAssertionsSigned::container&
      WantAssertionsSigned () const;

      WantAssertionsSigned::container&
      WantAssertionsSigned ();

      void
      WantAssertionsSigned (const WantAssertionsSigned::type&);

      void
      WantAssertionsSigned (const WantAssertionsSigned::container&);

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_SPSSODescriptorType::base_::protocolSupportEnumeration;
#endif

      // Constructors.
      //
      public:
      SPSSODescriptorType ();

      SPSSODescriptorType (const protocolSupportEnumeration::type&);

      SPSSODescriptorType (const ::xercesc::DOMElement&,
                           ::xml_schema::flags = 0,
                           ::xml_schema::type* = 0);

      SPSSODescriptorType (const SPSSODescriptorType&,
                           ::xml_schema::flags = 0,
                           ::xml_schema::type* = 0);

      virtual SPSSODescriptorType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< AssertionConsumerService::type > _xsd_AssertionConsumerService_;
      ::xsd::cxx::tree::sequence< AttributeConsumingService::type > _xsd_AttributeConsumingService_;
      ::xsd::cxx::tree::optional< AuthnRequestsSigned::type > _xsd_AuthnRequestsSigned_;
      ::xsd::cxx::tree::optional< WantAssertionsSigned::type > _xsd_WantAssertionsSigned_;
    };

    class AttributeConsumingServiceType: public ::xml_schema::type
    {
      public:

      struct _xsd_AttributeConsumingServiceType
      {
        typedef ::xml_schema::type base_;
      };

      // ServiceName
      // 
      public:
      struct ServiceName
      {
        typedef ::saml2::metadata::localizedNameType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const ServiceName::container&
      ServiceName () const;

      ServiceName::container&
      ServiceName ();

      void
      ServiceName (const ServiceName::container&);

      // ServiceDescription
      // 
      public:
      struct ServiceDescription
      {
        typedef ::saml2::metadata::localizedNameType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const ServiceDescription::container&
      ServiceDescription () const;

      ServiceDescription::container&
      ServiceDescription ();

      void
      ServiceDescription (const ServiceDescription::container&);

      // RequestedAttribute
      // 
      public:
      struct RequestedAttribute
      {
        typedef ::saml2::metadata::RequestedAttributeType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const RequestedAttribute::container&
      RequestedAttribute () const;

      RequestedAttribute::container&
      RequestedAttribute ();

      void
      RequestedAttribute (const RequestedAttribute::container&);

      // index
      // 
      public:
      struct index
      {
        typedef ::xml_schema::unsigned_short type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const index::type&
      index () const;

      index::type&
      index ();

      void
      index (const index::type&);

      // isDefault
      // 
      public:
      struct isDefault
      {
        typedef ::xml_schema::boolean type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const isDefault::container&
      isDefault () const;

      isDefault::container&
      isDefault ();

      void
      isDefault (const isDefault::type&);

      void
      isDefault (const isDefault::container&);

      // Constructors.
      //
      public:
      AttributeConsumingServiceType ();

      AttributeConsumingServiceType (const index::type&);

      AttributeConsumingServiceType (const ::xercesc::DOMElement&,
                                     ::xml_schema::flags = 0,
                                     ::xml_schema::type* = 0);

      AttributeConsumingServiceType (const AttributeConsumingServiceType&,
                                     ::xml_schema::flags = 0,
                                     ::xml_schema::type* = 0);

      virtual AttributeConsumingServiceType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< ServiceName::type > _xsd_ServiceName_;
      ::xsd::cxx::tree::sequence< ServiceDescription::type > _xsd_ServiceDescription_;
      ::xsd::cxx::tree::sequence< RequestedAttribute::type > _xsd_RequestedAttribute_;
      ::xsd::cxx::tree::one< index::type > _xsd_index_;
      ::xsd::cxx::tree::optional< isDefault::type > _xsd_isDefault_;
    };

    class RequestedAttributeType: public ::saml2::assertion::AttributeType
    {
      public:

      struct _xsd_RequestedAttributeType
      {
        typedef ::saml2::assertion::AttributeType base_;
      };

      // isRequired
      // 
      public:
      struct isRequired
      {
        typedef ::xml_schema::boolean type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const isRequired::container&
      isRequired () const;

      isRequired::container&
      isRequired ();

      void
      isRequired (const isRequired::type&);

      void
      isRequired (const isRequired::container&);

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_RequestedAttributeType::base_::Name;
#endif

      // Constructors.
      //
      public:
      RequestedAttributeType ();

      RequestedAttributeType (const Name::type&);

      RequestedAttributeType (const ::xercesc::DOMElement&,
                              ::xml_schema::flags = 0,
                              ::xml_schema::type* = 0);

      RequestedAttributeType (const RequestedAttributeType&,
                              ::xml_schema::flags = 0,
                              ::xml_schema::type* = 0);

      virtual RequestedAttributeType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< isRequired::type > _xsd_isRequired_;
    };

    class AuthnAuthorityDescriptorType: public ::saml2::metadata::RoleDescriptorType
    {
      public:

      struct _xsd_AuthnAuthorityDescriptorType
      {
        typedef ::saml2::metadata::RoleDescriptorType base_;
      };

      // AuthnQueryService
      // 
      public:
      struct AuthnQueryService
      {
        typedef ::saml2::metadata::EndpointType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AuthnQueryService::container&
      AuthnQueryService () const;

      AuthnQueryService::container&
      AuthnQueryService ();

      void
      AuthnQueryService (const AuthnQueryService::container&);

      // AssertionIDRequestService
      // 
      public:
      struct AssertionIDRequestService
      {
        typedef ::saml2::metadata::EndpointType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AssertionIDRequestService::container&
      AssertionIDRequestService () const;

      AssertionIDRequestService::container&
      AssertionIDRequestService ();

      void
      AssertionIDRequestService (const AssertionIDRequestService::container&);

      // NameIDFormat
      // 
      public:
      struct NameIDFormat
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const NameIDFormat::container&
      NameIDFormat () const;

      NameIDFormat::container&
      NameIDFormat ();

      void
      NameIDFormat (const NameIDFormat::container&);

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_AuthnAuthorityDescriptorType::base_::protocolSupportEnumeration;
#endif

      // Constructors.
      //
      public:
      AuthnAuthorityDescriptorType ();

      AuthnAuthorityDescriptorType (const protocolSupportEnumeration::type&);

      AuthnAuthorityDescriptorType (const ::xercesc::DOMElement&,
                                    ::xml_schema::flags = 0,
                                    ::xml_schema::type* = 0);

      AuthnAuthorityDescriptorType (const AuthnAuthorityDescriptorType&,
                                    ::xml_schema::flags = 0,
                                    ::xml_schema::type* = 0);

      virtual AuthnAuthorityDescriptorType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< AuthnQueryService::type > _xsd_AuthnQueryService_;
      ::xsd::cxx::tree::sequence< AssertionIDRequestService::type > _xsd_AssertionIDRequestService_;
      ::xsd::cxx::tree::sequence< NameIDFormat::type > _xsd_NameIDFormat_;
    };

    class PDPDescriptorType: public ::saml2::metadata::RoleDescriptorType
    {
      public:

      struct _xsd_PDPDescriptorType
      {
        typedef ::saml2::metadata::RoleDescriptorType base_;
      };

      // AuthzService
      // 
      public:
      struct AuthzService
      {
        typedef ::saml2::metadata::EndpointType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AuthzService::container&
      AuthzService () const;

      AuthzService::container&
      AuthzService ();

      void
      AuthzService (const AuthzService::container&);

      // AssertionIDRequestService
      // 
      public:
      struct AssertionIDRequestService
      {
        typedef ::saml2::metadata::EndpointType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AssertionIDRequestService::container&
      AssertionIDRequestService () const;

      AssertionIDRequestService::container&
      AssertionIDRequestService ();

      void
      AssertionIDRequestService (const AssertionIDRequestService::container&);

      // NameIDFormat
      // 
      public:
      struct NameIDFormat
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const NameIDFormat::container&
      NameIDFormat () const;

      NameIDFormat::container&
      NameIDFormat ();

      void
      NameIDFormat (const NameIDFormat::container&);

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_PDPDescriptorType::base_::protocolSupportEnumeration;
#endif

      // Constructors.
      //
      public:
      PDPDescriptorType ();

      PDPDescriptorType (const protocolSupportEnumeration::type&);

      PDPDescriptorType (const ::xercesc::DOMElement&,
                         ::xml_schema::flags = 0,
                         ::xml_schema::type* = 0);

      PDPDescriptorType (const PDPDescriptorType&,
                         ::xml_schema::flags = 0,
                         ::xml_schema::type* = 0);

      virtual PDPDescriptorType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< AuthzService::type > _xsd_AuthzService_;
      ::xsd::cxx::tree::sequence< AssertionIDRequestService::type > _xsd_AssertionIDRequestService_;
      ::xsd::cxx::tree::sequence< NameIDFormat::type > _xsd_NameIDFormat_;
    };

    class AttributeAuthorityDescriptorType: public ::saml2::metadata::RoleDescriptorType
    {
      public:

      struct _xsd_AttributeAuthorityDescriptorType
      {
        typedef ::saml2::metadata::RoleDescriptorType base_;
      };

      // AttributeService
      // 
      public:
      struct AttributeService
      {
        typedef ::saml2::metadata::EndpointType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AttributeService::container&
      AttributeService () const;

      AttributeService::container&
      AttributeService ();

      void
      AttributeService (const AttributeService::container&);

      // AssertionIDRequestService
      // 
      public:
      struct AssertionIDRequestService
      {
        typedef ::saml2::metadata::EndpointType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AssertionIDRequestService::container&
      AssertionIDRequestService () const;

      AssertionIDRequestService::container&
      AssertionIDRequestService ();

      void
      AssertionIDRequestService (const AssertionIDRequestService::container&);

      // NameIDFormat
      // 
      public:
      struct NameIDFormat
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const NameIDFormat::container&
      NameIDFormat () const;

      NameIDFormat::container&
      NameIDFormat ();

      void
      NameIDFormat (const NameIDFormat::container&);

      // AttributeProfile
      // 
      public:
      struct AttributeProfile
      {
        typedef ::xml_schema::uri type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AttributeProfile::container&
      AttributeProfile () const;

      AttributeProfile::container&
      AttributeProfile ();

      void
      AttributeProfile (const AttributeProfile::container&);

      // Attribute
      // 
      public:
      struct Attribute
      {
        typedef ::saml2::assertion::AttributeType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Attribute::container&
      Attribute () const;

      Attribute::container&
      Attribute ();

      void
      Attribute (const Attribute::container&);

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_AttributeAuthorityDescriptorType::base_::protocolSupportEnumeration;
#endif

      // Constructors.
      //
      public:
      AttributeAuthorityDescriptorType ();

      AttributeAuthorityDescriptorType (const protocolSupportEnumeration::type&);

      AttributeAuthorityDescriptorType (const ::xercesc::DOMElement&,
                                        ::xml_schema::flags = 0,
                                        ::xml_schema::type* = 0);

      AttributeAuthorityDescriptorType (const AttributeAuthorityDescriptorType&,
                                        ::xml_schema::flags = 0,
                                        ::xml_schema::type* = 0);

      virtual AttributeAuthorityDescriptorType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< AttributeService::type > _xsd_AttributeService_;
      ::xsd::cxx::tree::sequence< AssertionIDRequestService::type > _xsd_AssertionIDRequestService_;
      ::xsd::cxx::tree::sequence< NameIDFormat::type > _xsd_NameIDFormat_;
      ::xsd::cxx::tree::sequence< AttributeProfile::type > _xsd_AttributeProfile_;
      ::xsd::cxx::tree::sequence< Attribute::type > _xsd_Attribute_;
    };

    class AffiliationDescriptorType: public ::xml_schema::type
    {
      public:

      struct _xsd_AffiliationDescriptorType
      {
        typedef ::xml_schema::type base_;
      };

      // Signature
      // 
      public:
      struct Signature
      {
        typedef ::w3::xmldsig::SignatureType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Signature::container&
      Signature () const;

      Signature::container&
      Signature ();

      void
      Signature (const Signature::type&);

      void
      Signature (const Signature::container&);

      void
      Signature (::std::auto_ptr< Signature::type >);

      // Extensions
      // 
      public:
      struct Extensions
      {
        typedef ::saml2::metadata::ExtensionsType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Extensions::container&
      Extensions () const;

      Extensions::container&
      Extensions ();

      void
      Extensions (const Extensions::type&);

      void
      Extensions (const Extensions::container&);

      void
      Extensions (::std::auto_ptr< Extensions::type >);

      // AffiliateMember
      // 
      public:
      struct AffiliateMember
      {
        typedef ::saml2::metadata::entityIDType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const AffiliateMember::container&
      AffiliateMember () const;

      AffiliateMember::container&
      AffiliateMember ();

      void
      AffiliateMember (const AffiliateMember::container&);

      // KeyDescriptor
      // 
      public:
      struct KeyDescriptor
      {
        typedef ::saml2::metadata::KeyDescriptorType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const KeyDescriptor::container&
      KeyDescriptor () const;

      KeyDescriptor::container&
      KeyDescriptor ();

      void
      KeyDescriptor (const KeyDescriptor::container&);

      // affiliationOwnerID
      // 
      public:
      struct affiliationOwnerID
      {
        typedef ::saml2::metadata::entityIDType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const affiliationOwnerID::type&
      affiliationOwnerID () const;

      affiliationOwnerID::type&
      affiliationOwnerID ();

      void
      affiliationOwnerID (const affiliationOwnerID::type&);

      void
      affiliationOwnerID (::std::auto_ptr< affiliationOwnerID::type >);

      // validUntil
      // 
      public:
      struct validUntil
      {
        typedef ::xml_schema::date_time type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const validUntil::container&
      validUntil () const;

      validUntil::container&
      validUntil ();

      void
      validUntil (const validUntil::type&);

      void
      validUntil (const validUntil::container&);

      void
      validUntil (::std::auto_ptr< validUntil::type >);

      // cacheDuration
      // 
      public:
      struct cacheDuration
      {
        typedef ::xml_schema::duration type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const cacheDuration::container&
      cacheDuration () const;

      cacheDuration::container&
      cacheDuration ();

      void
      cacheDuration (const cacheDuration::type&);

      void
      cacheDuration (const cacheDuration::container&);

      void
      cacheDuration (::std::auto_ptr< cacheDuration::type >);

      // ID
      // 
      public:
      struct ID
      {
        typedef ::xml_schema::id type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const ID::container&
      ID () const;

      ID::container&
      ID ();

      void
      ID (const ID::type&);

      void
      ID (const ID::container&);

      void
      ID (::std::auto_ptr< ID::type >);

      // Constructors.
      //
      public:
      AffiliationDescriptorType ();

      AffiliationDescriptorType (const affiliationOwnerID::type&);

      AffiliationDescriptorType (const ::xercesc::DOMElement&,
                                 ::xml_schema::flags = 0,
                                 ::xml_schema::type* = 0);

      AffiliationDescriptorType (const AffiliationDescriptorType&,
                                 ::xml_schema::flags = 0,
                                 ::xml_schema::type* = 0);

      virtual AffiliationDescriptorType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< Signature::type > _xsd_Signature_;
      ::xsd::cxx::tree::optional< Extensions::type > _xsd_Extensions_;
      ::xsd::cxx::tree::sequence< AffiliateMember::type > _xsd_AffiliateMember_;
      ::xsd::cxx::tree::sequence< KeyDescriptor::type > _xsd_KeyDescriptor_;
      ::xsd::cxx::tree::one< affiliationOwnerID::type > _xsd_affiliationOwnerID_;
      ::xsd::cxx::tree::optional< validUntil::type > _xsd_validUntil_;
      ::xsd::cxx::tree::optional< cacheDuration::type > _xsd_cacheDuration_;
      ::xsd::cxx::tree::optional< ID::type > _xsd_ID_;
    };
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMInputSource.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace saml2
{
  namespace metadata
  {
    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (const ::std::basic_string< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (const ::std::basic_string< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (const ::std::basic_string< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (::std::istream&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (::std::istream&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (::std::istream&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (::std::istream&,
                const ::std::basic_string< wchar_t >& id,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (const ::xercesc::DOMInputSource&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (const ::xercesc::DOMInputSource&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (const ::xercesc::DOMInputSource&,
                ::xercesc::DOMErrorHandler&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (const ::xercesc::DOMDocument&,
                ::xml_schema::flags = 0,
                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (const ::std::basic_string< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (const ::std::basic_string< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (const ::std::basic_string< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (::std::istream&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (::std::istream&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (::std::istream&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (const ::xercesc::DOMInputSource&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (const ::xercesc::DOMInputSource&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (const ::xercesc::DOMInputSource&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (const ::xercesc::DOMDocument&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (const ::std::basic_string< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (const ::std::basic_string< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (const ::std::basic_string< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (::std::istream&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (::std::istream&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (::std::istream&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (const ::xercesc::DOMInputSource&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (const ::xercesc::DOMInputSource&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (const ::xercesc::DOMInputSource&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (const ::xercesc::DOMDocument&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (const ::std::basic_string< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (const ::std::basic_string< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (const ::std::basic_string< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (::std::istream&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (::std::istream&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (::std::istream&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (const ::xercesc::DOMInputSource&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (const ::xercesc::DOMInputSource&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (const ::xercesc::DOMInputSource&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (const ::xercesc::DOMDocument&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (const ::std::basic_string< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (const ::std::basic_string< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (const ::std::basic_string< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (::std::istream&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (::std::istream&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (::std::istream&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (const ::xercesc::DOMInputSource&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (const ::xercesc::DOMInputSource&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (const ::xercesc::DOMInputSource&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (const ::xercesc::DOMDocument&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (const ::std::basic_string< wchar_t >&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (const ::std::basic_string< wchar_t >&,
                             ::xsd::cxx::xml::error_handler< wchar_t >&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (const ::std::basic_string< wchar_t >&,
                             ::xercesc::DOMErrorHandler&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (::std::istream&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (::std::istream&,
                             ::xsd::cxx::xml::error_handler< wchar_t >&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (::std::istream&,
                             ::xercesc::DOMErrorHandler&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (::std::istream&,
                             const ::std::basic_string< wchar_t >& id,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (::std::istream&,
                             const ::std::basic_string< wchar_t >& id,
                             ::xsd::cxx::xml::error_handler< wchar_t >&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (::std::istream&,
                             const ::std::basic_string< wchar_t >& id,
                             ::xercesc::DOMErrorHandler&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (const ::xercesc::DOMInputSource&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (const ::xercesc::DOMInputSource&,
                             ::xsd::cxx::xml::error_handler< wchar_t >&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (const ::xercesc::DOMInputSource&,
                             ::xercesc::DOMErrorHandler&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (const ::xercesc::DOMDocument&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (const ::std::basic_string< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (const ::std::basic_string< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (const ::std::basic_string< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (::std::istream&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (::std::istream&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (::std::istream&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (const ::xercesc::DOMInputSource&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (const ::xercesc::DOMInputSource&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (const ::xercesc::DOMInputSource&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (const ::xercesc::DOMDocument&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (const ::std::basic_string< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (const ::std::basic_string< wchar_t >&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (const ::std::basic_string< wchar_t >&,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (::std::istream&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (::std::istream&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (::std::istream&,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (::std::istream&,
                   const ::std::basic_string< wchar_t >& id,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (::std::istream&,
                   const ::std::basic_string< wchar_t >& id,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (::std::istream&,
                   const ::std::basic_string< wchar_t >& id,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (const ::xercesc::DOMInputSource&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (const ::xercesc::DOMInputSource&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (const ::xercesc::DOMInputSource&,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (const ::xercesc::DOMDocument&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    Company (const ::std::basic_string< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    Company (const ::std::basic_string< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    Company (const ::std::basic_string< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    Company (::std::istream&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    Company (::std::istream&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    Company (::std::istream&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::string >
    Company (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    Company (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    Company (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    Company (const ::xercesc::DOMInputSource&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    Company (const ::xercesc::DOMInputSource&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    Company (const ::xercesc::DOMInputSource&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::string >
    Company (const ::xercesc::DOMDocument&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (const ::std::basic_string< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (const ::std::basic_string< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (const ::std::basic_string< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (::std::istream&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (::std::istream&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (::std::istream&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::string >
    GivenName (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (::std::istream&,
               const ::std::basic_string< wchar_t >& id,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (const ::xercesc::DOMInputSource&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (const ::xercesc::DOMInputSource&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (const ::xercesc::DOMInputSource&,
               ::xercesc::DOMErrorHandler&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (const ::xercesc::DOMDocument&,
               ::xml_schema::flags = 0,
               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    SurName (const ::std::basic_string< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    SurName (const ::std::basic_string< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    SurName (const ::std::basic_string< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    SurName (::std::istream&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    SurName (::std::istream&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    SurName (::std::istream&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::string >
    SurName (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    SurName (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    SurName (::std::istream&,
             const ::std::basic_string< wchar_t >& id,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    SurName (const ::xercesc::DOMInputSource&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    SurName (const ::xercesc::DOMInputSource&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    SurName (const ::xercesc::DOMInputSource&,
             ::xercesc::DOMErrorHandler&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::string >
    SurName (const ::xercesc::DOMDocument&,
             ::xml_schema::flags = 0,
             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (const ::std::basic_string< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (const ::std::basic_string< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (const ::std::basic_string< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (::std::istream&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (::std::istream&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (::std::istream&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (const ::xercesc::DOMInputSource&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (const ::xercesc::DOMInputSource&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (const ::xercesc::DOMInputSource&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (const ::xercesc::DOMDocument&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (const ::std::basic_string< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (const ::std::basic_string< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (const ::std::basic_string< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (::std::istream&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (::std::istream&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (::std::istream&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (const ::xercesc::DOMInputSource&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (const ::xercesc::DOMInputSource&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (const ::xercesc::DOMInputSource&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (const ::xercesc::DOMDocument&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (const ::std::basic_string< wchar_t >&,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (const ::std::basic_string< wchar_t >&,
                                ::xsd::cxx::xml::error_handler< wchar_t >&,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (const ::std::basic_string< wchar_t >&,
                                ::xercesc::DOMErrorHandler&,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (::std::istream&,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (::std::istream&,
                                ::xsd::cxx::xml::error_handler< wchar_t >&,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (::std::istream&,
                                ::xercesc::DOMErrorHandler&,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (::std::istream&,
                                const ::std::basic_string< wchar_t >& id,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (::std::istream&,
                                const ::std::basic_string< wchar_t >& id,
                                ::xsd::cxx::xml::error_handler< wchar_t >&,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (::std::istream&,
                                const ::std::basic_string< wchar_t >& id,
                                ::xercesc::DOMErrorHandler&,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (const ::xercesc::DOMInputSource&,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (const ::xercesc::DOMInputSource&,
                                ::xsd::cxx::xml::error_handler< wchar_t >&,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (const ::xercesc::DOMInputSource&,
                                ::xercesc::DOMErrorHandler&,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (const ::xercesc::DOMDocument&,
                                ::xml_schema::flags = 0,
                                const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (const ::std::basic_string< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (const ::std::basic_string< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (const ::std::basic_string< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (::std::istream&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (::std::istream&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (::std::istream&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (::std::istream&,
                    const ::std::basic_string< wchar_t >& id,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (const ::xercesc::DOMInputSource&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (const ::xercesc::DOMInputSource&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (const ::xercesc::DOMInputSource&,
                    ::xercesc::DOMErrorHandler&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (const ::xercesc::DOMDocument&,
                    ::xml_schema::flags = 0,
                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (const ::std::basic_string< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (const ::std::basic_string< wchar_t >&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (const ::std::basic_string< wchar_t >&,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (::std::istream&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (::std::istream&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (::std::istream&,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (::std::istream&,
                   const ::std::basic_string< wchar_t >& id,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (::std::istream&,
                   const ::std::basic_string< wchar_t >& id,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (::std::istream&,
                   const ::std::basic_string< wchar_t >& id,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (const ::xercesc::DOMInputSource&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (const ::xercesc::DOMInputSource&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (const ::xercesc::DOMInputSource&,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (const ::xercesc::DOMDocument&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (const ::std::basic_string< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (const ::std::basic_string< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (const ::std::basic_string< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (::std::istream&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (::std::istream&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (::std::istream&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (const ::xercesc::DOMInputSource&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (const ::xercesc::DOMInputSource&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (const ::xercesc::DOMInputSource&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (const ::xercesc::DOMDocument&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (const ::std::basic_string< wchar_t >&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (const ::std::basic_string< wchar_t >&,
                               ::xsd::cxx::xml::error_handler< wchar_t >&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (const ::std::basic_string< wchar_t >&,
                               ::xercesc::DOMErrorHandler&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (::std::istream&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (::std::istream&,
                               ::xsd::cxx::xml::error_handler< wchar_t >&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (::std::istream&,
                               ::xercesc::DOMErrorHandler&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (::std::istream&,
                               const ::std::basic_string< wchar_t >& id,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (::std::istream&,
                               const ::std::basic_string< wchar_t >& id,
                               ::xsd::cxx::xml::error_handler< wchar_t >&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (::std::istream&,
                               const ::std::basic_string< wchar_t >& id,
                               ::xercesc::DOMErrorHandler&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (const ::xercesc::DOMInputSource&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (const ::xercesc::DOMInputSource&,
                               ::xsd::cxx::xml::error_handler< wchar_t >&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (const ::xercesc::DOMInputSource&,
                               ::xercesc::DOMErrorHandler&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (const ::xercesc::DOMDocument&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (const ::std::basic_string< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (const ::std::basic_string< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (const ::std::basic_string< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (::std::istream&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (::std::istream&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (::std::istream&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (const ::xercesc::DOMInputSource&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (const ::xercesc::DOMInputSource&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (const ::xercesc::DOMInputSource&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (const ::xercesc::DOMDocument&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (const ::std::basic_string< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (const ::std::basic_string< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (const ::std::basic_string< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (::std::istream&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (::std::istream&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (::std::istream&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (const ::xercesc::DOMInputSource&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (const ::xercesc::DOMInputSource&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (const ::xercesc::DOMInputSource&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (const ::xercesc::DOMDocument&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (const ::std::basic_string< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (const ::std::basic_string< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (const ::std::basic_string< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (::std::istream&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (::std::istream&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (::std::istream&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (const ::xercesc::DOMInputSource&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (const ::xercesc::DOMInputSource&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (const ::xercesc::DOMInputSource&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (const ::xercesc::DOMDocument&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (const ::std::basic_string< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (const ::std::basic_string< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (const ::std::basic_string< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (::std::istream&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (::std::istream&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (::std::istream&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (const ::xercesc::DOMInputSource&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (const ::xercesc::DOMInputSource&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (const ::xercesc::DOMInputSource&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (const ::xercesc::DOMDocument&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (const ::std::basic_string< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (const ::std::basic_string< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (const ::std::basic_string< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (::std::istream&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (::std::istream&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (::std::istream&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (::std::istream&,
                         const ::std::basic_string< wchar_t >& id,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (const ::xercesc::DOMInputSource&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (const ::xercesc::DOMInputSource&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (const ::xercesc::DOMInputSource&,
                         ::xercesc::DOMErrorHandler&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (const ::xercesc::DOMDocument&,
                         ::xml_schema::flags = 0,
                         const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (const ::std::basic_string< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (const ::std::basic_string< wchar_t >&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (const ::std::basic_string< wchar_t >&,
                          ::xercesc::DOMErrorHandler&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (::std::istream&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (::std::istream&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (::std::istream&,
                          ::xercesc::DOMErrorHandler&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (::std::istream&,
                          const ::std::basic_string< wchar_t >& id,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (::std::istream&,
                          const ::std::basic_string< wchar_t >& id,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (::std::istream&,
                          const ::std::basic_string< wchar_t >& id,
                          ::xercesc::DOMErrorHandler&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (const ::xercesc::DOMInputSource&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (const ::xercesc::DOMInputSource&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (const ::xercesc::DOMInputSource&,
                          ::xercesc::DOMErrorHandler&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (const ::xercesc::DOMDocument&,
                          ::xml_schema::flags = 0,
                          const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (const ::std::basic_string< wchar_t >&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (const ::std::basic_string< wchar_t >&,
                               ::xsd::cxx::xml::error_handler< wchar_t >&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (const ::std::basic_string< wchar_t >&,
                               ::xercesc::DOMErrorHandler&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (::std::istream&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (::std::istream&,
                               ::xsd::cxx::xml::error_handler< wchar_t >&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (::std::istream&,
                               ::xercesc::DOMErrorHandler&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (::std::istream&,
                               const ::std::basic_string< wchar_t >& id,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (::std::istream&,
                               const ::std::basic_string< wchar_t >& id,
                               ::xsd::cxx::xml::error_handler< wchar_t >&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (::std::istream&,
                               const ::std::basic_string< wchar_t >& id,
                               ::xercesc::DOMErrorHandler&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (const ::xercesc::DOMInputSource&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (const ::xercesc::DOMInputSource&,
                               ::xsd::cxx::xml::error_handler< wchar_t >&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (const ::xercesc::DOMInputSource&,
                               ::xercesc::DOMErrorHandler&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (const ::xercesc::DOMDocument&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (const ::std::basic_string< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (const ::std::basic_string< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (const ::std::basic_string< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (::std::istream&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (::std::istream&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (::std::istream&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (const ::xercesc::DOMInputSource&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (const ::xercesc::DOMInputSource&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (const ::xercesc::DOMInputSource&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (const ::xercesc::DOMDocument&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (const ::std::basic_string< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (const ::std::basic_string< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (const ::std::basic_string< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (::std::istream&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (::std::istream&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (::std::istream&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (const ::xercesc::DOMInputSource&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (const ::xercesc::DOMInputSource&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (const ::xercesc::DOMInputSource&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (const ::xercesc::DOMDocument&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (const ::std::basic_string< wchar_t >&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (const ::std::basic_string< wchar_t >&,
                              ::xsd::cxx::xml::error_handler< wchar_t >&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (const ::std::basic_string< wchar_t >&,
                              ::xercesc::DOMErrorHandler&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (::std::istream&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (::std::istream&,
                              ::xsd::cxx::xml::error_handler< wchar_t >&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (::std::istream&,
                              ::xercesc::DOMErrorHandler&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (::std::istream&,
                              const ::std::basic_string< wchar_t >& id,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (::std::istream&,
                              const ::std::basic_string< wchar_t >& id,
                              ::xsd::cxx::xml::error_handler< wchar_t >&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (::std::istream&,
                              const ::std::basic_string< wchar_t >& id,
                              ::xercesc::DOMErrorHandler&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (const ::xercesc::DOMInputSource&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (const ::xercesc::DOMInputSource&,
                              ::xsd::cxx::xml::error_handler< wchar_t >&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (const ::xercesc::DOMInputSource&,
                              ::xercesc::DOMErrorHandler&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (const ::xercesc::DOMDocument&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (const ::std::basic_string< wchar_t >&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (const ::std::basic_string< wchar_t >&,
                               ::xsd::cxx::xml::error_handler< wchar_t >&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (const ::std::basic_string< wchar_t >&,
                               ::xercesc::DOMErrorHandler&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (::std::istream&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (::std::istream&,
                               ::xsd::cxx::xml::error_handler< wchar_t >&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (::std::istream&,
                               ::xercesc::DOMErrorHandler&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (::std::istream&,
                               const ::std::basic_string< wchar_t >& id,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (::std::istream&,
                               const ::std::basic_string< wchar_t >& id,
                               ::xsd::cxx::xml::error_handler< wchar_t >&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (::std::istream&,
                               const ::std::basic_string< wchar_t >& id,
                               ::xercesc::DOMErrorHandler&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (const ::xercesc::DOMInputSource&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (const ::xercesc::DOMInputSource&,
                               ::xsd::cxx::xml::error_handler< wchar_t >&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (const ::xercesc::DOMInputSource&,
                               ::xercesc::DOMErrorHandler&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (const ::xercesc::DOMDocument&,
                               ::xml_schema::flags = 0,
                               const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (const ::std::basic_string< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (const ::std::basic_string< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (const ::std::basic_string< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (::std::istream&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (::std::istream&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (::std::istream&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (::std::istream&,
                 const ::std::basic_string< wchar_t >& id,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (const ::xercesc::DOMInputSource&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (const ::xercesc::DOMInputSource&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (const ::xercesc::DOMInputSource&,
                 ::xercesc::DOMErrorHandler&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (const ::xercesc::DOMDocument&,
                 ::xml_schema::flags = 0,
                 const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (const ::std::basic_string< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (const ::std::basic_string< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (const ::std::basic_string< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (::std::istream&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (::std::istream&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (::std::istream&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (const ::xercesc::DOMInputSource&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (const ::xercesc::DOMInputSource&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (const ::xercesc::DOMInputSource&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (const ::xercesc::DOMDocument&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (const ::std::basic_string< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (const ::std::basic_string< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (const ::std::basic_string< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (::std::istream&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (::std::istream&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (::std::istream&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (::std::istream&,
                        const ::std::basic_string< wchar_t >& id,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (const ::xercesc::DOMInputSource&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (const ::xercesc::DOMInputSource&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (const ::xercesc::DOMInputSource&,
                        ::xercesc::DOMErrorHandler&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (const ::xercesc::DOMDocument&,
                        ::xml_schema::flags = 0,
                        const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (const ::std::basic_string< wchar_t >&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (const ::std::basic_string< wchar_t >&,
                              ::xsd::cxx::xml::error_handler< wchar_t >&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (const ::std::basic_string< wchar_t >&,
                              ::xercesc::DOMErrorHandler&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (::std::istream&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (::std::istream&,
                              ::xsd::cxx::xml::error_handler< wchar_t >&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (::std::istream&,
                              ::xercesc::DOMErrorHandler&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (::std::istream&,
                              const ::std::basic_string< wchar_t >& id,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (::std::istream&,
                              const ::std::basic_string< wchar_t >& id,
                              ::xsd::cxx::xml::error_handler< wchar_t >&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (::std::istream&,
                              const ::std::basic_string< wchar_t >& id,
                              ::xercesc::DOMErrorHandler&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (const ::xercesc::DOMInputSource&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (const ::xercesc::DOMInputSource&,
                              ::xsd::cxx::xml::error_handler< wchar_t >&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (const ::xercesc::DOMInputSource&,
                              ::xercesc::DOMErrorHandler&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (const ::xercesc::DOMDocument&,
                              ::xml_schema::flags = 0,
                              const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (const ::std::basic_string< wchar_t >&,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (const ::std::basic_string< wchar_t >&,
                       ::xsd::cxx::xml::error_handler< wchar_t >&,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (const ::std::basic_string< wchar_t >&,
                       ::xercesc::DOMErrorHandler&,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (::std::istream&,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (::std::istream&,
                       ::xsd::cxx::xml::error_handler< wchar_t >&,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (::std::istream&,
                       ::xercesc::DOMErrorHandler&,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (::std::istream&,
                       const ::std::basic_string< wchar_t >& id,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (::std::istream&,
                       const ::std::basic_string< wchar_t >& id,
                       ::xsd::cxx::xml::error_handler< wchar_t >&,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (::std::istream&,
                       const ::std::basic_string< wchar_t >& id,
                       ::xercesc::DOMErrorHandler&,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (const ::xercesc::DOMInputSource&,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (const ::xercesc::DOMInputSource&,
                       ::xsd::cxx::xml::error_handler< wchar_t >&,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (const ::xercesc::DOMInputSource&,
                       ::xercesc::DOMErrorHandler&,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (const ::xercesc::DOMDocument&,
                       ::xml_schema::flags = 0,
                       const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (const ::std::basic_string< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (const ::std::basic_string< wchar_t >&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (const ::std::basic_string< wchar_t >&,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (::std::istream&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (::std::istream&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (::std::istream&,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (::std::istream&,
                   const ::std::basic_string< wchar_t >& id,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (::std::istream&,
                   const ::std::basic_string< wchar_t >& id,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (::std::istream&,
                   const ::std::basic_string< wchar_t >& id,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (const ::xercesc::DOMInputSource&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (const ::xercesc::DOMInputSource&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (const ::xercesc::DOMInputSource&,
                   ::xercesc::DOMErrorHandler&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (const ::xercesc::DOMDocument&,
                   ::xml_schema::flags = 0,
                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (const ::std::basic_string< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (const ::std::basic_string< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (const ::std::basic_string< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (::std::istream&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (::std::istream&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (::std::istream&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (::std::istream&,
                  const ::std::basic_string< wchar_t >& id,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (const ::xercesc::DOMInputSource&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (const ::xercesc::DOMInputSource&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (const ::xercesc::DOMInputSource&,
                  ::xercesc::DOMErrorHandler&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (const ::xercesc::DOMDocument&,
                  ::xml_schema::flags = 0,
                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (const ::std::basic_string< wchar_t >&,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (const ::std::basic_string< wchar_t >&,
                                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (const ::std::basic_string< wchar_t >&,
                                  ::xercesc::DOMErrorHandler&,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (::std::istream&,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (::std::istream&,
                                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (::std::istream&,
                                  ::xercesc::DOMErrorHandler&,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (::std::istream&,
                                  const ::std::basic_string< wchar_t >& id,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (::std::istream&,
                                  const ::std::basic_string< wchar_t >& id,
                                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (::std::istream&,
                                  const ::std::basic_string< wchar_t >& id,
                                  ::xercesc::DOMErrorHandler&,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (const ::xercesc::DOMInputSource&,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (const ::xercesc::DOMInputSource&,
                                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (const ::xercesc::DOMInputSource&,
                                  ::xercesc::DOMErrorHandler&,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (const ::xercesc::DOMDocument&,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (const ::std::basic_string< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (const ::std::basic_string< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (const ::std::basic_string< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (::std::istream&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (::std::istream&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (::std::istream&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (::std::istream&,
                      const ::std::basic_string< wchar_t >& id,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (const ::xercesc::DOMInputSource&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (const ::xercesc::DOMInputSource&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (const ::xercesc::DOMInputSource&,
                      ::xercesc::DOMErrorHandler&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (const ::xercesc::DOMDocument&,
                      ::xml_schema::flags = 0,
                      const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (const ::std::basic_string< wchar_t >&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (const ::std::basic_string< wchar_t >&,
                           ::xsd::cxx::xml::error_handler< wchar_t >&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (const ::std::basic_string< wchar_t >&,
                           ::xercesc::DOMErrorHandler&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (::std::istream&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (::std::istream&,
                           ::xsd::cxx::xml::error_handler< wchar_t >&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (::std::istream&,
                           ::xercesc::DOMErrorHandler&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (::std::istream&,
                           const ::std::basic_string< wchar_t >& id,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (::std::istream&,
                           const ::std::basic_string< wchar_t >& id,
                           ::xsd::cxx::xml::error_handler< wchar_t >&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (::std::istream&,
                           const ::std::basic_string< wchar_t >& id,
                           ::xercesc::DOMErrorHandler&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (const ::xercesc::DOMInputSource&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (const ::xercesc::DOMInputSource&,
                           ::xsd::cxx::xml::error_handler< wchar_t >&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (const ::xercesc::DOMInputSource&,
                           ::xercesc::DOMErrorHandler&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (const ::xercesc::DOMDocument&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (const ::std::basic_string< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (const ::std::basic_string< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (const ::std::basic_string< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (::std::istream&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (::std::istream&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (::std::istream&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (::std::istream&,
                     const ::std::basic_string< wchar_t >& id,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (const ::xercesc::DOMInputSource&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (const ::xercesc::DOMInputSource&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (const ::xercesc::DOMInputSource&,
                     ::xercesc::DOMErrorHandler&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (const ::xercesc::DOMDocument&,
                     ::xml_schema::flags = 0,
                     const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());
  }
}

#include <iosfwd> // std::ostream&

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace saml2
{
  namespace metadata
  {
    void
    operator<< (::xercesc::DOMElement&,
                const entityIDType&);

    void
    operator<< (::xercesc::DOMAttr&,
                const entityIDType&);

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                const entityIDType&);

    void
    operator<< (::xercesc::DOMElement&,
                const localizedNameType&);

    void
    operator<< (::xercesc::DOMElement&,
                const localizedURIType&);

    // Serialize to an existing DOM instance.
    //
    void
    Extensions (::xercesc::DOMDocument&,
                const ::saml2::metadata::ExtensionsType&,
                ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Extensions (const ::saml2::metadata::ExtensionsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Extensions (::xercesc::XMLFormatTarget&,
                const ::saml2::metadata::ExtensionsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    Extensions (::xercesc::XMLFormatTarget&,
                const ::saml2::metadata::ExtensionsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);

    void
    Extensions (::xercesc::XMLFormatTarget&,
                const ::saml2::metadata::ExtensionsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Extensions (::std::ostream&,
                const ::saml2::metadata::ExtensionsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    Extensions (::std::ostream&,
                const ::saml2::metadata::ExtensionsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xsd::cxx::xml::error_handler< wchar_t >&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);

    void
    Extensions (::std::ostream&,
                const ::saml2::metadata::ExtensionsType&, 
                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                ::xercesc::DOMErrorHandler&,
                const ::std::basic_string< wchar_t >& = L"UTF-8",
                ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ExtensionsType&);

    void
    operator<< (::xercesc::DOMAttr&,
                const ExtensionsType&);

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                const ExtensionsType&);

    void
    operator<< (::xercesc::DOMElement&,
                const EndpointType&);

    void
    operator<< (::xercesc::DOMElement&,
                const IndexedEndpointType&);

    // Serialize to an existing DOM instance.
    //
    void
    EntitiesDescriptor (::xercesc::DOMDocument&,
                        const ::saml2::metadata::EntitiesDescriptorType&,
                        ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    EntitiesDescriptor (const ::saml2::metadata::EntitiesDescriptorType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    EntitiesDescriptor (::xercesc::XMLFormatTarget&,
                        const ::saml2::metadata::EntitiesDescriptorType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    void
    EntitiesDescriptor (::xercesc::XMLFormatTarget&,
                        const ::saml2::metadata::EntitiesDescriptorType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);

    void
    EntitiesDescriptor (::xercesc::XMLFormatTarget&,
                        const ::saml2::metadata::EntitiesDescriptorType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    EntitiesDescriptor (::std::ostream&,
                        const ::saml2::metadata::EntitiesDescriptorType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    void
    EntitiesDescriptor (::std::ostream&,
                        const ::saml2::metadata::EntitiesDescriptorType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);

    void
    EntitiesDescriptor (::std::ostream&,
                        const ::saml2::metadata::EntitiesDescriptorType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const EntitiesDescriptorType&);

    // Serialize to an existing DOM instance.
    //
    void
    EntityDescriptor (::xercesc::DOMDocument&,
                      const ::saml2::metadata::EntityDescriptorType&,
                      ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    EntityDescriptor (const ::saml2::metadata::EntityDescriptorType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    EntityDescriptor (::xercesc::XMLFormatTarget&,
                      const ::saml2::metadata::EntityDescriptorType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    void
    EntityDescriptor (::xercesc::XMLFormatTarget&,
                      const ::saml2::metadata::EntityDescriptorType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);

    void
    EntityDescriptor (::xercesc::XMLFormatTarget&,
                      const ::saml2::metadata::EntityDescriptorType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    EntityDescriptor (::std::ostream&,
                      const ::saml2::metadata::EntityDescriptorType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    void
    EntityDescriptor (::std::ostream&,
                      const ::saml2::metadata::EntityDescriptorType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);

    void
    EntityDescriptor (::std::ostream&,
                      const ::saml2::metadata::EntityDescriptorType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const EntityDescriptorType&);

    // Serialize to an existing DOM instance.
    //
    void
    Organization (::xercesc::DOMDocument&,
                  const ::saml2::metadata::OrganizationType&,
                  ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Organization (const ::saml2::metadata::OrganizationType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Organization (::xercesc::XMLFormatTarget&,
                  const ::saml2::metadata::OrganizationType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    Organization (::xercesc::XMLFormatTarget&,
                  const ::saml2::metadata::OrganizationType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);

    void
    Organization (::xercesc::XMLFormatTarget&,
                  const ::saml2::metadata::OrganizationType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Organization (::std::ostream&,
                  const ::saml2::metadata::OrganizationType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    Organization (::std::ostream&,
                  const ::saml2::metadata::OrganizationType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);

    void
    Organization (::std::ostream&,
                  const ::saml2::metadata::OrganizationType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const OrganizationType&);

    // Serialize to an existing DOM instance.
    //
    void
    OrganizationName (::xercesc::DOMDocument&,
                      const ::saml2::metadata::localizedNameType&,
                      ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    OrganizationName (const ::saml2::metadata::localizedNameType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    OrganizationName (::xercesc::XMLFormatTarget&,
                      const ::saml2::metadata::localizedNameType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    void
    OrganizationName (::xercesc::XMLFormatTarget&,
                      const ::saml2::metadata::localizedNameType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);

    void
    OrganizationName (::xercesc::XMLFormatTarget&,
                      const ::saml2::metadata::localizedNameType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    OrganizationName (::std::ostream&,
                      const ::saml2::metadata::localizedNameType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    void
    OrganizationName (::std::ostream&,
                      const ::saml2::metadata::localizedNameType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);

    void
    OrganizationName (::std::ostream&,
                      const ::saml2::metadata::localizedNameType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    OrganizationDisplayName (::xercesc::DOMDocument&,
                             const ::saml2::metadata::localizedNameType&,
                             ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    OrganizationDisplayName (const ::saml2::metadata::localizedNameType&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    OrganizationDisplayName (::xercesc::XMLFormatTarget&,
                             const ::saml2::metadata::localizedNameType&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             const ::std::basic_string< wchar_t >& = L"UTF-8",
                             ::xml_schema::flags = 0);


    void
    OrganizationDisplayName (::xercesc::XMLFormatTarget&,
                             const ::saml2::metadata::localizedNameType&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             ::xsd::cxx::xml::error_handler< wchar_t >&,
                             const ::std::basic_string< wchar_t >& = L"UTF-8",
                             ::xml_schema::flags = 0);

    void
    OrganizationDisplayName (::xercesc::XMLFormatTarget&,
                             const ::saml2::metadata::localizedNameType&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             ::xercesc::DOMErrorHandler&,
                             const ::std::basic_string< wchar_t >& = L"UTF-8",
                             ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    OrganizationDisplayName (::std::ostream&,
                             const ::saml2::metadata::localizedNameType&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             const ::std::basic_string< wchar_t >& = L"UTF-8",
                             ::xml_schema::flags = 0);


    void
    OrganizationDisplayName (::std::ostream&,
                             const ::saml2::metadata::localizedNameType&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             ::xsd::cxx::xml::error_handler< wchar_t >&,
                             const ::std::basic_string< wchar_t >& = L"UTF-8",
                             ::xml_schema::flags = 0);

    void
    OrganizationDisplayName (::std::ostream&,
                             const ::saml2::metadata::localizedNameType&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             ::xercesc::DOMErrorHandler&,
                             const ::std::basic_string< wchar_t >& = L"UTF-8",
                             ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    OrganizationURL (::xercesc::DOMDocument&,
                     const ::saml2::metadata::localizedURIType&,
                     ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    OrganizationURL (const ::saml2::metadata::localizedURIType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    OrganizationURL (::xercesc::XMLFormatTarget&,
                     const ::saml2::metadata::localizedURIType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    OrganizationURL (::xercesc::XMLFormatTarget&,
                     const ::saml2::metadata::localizedURIType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);

    void
    OrganizationURL (::xercesc::XMLFormatTarget&,
                     const ::saml2::metadata::localizedURIType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    OrganizationURL (::std::ostream&,
                     const ::saml2::metadata::localizedURIType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    OrganizationURL (::std::ostream&,
                     const ::saml2::metadata::localizedURIType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);

    void
    OrganizationURL (::std::ostream&,
                     const ::saml2::metadata::localizedURIType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    ContactPerson (::xercesc::DOMDocument&,
                   const ::saml2::metadata::ContactType&,
                   ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ContactPerson (const ::saml2::metadata::ContactType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    ContactPerson (::xercesc::XMLFormatTarget&,
                   const ::saml2::metadata::ContactType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    void
    ContactPerson (::xercesc::XMLFormatTarget&,
                   const ::saml2::metadata::ContactType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);

    void
    ContactPerson (::xercesc::XMLFormatTarget&,
                   const ::saml2::metadata::ContactType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xercesc::DOMErrorHandler&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    ContactPerson (::std::ostream&,
                   const ::saml2::metadata::ContactType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    void
    ContactPerson (::std::ostream&,
                   const ::saml2::metadata::ContactType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);

    void
    ContactPerson (::std::ostream&,
                   const ::saml2::metadata::ContactType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xercesc::DOMErrorHandler&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ContactType&);

    // Serialize to an existing DOM instance.
    //
    void
    Company (::xercesc::DOMDocument&,
             const ::xml_schema::string&,
             ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Company (const ::xml_schema::string&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    Company (::xercesc::XMLFormatTarget&,
             const ::xml_schema::string&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    Company (::xercesc::XMLFormatTarget&,
             const ::xml_schema::string&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);

    void
    Company (::xercesc::XMLFormatTarget&,
             const ::xml_schema::string&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    Company (::std::ostream&,
             const ::xml_schema::string&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    Company (::std::ostream&,
             const ::xml_schema::string&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);

    void
    Company (::std::ostream&,
             const ::xml_schema::string&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    GivenName (::xercesc::DOMDocument&,
               const ::xml_schema::string&,
               ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    GivenName (const ::xml_schema::string&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    GivenName (::xercesc::XMLFormatTarget&,
               const ::xml_schema::string&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    GivenName (::xercesc::XMLFormatTarget&,
               const ::xml_schema::string&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    GivenName (::xercesc::XMLFormatTarget&,
               const ::xml_schema::string&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    GivenName (::std::ostream&,
               const ::xml_schema::string&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    void
    GivenName (::std::ostream&,
               const ::xml_schema::string&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xsd::cxx::xml::error_handler< wchar_t >&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);

    void
    GivenName (::std::ostream&,
               const ::xml_schema::string&, 
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
               ::xercesc::DOMErrorHandler&,
               const ::std::basic_string< wchar_t >& = L"UTF-8",
               ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    SurName (::xercesc::DOMDocument&,
             const ::xml_schema::string&,
             ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SurName (const ::xml_schema::string&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    SurName (::xercesc::XMLFormatTarget&,
             const ::xml_schema::string&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    SurName (::xercesc::XMLFormatTarget&,
             const ::xml_schema::string&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);

    void
    SurName (::xercesc::XMLFormatTarget&,
             const ::xml_schema::string&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    SurName (::std::ostream&,
             const ::xml_schema::string&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    void
    SurName (::std::ostream&,
             const ::xml_schema::string&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xsd::cxx::xml::error_handler< wchar_t >&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);

    void
    SurName (::std::ostream&,
             const ::xml_schema::string&, 
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
             ::xercesc::DOMErrorHandler&,
             const ::std::basic_string< wchar_t >& = L"UTF-8",
             ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    EmailAddress (::xercesc::DOMDocument&,
                  const ::xml_schema::uri&,
                  ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    EmailAddress (const ::xml_schema::uri&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    EmailAddress (::xercesc::XMLFormatTarget&,
                  const ::xml_schema::uri&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    EmailAddress (::xercesc::XMLFormatTarget&,
                  const ::xml_schema::uri&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);

    void
    EmailAddress (::xercesc::XMLFormatTarget&,
                  const ::xml_schema::uri&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    EmailAddress (::std::ostream&,
                  const ::xml_schema::uri&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    EmailAddress (::std::ostream&,
                  const ::xml_schema::uri&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);

    void
    EmailAddress (::std::ostream&,
                  const ::xml_schema::uri&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    TelephoneNumber (::xercesc::DOMDocument&,
                     const ::xml_schema::string&,
                     ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    TelephoneNumber (const ::xml_schema::string&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    TelephoneNumber (::xercesc::XMLFormatTarget&,
                     const ::xml_schema::string&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    TelephoneNumber (::xercesc::XMLFormatTarget&,
                     const ::xml_schema::string&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);

    void
    TelephoneNumber (::xercesc::XMLFormatTarget&,
                     const ::xml_schema::string&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    TelephoneNumber (::std::ostream&,
                     const ::xml_schema::string&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    TelephoneNumber (::std::ostream&,
                     const ::xml_schema::string&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);

    void
    TelephoneNumber (::std::ostream&,
                     const ::xml_schema::string&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                ContactTypeType);

    void
    operator<< (::xercesc::DOMAttr&,
                ContactTypeType);

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                ContactTypeType);

    // Serialize to an existing DOM instance.
    //
    void
    AdditionalMetadataLocation (::xercesc::DOMDocument&,
                                const ::saml2::metadata::AdditionalMetadataLocationType&,
                                ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AdditionalMetadataLocation (const ::saml2::metadata::AdditionalMetadataLocationType&, 
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AdditionalMetadataLocation (::xercesc::XMLFormatTarget&,
                                const ::saml2::metadata::AdditionalMetadataLocationType&, 
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                const ::std::basic_string< wchar_t >& = L"UTF-8",
                                ::xml_schema::flags = 0);


    void
    AdditionalMetadataLocation (::xercesc::XMLFormatTarget&,
                                const ::saml2::metadata::AdditionalMetadataLocationType&, 
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                ::xsd::cxx::xml::error_handler< wchar_t >&,
                                const ::std::basic_string< wchar_t >& = L"UTF-8",
                                ::xml_schema::flags = 0);

    void
    AdditionalMetadataLocation (::xercesc::XMLFormatTarget&,
                                const ::saml2::metadata::AdditionalMetadataLocationType&, 
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                ::xercesc::DOMErrorHandler&,
                                const ::std::basic_string< wchar_t >& = L"UTF-8",
                                ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AdditionalMetadataLocation (::std::ostream&,
                                const ::saml2::metadata::AdditionalMetadataLocationType&, 
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                const ::std::basic_string< wchar_t >& = L"UTF-8",
                                ::xml_schema::flags = 0);


    void
    AdditionalMetadataLocation (::std::ostream&,
                                const ::saml2::metadata::AdditionalMetadataLocationType&, 
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                ::xsd::cxx::xml::error_handler< wchar_t >&,
                                const ::std::basic_string< wchar_t >& = L"UTF-8",
                                ::xml_schema::flags = 0);

    void
    AdditionalMetadataLocation (::std::ostream&,
                                const ::saml2::metadata::AdditionalMetadataLocationType&, 
                                const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                ::xercesc::DOMErrorHandler&,
                                const ::std::basic_string< wchar_t >& = L"UTF-8",
                                ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const AdditionalMetadataLocationType&);

    // Serialize to an existing DOM instance.
    //
    void
    RoleDescriptor (::xercesc::DOMDocument&,
                    const ::saml2::metadata::RoleDescriptorType&,
                    ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    RoleDescriptor (const ::saml2::metadata::RoleDescriptorType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    RoleDescriptor (::xercesc::XMLFormatTarget&,
                    const ::saml2::metadata::RoleDescriptorType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    RoleDescriptor (::xercesc::XMLFormatTarget&,
                    const ::saml2::metadata::RoleDescriptorType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);

    void
    RoleDescriptor (::xercesc::XMLFormatTarget&,
                    const ::saml2::metadata::RoleDescriptorType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    RoleDescriptor (::std::ostream&,
                    const ::saml2::metadata::RoleDescriptorType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    RoleDescriptor (::std::ostream&,
                    const ::saml2::metadata::RoleDescriptorType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);

    void
    RoleDescriptor (::std::ostream&,
                    const ::saml2::metadata::RoleDescriptorType&, 
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                    ::xercesc::DOMErrorHandler&,
                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                    ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const RoleDescriptorType&);

    void
    operator<< (::xercesc::DOMElement&,
                const anyURIListType&);

    void
    operator<< (::xercesc::DOMAttr&,
                const anyURIListType&);

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                const anyURIListType&);

    // Serialize to an existing DOM instance.
    //
    void
    KeyDescriptor (::xercesc::DOMDocument&,
                   const ::saml2::metadata::KeyDescriptorType&,
                   ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    KeyDescriptor (const ::saml2::metadata::KeyDescriptorType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    KeyDescriptor (::xercesc::XMLFormatTarget&,
                   const ::saml2::metadata::KeyDescriptorType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    void
    KeyDescriptor (::xercesc::XMLFormatTarget&,
                   const ::saml2::metadata::KeyDescriptorType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);

    void
    KeyDescriptor (::xercesc::XMLFormatTarget&,
                   const ::saml2::metadata::KeyDescriptorType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xercesc::DOMErrorHandler&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    KeyDescriptor (::std::ostream&,
                   const ::saml2::metadata::KeyDescriptorType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    void
    KeyDescriptor (::std::ostream&,
                   const ::saml2::metadata::KeyDescriptorType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);

    void
    KeyDescriptor (::std::ostream&,
                   const ::saml2::metadata::KeyDescriptorType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xercesc::DOMErrorHandler&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const KeyDescriptorType&);

    void
    operator<< (::xercesc::DOMElement&,
                KeyTypes);

    void
    operator<< (::xercesc::DOMAttr&,
                KeyTypes);

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >&,
                KeyTypes);

    // Serialize to an existing DOM instance.
    //
    void
    EncryptionMethod (::xercesc::DOMDocument&,
                      const ::w3::xmlenc::EncryptionMethodType&,
                      ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    EncryptionMethod (const ::w3::xmlenc::EncryptionMethodType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    EncryptionMethod (::xercesc::XMLFormatTarget&,
                      const ::w3::xmlenc::EncryptionMethodType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    void
    EncryptionMethod (::xercesc::XMLFormatTarget&,
                      const ::w3::xmlenc::EncryptionMethodType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);

    void
    EncryptionMethod (::xercesc::XMLFormatTarget&,
                      const ::w3::xmlenc::EncryptionMethodType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    EncryptionMethod (::std::ostream&,
                      const ::w3::xmlenc::EncryptionMethodType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    void
    EncryptionMethod (::std::ostream&,
                      const ::w3::xmlenc::EncryptionMethodType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);

    void
    EncryptionMethod (::std::ostream&,
                      const ::w3::xmlenc::EncryptionMethodType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const SSODescriptorType&);

    // Serialize to an existing DOM instance.
    //
    void
    ArtifactResolutionService (::xercesc::DOMDocument&,
                               const ::saml2::metadata::IndexedEndpointType&,
                               ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ArtifactResolutionService (const ::saml2::metadata::IndexedEndpointType&, 
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                               ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    ArtifactResolutionService (::xercesc::XMLFormatTarget&,
                               const ::saml2::metadata::IndexedEndpointType&, 
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                               const ::std::basic_string< wchar_t >& = L"UTF-8",
                               ::xml_schema::flags = 0);


    void
    ArtifactResolutionService (::xercesc::XMLFormatTarget&,
                               const ::saml2::metadata::IndexedEndpointType&, 
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                               ::xsd::cxx::xml::error_handler< wchar_t >&,
                               const ::std::basic_string< wchar_t >& = L"UTF-8",
                               ::xml_schema::flags = 0);

    void
    ArtifactResolutionService (::xercesc::XMLFormatTarget&,
                               const ::saml2::metadata::IndexedEndpointType&, 
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                               ::xercesc::DOMErrorHandler&,
                               const ::std::basic_string< wchar_t >& = L"UTF-8",
                               ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    ArtifactResolutionService (::std::ostream&,
                               const ::saml2::metadata::IndexedEndpointType&, 
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                               const ::std::basic_string< wchar_t >& = L"UTF-8",
                               ::xml_schema::flags = 0);


    void
    ArtifactResolutionService (::std::ostream&,
                               const ::saml2::metadata::IndexedEndpointType&, 
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                               ::xsd::cxx::xml::error_handler< wchar_t >&,
                               const ::std::basic_string< wchar_t >& = L"UTF-8",
                               ::xml_schema::flags = 0);

    void
    ArtifactResolutionService (::std::ostream&,
                               const ::saml2::metadata::IndexedEndpointType&, 
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                               ::xercesc::DOMErrorHandler&,
                               const ::std::basic_string< wchar_t >& = L"UTF-8",
                               ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    SingleLogoutService (::xercesc::DOMDocument&,
                         const ::saml2::metadata::EndpointType&,
                         ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SingleLogoutService (const ::saml2::metadata::EndpointType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    SingleLogoutService (::xercesc::XMLFormatTarget&,
                         const ::saml2::metadata::EndpointType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    void
    SingleLogoutService (::xercesc::XMLFormatTarget&,
                         const ::saml2::metadata::EndpointType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);

    void
    SingleLogoutService (::xercesc::XMLFormatTarget&,
                         const ::saml2::metadata::EndpointType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    SingleLogoutService (::std::ostream&,
                         const ::saml2::metadata::EndpointType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    void
    SingleLogoutService (::std::ostream&,
                         const ::saml2::metadata::EndpointType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);

    void
    SingleLogoutService (::std::ostream&,
                         const ::saml2::metadata::EndpointType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    ManageNameIDService (::xercesc::DOMDocument&,
                         const ::saml2::metadata::EndpointType&,
                         ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ManageNameIDService (const ::saml2::metadata::EndpointType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    ManageNameIDService (::xercesc::XMLFormatTarget&,
                         const ::saml2::metadata::EndpointType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    void
    ManageNameIDService (::xercesc::XMLFormatTarget&,
                         const ::saml2::metadata::EndpointType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);

    void
    ManageNameIDService (::xercesc::XMLFormatTarget&,
                         const ::saml2::metadata::EndpointType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    ManageNameIDService (::std::ostream&,
                         const ::saml2::metadata::EndpointType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    void
    ManageNameIDService (::std::ostream&,
                         const ::saml2::metadata::EndpointType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);

    void
    ManageNameIDService (::std::ostream&,
                         const ::saml2::metadata::EndpointType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    NameIDFormat (::xercesc::DOMDocument&,
                  const ::xml_schema::uri&,
                  ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    NameIDFormat (const ::xml_schema::uri&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    NameIDFormat (::xercesc::XMLFormatTarget&,
                  const ::xml_schema::uri&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    NameIDFormat (::xercesc::XMLFormatTarget&,
                  const ::xml_schema::uri&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);

    void
    NameIDFormat (::xercesc::XMLFormatTarget&,
                  const ::xml_schema::uri&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    NameIDFormat (::std::ostream&,
                  const ::xml_schema::uri&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    NameIDFormat (::std::ostream&,
                  const ::xml_schema::uri&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);

    void
    NameIDFormat (::std::ostream&,
                  const ::xml_schema::uri&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    IDPSSODescriptor (::xercesc::DOMDocument&,
                      const ::saml2::metadata::IDPSSODescriptorType&,
                      ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    IDPSSODescriptor (const ::saml2::metadata::IDPSSODescriptorType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    IDPSSODescriptor (::xercesc::XMLFormatTarget&,
                      const ::saml2::metadata::IDPSSODescriptorType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    void
    IDPSSODescriptor (::xercesc::XMLFormatTarget&,
                      const ::saml2::metadata::IDPSSODescriptorType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);

    void
    IDPSSODescriptor (::xercesc::XMLFormatTarget&,
                      const ::saml2::metadata::IDPSSODescriptorType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    IDPSSODescriptor (::std::ostream&,
                      const ::saml2::metadata::IDPSSODescriptorType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    void
    IDPSSODescriptor (::std::ostream&,
                      const ::saml2::metadata::IDPSSODescriptorType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);

    void
    IDPSSODescriptor (::std::ostream&,
                      const ::saml2::metadata::IDPSSODescriptorType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const IDPSSODescriptorType&);

    // Serialize to an existing DOM instance.
    //
    void
    SingleSignOnService (::xercesc::DOMDocument&,
                         const ::saml2::metadata::EndpointType&,
                         ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SingleSignOnService (const ::saml2::metadata::EndpointType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    SingleSignOnService (::xercesc::XMLFormatTarget&,
                         const ::saml2::metadata::EndpointType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    void
    SingleSignOnService (::xercesc::XMLFormatTarget&,
                         const ::saml2::metadata::EndpointType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);

    void
    SingleSignOnService (::xercesc::XMLFormatTarget&,
                         const ::saml2::metadata::EndpointType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    SingleSignOnService (::std::ostream&,
                         const ::saml2::metadata::EndpointType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    void
    SingleSignOnService (::std::ostream&,
                         const ::saml2::metadata::EndpointType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xsd::cxx::xml::error_handler< wchar_t >&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);

    void
    SingleSignOnService (::std::ostream&,
                         const ::saml2::metadata::EndpointType&, 
                         const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                         ::xercesc::DOMErrorHandler&,
                         const ::std::basic_string< wchar_t >& = L"UTF-8",
                         ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    NameIDMappingService (::xercesc::DOMDocument&,
                          const ::saml2::metadata::EndpointType&,
                          ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    NameIDMappingService (const ::saml2::metadata::EndpointType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    NameIDMappingService (::xercesc::XMLFormatTarget&,
                          const ::saml2::metadata::EndpointType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);


    void
    NameIDMappingService (::xercesc::XMLFormatTarget&,
                          const ::saml2::metadata::EndpointType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);

    void
    NameIDMappingService (::xercesc::XMLFormatTarget&,
                          const ::saml2::metadata::EndpointType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xercesc::DOMErrorHandler&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    NameIDMappingService (::std::ostream&,
                          const ::saml2::metadata::EndpointType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);


    void
    NameIDMappingService (::std::ostream&,
                          const ::saml2::metadata::EndpointType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xsd::cxx::xml::error_handler< wchar_t >&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);

    void
    NameIDMappingService (::std::ostream&,
                          const ::saml2::metadata::EndpointType&, 
                          const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                          ::xercesc::DOMErrorHandler&,
                          const ::std::basic_string< wchar_t >& = L"UTF-8",
                          ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    AssertionIDRequestService (::xercesc::DOMDocument&,
                               const ::saml2::metadata::EndpointType&,
                               ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AssertionIDRequestService (const ::saml2::metadata::EndpointType&, 
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                               ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AssertionIDRequestService (::xercesc::XMLFormatTarget&,
                               const ::saml2::metadata::EndpointType&, 
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                               const ::std::basic_string< wchar_t >& = L"UTF-8",
                               ::xml_schema::flags = 0);


    void
    AssertionIDRequestService (::xercesc::XMLFormatTarget&,
                               const ::saml2::metadata::EndpointType&, 
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                               ::xsd::cxx::xml::error_handler< wchar_t >&,
                               const ::std::basic_string< wchar_t >& = L"UTF-8",
                               ::xml_schema::flags = 0);

    void
    AssertionIDRequestService (::xercesc::XMLFormatTarget&,
                               const ::saml2::metadata::EndpointType&, 
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                               ::xercesc::DOMErrorHandler&,
                               const ::std::basic_string< wchar_t >& = L"UTF-8",
                               ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AssertionIDRequestService (::std::ostream&,
                               const ::saml2::metadata::EndpointType&, 
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                               const ::std::basic_string< wchar_t >& = L"UTF-8",
                               ::xml_schema::flags = 0);


    void
    AssertionIDRequestService (::std::ostream&,
                               const ::saml2::metadata::EndpointType&, 
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                               ::xsd::cxx::xml::error_handler< wchar_t >&,
                               const ::std::basic_string< wchar_t >& = L"UTF-8",
                               ::xml_schema::flags = 0);

    void
    AssertionIDRequestService (::std::ostream&,
                               const ::saml2::metadata::EndpointType&, 
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                               ::xercesc::DOMErrorHandler&,
                               const ::std::basic_string< wchar_t >& = L"UTF-8",
                               ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    AttributeProfile (::xercesc::DOMDocument&,
                      const ::xml_schema::uri&,
                      ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeProfile (const ::xml_schema::uri&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AttributeProfile (::xercesc::XMLFormatTarget&,
                      const ::xml_schema::uri&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    void
    AttributeProfile (::xercesc::XMLFormatTarget&,
                      const ::xml_schema::uri&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);

    void
    AttributeProfile (::xercesc::XMLFormatTarget&,
                      const ::xml_schema::uri&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AttributeProfile (::std::ostream&,
                      const ::xml_schema::uri&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    void
    AttributeProfile (::std::ostream&,
                      const ::xml_schema::uri&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);

    void
    AttributeProfile (::std::ostream&,
                      const ::xml_schema::uri&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    SPSSODescriptor (::xercesc::DOMDocument&,
                     const ::saml2::metadata::SPSSODescriptorType&,
                     ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SPSSODescriptor (const ::saml2::metadata::SPSSODescriptorType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    SPSSODescriptor (::xercesc::XMLFormatTarget&,
                     const ::saml2::metadata::SPSSODescriptorType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    SPSSODescriptor (::xercesc::XMLFormatTarget&,
                     const ::saml2::metadata::SPSSODescriptorType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);

    void
    SPSSODescriptor (::xercesc::XMLFormatTarget&,
                     const ::saml2::metadata::SPSSODescriptorType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    SPSSODescriptor (::std::ostream&,
                     const ::saml2::metadata::SPSSODescriptorType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    SPSSODescriptor (::std::ostream&,
                     const ::saml2::metadata::SPSSODescriptorType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);

    void
    SPSSODescriptor (::std::ostream&,
                     const ::saml2::metadata::SPSSODescriptorType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const SPSSODescriptorType&);

    // Serialize to an existing DOM instance.
    //
    void
    AssertionConsumerService (::xercesc::DOMDocument&,
                              const ::saml2::metadata::IndexedEndpointType&,
                              ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AssertionConsumerService (const ::saml2::metadata::IndexedEndpointType&, 
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                              ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AssertionConsumerService (::xercesc::XMLFormatTarget&,
                              const ::saml2::metadata::IndexedEndpointType&, 
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                              const ::std::basic_string< wchar_t >& = L"UTF-8",
                              ::xml_schema::flags = 0);


    void
    AssertionConsumerService (::xercesc::XMLFormatTarget&,
                              const ::saml2::metadata::IndexedEndpointType&, 
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                              ::xsd::cxx::xml::error_handler< wchar_t >&,
                              const ::std::basic_string< wchar_t >& = L"UTF-8",
                              ::xml_schema::flags = 0);

    void
    AssertionConsumerService (::xercesc::XMLFormatTarget&,
                              const ::saml2::metadata::IndexedEndpointType&, 
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                              ::xercesc::DOMErrorHandler&,
                              const ::std::basic_string< wchar_t >& = L"UTF-8",
                              ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AssertionConsumerService (::std::ostream&,
                              const ::saml2::metadata::IndexedEndpointType&, 
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                              const ::std::basic_string< wchar_t >& = L"UTF-8",
                              ::xml_schema::flags = 0);


    void
    AssertionConsumerService (::std::ostream&,
                              const ::saml2::metadata::IndexedEndpointType&, 
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                              ::xsd::cxx::xml::error_handler< wchar_t >&,
                              const ::std::basic_string< wchar_t >& = L"UTF-8",
                              ::xml_schema::flags = 0);

    void
    AssertionConsumerService (::std::ostream&,
                              const ::saml2::metadata::IndexedEndpointType&, 
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                              ::xercesc::DOMErrorHandler&,
                              const ::std::basic_string< wchar_t >& = L"UTF-8",
                              ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    AttributeConsumingService (::xercesc::DOMDocument&,
                               const ::saml2::metadata::AttributeConsumingServiceType&,
                               ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeConsumingService (const ::saml2::metadata::AttributeConsumingServiceType&, 
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                               ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AttributeConsumingService (::xercesc::XMLFormatTarget&,
                               const ::saml2::metadata::AttributeConsumingServiceType&, 
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                               const ::std::basic_string< wchar_t >& = L"UTF-8",
                               ::xml_schema::flags = 0);


    void
    AttributeConsumingService (::xercesc::XMLFormatTarget&,
                               const ::saml2::metadata::AttributeConsumingServiceType&, 
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                               ::xsd::cxx::xml::error_handler< wchar_t >&,
                               const ::std::basic_string< wchar_t >& = L"UTF-8",
                               ::xml_schema::flags = 0);

    void
    AttributeConsumingService (::xercesc::XMLFormatTarget&,
                               const ::saml2::metadata::AttributeConsumingServiceType&, 
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                               ::xercesc::DOMErrorHandler&,
                               const ::std::basic_string< wchar_t >& = L"UTF-8",
                               ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AttributeConsumingService (::std::ostream&,
                               const ::saml2::metadata::AttributeConsumingServiceType&, 
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                               const ::std::basic_string< wchar_t >& = L"UTF-8",
                               ::xml_schema::flags = 0);


    void
    AttributeConsumingService (::std::ostream&,
                               const ::saml2::metadata::AttributeConsumingServiceType&, 
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                               ::xsd::cxx::xml::error_handler< wchar_t >&,
                               const ::std::basic_string< wchar_t >& = L"UTF-8",
                               ::xml_schema::flags = 0);

    void
    AttributeConsumingService (::std::ostream&,
                               const ::saml2::metadata::AttributeConsumingServiceType&, 
                               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                               ::xercesc::DOMErrorHandler&,
                               const ::std::basic_string< wchar_t >& = L"UTF-8",
                               ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const AttributeConsumingServiceType&);

    // Serialize to an existing DOM instance.
    //
    void
    ServiceName (::xercesc::DOMDocument&,
                 const ::saml2::metadata::localizedNameType&,
                 ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ServiceName (const ::saml2::metadata::localizedNameType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    ServiceName (::xercesc::XMLFormatTarget&,
                 const ::saml2::metadata::localizedNameType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    ServiceName (::xercesc::XMLFormatTarget&,
                 const ::saml2::metadata::localizedNameType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);

    void
    ServiceName (::xercesc::XMLFormatTarget&,
                 const ::saml2::metadata::localizedNameType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    ServiceName (::std::ostream&,
                 const ::saml2::metadata::localizedNameType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    void
    ServiceName (::std::ostream&,
                 const ::saml2::metadata::localizedNameType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xsd::cxx::xml::error_handler< wchar_t >&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);

    void
    ServiceName (::std::ostream&,
                 const ::saml2::metadata::localizedNameType&, 
                 const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                 ::xercesc::DOMErrorHandler&,
                 const ::std::basic_string< wchar_t >& = L"UTF-8",
                 ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    ServiceDescription (::xercesc::DOMDocument&,
                        const ::saml2::metadata::localizedNameType&,
                        ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ServiceDescription (const ::saml2::metadata::localizedNameType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    ServiceDescription (::xercesc::XMLFormatTarget&,
                        const ::saml2::metadata::localizedNameType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    void
    ServiceDescription (::xercesc::XMLFormatTarget&,
                        const ::saml2::metadata::localizedNameType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);

    void
    ServiceDescription (::xercesc::XMLFormatTarget&,
                        const ::saml2::metadata::localizedNameType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    ServiceDescription (::std::ostream&,
                        const ::saml2::metadata::localizedNameType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    void
    ServiceDescription (::std::ostream&,
                        const ::saml2::metadata::localizedNameType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);

    void
    ServiceDescription (::std::ostream&,
                        const ::saml2::metadata::localizedNameType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    RequestedAttribute (::xercesc::DOMDocument&,
                        const ::saml2::metadata::RequestedAttributeType&,
                        ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    RequestedAttribute (const ::saml2::metadata::RequestedAttributeType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    RequestedAttribute (::xercesc::XMLFormatTarget&,
                        const ::saml2::metadata::RequestedAttributeType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    void
    RequestedAttribute (::xercesc::XMLFormatTarget&,
                        const ::saml2::metadata::RequestedAttributeType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);

    void
    RequestedAttribute (::xercesc::XMLFormatTarget&,
                        const ::saml2::metadata::RequestedAttributeType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    RequestedAttribute (::std::ostream&,
                        const ::saml2::metadata::RequestedAttributeType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    void
    RequestedAttribute (::std::ostream&,
                        const ::saml2::metadata::RequestedAttributeType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xsd::cxx::xml::error_handler< wchar_t >&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);

    void
    RequestedAttribute (::std::ostream&,
                        const ::saml2::metadata::RequestedAttributeType&, 
                        const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                        ::xercesc::DOMErrorHandler&,
                        const ::std::basic_string< wchar_t >& = L"UTF-8",
                        ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const RequestedAttributeType&);

    // Serialize to an existing DOM instance.
    //
    void
    AuthnAuthorityDescriptor (::xercesc::DOMDocument&,
                              const ::saml2::metadata::AuthnAuthorityDescriptorType&,
                              ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthnAuthorityDescriptor (const ::saml2::metadata::AuthnAuthorityDescriptorType&, 
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                              ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AuthnAuthorityDescriptor (::xercesc::XMLFormatTarget&,
                              const ::saml2::metadata::AuthnAuthorityDescriptorType&, 
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                              const ::std::basic_string< wchar_t >& = L"UTF-8",
                              ::xml_schema::flags = 0);


    void
    AuthnAuthorityDescriptor (::xercesc::XMLFormatTarget&,
                              const ::saml2::metadata::AuthnAuthorityDescriptorType&, 
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                              ::xsd::cxx::xml::error_handler< wchar_t >&,
                              const ::std::basic_string< wchar_t >& = L"UTF-8",
                              ::xml_schema::flags = 0);

    void
    AuthnAuthorityDescriptor (::xercesc::XMLFormatTarget&,
                              const ::saml2::metadata::AuthnAuthorityDescriptorType&, 
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                              ::xercesc::DOMErrorHandler&,
                              const ::std::basic_string< wchar_t >& = L"UTF-8",
                              ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AuthnAuthorityDescriptor (::std::ostream&,
                              const ::saml2::metadata::AuthnAuthorityDescriptorType&, 
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                              const ::std::basic_string< wchar_t >& = L"UTF-8",
                              ::xml_schema::flags = 0);


    void
    AuthnAuthorityDescriptor (::std::ostream&,
                              const ::saml2::metadata::AuthnAuthorityDescriptorType&, 
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                              ::xsd::cxx::xml::error_handler< wchar_t >&,
                              const ::std::basic_string< wchar_t >& = L"UTF-8",
                              ::xml_schema::flags = 0);

    void
    AuthnAuthorityDescriptor (::std::ostream&,
                              const ::saml2::metadata::AuthnAuthorityDescriptorType&, 
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                              ::xercesc::DOMErrorHandler&,
                              const ::std::basic_string< wchar_t >& = L"UTF-8",
                              ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const AuthnAuthorityDescriptorType&);

    // Serialize to an existing DOM instance.
    //
    void
    AuthnQueryService (::xercesc::DOMDocument&,
                       const ::saml2::metadata::EndpointType&,
                       ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthnQueryService (const ::saml2::metadata::EndpointType&, 
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                       ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AuthnQueryService (::xercesc::XMLFormatTarget&,
                       const ::saml2::metadata::EndpointType&, 
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                       const ::std::basic_string< wchar_t >& = L"UTF-8",
                       ::xml_schema::flags = 0);


    void
    AuthnQueryService (::xercesc::XMLFormatTarget&,
                       const ::saml2::metadata::EndpointType&, 
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                       ::xsd::cxx::xml::error_handler< wchar_t >&,
                       const ::std::basic_string< wchar_t >& = L"UTF-8",
                       ::xml_schema::flags = 0);

    void
    AuthnQueryService (::xercesc::XMLFormatTarget&,
                       const ::saml2::metadata::EndpointType&, 
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                       ::xercesc::DOMErrorHandler&,
                       const ::std::basic_string< wchar_t >& = L"UTF-8",
                       ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AuthnQueryService (::std::ostream&,
                       const ::saml2::metadata::EndpointType&, 
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                       const ::std::basic_string< wchar_t >& = L"UTF-8",
                       ::xml_schema::flags = 0);


    void
    AuthnQueryService (::std::ostream&,
                       const ::saml2::metadata::EndpointType&, 
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                       ::xsd::cxx::xml::error_handler< wchar_t >&,
                       const ::std::basic_string< wchar_t >& = L"UTF-8",
                       ::xml_schema::flags = 0);

    void
    AuthnQueryService (::std::ostream&,
                       const ::saml2::metadata::EndpointType&, 
                       const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                       ::xercesc::DOMErrorHandler&,
                       const ::std::basic_string< wchar_t >& = L"UTF-8",
                       ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    PDPDescriptor (::xercesc::DOMDocument&,
                   const ::saml2::metadata::PDPDescriptorType&,
                   ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    PDPDescriptor (const ::saml2::metadata::PDPDescriptorType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    PDPDescriptor (::xercesc::XMLFormatTarget&,
                   const ::saml2::metadata::PDPDescriptorType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    void
    PDPDescriptor (::xercesc::XMLFormatTarget&,
                   const ::saml2::metadata::PDPDescriptorType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);

    void
    PDPDescriptor (::xercesc::XMLFormatTarget&,
                   const ::saml2::metadata::PDPDescriptorType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xercesc::DOMErrorHandler&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    PDPDescriptor (::std::ostream&,
                   const ::saml2::metadata::PDPDescriptorType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    void
    PDPDescriptor (::std::ostream&,
                   const ::saml2::metadata::PDPDescriptorType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);

    void
    PDPDescriptor (::std::ostream&,
                   const ::saml2::metadata::PDPDescriptorType&, 
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                   ::xercesc::DOMErrorHandler&,
                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                   ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const PDPDescriptorType&);

    // Serialize to an existing DOM instance.
    //
    void
    AuthzService (::xercesc::DOMDocument&,
                  const ::saml2::metadata::EndpointType&,
                  ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthzService (const ::saml2::metadata::EndpointType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AuthzService (::xercesc::XMLFormatTarget&,
                  const ::saml2::metadata::EndpointType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    AuthzService (::xercesc::XMLFormatTarget&,
                  const ::saml2::metadata::EndpointType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);

    void
    AuthzService (::xercesc::XMLFormatTarget&,
                  const ::saml2::metadata::EndpointType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AuthzService (::std::ostream&,
                  const ::saml2::metadata::EndpointType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    void
    AuthzService (::std::ostream&,
                  const ::saml2::metadata::EndpointType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);

    void
    AuthzService (::std::ostream&,
                  const ::saml2::metadata::EndpointType&, 
                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                  ::xercesc::DOMErrorHandler&,
                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                  ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    AttributeAuthorityDescriptor (::xercesc::DOMDocument&,
                                  const ::saml2::metadata::AttributeAuthorityDescriptorType&,
                                  ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeAuthorityDescriptor (const ::saml2::metadata::AttributeAuthorityDescriptorType&, 
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                  ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AttributeAuthorityDescriptor (::xercesc::XMLFormatTarget&,
                                  const ::saml2::metadata::AttributeAuthorityDescriptorType&, 
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                                  ::xml_schema::flags = 0);


    void
    AttributeAuthorityDescriptor (::xercesc::XMLFormatTarget&,
                                  const ::saml2::metadata::AttributeAuthorityDescriptorType&, 
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                                  ::xml_schema::flags = 0);

    void
    AttributeAuthorityDescriptor (::xercesc::XMLFormatTarget&,
                                  const ::saml2::metadata::AttributeAuthorityDescriptorType&, 
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                  ::xercesc::DOMErrorHandler&,
                                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                                  ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AttributeAuthorityDescriptor (::std::ostream&,
                                  const ::saml2::metadata::AttributeAuthorityDescriptorType&, 
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                                  ::xml_schema::flags = 0);


    void
    AttributeAuthorityDescriptor (::std::ostream&,
                                  const ::saml2::metadata::AttributeAuthorityDescriptorType&, 
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                                  ::xml_schema::flags = 0);

    void
    AttributeAuthorityDescriptor (::std::ostream&,
                                  const ::saml2::metadata::AttributeAuthorityDescriptorType&, 
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                  ::xercesc::DOMErrorHandler&,
                                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                                  ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const AttributeAuthorityDescriptorType&);

    // Serialize to an existing DOM instance.
    //
    void
    AttributeService (::xercesc::DOMDocument&,
                      const ::saml2::metadata::EndpointType&,
                      ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeService (const ::saml2::metadata::EndpointType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AttributeService (::xercesc::XMLFormatTarget&,
                      const ::saml2::metadata::EndpointType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    void
    AttributeService (::xercesc::XMLFormatTarget&,
                      const ::saml2::metadata::EndpointType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);

    void
    AttributeService (::xercesc::XMLFormatTarget&,
                      const ::saml2::metadata::EndpointType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AttributeService (::std::ostream&,
                      const ::saml2::metadata::EndpointType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    void
    AttributeService (::std::ostream&,
                      const ::saml2::metadata::EndpointType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xsd::cxx::xml::error_handler< wchar_t >&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);

    void
    AttributeService (::std::ostream&,
                      const ::saml2::metadata::EndpointType&, 
                      const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                      ::xercesc::DOMErrorHandler&,
                      const ::std::basic_string< wchar_t >& = L"UTF-8",
                      ::xml_schema::flags = 0);


    // Serialize to an existing DOM instance.
    //
    void
    AffiliationDescriptor (::xercesc::DOMDocument&,
                           const ::saml2::metadata::AffiliationDescriptorType&,
                           ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AffiliationDescriptor (const ::saml2::metadata::AffiliationDescriptorType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AffiliationDescriptor (::xercesc::XMLFormatTarget&,
                           const ::saml2::metadata::AffiliationDescriptorType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           const ::std::basic_string< wchar_t >& = L"UTF-8",
                           ::xml_schema::flags = 0);


    void
    AffiliationDescriptor (::xercesc::XMLFormatTarget&,
                           const ::saml2::metadata::AffiliationDescriptorType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           ::xsd::cxx::xml::error_handler< wchar_t >&,
                           const ::std::basic_string< wchar_t >& = L"UTF-8",
                           ::xml_schema::flags = 0);

    void
    AffiliationDescriptor (::xercesc::XMLFormatTarget&,
                           const ::saml2::metadata::AffiliationDescriptorType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           ::xercesc::DOMErrorHandler&,
                           const ::std::basic_string< wchar_t >& = L"UTF-8",
                           ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AffiliationDescriptor (::std::ostream&,
                           const ::saml2::metadata::AffiliationDescriptorType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           const ::std::basic_string< wchar_t >& = L"UTF-8",
                           ::xml_schema::flags = 0);


    void
    AffiliationDescriptor (::std::ostream&,
                           const ::saml2::metadata::AffiliationDescriptorType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           ::xsd::cxx::xml::error_handler< wchar_t >&,
                           const ::std::basic_string< wchar_t >& = L"UTF-8",
                           ::xml_schema::flags = 0);

    void
    AffiliationDescriptor (::std::ostream&,
                           const ::saml2::metadata::AffiliationDescriptorType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           ::xercesc::DOMErrorHandler&,
                           const ::std::basic_string< wchar_t >& = L"UTF-8",
                           ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const AffiliationDescriptorType&);

    // Serialize to an existing DOM instance.
    //
    void
    AffiliateMember (::xercesc::DOMDocument&,
                     const ::saml2::metadata::entityIDType&,
                     ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AffiliateMember (const ::saml2::metadata::entityIDType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    AffiliateMember (::xercesc::XMLFormatTarget&,
                     const ::saml2::metadata::entityIDType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    AffiliateMember (::xercesc::XMLFormatTarget&,
                     const ::saml2::metadata::entityIDType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);

    void
    AffiliateMember (::xercesc::XMLFormatTarget&,
                     const ::saml2::metadata::entityIDType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    AffiliateMember (::std::ostream&,
                     const ::saml2::metadata::entityIDType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);


    void
    AffiliateMember (::std::ostream&,
                     const ::saml2::metadata::entityIDType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xsd::cxx::xml::error_handler< wchar_t >&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);

    void
    AffiliateMember (::std::ostream&,
                     const ::saml2::metadata::entityIDType&, 
                     const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                     ::xercesc::DOMErrorHandler&,
                     const ::std::basic_string< wchar_t >& = L"UTF-8",
                     ::xml_schema::flags = 0);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SAML_SCHEMA_METADATA_2_0_HXX
