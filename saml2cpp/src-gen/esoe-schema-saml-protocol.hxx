// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

#ifndef ESOE_SCHEMA_SAML_PROTOCOL_HXX
#define ESOE_SCHEMA_SAML_PROTOCOL_HXX

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 2030100L)
#error XSD runtime version mismatch
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include "xsd/xml-schema.hxx"

// Forward declarations.
//
namespace middleware
{
  namespace ESOEProtocolSchema
  {
    class ClearAuthzCacheRequestType;
    class ClearAuthzCacheResponseType;
    class ValidateInitializationRequestType;
    class ValidateInitializationResponseType;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include "saml-schema-assertion-2.0.hxx"

#include "saml-schema-protocol-2.0.hxx"

#include "lxacml-schema.hxx"

#include "lxacml-schema-context.hxx"

namespace middleware
{
  namespace ESOEProtocolSchema
  {
    class ClearAuthzCacheRequestType: public ::saml2::protocol::RequestAbstractType
    {
      public:

      struct _xsd_ClearAuthzCacheRequestType
      {
        typedef ::saml2::protocol::RequestAbstractType base_;
      };

      // Subject
      // 
      public:
      struct Subject
      {
        typedef ::saml2::assertion::SubjectType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Subject::container&
      Subject () const;

      Subject::container&
      Subject ();

      void
      Subject (const Subject::type&);

      void
      Subject (const Subject::container&);

      void
      Subject (::std::auto_ptr< Subject::type >);

      // Reason
      // 
      public:
      struct Reason
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Reason::type&
      Reason () const;

      Reason::type&
      Reason ();

      void
      Reason (const Reason::type&);

      void
      Reason (::std::auto_ptr< Reason::type >);

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_ClearAuthzCacheRequestType::base_::ID;
      using _xsd_ClearAuthzCacheRequestType::base_::Version;
      using _xsd_ClearAuthzCacheRequestType::base_::IssueInstant;
#endif

      // Constructors.
      //
      public:
      ClearAuthzCacheRequestType ();

      ClearAuthzCacheRequestType (const ID::type&,
                                  const Version::type&,
                                  const IssueInstant::type&,
                                  const Reason::type&);

      ClearAuthzCacheRequestType (const ::xercesc::DOMElement&,
                                  ::xml_schema::flags = 0,
                                  ::xml_schema::type* = 0);

      ClearAuthzCacheRequestType (const ClearAuthzCacheRequestType&,
                                  ::xml_schema::flags = 0,
                                  ::xml_schema::type* = 0);

      virtual ClearAuthzCacheRequestType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::optional< Subject::type > _xsd_Subject_;
      ::xsd::cxx::tree::one< Reason::type > _xsd_Reason_;
    };

    class ClearAuthzCacheResponseType: public ::saml2::protocol::StatusResponseType
    {
      public:

      struct _xsd_ClearAuthzCacheResponseType
      {
        typedef ::saml2::protocol::StatusResponseType base_;
      };

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_ClearAuthzCacheResponseType::base_::Status;
      using _xsd_ClearAuthzCacheResponseType::base_::ID;
      using _xsd_ClearAuthzCacheResponseType::base_::Version;
      using _xsd_ClearAuthzCacheResponseType::base_::IssueInstant;
#endif

      // Constructors.
      //
      public:
      ClearAuthzCacheResponseType ();

      ClearAuthzCacheResponseType (const Status::type&,
                                   const ID::type&,
                                   const Version::type&,
                                   const IssueInstant::type&);

      ClearAuthzCacheResponseType (const ::xercesc::DOMElement&,
                                   ::xml_schema::flags = 0,
                                   ::xml_schema::type* = 0);

      ClearAuthzCacheResponseType (const ClearAuthzCacheResponseType&,
                                   ::xml_schema::flags = 0,
                                   ::xml_schema::type* = 0);

      virtual ClearAuthzCacheResponseType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;
    };

    class ValidateInitializationRequestType: public ::saml2::protocol::RequestAbstractType
    {
      public:

      struct _xsd_ValidateInitializationRequestType
      {
        typedef ::saml2::protocol::RequestAbstractType base_;
      };

      // ipAddress
      // 
      public:
      struct ipAddress
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const ipAddress::container&
      ipAddress () const;

      ipAddress::container&
      ipAddress ();

      void
      ipAddress (const ipAddress::container&);

      // compileDate
      // 
      public:
      struct compileDate
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const compileDate::type&
      compileDate () const;

      compileDate::type&
      compileDate ();

      void
      compileDate (const compileDate::type&);

      void
      compileDate (::std::auto_ptr< compileDate::type >);

      // compileSystem
      // 
      public:
      struct compileSystem
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const compileSystem::type&
      compileSystem () const;

      compileSystem::type&
      compileSystem ();

      void
      compileSystem (const compileSystem::type&);

      void
      compileSystem (::std::auto_ptr< compileSystem::type >);

      // sw-version
      // 
      public:
      struct sw_version
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const sw_version::type&
      sw_version () const;

      sw_version::type&
      sw_version ();

      void
      sw_version (const sw_version::type&);

      void
      sw_version (::std::auto_ptr< sw_version::type >);

      // environment
      // 
      public:
      struct environment
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const environment::type&
      environment () const;

      environment::type&
      environment ();

      void
      environment (const environment::type&);

      void
      environment (::std::auto_ptr< environment::type >);

      // nodeId
      // 
      public:
      struct nodeId
      {
        typedef ::xml_schema::string type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const nodeId::type&
      nodeId () const;

      nodeId::type&
      nodeId ();

      void
      nodeId (const nodeId::type&);

      void
      nodeId (::std::auto_ptr< nodeId::type >);

      // authzCacheIndex
      // 
      public:
      struct authzCacheIndex
      {
        typedef ::xml_schema::unsigned_short type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const authzCacheIndex::type&
      authzCacheIndex () const;

      authzCacheIndex::type&
      authzCacheIndex ();

      void
      authzCacheIndex (const authzCacheIndex::type&);

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_ValidateInitializationRequestType::base_::ID;
      using _xsd_ValidateInitializationRequestType::base_::Version;
      using _xsd_ValidateInitializationRequestType::base_::IssueInstant;
#endif

      // Constructors.
      //
      public:
      ValidateInitializationRequestType ();

      ValidateInitializationRequestType (const ID::type&,
                                         const Version::type&,
                                         const IssueInstant::type&,
                                         const compileDate::type&,
                                         const compileSystem::type&,
                                         const sw_version::type&,
                                         const environment::type&,
                                         const nodeId::type&,
                                         const authzCacheIndex::type&);

      ValidateInitializationRequestType (const ::xercesc::DOMElement&,
                                         ::xml_schema::flags = 0,
                                         ::xml_schema::type* = 0);

      ValidateInitializationRequestType (const ValidateInitializationRequestType&,
                                         ::xml_schema::flags = 0,
                                         ::xml_schema::type* = 0);

      virtual ValidateInitializationRequestType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< ipAddress::type > _xsd_ipAddress_;
      ::xsd::cxx::tree::one< compileDate::type > _xsd_compileDate_;
      ::xsd::cxx::tree::one< compileSystem::type > _xsd_compileSystem_;
      ::xsd::cxx::tree::one< sw_version::type > _xsd_sw_version_;
      ::xsd::cxx::tree::one< environment::type > _xsd_environment_;
      ::xsd::cxx::tree::one< nodeId::type > _xsd_nodeId_;
      ::xsd::cxx::tree::one< authzCacheIndex::type > _xsd_authzCacheIndex_;
    };

    class ValidateInitializationResponseType: public ::saml2::protocol::StatusResponseType
    {
      public:

      struct _xsd_ValidateInitializationResponseType
      {
        typedef ::saml2::protocol::StatusResponseType base_;
      };

#if defined(__EDG_VERSION__) || (defined(__HP_aCC) && __HP_aCC >= 60000)
      public:
      using _xsd_ValidateInitializationResponseType::base_::Status;
      using _xsd_ValidateInitializationResponseType::base_::ID;
      using _xsd_ValidateInitializationResponseType::base_::Version;
      using _xsd_ValidateInitializationResponseType::base_::IssueInstant;
#endif

      // Constructors.
      //
      public:
      ValidateInitializationResponseType ();

      ValidateInitializationResponseType (const Status::type&,
                                          const ID::type&,
                                          const Version::type&,
                                          const IssueInstant::type&);

      ValidateInitializationResponseType (const ::xercesc::DOMElement&,
                                          ::xml_schema::flags = 0,
                                          ::xml_schema::type* = 0);

      ValidateInitializationResponseType (const ValidateInitializationResponseType&,
                                          ::xml_schema::flags = 0,
                                          ::xml_schema::type* = 0);

      virtual ValidateInitializationResponseType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;
    };
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMInputSource.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace middleware
{
  namespace ESOEProtocolSchema
  {
    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::std::basic_string< wchar_t >&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::std::basic_string< wchar_t >&,
                            ::xsd::cxx::xml::error_handler< wchar_t >&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::std::basic_string< wchar_t >&,
                            ::xercesc::DOMErrorHandler&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream&,
                            ::xsd::cxx::xml::error_handler< wchar_t >&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream&,
                            ::xercesc::DOMErrorHandler&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream&,
                            const ::std::basic_string< wchar_t >& id,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream&,
                            const ::std::basic_string< wchar_t >& id,
                            ::xsd::cxx::xml::error_handler< wchar_t >&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream&,
                            const ::std::basic_string< wchar_t >& id,
                            ::xercesc::DOMErrorHandler&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::xercesc::DOMInputSource&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::xercesc::DOMInputSource&,
                            ::xsd::cxx::xml::error_handler< wchar_t >&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::xercesc::DOMInputSource&,
                            ::xercesc::DOMErrorHandler&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::xercesc::DOMDocument&,
                            ::xml_schema::flags = 0,
                            const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::std::basic_string< wchar_t >&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::std::basic_string< wchar_t >&,
                             ::xsd::cxx::xml::error_handler< wchar_t >&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::std::basic_string< wchar_t >&,
                             ::xercesc::DOMErrorHandler&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream&,
                             ::xsd::cxx::xml::error_handler< wchar_t >&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream&,
                             ::xercesc::DOMErrorHandler&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream&,
                             const ::std::basic_string< wchar_t >& id,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream&,
                             const ::std::basic_string< wchar_t >& id,
                             ::xsd::cxx::xml::error_handler< wchar_t >&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream&,
                             const ::std::basic_string< wchar_t >& id,
                             ::xercesc::DOMErrorHandler&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::xercesc::DOMInputSource&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::xercesc::DOMInputSource&,
                             ::xsd::cxx::xml::error_handler< wchar_t >&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::xercesc::DOMInputSource&,
                             ::xercesc::DOMErrorHandler&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::xercesc::DOMDocument&,
                             ::xml_schema::flags = 0,
                             const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::std::basic_string< wchar_t >&,
                                   ::xml_schema::flags = 0,
                                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::std::basic_string< wchar_t >&,
                                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                                   ::xml_schema::flags = 0,
                                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::std::basic_string< wchar_t >&,
                                   ::xercesc::DOMErrorHandler&,
                                   ::xml_schema::flags = 0,
                                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream&,
                                   ::xml_schema::flags = 0,
                                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream&,
                                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                                   ::xml_schema::flags = 0,
                                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream&,
                                   ::xercesc::DOMErrorHandler&,
                                   ::xml_schema::flags = 0,
                                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream&,
                                   const ::std::basic_string< wchar_t >& id,
                                   ::xml_schema::flags = 0,
                                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream&,
                                   const ::std::basic_string< wchar_t >& id,
                                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                                   ::xml_schema::flags = 0,
                                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream&,
                                   const ::std::basic_string< wchar_t >& id,
                                   ::xercesc::DOMErrorHandler&,
                                   ::xml_schema::flags = 0,
                                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::xercesc::DOMInputSource&,
                                   ::xml_schema::flags = 0,
                                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::xercesc::DOMInputSource&,
                                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                                   ::xml_schema::flags = 0,
                                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::xercesc::DOMInputSource&,
                                   ::xercesc::DOMErrorHandler&,
                                   ::xml_schema::flags = 0,
                                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::xercesc::DOMDocument&,
                                   ::xml_schema::flags = 0,
                                   const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::std::basic_string< wchar_t >&,
                                    ::xml_schema::flags = 0,
                                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::std::basic_string< wchar_t >&,
                                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                                    ::xml_schema::flags = 0,
                                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::std::basic_string< wchar_t >&,
                                    ::xercesc::DOMErrorHandler&,
                                    ::xml_schema::flags = 0,
                                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream&,
                                    ::xml_schema::flags = 0,
                                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream&,
                                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                                    ::xml_schema::flags = 0,
                                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream&,
                                    ::xercesc::DOMErrorHandler&,
                                    ::xml_schema::flags = 0,
                                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream&,
                                    const ::std::basic_string< wchar_t >& id,
                                    ::xml_schema::flags = 0,
                                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream&,
                                    const ::std::basic_string< wchar_t >& id,
                                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                                    ::xml_schema::flags = 0,
                                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream&,
                                    const ::std::basic_string< wchar_t >& id,
                                    ::xercesc::DOMErrorHandler&,
                                    ::xml_schema::flags = 0,
                                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::xercesc::DOMInputSource&,
                                    ::xml_schema::flags = 0,
                                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::xercesc::DOMInputSource&,
                                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                                    ::xml_schema::flags = 0,
                                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::xercesc::DOMInputSource&,
                                    ::xercesc::DOMErrorHandler&,
                                    ::xml_schema::flags = 0,
                                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::xercesc::DOMDocument&,
                                    ::xml_schema::flags = 0,
                                    const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());
  }
}

#include <iosfwd> // std::ostream&

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace middleware
{
  namespace ESOEProtocolSchema
  {
    // Serialize to an existing DOM instance.
    //
    void
    ClearAuthzCacheRequest (::xercesc::DOMDocument&,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType&,
                            ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ClearAuthzCacheRequest (const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType&, 
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                            ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    ClearAuthzCacheRequest (::xercesc::XMLFormatTarget&,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType&, 
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                            const ::std::basic_string< wchar_t >& = L"UTF-8",
                            ::xml_schema::flags = 0);


    void
    ClearAuthzCacheRequest (::xercesc::XMLFormatTarget&,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType&, 
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                            ::xsd::cxx::xml::error_handler< wchar_t >&,
                            const ::std::basic_string< wchar_t >& = L"UTF-8",
                            ::xml_schema::flags = 0);

    void
    ClearAuthzCacheRequest (::xercesc::XMLFormatTarget&,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType&, 
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                            ::xercesc::DOMErrorHandler&,
                            const ::std::basic_string< wchar_t >& = L"UTF-8",
                            ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    ClearAuthzCacheRequest (::std::ostream&,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType&, 
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                            const ::std::basic_string< wchar_t >& = L"UTF-8",
                            ::xml_schema::flags = 0);


    void
    ClearAuthzCacheRequest (::std::ostream&,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType&, 
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                            ::xsd::cxx::xml::error_handler< wchar_t >&,
                            const ::std::basic_string< wchar_t >& = L"UTF-8",
                            ::xml_schema::flags = 0);

    void
    ClearAuthzCacheRequest (::std::ostream&,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType&, 
                            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                            ::xercesc::DOMErrorHandler&,
                            const ::std::basic_string< wchar_t >& = L"UTF-8",
                            ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ClearAuthzCacheRequestType&);

    // Serialize to an existing DOM instance.
    //
    void
    ClearAuthzCacheResponse (::xercesc::DOMDocument&,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType&,
                             ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ClearAuthzCacheResponse (const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    ClearAuthzCacheResponse (::xercesc::XMLFormatTarget&,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             const ::std::basic_string< wchar_t >& = L"UTF-8",
                             ::xml_schema::flags = 0);


    void
    ClearAuthzCacheResponse (::xercesc::XMLFormatTarget&,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             ::xsd::cxx::xml::error_handler< wchar_t >&,
                             const ::std::basic_string< wchar_t >& = L"UTF-8",
                             ::xml_schema::flags = 0);

    void
    ClearAuthzCacheResponse (::xercesc::XMLFormatTarget&,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             ::xercesc::DOMErrorHandler&,
                             const ::std::basic_string< wchar_t >& = L"UTF-8",
                             ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    ClearAuthzCacheResponse (::std::ostream&,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             const ::std::basic_string< wchar_t >& = L"UTF-8",
                             ::xml_schema::flags = 0);


    void
    ClearAuthzCacheResponse (::std::ostream&,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             ::xsd::cxx::xml::error_handler< wchar_t >&,
                             const ::std::basic_string< wchar_t >& = L"UTF-8",
                             ::xml_schema::flags = 0);

    void
    ClearAuthzCacheResponse (::std::ostream&,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType&, 
                             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                             ::xercesc::DOMErrorHandler&,
                             const ::std::basic_string< wchar_t >& = L"UTF-8",
                             ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ClearAuthzCacheResponseType&);

    // Serialize to an existing DOM instance.
    //
    void
    ValidateInitializationRequest (::xercesc::DOMDocument&,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType&,
                                   ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ValidateInitializationRequest (const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType&, 
                                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                   ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    ValidateInitializationRequest (::xercesc::XMLFormatTarget&,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType&, 
                                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                                   ::xml_schema::flags = 0);


    void
    ValidateInitializationRequest (::xercesc::XMLFormatTarget&,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType&, 
                                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                                   ::xml_schema::flags = 0);

    void
    ValidateInitializationRequest (::xercesc::XMLFormatTarget&,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType&, 
                                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                   ::xercesc::DOMErrorHandler&,
                                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                                   ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    ValidateInitializationRequest (::std::ostream&,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType&, 
                                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                                   ::xml_schema::flags = 0);


    void
    ValidateInitializationRequest (::std::ostream&,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType&, 
                                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                   ::xsd::cxx::xml::error_handler< wchar_t >&,
                                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                                   ::xml_schema::flags = 0);

    void
    ValidateInitializationRequest (::std::ostream&,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType&, 
                                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                   ::xercesc::DOMErrorHandler&,
                                   const ::std::basic_string< wchar_t >& = L"UTF-8",
                                   ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ValidateInitializationRequestType&);

    // Serialize to an existing DOM instance.
    //
    void
    ValidateInitializationResponse (::xercesc::DOMDocument&,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType&,
                                    ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    ValidateInitializationResponse (const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType&, 
                                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                    ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    ValidateInitializationResponse (::xercesc::XMLFormatTarget&,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType&, 
                                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                                    ::xml_schema::flags = 0);


    void
    ValidateInitializationResponse (::xercesc::XMLFormatTarget&,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType&, 
                                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                                    ::xml_schema::flags = 0);

    void
    ValidateInitializationResponse (::xercesc::XMLFormatTarget&,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType&, 
                                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                    ::xercesc::DOMErrorHandler&,
                                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                                    ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    ValidateInitializationResponse (::std::ostream&,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType&, 
                                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                                    ::xml_schema::flags = 0);


    void
    ValidateInitializationResponse (::std::ostream&,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType&, 
                                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                    ::xsd::cxx::xml::error_handler< wchar_t >&,
                                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                                    ::xml_schema::flags = 0);

    void
    ValidateInitializationResponse (::std::ostream&,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType&, 
                                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                    ::xercesc::DOMErrorHandler&,
                                    const ::std::basic_string< wchar_t >& = L"UTF-8",
                                    ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const ValidateInitializationResponseType&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // ESOE_SCHEMA_SAML_PROTOCOL_HXX
