// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "lxacml-schema-saml-protocol.hxx"

namespace middleware
{
  namespace lxacmlSAMLProtocolSchema
  {
    // LXACMLAuthzDecisionQueryType
    // 

    const LXACMLAuthzDecisionQueryType::Request::type& LXACMLAuthzDecisionQueryType::
    Request () const
    {
      return this->_xsd_Request_.get ();
    }

    LXACMLAuthzDecisionQueryType::Request::type& LXACMLAuthzDecisionQueryType::
    Request ()
    {
      return this->_xsd_Request_.get ();
    }

    void LXACMLAuthzDecisionQueryType::
    Request (const Request::type& Request)
    {
      this->_xsd_Request_.set (Request);
    }

    void LXACMLAuthzDecisionQueryType::
    Request (::std::auto_ptr< Request::type > Request)
    {
      this->_xsd_Request_.set (Request);
    }

    const LXACMLAuthzDecisionQueryType::InputContextOnly::type& LXACMLAuthzDecisionQueryType::InputContextOnly::
    default_value ()
    {
      return default_value_;
    }

    const LXACMLAuthzDecisionQueryType::InputContextOnly::type& LXACMLAuthzDecisionQueryType::
    InputContextOnly () const
    {
      return this->_xsd_InputContextOnly_.get ();
    }

    LXACMLAuthzDecisionQueryType::InputContextOnly::type& LXACMLAuthzDecisionQueryType::
    InputContextOnly ()
    {
      return this->_xsd_InputContextOnly_.get ();
    }

    void LXACMLAuthzDecisionQueryType::
    InputContextOnly (const InputContextOnly::type& InputContextOnly)
    {
      this->_xsd_InputContextOnly_.set (InputContextOnly);
    }

    const LXACMLAuthzDecisionQueryType::ReturnContext::type& LXACMLAuthzDecisionQueryType::ReturnContext::
    default_value ()
    {
      return default_value_;
    }

    const LXACMLAuthzDecisionQueryType::ReturnContext::type& LXACMLAuthzDecisionQueryType::
    ReturnContext () const
    {
      return this->_xsd_ReturnContext_.get ();
    }

    LXACMLAuthzDecisionQueryType::ReturnContext::type& LXACMLAuthzDecisionQueryType::
    ReturnContext ()
    {
      return this->_xsd_ReturnContext_.get ();
    }

    void LXACMLAuthzDecisionQueryType::
    ReturnContext (const ReturnContext::type& ReturnContext)
    {
      this->_xsd_ReturnContext_.set (ReturnContext);
    }
  }
}

#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/parser.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_factory_plate< 0, wchar_t >
  type_factory_plate_init;
}

namespace middleware
{
  namespace lxacmlSAMLProtocolSchema
  {
    // LXACMLAuthzDecisionQueryType
    //

    // LXACMLAuthzDecisionQueryType::InputContextOnly
    // 

    const LXACMLAuthzDecisionQueryType::InputContextOnly::type LXACMLAuthzDecisionQueryType::InputContextOnly::default_value_ (
      ::xsd::cxx::tree::traits< ::xml_schema::boolean, wchar_t >::create (
        ::std::basic_string< wchar_t > (L"false"), 0, 0, 0));

    // LXACMLAuthzDecisionQueryType::ReturnContext
    // 

    const LXACMLAuthzDecisionQueryType::ReturnContext::type LXACMLAuthzDecisionQueryType::ReturnContext::default_value_ (
      ::xsd::cxx::tree::traits< ::xml_schema::boolean, wchar_t >::create (
        ::std::basic_string< wchar_t > (L"false"), 0, 0, 0));

    LXACMLAuthzDecisionQueryType::
    LXACMLAuthzDecisionQueryType ()
    : ::saml2::protocol::RequestAbstractType (),
    _xsd_Request_ (::xml_schema::flags (), this),
    _xsd_InputContextOnly_ (::xml_schema::flags (), this),
    _xsd_ReturnContext_ (::xml_schema::flags (), this)
    {
    }

    LXACMLAuthzDecisionQueryType::
    LXACMLAuthzDecisionQueryType (const ID::type& _xsd_ID,
                                  const Version::type& _xsd_Version,
                                  const IssueInstant::type& _xsd_IssueInstant,
                                  const Request::type& _xsd_Request)
    : ::saml2::protocol::RequestAbstractType (_xsd_ID,
                                              _xsd_Version,
                                              _xsd_IssueInstant),
    _xsd_Request_ (_xsd_Request,
                   ::xml_schema::flags (),
                   this),
    _xsd_InputContextOnly_ (InputContextOnly::default_value (),
                            ::xml_schema::flags (),
                            this),
    _xsd_ReturnContext_ (ReturnContext::default_value (),
                         ::xml_schema::flags (),
                         this)
    {
    }

    LXACMLAuthzDecisionQueryType::
    LXACMLAuthzDecisionQueryType (const LXACMLAuthzDecisionQueryType& _xsd_LXACMLAuthzDecisionQueryType,
                                  ::xml_schema::flags f,
                                  ::xml_schema::type* c)
    : ::saml2::protocol::RequestAbstractType (_xsd_LXACMLAuthzDecisionQueryType, f, c),
    _xsd_Request_ (_xsd_LXACMLAuthzDecisionQueryType._xsd_Request_,
                   f | ::xml_schema::flags::not_root,
                   this),
    _xsd_InputContextOnly_ (_xsd_LXACMLAuthzDecisionQueryType._xsd_InputContextOnly_,
                            f | ::xml_schema::flags::not_root,
                            this),
    _xsd_ReturnContext_ (_xsd_LXACMLAuthzDecisionQueryType._xsd_ReturnContext_,
                         f | ::xml_schema::flags::not_root,
                         this)
    {
    }

    LXACMLAuthzDecisionQueryType::
    LXACMLAuthzDecisionQueryType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::type* c)
    : ::saml2::protocol::RequestAbstractType (e, f, c),
    _xsd_Request_ (f | ::xml_schema::flags::not_root, this),
    _xsd_InputContextOnly_ (f | ::xml_schema::flags::not_root, this),
    _xsd_ReturnContext_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void LXACMLAuthzDecisionQueryType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Request
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Request::type > r (
            tfm.create< Request::type > (
              L"Request",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_Request_.present ())
              continue;
            this->Request (r);
            continue;
          }
        }
      }

      if (!_xsd_Request_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Request",
          L"http://www.qut.com/middleware/lxacmlContextSchema");
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"InputContextOnly" && a.namespace_ ().empty ())
        {
          this->InputContextOnly (
            InputContextOnly::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));
          continue;
        }

        if (a.name () == L"ReturnContext" && a.namespace_ ().empty ())
        {
          this->ReturnContext (
            ReturnContext::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));
          continue;
        }
      }

      if (!_xsd_InputContextOnly_.present ())
      {
        this->InputContextOnly (
          InputContextOnly::traits::create (
            ::std::basic_string< wchar_t > (L"false"),
            &e,
            f | ::xml_schema::flags::not_root,
            this));
      }

      if (!_xsd_ReturnContext_.present ())
      {
        this->ReturnContext (
          ReturnContext::traits::create (
            ::std::basic_string< wchar_t > (L"false"),
            &e,
            f | ::xml_schema::flags::not_root,
            this));
      }
    }

    LXACMLAuthzDecisionQueryType* LXACMLAuthzDecisionQueryType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new LXACMLAuthzDecisionQueryType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, LXACMLAuthzDecisionQueryType >
    _xsd_LXACMLAuthzDecisionQueryType_type_factory_init (
      L"LXACMLAuthzDecisionQueryType http://www.qut.com/middleware/lxacmlSAMLProtocolSchema");
  }
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace middleware
{
  namespace lxacmlSAMLProtocolSchema
  {
    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (const ::std::basic_string< wchar_t >& u,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (const ::std::basic_string< wchar_t >& u,
                              ::xsd::cxx::xml::error_handler< wchar_t >& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (const ::std::basic_string< wchar_t >& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (::std::istream& is,
                              ::xsd::cxx::xml::error_handler< wchar_t >& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (::std::istream& is,
                              const ::std::basic_string< wchar_t >& sid,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (::std::istream& is,
                              const ::std::basic_string< wchar_t >& sid,
                              ::xsd::cxx::xml::error_handler< wchar_t >& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (::std::istream& is,
                              const ::std::basic_string< wchar_t >& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (const ::xercesc::DOMInputSource& i,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (const ::xercesc::DOMInputSource& i,
                              ::xsd::cxx::xml::error_handler< wchar_t >& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (const ::xercesc::DOMInputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType > r (
        tfm.create< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType > (
          L"LXACMLAuthzDecisionQuery",
          L"http://www.qut.com/middleware/lxacmlSAMLProtocolSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"LXACMLAuthzDecisionQuery",
        L"http://www.qut.com/middleware/lxacmlSAMLProtocolSchema");
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/serialization.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_serializer_plate< 0, wchar_t >
  type_serializer_plate_init;
}

namespace middleware
{
  namespace lxacmlSAMLProtocolSchema
  {
    void
    LXACMLAuthzDecisionQuery (::xercesc::DOMDocument& d,
                              const ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType& s,
                              ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType > (
        L"LXACMLAuthzDecisionQuery",
        L"http://www.qut.com/middleware/lxacmlSAMLProtocolSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    LXACMLAuthzDecisionQuery (const ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType > (
            L"LXACMLAuthzDecisionQuery",
            L"http://www.qut.com/middleware/lxacmlSAMLProtocolSchema",
            m,
            s,
            f));
        ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    LXACMLAuthzDecisionQuery (::xercesc::XMLFormatTarget& t,
                              const ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              const ::std::basic_string< wchar_t >& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    LXACMLAuthzDecisionQuery (::xercesc::XMLFormatTarget& t,
                              const ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              ::xsd::cxx::xml::error_handler< wchar_t >& h,
                              const ::std::basic_string< wchar_t >& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLAuthzDecisionQuery (::xercesc::XMLFormatTarget& t,
                              const ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              ::xercesc::DOMErrorHandler& h,
                              const ::std::basic_string< wchar_t >& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLAuthzDecisionQuery (::std::ostream& o,
                              const ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              const ::std::basic_string< wchar_t >& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    LXACMLAuthzDecisionQuery (::std::ostream& o,
                              const ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              ::xsd::cxx::xml::error_handler< wchar_t >& h,
                              const ::std::basic_string< wchar_t >& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLAuthzDecisionQuery (::std::ostream& o,
                              const ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType& s,
                              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                              ::xercesc::DOMErrorHandler& h,
                              const ::std::basic_string< wchar_t >& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const LXACMLAuthzDecisionQueryType& i)
    {
      e << static_cast< const ::saml2::protocol::RequestAbstractType& > (i);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< LXACMLAuthzDecisionQueryType::Request::type > (
          L"Request",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          true,
          true,
          e,
          i.Request ());
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"InputContextOnly",
          e);

        a.dom_attribute () << i.InputContextOnly ();
      }

      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"ReturnContext",
          e);

        a.dom_attribute () << i.ReturnContext ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, LXACMLAuthzDecisionQueryType >
    _xsd_LXACMLAuthzDecisionQueryType_type_serializer_init (
      L"LXACMLAuthzDecisionQueryType",
      L"http://www.qut.com/middleware/lxacmlSAMLProtocolSchema");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

