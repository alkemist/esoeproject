// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "lxacml-schema-context.hxx"

namespace middleware
{
  namespace lxacmlContextSchema
  {
    // RequestType
    // 

    const RequestType::Subject::type& RequestType::
    Subject () const
    {
      return this->_xsd_Subject_.get ();
    }

    RequestType::Subject::type& RequestType::
    Subject ()
    {
      return this->_xsd_Subject_.get ();
    }

    void RequestType::
    Subject (const Subject::type& Subject)
    {
      this->_xsd_Subject_.set (Subject);
    }

    void RequestType::
    Subject (::std::auto_ptr< Subject::type > Subject)
    {
      this->_xsd_Subject_.set (Subject);
    }

    const RequestType::Resource::type& RequestType::
    Resource () const
    {
      return this->_xsd_Resource_.get ();
    }

    RequestType::Resource::type& RequestType::
    Resource ()
    {
      return this->_xsd_Resource_.get ();
    }

    void RequestType::
    Resource (const Resource::type& Resource)
    {
      this->_xsd_Resource_.set (Resource);
    }

    void RequestType::
    Resource (::std::auto_ptr< Resource::type > Resource)
    {
      this->_xsd_Resource_.set (Resource);
    }

    const RequestType::Action::container& RequestType::
    Action () const
    {
      return this->_xsd_Action_;
    }

    RequestType::Action::container& RequestType::
    Action ()
    {
      return this->_xsd_Action_;
    }

    void RequestType::
    Action (const Action::type& Action)
    {
      this->_xsd_Action_.set (Action);
    }

    void RequestType::
    Action (const Action::container& Action)
    {
      this->_xsd_Action_ = Action;
    }

    void RequestType::
    Action (::std::auto_ptr< Action::type > Action)
    {
      this->_xsd_Action_.set (Action);
    }


    // SubjectType
    // 

    const SubjectType::Attribute::type& SubjectType::
    Attribute () const
    {
      return this->_xsd_Attribute_.get ();
    }

    SubjectType::Attribute::type& SubjectType::
    Attribute ()
    {
      return this->_xsd_Attribute_.get ();
    }

    void SubjectType::
    Attribute (const Attribute::type& Attribute)
    {
      this->_xsd_Attribute_.set (Attribute);
    }

    void SubjectType::
    Attribute (::std::auto_ptr< Attribute::type > Attribute)
    {
      this->_xsd_Attribute_.set (Attribute);
    }


    // ResourceType
    // 

    const ResourceType::Attribute::type& ResourceType::
    Attribute () const
    {
      return this->_xsd_Attribute_.get ();
    }

    ResourceType::Attribute::type& ResourceType::
    Attribute ()
    {
      return this->_xsd_Attribute_.get ();
    }

    void ResourceType::
    Attribute (const Attribute::type& Attribute)
    {
      this->_xsd_Attribute_.set (Attribute);
    }

    void ResourceType::
    Attribute (::std::auto_ptr< Attribute::type > Attribute)
    {
      this->_xsd_Attribute_.set (Attribute);
    }


    // ActionType
    // 

    const ActionType::Attribute::type& ActionType::
    Attribute () const
    {
      return this->_xsd_Attribute_.get ();
    }

    ActionType::Attribute::type& ActionType::
    Attribute ()
    {
      return this->_xsd_Attribute_.get ();
    }

    void ActionType::
    Attribute (const Attribute::type& Attribute)
    {
      this->_xsd_Attribute_.set (Attribute);
    }

    void ActionType::
    Attribute (::std::auto_ptr< Attribute::type > Attribute)
    {
      this->_xsd_Attribute_.set (Attribute);
    }


    // AttributeType
    // 

    const AttributeType::AttributeValue::type& AttributeType::
    AttributeValue () const
    {
      return this->_xsd_AttributeValue_.get ();
    }

    AttributeType::AttributeValue::type& AttributeType::
    AttributeValue ()
    {
      return this->_xsd_AttributeValue_.get ();
    }

    void AttributeType::
    AttributeValue (const AttributeValue::type& AttributeValue)
    {
      this->_xsd_AttributeValue_.set (AttributeValue);
    }

    void AttributeType::
    AttributeValue (::std::auto_ptr< AttributeValue::type > AttributeValue)
    {
      this->_xsd_AttributeValue_.set (AttributeValue);
    }

    const AttributeType::Issuer::container& AttributeType::
    Issuer () const
    {
      return this->_xsd_Issuer_;
    }

    AttributeType::Issuer::container& AttributeType::
    Issuer ()
    {
      return this->_xsd_Issuer_;
    }

    void AttributeType::
    Issuer (const Issuer::type& Issuer)
    {
      this->_xsd_Issuer_.set (Issuer);
    }

    void AttributeType::
    Issuer (const Issuer::container& Issuer)
    {
      this->_xsd_Issuer_ = Issuer;
    }

    void AttributeType::
    Issuer (::std::auto_ptr< Issuer::type > Issuer)
    {
      this->_xsd_Issuer_.set (Issuer);
    }


    // ResponseType
    // 

    const ResponseType::Result::type& ResponseType::
    Result () const
    {
      return this->_xsd_Result_.get ();
    }

    ResponseType::Result::type& ResponseType::
    Result ()
    {
      return this->_xsd_Result_.get ();
    }

    void ResponseType::
    Result (const Result::type& Result)
    {
      this->_xsd_Result_.set (Result);
    }

    void ResponseType::
    Result (::std::auto_ptr< Result::type > Result)
    {
      this->_xsd_Result_.set (Result);
    }


    // ResultType
    // 

    const ResultType::Decision::type& ResultType::
    Decision () const
    {
      return this->_xsd_Decision_.get ();
    }

    ResultType::Decision::type& ResultType::
    Decision ()
    {
      return this->_xsd_Decision_.get ();
    }

    void ResultType::
    Decision (const Decision::type& Decision)
    {
      this->_xsd_Decision_.set (Decision);
    }

    void ResultType::
    Decision (::std::auto_ptr< Decision::type > Decision)
    {
      this->_xsd_Decision_.set (Decision);
    }

    const ResultType::Status::container& ResultType::
    Status () const
    {
      return this->_xsd_Status_;
    }

    ResultType::Status::container& ResultType::
    Status ()
    {
      return this->_xsd_Status_;
    }

    void ResultType::
    Status (const Status::type& Status)
    {
      this->_xsd_Status_.set (Status);
    }

    void ResultType::
    Status (const Status::container& Status)
    {
      this->_xsd_Status_ = Status;
    }

    void ResultType::
    Status (::std::auto_ptr< Status::type > Status)
    {
      this->_xsd_Status_.set (Status);
    }

    const ResultType::Obligations::type& ResultType::
    Obligations () const
    {
      return this->_xsd_Obligations_.get ();
    }

    ResultType::Obligations::type& ResultType::
    Obligations ()
    {
      return this->_xsd_Obligations_.get ();
    }

    void ResultType::
    Obligations (const Obligations::type& Obligations)
    {
      this->_xsd_Obligations_.set (Obligations);
    }

    void ResultType::
    Obligations (::std::auto_ptr< Obligations::type > Obligations)
    {
      this->_xsd_Obligations_.set (Obligations);
    }


    // DecisionType
    // 

    DecisionType::
    DecisionType ()
    : ::xml_schema::string ()
    {
    }

    DecisionType::
    DecisionType (_xsd_DecisionType v)
    : ::xml_schema::string (_xsd_DecisionType_literals_[v])
    {
    }

    DecisionType::
    DecisionType (const ::xml_schema::string& _xsd_DecisionType)
    : ::xml_schema::string (_xsd_DecisionType)
    {
    }

    DecisionType::
    DecisionType (const DecisionType& v,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    DecisionType& DecisionType::
    operator= (_xsd_DecisionType v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_DecisionType_literals_[v]);

      return *this;
    }


    // StatusType
    // 

    const StatusType::StatusMessage::container& StatusType::
    StatusMessage () const
    {
      return this->_xsd_StatusMessage_;
    }

    StatusType::StatusMessage::container& StatusType::
    StatusMessage ()
    {
      return this->_xsd_StatusMessage_;
    }

    void StatusType::
    StatusMessage (const StatusMessage::type& StatusMessage)
    {
      this->_xsd_StatusMessage_.set (StatusMessage);
    }

    void StatusType::
    StatusMessage (const StatusMessage::container& StatusMessage)
    {
      this->_xsd_StatusMessage_ = StatusMessage;
    }

    void StatusType::
    StatusMessage (::std::auto_ptr< StatusMessage::type > StatusMessage)
    {
      this->_xsd_StatusMessage_.set (StatusMessage);
    }
  }
}

#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/parser.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_factory_plate< 0, wchar_t >
  type_factory_plate_init;
}

namespace middleware
{
  namespace lxacmlContextSchema
  {
    // RequestType
    //

    RequestType::
    RequestType ()
    : ::xml_schema::type (),
    _xsd_Subject_ (::xml_schema::flags (), this),
    _xsd_Resource_ (::xml_schema::flags (), this),
    _xsd_Action_ (::xml_schema::flags (), this)
    {
    }

    RequestType::
    RequestType (const Subject::type& _xsd_Subject,
                 const Resource::type& _xsd_Resource)
    : ::xml_schema::type (),
    _xsd_Subject_ (_xsd_Subject,
                   ::xml_schema::flags (),
                   this),
    _xsd_Resource_ (_xsd_Resource,
                    ::xml_schema::flags (),
                    this),
    _xsd_Action_ (::xml_schema::flags (), this)
    {
    }

    RequestType::
    RequestType (const RequestType& _xsd_RequestType,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_RequestType, f, c),
    _xsd_Subject_ (_xsd_RequestType._xsd_Subject_,
                   f | ::xml_schema::flags::not_root,
                   this),
    _xsd_Resource_ (_xsd_RequestType._xsd_Resource_,
                    f | ::xml_schema::flags::not_root,
                    this),
    _xsd_Action_ (_xsd_RequestType._xsd_Action_,
                  f | ::xml_schema::flags::not_root,
                  this)
    {
    }

    RequestType::
    RequestType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Subject_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Resource_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Action_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void RequestType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Subject
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Subject::type > r (
            tfm.create< Subject::type > (
              L"Subject",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_Subject_.present ())
              continue;
            this->Subject (r);
            continue;
          }
        }

        // Resource
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Resource::type > r (
            tfm.create< Resource::type > (
              L"Resource",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_Resource_.present ())
              continue;
            this->Resource (r);
            continue;
          }
        }

        // Action
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Action::type > r (
            tfm.create< Action::type > (
              L"Action",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Action ())
              continue;
            this->Action (r);
            continue;
          }
        }
      }

      if (!_xsd_Subject_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Subject",
          L"http://www.qut.com/middleware/lxacmlContextSchema");
      }

      if (!_xsd_Resource_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Resource",
          L"http://www.qut.com/middleware/lxacmlContextSchema");
      }
    }

    RequestType* RequestType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new RequestType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, RequestType >
    _xsd_RequestType_type_factory_init (
      L"RequestType http://www.qut.com/middleware/lxacmlContextSchema");


    // SubjectType
    //

    SubjectType::
    SubjectType ()
    : ::xml_schema::type (),
    _xsd_Attribute_ (::xml_schema::flags (), this)
    {
    }

    SubjectType::
    SubjectType (const Attribute::type& _xsd_Attribute)
    : ::xml_schema::type (),
    _xsd_Attribute_ (_xsd_Attribute,
                     ::xml_schema::flags (),
                     this)
    {
    }

    SubjectType::
    SubjectType (const SubjectType& _xsd_SubjectType,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_SubjectType, f, c),
    _xsd_Attribute_ (_xsd_SubjectType._xsd_Attribute_,
                     f | ::xml_schema::flags::not_root,
                     this)
    {
    }

    SubjectType::
    SubjectType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Attribute_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void SubjectType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Attribute
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Attribute::type > r (
            tfm.create< Attribute::type > (
              L"Attribute",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_Attribute_.present ())
              continue;
            this->Attribute (r);
            continue;
          }
        }
      }

      if (!_xsd_Attribute_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Attribute",
          L"http://www.qut.com/middleware/lxacmlContextSchema");
      }
    }

    SubjectType* SubjectType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new SubjectType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SubjectType >
    _xsd_SubjectType_type_factory_init (
      L"SubjectType http://www.qut.com/middleware/lxacmlContextSchema");


    // ResourceType
    //

    ResourceType::
    ResourceType ()
    : ::xml_schema::type (),
    _xsd_Attribute_ (::xml_schema::flags (), this)
    {
    }

    ResourceType::
    ResourceType (const Attribute::type& _xsd_Attribute)
    : ::xml_schema::type (),
    _xsd_Attribute_ (_xsd_Attribute,
                     ::xml_schema::flags (),
                     this)
    {
    }

    ResourceType::
    ResourceType (const ResourceType& _xsd_ResourceType,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_ResourceType, f, c),
    _xsd_Attribute_ (_xsd_ResourceType._xsd_Attribute_,
                     f | ::xml_schema::flags::not_root,
                     this)
    {
    }

    ResourceType::
    ResourceType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Attribute_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void ResourceType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Attribute
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Attribute::type > r (
            tfm.create< Attribute::type > (
              L"Attribute",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_Attribute_.present ())
              continue;
            this->Attribute (r);
            continue;
          }
        }
      }

      if (!_xsd_Attribute_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Attribute",
          L"http://www.qut.com/middleware/lxacmlContextSchema");
      }
    }

    ResourceType* ResourceType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ResourceType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ResourceType >
    _xsd_ResourceType_type_factory_init (
      L"ResourceType http://www.qut.com/middleware/lxacmlContextSchema");


    // ActionType
    //

    ActionType::
    ActionType ()
    : ::xml_schema::type (),
    _xsd_Attribute_ (::xml_schema::flags (), this)
    {
    }

    ActionType::
    ActionType (const Attribute::type& _xsd_Attribute)
    : ::xml_schema::type (),
    _xsd_Attribute_ (_xsd_Attribute,
                     ::xml_schema::flags (),
                     this)
    {
    }

    ActionType::
    ActionType (const ActionType& _xsd_ActionType,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_ActionType, f, c),
    _xsd_Attribute_ (_xsd_ActionType._xsd_Attribute_,
                     f | ::xml_schema::flags::not_root,
                     this)
    {
    }

    ActionType::
    ActionType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Attribute_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void ActionType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Attribute
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Attribute::type > r (
            tfm.create< Attribute::type > (
              L"Attribute",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_Attribute_.present ())
              continue;
            this->Attribute (r);
            continue;
          }
        }
      }

      if (!_xsd_Attribute_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Attribute",
          L"http://www.qut.com/middleware/lxacmlContextSchema");
      }
    }

    ActionType* ActionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ActionType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ActionType >
    _xsd_ActionType_type_factory_init (
      L"ActionType http://www.qut.com/middleware/lxacmlContextSchema");


    // AttributeType
    //

    AttributeType::
    AttributeType ()
    : ::xml_schema::type (),
    _xsd_AttributeValue_ (::xml_schema::flags (), this),
    _xsd_Issuer_ (::xml_schema::flags (), this)
    {
    }

    AttributeType::
    AttributeType (const AttributeValue::type& _xsd_AttributeValue)
    : ::xml_schema::type (),
    _xsd_AttributeValue_ (_xsd_AttributeValue,
                          ::xml_schema::flags (),
                          this),
    _xsd_Issuer_ (::xml_schema::flags (), this)
    {
    }

    AttributeType::
    AttributeType (const AttributeType& _xsd_AttributeType,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_AttributeType, f, c),
    _xsd_AttributeValue_ (_xsd_AttributeType._xsd_AttributeValue_,
                          f | ::xml_schema::flags::not_root,
                          this),
    _xsd_Issuer_ (_xsd_AttributeType._xsd_Issuer_,
                  f | ::xml_schema::flags::not_root,
                  this)
    {
    }

    AttributeType::
    AttributeType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_AttributeValue_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Issuer_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void AttributeType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // AttributeValue
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< AttributeValue::type > r (
            tfm.create< AttributeValue::type > (
              L"AttributeValue",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_AttributeValue_.present ())
              continue;
            this->AttributeValue (r);
            continue;
          }
        }
      }

      if (!_xsd_AttributeValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"AttributeValue",
          L"http://www.qut.com/middleware/lxacmlContextSchema");
      }

      while (p.more_attributes ())
      {
        const ::xsd::cxx::xml::dom::attribute< wchar_t > a (p.next_attribute ());

        if (a.name () == L"Issuer" && a.namespace_ ().empty ())
        {
          ::std::auto_ptr< Issuer::type > r (
            Issuer::traits::create (
              a.dom_attribute (),
              f | ::xml_schema::flags::not_root,
              this));

          this->Issuer (r);
          continue;
        }
      }
    }

    AttributeType* AttributeType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new AttributeType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AttributeType >
    _xsd_AttributeType_type_factory_init (
      L"AttributeType http://www.qut.com/middleware/lxacmlContextSchema");


    // ResponseType
    //

    ResponseType::
    ResponseType ()
    : ::xml_schema::type (),
    _xsd_Result_ (::xml_schema::flags (), this)
    {
    }

    ResponseType::
    ResponseType (const Result::type& _xsd_Result)
    : ::xml_schema::type (),
    _xsd_Result_ (_xsd_Result,
                  ::xml_schema::flags (),
                  this)
    {
    }

    ResponseType::
    ResponseType (const ResponseType& _xsd_ResponseType,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_ResponseType, f, c),
    _xsd_Result_ (_xsd_ResponseType._xsd_Result_,
                  f | ::xml_schema::flags::not_root,
                  this)
    {
    }

    ResponseType::
    ResponseType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Result_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void ResponseType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Result
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Result::type > r (
            tfm.create< Result::type > (
              L"Result",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_Result_.present ())
              continue;
            this->Result (r);
            continue;
          }
        }
      }

      if (!_xsd_Result_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Result",
          L"http://www.qut.com/middleware/lxacmlContextSchema");
      }
    }

    ResponseType* ResponseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ResponseType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ResponseType >
    _xsd_ResponseType_type_factory_init (
      L"ResponseType http://www.qut.com/middleware/lxacmlContextSchema");


    // ResultType
    //

    ResultType::
    ResultType ()
    : ::xml_schema::type (),
    _xsd_Decision_ (::xml_schema::flags (), this),
    _xsd_Status_ (::xml_schema::flags (), this),
    _xsd_Obligations_ (::xml_schema::flags (), this)
    {
    }

    ResultType::
    ResultType (const Decision::type& _xsd_Decision,
                const Obligations::type& _xsd_Obligations)
    : ::xml_schema::type (),
    _xsd_Decision_ (_xsd_Decision,
                    ::xml_schema::flags (),
                    this),
    _xsd_Status_ (::xml_schema::flags (), this),
    _xsd_Obligations_ (_xsd_Obligations,
                       ::xml_schema::flags (),
                       this)
    {
    }

    ResultType::
    ResultType (const ResultType& _xsd_ResultType,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_ResultType, f, c),
    _xsd_Decision_ (_xsd_ResultType._xsd_Decision_,
                    f | ::xml_schema::flags::not_root,
                    this),
    _xsd_Status_ (_xsd_ResultType._xsd_Status_,
                  f | ::xml_schema::flags::not_root,
                  this),
    _xsd_Obligations_ (_xsd_ResultType._xsd_Obligations_,
                       f | ::xml_schema::flags::not_root,
                       this)
    {
    }

    ResultType::
    ResultType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_Decision_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Status_ (f | ::xml_schema::flags::not_root, this),
    _xsd_Obligations_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void ResultType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // Decision
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Decision::type > r (
            tfm.create< Decision::type > (
              L"Decision",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_Decision_.present ())
              continue;
            this->Decision (r);
            continue;
          }
        }

        // Status
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Status::type > r (
            tfm.create< Status::type > (
              L"Status",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->Status ())
              continue;
            this->Status (r);
            continue;
          }
        }

        // Obligations
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< Obligations::type > r (
            tfm.create< Obligations::type > (
              L"Obligations",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (_xsd_Obligations_.present ())
              continue;
            this->Obligations (r);
            continue;
          }
        }
      }

      if (!_xsd_Decision_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Decision",
          L"http://www.qut.com/middleware/lxacmlContextSchema");
      }

      if (!_xsd_Obligations_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Obligations",
          L"http://www.qut.com/middleware/lxacmlSchema");
      }
    }

    ResultType* ResultType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ResultType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ResultType >
    _xsd_ResultType_type_factory_init (
      L"ResultType http://www.qut.com/middleware/lxacmlContextSchema");


    // DecisionType
    //

    DecisionType::
    DecisionType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_DecisionType_convert ();
    }

    DecisionType::
    DecisionType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_DecisionType_convert ();
    }

    DecisionType::
    DecisionType (const ::std::basic_string< wchar_t >& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_DecisionType_convert ();
    }

    DecisionType* DecisionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new DecisionType (*this, f, c);
    }

    DecisionType::_xsd_DecisionType DecisionType::
    _xsd_DecisionType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_DecisionType_literals_);
      const _xsd_DecisionType* i (::std::lower_bound (
                                    _xsd_DecisionType_indexes_,
                                    _xsd_DecisionType_indexes_ + 2,
                                    *this,
                                    c));

      if (i == _xsd_DecisionType_indexes_ + 2 || _xsd_DecisionType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const DecisionType::
    _xsd_DecisionType_literals_[2] =
    {
      L"Permit",
      L"Deny"
    };

    const DecisionType::_xsd_DecisionType DecisionType::
    _xsd_DecisionType_indexes_[2] =
    {
      ::middleware::lxacmlContextSchema::DecisionType::Deny,
      ::middleware::lxacmlContextSchema::DecisionType::Permit
    };

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DecisionType >
    _xsd_DecisionType_type_factory_init (
      L"DecisionType http://www.qut.com/middleware/lxacmlContextSchema");


    // StatusType
    //

    StatusType::
    StatusType ()
    : ::xml_schema::type (),
    _xsd_StatusMessage_ (::xml_schema::flags (), this)
    {
    }

    StatusType::
    StatusType (const StatusType& _xsd_StatusType,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
    : ::xml_schema::type (_xsd_StatusType, f, c),
    _xsd_StatusMessage_ (_xsd_StatusType._xsd_StatusMessage_,
                         f | ::xml_schema::flags::not_root,
                         this)
    {
    }

    StatusType::
    StatusType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
    : ::xml_schema::type (e, f, c),
    _xsd_StatusMessage_ (f | ::xml_schema::flags::not_root, this)
    {
      parse (e, f);
    }

    void StatusType::
    parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e);

      while (p.more_elements ())
      {
        const ::xsd::cxx::xml::dom::element< wchar_t > e (p.next_element ());

        // StatusMessage
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< StatusMessage::type > r (
            tfm.create< StatusMessage::type > (
              L"StatusMessage",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              true,
              true,
              e,
              f | ::xml_schema::flags::not_root,
              this));

          if (r.get () != 0)
          {
            if (this->StatusMessage ())
              continue;
            this->StatusMessage (r);
            continue;
          }
        }
      }
    }

    StatusType* StatusType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new StatusType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, StatusType >
    _xsd_StatusType_type_factory_init (
      L"StatusType http://www.qut.com/middleware/lxacmlContextSchema");
  }
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace middleware
{
  namespace lxacmlContextSchema
  {
    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (const ::std::basic_string< wchar_t >& u,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlContextSchema::Request (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (const ::std::basic_string< wchar_t >& u,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Request (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (const ::std::basic_string< wchar_t >& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Request (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::std::istream& is,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Request (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::std::istream& is,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Request (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Request (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Request (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Request (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Request (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (const ::xercesc::DOMInputSource& i,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlContextSchema::Request (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (const ::xercesc::DOMInputSource& i,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Request (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (const ::xercesc::DOMInputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Request (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType > r (
        tfm.create< ::middleware::lxacmlContextSchema::RequestType > (
          L"Request",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Request",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (const ::std::basic_string< wchar_t >& u,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlContextSchema::Subject (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (const ::std::basic_string< wchar_t >& u,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Subject (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (const ::std::basic_string< wchar_t >& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Subject (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::std::istream& is,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Subject (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::std::istream& is,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Subject (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Subject (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Subject (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Subject (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::std::istream& is,
             const ::std::basic_string< wchar_t >& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Subject (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (const ::xercesc::DOMInputSource& i,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlContextSchema::Subject (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (const ::xercesc::DOMInputSource& i,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Subject (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (const ::xercesc::DOMInputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Subject (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType > r (
        tfm.create< ::middleware::lxacmlContextSchema::SubjectType > (
          L"Subject",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Subject",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (const ::std::basic_string< wchar_t >& u,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlContextSchema::Resource (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (const ::std::basic_string< wchar_t >& u,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Resource (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (const ::std::basic_string< wchar_t >& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Resource (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::std::istream& is,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Resource (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::std::istream& is,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Resource (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Resource (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Resource (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Resource (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Resource (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (const ::xercesc::DOMInputSource& i,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlContextSchema::Resource (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (const ::xercesc::DOMInputSource& i,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Resource (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (const ::xercesc::DOMInputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Resource (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType > r (
        tfm.create< ::middleware::lxacmlContextSchema::ResourceType > (
          L"Resource",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Resource",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (const ::std::basic_string< wchar_t >& u,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlContextSchema::Action (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (const ::std::basic_string< wchar_t >& u,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Action (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (const ::std::basic_string< wchar_t >& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Action (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::std::istream& is,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Action (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::std::istream& is,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Action (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Action (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::std::istream& is,
            const ::std::basic_string< wchar_t >& sid,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Action (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::std::istream& is,
            const ::std::basic_string< wchar_t >& sid,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Action (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::std::istream& is,
            const ::std::basic_string< wchar_t >& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Action (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (const ::xercesc::DOMInputSource& i,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlContextSchema::Action (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (const ::xercesc::DOMInputSource& i,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Action (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (const ::xercesc::DOMInputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Action (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType > r (
        tfm.create< ::middleware::lxacmlContextSchema::ActionType > (
          L"Action",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Action",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (const ::std::basic_string< wchar_t >& u,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlContextSchema::Attribute (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (const ::std::basic_string< wchar_t >& u,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Attribute (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (const ::std::basic_string< wchar_t >& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Attribute (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::std::istream& is,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Attribute (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::std::istream& is,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Attribute (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Attribute (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Attribute (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Attribute (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::std::istream& is,
               const ::std::basic_string< wchar_t >& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Attribute (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (const ::xercesc::DOMInputSource& i,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlContextSchema::Attribute (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (const ::xercesc::DOMInputSource& i,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Attribute (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (const ::xercesc::DOMInputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Attribute (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType > r (
        tfm.create< ::middleware::lxacmlContextSchema::AttributeType > (
          L"Attribute",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Attribute",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (const ::std::basic_string< wchar_t >& u,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlContextSchema::AttributeValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (const ::std::basic_string< wchar_t >& u,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::AttributeValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (const ::std::basic_string< wchar_t >& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::AttributeValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::AttributeValue (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::AttributeValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::AttributeValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    const ::std::basic_string< wchar_t >& sid,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::AttributeValue (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    const ::std::basic_string< wchar_t >& sid,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::AttributeValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    const ::std::basic_string< wchar_t >& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::AttributeValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (const ::xercesc::DOMInputSource& i,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlContextSchema::AttributeValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (const ::xercesc::DOMInputSource& i,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::AttributeValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (const ::xercesc::DOMInputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::AttributeValue (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType > r (
        tfm.create< ::middleware::lxacmlContextSchema::AttributeValueType > (
          L"AttributeValue",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"AttributeValue",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (const ::std::basic_string< wchar_t >& u,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlContextSchema::Response (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (const ::std::basic_string< wchar_t >& u,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Response (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (const ::std::basic_string< wchar_t >& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Response (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::std::istream& is,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Response (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::std::istream& is,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Response (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Response (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Response (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Response (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Response (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (const ::xercesc::DOMInputSource& i,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlContextSchema::Response (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (const ::xercesc::DOMInputSource& i,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Response (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (const ::xercesc::DOMInputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Response (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType > r (
        tfm.create< ::middleware::lxacmlContextSchema::ResponseType > (
          L"Response",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Response",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (const ::std::basic_string< wchar_t >& u,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlContextSchema::Result (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (const ::std::basic_string< wchar_t >& u,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Result (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (const ::std::basic_string< wchar_t >& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Result (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::std::istream& is,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Result (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::std::istream& is,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Result (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Result (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::std::istream& is,
            const ::std::basic_string< wchar_t >& sid,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Result (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::std::istream& is,
            const ::std::basic_string< wchar_t >& sid,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Result (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::std::istream& is,
            const ::std::basic_string< wchar_t >& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Result (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (const ::xercesc::DOMInputSource& i,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlContextSchema::Result (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (const ::xercesc::DOMInputSource& i,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Result (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (const ::xercesc::DOMInputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Result (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType > r (
        tfm.create< ::middleware::lxacmlContextSchema::ResultType > (
          L"Result",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Result",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (const ::std::basic_string< wchar_t >& u,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlContextSchema::Decision (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (const ::std::basic_string< wchar_t >& u,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Decision (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (const ::std::basic_string< wchar_t >& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Decision (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::std::istream& is,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Decision (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::std::istream& is,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Decision (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Decision (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Decision (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Decision (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::std::istream& is,
              const ::std::basic_string< wchar_t >& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Decision (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (const ::xercesc::DOMInputSource& i,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlContextSchema::Decision (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (const ::xercesc::DOMInputSource& i,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Decision (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (const ::xercesc::DOMInputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Decision (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType > r (
        tfm.create< ::middleware::lxacmlContextSchema::DecisionType > (
          L"Decision",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Decision",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (const ::std::basic_string< wchar_t >& u,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlContextSchema::Status (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (const ::std::basic_string< wchar_t >& u,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Status (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (const ::std::basic_string< wchar_t >& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Status (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::std::istream& is,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Status (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::std::istream& is,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Status (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Status (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::std::istream& is,
            const ::std::basic_string< wchar_t >& sid,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Status (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::std::istream& is,
            const ::std::basic_string< wchar_t >& sid,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Status (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::std::istream& is,
            const ::std::basic_string< wchar_t >& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::Status (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (const ::xercesc::DOMInputSource& i,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlContextSchema::Status (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (const ::xercesc::DOMInputSource& i,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Status (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (const ::xercesc::DOMInputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::Status (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType > r (
        tfm.create< ::middleware::lxacmlContextSchema::StatusType > (
          L"Status",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"Status",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::std::basic_string< wchar_t >& u,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlContextSchema::StatusMessage (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::std::basic_string< wchar_t >& u,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::StatusMessage (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::std::basic_string< wchar_t >& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::StatusMessage (
        static_cast< const ::xercesc::DOMDocument& > (*d), f);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::StatusMessage (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::StatusMessage (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::StatusMessage (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   const ::std::basic_string< wchar_t >& sid,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::StatusMessage (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   const ::std::basic_string< wchar_t >& sid,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::StatusMessage (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   const ::std::basic_string< wchar_t >& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlContextSchema::StatusMessage (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::xercesc::DOMInputSource& i,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      return ::middleware::lxacmlContextSchema::StatusMessage (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::xercesc::DOMInputSource& i,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::StatusMessage (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::xercesc::DOMInputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
      {
        throw ::xsd::cxx::tree::parsing< wchar_t > ();
      }

      return ::middleware::lxacmlContextSchema::StatusMessage (
        static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< wchar_t >&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        (f & ::xml_schema::flags::keep_dom) 
        ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
        : 0);

      const ::xsd::cxx::xml::dom::element< wchar_t > e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d.getDocumentElement ());

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::string > r (
        tfm.create< ::xml_schema::string > (
          L"StatusMessage",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          true,
          true,
          e,
          f,
          0));

      if (r.get () != 0)
      {
        if (f & ::xml_schema::flags::keep_dom) c.release ();
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        e.name (),
        e.namespace_ (),
        L"StatusMessage",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/serialization.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_serializer_plate< 0, wchar_t >
  type_serializer_plate_init;
}

namespace middleware
{
  namespace lxacmlContextSchema
  {
    void
    Request (::xercesc::DOMDocument& d,
             const ::middleware::lxacmlContextSchema::RequestType& s,
             ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlContextSchema::RequestType > (
        L"Request",
        L"http://www.qut.com/middleware/lxacmlContextSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Request (const ::middleware::lxacmlContextSchema::RequestType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlContextSchema::RequestType > (
            L"Request",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m,
            s,
            f));
        ::middleware::lxacmlContextSchema::Request (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Request (::xercesc::XMLFormatTarget& t,
             const ::middleware::lxacmlContextSchema::RequestType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Request (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Request (::xercesc::XMLFormatTarget& t,
             const ::middleware::lxacmlContextSchema::RequestType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Request (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Request (::xercesc::XMLFormatTarget& t,
             const ::middleware::lxacmlContextSchema::RequestType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Request (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Request (::std::ostream& o,
             const ::middleware::lxacmlContextSchema::RequestType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Request (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Request (::std::ostream& o,
             const ::middleware::lxacmlContextSchema::RequestType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Request (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Request (::std::ostream& o,
             const ::middleware::lxacmlContextSchema::RequestType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Request (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const RequestType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< RequestType::Subject::type > (
          L"Subject",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          true,
          true,
          e,
          i.Subject ());
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< RequestType::Resource::type > (
          L"Resource",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          true,
          true,
          e,
          i.Resource ());
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Action ())
        {
          tsm.serialize< RequestType::Action::type > (
            L"Action",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            true,
            true,
            e,
            *i.Action ());
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, RequestType >
    _xsd_RequestType_type_serializer_init (
      L"RequestType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");


    void
    Subject (::xercesc::DOMDocument& d,
             const ::middleware::lxacmlContextSchema::SubjectType& s,
             ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlContextSchema::SubjectType > (
        L"Subject",
        L"http://www.qut.com/middleware/lxacmlContextSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Subject (const ::middleware::lxacmlContextSchema::SubjectType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlContextSchema::SubjectType > (
            L"Subject",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m,
            s,
            f));
        ::middleware::lxacmlContextSchema::Subject (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Subject (::xercesc::XMLFormatTarget& t,
             const ::middleware::lxacmlContextSchema::SubjectType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Subject (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Subject (::xercesc::XMLFormatTarget& t,
             const ::middleware::lxacmlContextSchema::SubjectType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Subject (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Subject (::xercesc::XMLFormatTarget& t,
             const ::middleware::lxacmlContextSchema::SubjectType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Subject (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Subject (::std::ostream& o,
             const ::middleware::lxacmlContextSchema::SubjectType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Subject (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Subject (::std::ostream& o,
             const ::middleware::lxacmlContextSchema::SubjectType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xsd::cxx::xml::error_handler< wchar_t >& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Subject (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Subject (::std::ostream& o,
             const ::middleware::lxacmlContextSchema::SubjectType& s,
             const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::basic_string< wchar_t >& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Subject (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const SubjectType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< SubjectType::Attribute::type > (
          L"Attribute",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          true,
          true,
          e,
          i.Attribute ());
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SubjectType >
    _xsd_SubjectType_type_serializer_init (
      L"SubjectType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");


    void
    Resource (::xercesc::DOMDocument& d,
              const ::middleware::lxacmlContextSchema::ResourceType& s,
              ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlContextSchema::ResourceType > (
        L"Resource",
        L"http://www.qut.com/middleware/lxacmlContextSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Resource (const ::middleware::lxacmlContextSchema::ResourceType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlContextSchema::ResourceType > (
            L"Resource",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m,
            s,
            f));
        ::middleware::lxacmlContextSchema::Resource (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Resource (::xercesc::XMLFormatTarget& t,
              const ::middleware::lxacmlContextSchema::ResourceType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Resource (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Resource (::xercesc::XMLFormatTarget& t,
              const ::middleware::lxacmlContextSchema::ResourceType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Resource (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Resource (::xercesc::XMLFormatTarget& t,
              const ::middleware::lxacmlContextSchema::ResourceType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Resource (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Resource (::std::ostream& o,
              const ::middleware::lxacmlContextSchema::ResourceType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Resource (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Resource (::std::ostream& o,
              const ::middleware::lxacmlContextSchema::ResourceType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Resource (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Resource (::std::ostream& o,
              const ::middleware::lxacmlContextSchema::ResourceType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Resource (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ResourceType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< ResourceType::Attribute::type > (
          L"Attribute",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          true,
          true,
          e,
          i.Attribute ());
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ResourceType >
    _xsd_ResourceType_type_serializer_init (
      L"ResourceType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");


    void
    Action (::xercesc::DOMDocument& d,
            const ::middleware::lxacmlContextSchema::ActionType& s,
            ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlContextSchema::ActionType > (
        L"Action",
        L"http://www.qut.com/middleware/lxacmlContextSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Action (const ::middleware::lxacmlContextSchema::ActionType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlContextSchema::ActionType > (
            L"Action",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m,
            s,
            f));
        ::middleware::lxacmlContextSchema::Action (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Action (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlContextSchema::ActionType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Action (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Action (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlContextSchema::ActionType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Action (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Action (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlContextSchema::ActionType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Action (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Action (::std::ostream& o,
            const ::middleware::lxacmlContextSchema::ActionType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Action (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Action (::std::ostream& o,
            const ::middleware::lxacmlContextSchema::ActionType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Action (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Action (::std::ostream& o,
            const ::middleware::lxacmlContextSchema::ActionType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Action (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ActionType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< ActionType::Attribute::type > (
          L"Attribute",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          true,
          true,
          e,
          i.Attribute ());
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ActionType >
    _xsd_ActionType_type_serializer_init (
      L"ActionType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");


    void
    Attribute (::xercesc::DOMDocument& d,
               const ::middleware::lxacmlContextSchema::AttributeType& s,
               ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlContextSchema::AttributeType > (
        L"Attribute",
        L"http://www.qut.com/middleware/lxacmlContextSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Attribute (const ::middleware::lxacmlContextSchema::AttributeType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlContextSchema::AttributeType > (
            L"Attribute",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m,
            s,
            f));
        ::middleware::lxacmlContextSchema::Attribute (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Attribute (::xercesc::XMLFormatTarget& t,
               const ::middleware::lxacmlContextSchema::AttributeType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Attribute (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Attribute (::xercesc::XMLFormatTarget& t,
               const ::middleware::lxacmlContextSchema::AttributeType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Attribute (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Attribute (::xercesc::XMLFormatTarget& t,
               const ::middleware::lxacmlContextSchema::AttributeType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Attribute (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Attribute (::std::ostream& o,
               const ::middleware::lxacmlContextSchema::AttributeType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Attribute (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Attribute (::std::ostream& o,
               const ::middleware::lxacmlContextSchema::AttributeType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xsd::cxx::xml::error_handler< wchar_t >& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Attribute (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Attribute (::std::ostream& o,
               const ::middleware::lxacmlContextSchema::AttributeType& s,
               const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::basic_string< wchar_t >& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Attribute (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const AttributeType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< AttributeType::AttributeValue::type > (
          L"AttributeValue",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          true,
          true,
          e,
          i.AttributeValue ());
      }

      if (i.Issuer ())
      {
        ::xsd::cxx::xml::dom::attribute< wchar_t > a (
          L"Issuer",
          e);

        a.dom_attribute () << *i.Issuer ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AttributeType >
    _xsd_AttributeType_type_serializer_init (
      L"AttributeType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");


    void
    AttributeValue (::xercesc::DOMDocument& d,
                    const ::middleware::lxacmlContextSchema::AttributeValueType& s,
                    ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlContextSchema::AttributeValueType > (
        L"AttributeValue",
        L"http://www.qut.com/middleware/lxacmlContextSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeValue (const ::middleware::lxacmlContextSchema::AttributeValueType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlContextSchema::AttributeValueType > (
            L"AttributeValue",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m,
            s,
            f));
        ::middleware::lxacmlContextSchema::AttributeValue (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    AttributeValue (::xercesc::XMLFormatTarget& t,
                    const ::middleware::lxacmlContextSchema::AttributeValueType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::AttributeValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AttributeValue (::xercesc::XMLFormatTarget& t,
                    const ::middleware::lxacmlContextSchema::AttributeValueType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::AttributeValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeValue (::xercesc::XMLFormatTarget& t,
                    const ::middleware::lxacmlContextSchema::AttributeValueType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::AttributeValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeValue (::std::ostream& o,
                    const ::middleware::lxacmlContextSchema::AttributeValueType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::AttributeValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AttributeValue (::std::ostream& o,
                    const ::middleware::lxacmlContextSchema::AttributeValueType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xsd::cxx::xml::error_handler< wchar_t >& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::AttributeValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeValue (::std::ostream& o,
                    const ::middleware::lxacmlContextSchema::AttributeValueType& s,
                    const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::basic_string< wchar_t >& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::AttributeValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Response (::xercesc::DOMDocument& d,
              const ::middleware::lxacmlContextSchema::ResponseType& s,
              ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlContextSchema::ResponseType > (
        L"Response",
        L"http://www.qut.com/middleware/lxacmlContextSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Response (const ::middleware::lxacmlContextSchema::ResponseType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlContextSchema::ResponseType > (
            L"Response",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m,
            s,
            f));
        ::middleware::lxacmlContextSchema::Response (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Response (::xercesc::XMLFormatTarget& t,
              const ::middleware::lxacmlContextSchema::ResponseType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Response (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Response (::xercesc::XMLFormatTarget& t,
              const ::middleware::lxacmlContextSchema::ResponseType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Response (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Response (::xercesc::XMLFormatTarget& t,
              const ::middleware::lxacmlContextSchema::ResponseType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Response (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Response (::std::ostream& o,
              const ::middleware::lxacmlContextSchema::ResponseType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Response (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Response (::std::ostream& o,
              const ::middleware::lxacmlContextSchema::ResponseType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Response (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Response (::std::ostream& o,
              const ::middleware::lxacmlContextSchema::ResponseType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Response (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ResponseType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< ResponseType::Result::type > (
          L"Result",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          true,
          true,
          e,
          i.Result ());
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ResponseType >
    _xsd_ResponseType_type_serializer_init (
      L"ResponseType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");


    void
    Result (::xercesc::DOMDocument& d,
            const ::middleware::lxacmlContextSchema::ResultType& s,
            ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlContextSchema::ResultType > (
        L"Result",
        L"http://www.qut.com/middleware/lxacmlContextSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Result (const ::middleware::lxacmlContextSchema::ResultType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlContextSchema::ResultType > (
            L"Result",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m,
            s,
            f));
        ::middleware::lxacmlContextSchema::Result (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Result (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlContextSchema::ResultType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Result (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Result (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlContextSchema::ResultType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Result (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Result (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlContextSchema::ResultType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Result (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Result (::std::ostream& o,
            const ::middleware::lxacmlContextSchema::ResultType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Result (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Result (::std::ostream& o,
            const ::middleware::lxacmlContextSchema::ResultType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Result (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Result (::std::ostream& o,
            const ::middleware::lxacmlContextSchema::ResultType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Result (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const ResultType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< ResultType::Decision::type > (
          L"Decision",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          true,
          true,
          e,
          i.Decision ());
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Status ())
        {
          tsm.serialize< ResultType::Status::type > (
            L"Status",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            true,
            true,
            e,
            *i.Status ());
        }
      }

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize< ResultType::Obligations::type > (
          L"Obligations",
          L"http://www.qut.com/middleware/lxacmlSchema",
          true,
          true,
          e,
          i.Obligations ());
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ResultType >
    _xsd_ResultType_type_serializer_init (
      L"ResultType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");


    void
    Decision (::xercesc::DOMDocument& d,
              const ::middleware::lxacmlContextSchema::DecisionType& s,
              ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlContextSchema::DecisionType > (
        L"Decision",
        L"http://www.qut.com/middleware/lxacmlContextSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Decision (const ::middleware::lxacmlContextSchema::DecisionType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlContextSchema::DecisionType > (
            L"Decision",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m,
            s,
            f));
        ::middleware::lxacmlContextSchema::Decision (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Decision (::xercesc::XMLFormatTarget& t,
              const ::middleware::lxacmlContextSchema::DecisionType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Decision (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Decision (::xercesc::XMLFormatTarget& t,
              const ::middleware::lxacmlContextSchema::DecisionType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Decision (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Decision (::xercesc::XMLFormatTarget& t,
              const ::middleware::lxacmlContextSchema::DecisionType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Decision (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Decision (::std::ostream& o,
              const ::middleware::lxacmlContextSchema::DecisionType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Decision (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Decision (::std::ostream& o,
              const ::middleware::lxacmlContextSchema::DecisionType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xsd::cxx::xml::error_handler< wchar_t >& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Decision (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Decision (::std::ostream& o,
              const ::middleware::lxacmlContextSchema::DecisionType& s,
              const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::basic_string< wchar_t >& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Decision (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                DecisionType i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,
                DecisionType i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >& l,
                DecisionType i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DecisionType >
    _xsd_DecisionType_type_serializer_init (
      L"DecisionType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");


    void
    Status (::xercesc::DOMDocument& d,
            const ::middleware::lxacmlContextSchema::StatusType& s,
            ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::middleware::lxacmlContextSchema::StatusType > (
        L"Status",
        L"http://www.qut.com/middleware/lxacmlContextSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Status (const ::middleware::lxacmlContextSchema::StatusType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::middleware::lxacmlContextSchema::StatusType > (
            L"Status",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m,
            s,
            f));
        ::middleware::lxacmlContextSchema::Status (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    Status (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlContextSchema::StatusType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Status (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Status (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlContextSchema::StatusType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Status (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Status (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlContextSchema::StatusType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Status (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Status (::std::ostream& o,
            const ::middleware::lxacmlContextSchema::StatusType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Status (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Status (::std::ostream& o,
            const ::middleware::lxacmlContextSchema::StatusType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xsd::cxx::xml::error_handler< wchar_t >& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Status (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Status (::std::ostream& o,
            const ::middleware::lxacmlContextSchema::StatusType& s,
            const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::basic_string< wchar_t >& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Status (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e,
                const StatusType& i)
    {
      while (::xercesc::DOMNode* n = e.getFirstChild ())
        e.removeChild (n);

      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.StatusMessage ())
        {
          tsm.serialize< StatusType::StatusMessage::type > (
            L"StatusMessage",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            true,
            true,
            e,
            *i.StatusMessage ());
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, StatusType >
    _xsd_StatusType_type_serializer_init (
      L"StatusType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");


    void
    StatusMessage (::xercesc::DOMDocument& d,
                   const ::xml_schema::string& s,
                   ::xml_schema::flags)
    {
      ::xsd::cxx::xml::dom::element< wchar_t > e (*d.getDocumentElement ());

      ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

      tsm.serialize< ::xml_schema::string > (
        L"StatusMessage",
        L"http://www.qut.com/middleware/lxacmlContextSchema",
        e,
        s);
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    StatusMessage (const ::xml_schema::string& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
          tsm.serialize< ::xml_schema::string > (
            L"StatusMessage",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m,
            s,
            f));
        ::middleware::lxacmlContextSchema::StatusMessage (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    StatusMessage (::xercesc::XMLFormatTarget& t,
                   const ::xml_schema::string& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::StatusMessage (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    StatusMessage (::xercesc::XMLFormatTarget& t,
                   const ::xml_schema::string& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::StatusMessage (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    StatusMessage (::xercesc::XMLFormatTarget& t,
                   const ::xml_schema::string& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xercesc::DOMErrorHandler& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::StatusMessage (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    StatusMessage (::std::ostream& o,
                   const ::xml_schema::string& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::StatusMessage (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    StatusMessage (::std::ostream& o,
                   const ::xml_schema::string& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xsd::cxx::xml::error_handler< wchar_t >& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::StatusMessage (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    StatusMessage (::std::ostream& o,
                   const ::xml_schema::string& s,
                   const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >& m,
                   ::xercesc::DOMErrorHandler& h,
                   const ::std::basic_string< wchar_t >& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::StatusMessage (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

