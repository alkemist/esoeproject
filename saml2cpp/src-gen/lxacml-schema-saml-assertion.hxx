// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

#ifndef LXACML_SCHEMA_SAML_ASSERTION_HXX
#define LXACML_SCHEMA_SAML_ASSERTION_HXX

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 2030100L)
#error XSD runtime version mismatch
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include "xsd/xml-schema.hxx"

// Forward declarations.
//
namespace middleware
{
  namespace lxacmlSAMLAssertionSchema
  {
    class LXACMLAuthzDecisionStatementType;
    class LXACMLPolicyStatementType;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include "saml-schema-assertion-2.0.hxx"

#include "saml-schema-protocol-2.0.hxx"

#include "lxacml-schema.hxx"

#include "lxacml-schema-context.hxx"

namespace middleware
{
  namespace lxacmlSAMLAssertionSchema
  {
    class LXACMLAuthzDecisionStatementType: public ::saml2::assertion::StatementAbstractType
    {
      public:

      struct _xsd_LXACMLAuthzDecisionStatementType
      {
        typedef ::saml2::assertion::StatementAbstractType base_;
      };

      // Response
      // 
      public:
      struct Response
      {
        typedef ::middleware::lxacmlContextSchema::ResponseType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
      };

      const Response::type&
      Response () const;

      Response::type&
      Response ();

      void
      Response (const Response::type&);

      void
      Response (::std::auto_ptr< Response::type >);

      // Request
      // 
      public:
      struct Request
      {
        typedef ::middleware::lxacmlContextSchema::RequestType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::optional< type > container;
      };

      const Request::container&
      Request () const;

      Request::container&
      Request ();

      void
      Request (const Request::type&);

      void
      Request (const Request::container&);

      void
      Request (::std::auto_ptr< Request::type >);

      // Constructors.
      //
      public:
      LXACMLAuthzDecisionStatementType ();

      LXACMLAuthzDecisionStatementType (const Response::type&);

      LXACMLAuthzDecisionStatementType (const ::xercesc::DOMElement&,
                                        ::xml_schema::flags = 0,
                                        ::xml_schema::type* = 0);

      LXACMLAuthzDecisionStatementType (const LXACMLAuthzDecisionStatementType&,
                                        ::xml_schema::flags = 0,
                                        ::xml_schema::type* = 0);

      virtual LXACMLAuthzDecisionStatementType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::one< Response::type > _xsd_Response_;
      ::xsd::cxx::tree::optional< Request::type > _xsd_Request_;
    };

    class LXACMLPolicyStatementType: public ::saml2::assertion::StatementAbstractType
    {
      public:

      struct _xsd_LXACMLPolicyStatementType
      {
        typedef ::saml2::assertion::StatementAbstractType base_;
      };

      // Policy
      // 
      public:
      struct Policy
      {
        typedef ::middleware::lxacmlSchema::PolicyType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const Policy::container&
      Policy () const;

      Policy::container&
      Policy ();

      void
      Policy (const Policy::container&);

      // PolicySet
      // 
      public:
      struct PolicySet
      {
        typedef ::middleware::lxacmlSchema::PolicySetType type;
        typedef ::xsd::cxx::tree::traits< type, wchar_t > traits;
        typedef ::xsd::cxx::tree::sequence< type > container;
        typedef container::iterator iterator;
        typedef container::const_iterator const_iterator;
      };

      const PolicySet::container&
      PolicySet () const;

      PolicySet::container&
      PolicySet ();

      void
      PolicySet (const PolicySet::container&);

      // Constructors.
      //
      public:
      LXACMLPolicyStatementType ();

      LXACMLPolicyStatementType (const ::xercesc::DOMElement&,
                                 ::xml_schema::flags = 0,
                                 ::xml_schema::type* = 0);

      LXACMLPolicyStatementType (const LXACMLPolicyStatementType&,
                                 ::xml_schema::flags = 0,
                                 ::xml_schema::type* = 0);

      virtual LXACMLPolicyStatementType*
      _clone (::xml_schema::flags = 0,
              ::xml_schema::type* = 0) const;

      // Implementation.
      //
      private:
      void
      parse (const ::xercesc::DOMElement&, ::xml_schema::flags);

      ::xsd::cxx::tree::sequence< Policy::type > _xsd_Policy_;
      ::xsd::cxx::tree::sequence< PolicySet::type > _xsd_PolicySet_;
    };
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMInputSource.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace middleware
{
  namespace lxacmlSAMLAssertionSchema
  {
    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::std::basic_string< wchar_t >&,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::std::basic_string< wchar_t >&,
                                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::std::basic_string< wchar_t >&,
                                  ::xercesc::DOMErrorHandler&,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::std::istream&,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::std::istream&,
                                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::std::istream&,
                                  ::xercesc::DOMErrorHandler&,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::std::istream&,
                                  const ::std::basic_string< wchar_t >& id,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::std::istream&,
                                  const ::std::basic_string< wchar_t >& id,
                                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::std::istream&,
                                  const ::std::basic_string< wchar_t >& id,
                                  ::xercesc::DOMErrorHandler&,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::xercesc::DOMInputSource&,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::xercesc::DOMInputSource&,
                                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::xercesc::DOMInputSource&,
                                  ::xercesc::DOMErrorHandler&,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::xercesc::DOMDocument&,
                                  ::xml_schema::flags = 0,
                                  const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::std::basic_string< wchar_t >&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::std::basic_string< wchar_t >&,
                           ::xsd::cxx::xml::error_handler< wchar_t >&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::std::basic_string< wchar_t >&,
                           ::xercesc::DOMErrorHandler&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::std::istream&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::std::istream&,
                           ::xsd::cxx::xml::error_handler< wchar_t >&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::std::istream&,
                           ::xercesc::DOMErrorHandler&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::std::istream&,
                           const ::std::basic_string< wchar_t >& id,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::std::istream&,
                           const ::std::basic_string< wchar_t >& id,
                           ::xsd::cxx::xml::error_handler< wchar_t >&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::std::istream&,
                           const ::std::basic_string< wchar_t >& id,
                           ::xercesc::DOMErrorHandler&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::xercesc::DOMInputSource&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::xercesc::DOMInputSource&,
                           ::xsd::cxx::xml::error_handler< wchar_t >&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::xercesc::DOMInputSource&,
                           ::xercesc::DOMErrorHandler&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());


    // Read from DOM.
    //

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::xercesc::DOMDocument&,
                           ::xml_schema::flags = 0,
                           const ::xsd::cxx::tree::properties< wchar_t >& = ::xsd::cxx::tree::properties< wchar_t > ());
  }
}

#include <iosfwd> // std::ostream&

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace middleware
{
  namespace lxacmlSAMLAssertionSchema
  {
    // Serialize to an existing DOM instance.
    //
    void
    LXACMLAuthzDecisionStatement (::xercesc::DOMDocument&,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType&,
                                  ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    LXACMLAuthzDecisionStatement (const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType&, 
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                  ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    LXACMLAuthzDecisionStatement (::xercesc::XMLFormatTarget&,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType&, 
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                                  ::xml_schema::flags = 0);


    void
    LXACMLAuthzDecisionStatement (::xercesc::XMLFormatTarget&,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType&, 
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                                  ::xml_schema::flags = 0);

    void
    LXACMLAuthzDecisionStatement (::xercesc::XMLFormatTarget&,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType&, 
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                  ::xercesc::DOMErrorHandler&,
                                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                                  ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    LXACMLAuthzDecisionStatement (::std::ostream&,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType&, 
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                                  ::xml_schema::flags = 0);


    void
    LXACMLAuthzDecisionStatement (::std::ostream&,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType&, 
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                  ::xsd::cxx::xml::error_handler< wchar_t >&,
                                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                                  ::xml_schema::flags = 0);

    void
    LXACMLAuthzDecisionStatement (::std::ostream&,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType&, 
                                  const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                                  ::xercesc::DOMErrorHandler&,
                                  const ::std::basic_string< wchar_t >& = L"UTF-8",
                                  ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const LXACMLAuthzDecisionStatementType&);

    // Serialize to an existing DOM instance.
    //
    void
    LXACMLPolicyStatement (::xercesc::DOMDocument&,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType&,
                           ::xml_schema::flags = 0);


    // Serialize to a new DOM instance.
    //
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    LXACMLPolicyStatement (const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           ::xml_schema::flags = 0);


    // Serialize to XMLFormatTarget.
    //
    void
    LXACMLPolicyStatement (::xercesc::XMLFormatTarget&,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           const ::std::basic_string< wchar_t >& = L"UTF-8",
                           ::xml_schema::flags = 0);


    void
    LXACMLPolicyStatement (::xercesc::XMLFormatTarget&,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           ::xsd::cxx::xml::error_handler< wchar_t >&,
                           const ::std::basic_string< wchar_t >& = L"UTF-8",
                           ::xml_schema::flags = 0);

    void
    LXACMLPolicyStatement (::xercesc::XMLFormatTarget&,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           ::xercesc::DOMErrorHandler&,
                           const ::std::basic_string< wchar_t >& = L"UTF-8",
                           ::xml_schema::flags = 0);


    // Serialize to std::ostream.
    //
    void
    LXACMLPolicyStatement (::std::ostream&,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           const ::std::basic_string< wchar_t >& = L"UTF-8",
                           ::xml_schema::flags = 0);


    void
    LXACMLPolicyStatement (::std::ostream&,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           ::xsd::cxx::xml::error_handler< wchar_t >&,
                           const ::std::basic_string< wchar_t >& = L"UTF-8",
                           ::xml_schema::flags = 0);

    void
    LXACMLPolicyStatement (::std::ostream&,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType&, 
                           const ::xsd::cxx::xml::dom::namespace_infomap< wchar_t >&,
                           ::xercesc::DOMErrorHandler&,
                           const ::std::basic_string< wchar_t >& = L"UTF-8",
                           ::xml_schema::flags = 0);


    void
    operator<< (::xercesc::DOMElement&,
                const LXACMLPolicyStatementType&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // LXACML_SCHEMA_SAML_ASSERTION_HXX
