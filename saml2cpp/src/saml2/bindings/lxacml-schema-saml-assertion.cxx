// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "saml2/bindings/lxacml-schema-saml-assertion.hxx"

namespace middleware
{
  namespace lxacmlSAMLAssertionSchema
  {
    // LXACMLAuthzDecisionStatementType
    // 

    const LXACMLAuthzDecisionStatementType::Response_type& LXACMLAuthzDecisionStatementType::
    Response () const
    {
      return this->Response_.get ();
    }

    LXACMLAuthzDecisionStatementType::Response_type& LXACMLAuthzDecisionStatementType::
    Response ()
    {
      return this->Response_.get ();
    }

    void LXACMLAuthzDecisionStatementType::
    Response (const Response_type& Response)
    {
      this->Response_.set (Response);
    }

    void LXACMLAuthzDecisionStatementType::
    Response (::std::auto_ptr< Response_type > Response)
    {
      this->Response_.set (Response);
    }

    const LXACMLAuthzDecisionStatementType::Request_optional& LXACMLAuthzDecisionStatementType::
    Request () const
    {
      return this->Request_;
    }

    LXACMLAuthzDecisionStatementType::Request_optional& LXACMLAuthzDecisionStatementType::
    Request ()
    {
      return this->Request_;
    }

    void LXACMLAuthzDecisionStatementType::
    Request (const Request_type& Request)
    {
      this->Request_.set (Request);
    }

    void LXACMLAuthzDecisionStatementType::
    Request (const Request_optional& Request)
    {
      this->Request_ = Request;
    }

    void LXACMLAuthzDecisionStatementType::
    Request (::std::auto_ptr< Request_type > Request)
    {
      this->Request_.set (Request);
    }


    // LXACMLPolicyStatementType
    // 

    const LXACMLPolicyStatementType::Policy_sequence& LXACMLPolicyStatementType::
    Policy () const
    {
      return this->Policy_;
    }

    LXACMLPolicyStatementType::Policy_sequence& LXACMLPolicyStatementType::
    Policy ()
    {
      return this->Policy_;
    }

    void LXACMLPolicyStatementType::
    Policy (const Policy_sequence& Policy)
    {
      this->Policy_ = Policy;
    }

    const LXACMLPolicyStatementType::PolicySet_sequence& LXACMLPolicyStatementType::
    PolicySet () const
    {
      return this->PolicySet_;
    }

    LXACMLPolicyStatementType::PolicySet_sequence& LXACMLPolicyStatementType::
    PolicySet ()
    {
      return this->PolicySet_;
    }

    void LXACMLPolicyStatementType::
    PolicySet (const PolicySet_sequence& PolicySet)
    {
      this->PolicySet_ = PolicySet;
    }
  }
}

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_factory_plate< 0, wchar_t >
  type_factory_plate_init;
}

namespace middleware
{
  namespace lxacmlSAMLAssertionSchema
  {
    // LXACMLAuthzDecisionStatementType
    //

    LXACMLAuthzDecisionStatementType::
    LXACMLAuthzDecisionStatementType ()
    : ::saml2::assertion::StatementAbstractType (),
      Response_ (::xml_schema::flags (), this),
      Request_ (::xml_schema::flags (), this)
    {
    }

    LXACMLAuthzDecisionStatementType::
    LXACMLAuthzDecisionStatementType (const Response_type& Response)
    : ::saml2::assertion::StatementAbstractType (),
      Response_ (Response, ::xml_schema::flags (), this),
      Request_ (::xml_schema::flags (), this)
    {
    }

    LXACMLAuthzDecisionStatementType::
    LXACMLAuthzDecisionStatementType (const LXACMLAuthzDecisionStatementType& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::type* c)
    : ::saml2::assertion::StatementAbstractType (x, f, c),
      Response_ (x.Response_, f, this),
      Request_ (x.Request_, f, this)
    {
    }

    LXACMLAuthzDecisionStatementType::
    LXACMLAuthzDecisionStatementType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::type* c)
    : ::saml2::assertion::StatementAbstractType (e, f | ::xml_schema::flags::base, c),
      Response_ (f, this),
      Request_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e);
        this->parse (p, f);
      }
    }

    void LXACMLAuthzDecisionStatementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Response
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"Response",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              &::xsd::cxx::tree::factory_impl< Response_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Response_.present ())
            {
              ::std::auto_ptr< Response_type > r (
                dynamic_cast< Response_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Response (r);
              continue;
            }
          }
        }

        // Request
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"Request",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              &::xsd::cxx::tree::factory_impl< Request_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->Request ())
            {
              ::std::auto_ptr< Request_type > r (
                dynamic_cast< Request_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Request (r);
              continue;
            }
          }
        }

        break;
      }

      if (!Response_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Response",
          L"http://www.qut.com/middleware/lxacmlContextSchema");
      }
    }

    LXACMLAuthzDecisionStatementType* LXACMLAuthzDecisionStatementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new LXACMLAuthzDecisionStatementType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, LXACMLAuthzDecisionStatementType >
    _xsd_LXACMLAuthzDecisionStatementType_type_factory_init (
      L"LXACMLAuthzDecisionStatementType",
      L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema");


    // LXACMLPolicyStatementType
    //

    LXACMLPolicyStatementType::
    LXACMLPolicyStatementType ()
    : ::saml2::assertion::StatementAbstractType (),
      Policy_ (::xml_schema::flags (), this),
      PolicySet_ (::xml_schema::flags (), this)
    {
    }

    LXACMLPolicyStatementType::
    LXACMLPolicyStatementType (const LXACMLPolicyStatementType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::type* c)
    : ::saml2::assertion::StatementAbstractType (x, f, c),
      Policy_ (x.Policy_, f, this),
      PolicySet_ (x.PolicySet_, f, this)
    {
    }

    LXACMLPolicyStatementType::
    LXACMLPolicyStatementType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::type* c)
    : ::saml2::assertion::StatementAbstractType (e, f | ::xml_schema::flags::base, c),
      Policy_ (f, this),
      PolicySet_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e);
        this->parse (p, f);
      }
    }

    void LXACMLPolicyStatementType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Policy
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"Policy",
              L"http://www.qut.com/middleware/lxacmlSchema",
              &::xsd::cxx::tree::factory_impl< Policy_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< Policy_type > r (
              dynamic_cast< Policy_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->Policy ().push_back (r);
            continue;
          }
        }

        // PolicySet
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"PolicySet",
              L"http://www.qut.com/middleware/lxacmlSchema",
              &::xsd::cxx::tree::factory_impl< PolicySet_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< PolicySet_type > r (
              dynamic_cast< PolicySet_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->PolicySet ().push_back (r);
            continue;
          }
        }

        break;
      }
    }

    LXACMLPolicyStatementType* LXACMLPolicyStatementType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new LXACMLPolicyStatementType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, LXACMLPolicyStatementType >
    _xsd_LXACMLPolicyStatementType_type_factory_init (
      L"LXACMLPolicyStatementType",
      L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema");
  }
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace middleware
{
  namespace lxacmlSAMLAssertionSchema
  {
    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::std::wstring& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType > r (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::std::wstring& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType > r (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::std::wstring& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType > r (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::std::istream& is,
                                  const ::std::wstring& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::std::istream& is,
                                  const ::std::wstring& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::std::istream& is,
                                  const ::std::wstring& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::xercesc::DOMInputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType > r (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::xercesc::DOMInputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType > r (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::xercesc::DOMInputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType > r (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType > r (
          ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"LXACMLAuthzDecisionStatement",
          L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType > r (
          dynamic_cast< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"LXACMLAuthzDecisionStatement",
        L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::xercesc::DOMDocument* d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"LXACMLAuthzDecisionStatement",
          L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType > r (
          dynamic_cast< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"LXACMLAuthzDecisionStatement",
        L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::std::wstring& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType > r (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::std::wstring& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType > r (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::std::wstring& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType > r (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::std::istream& is,
                           const ::std::wstring& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (wrap, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::std::istream& is,
                           const ::std::wstring& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::std::istream& is,
                           const ::std::wstring& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (wrap, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::xercesc::DOMInputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType > r (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::xercesc::DOMInputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType > r (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::xercesc::DOMInputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType > r (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType > r (
          ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"LXACMLPolicyStatement",
          L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType > r (
          dynamic_cast< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"LXACMLPolicyStatement",
        L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::xercesc::DOMDocument* d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"LXACMLPolicyStatement",
          L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType > r (
          dynamic_cast< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"LXACMLPolicyStatement",
        L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema");
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_serializer_plate< 0, wchar_t >
  type_serializer_plate_init;
}

namespace middleware
{
  namespace lxacmlSAMLAssertionSchema
  {
    void
    LXACMLAuthzDecisionStatement (::std::ostream& o,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType& s,
                                  const ::xml_schema::namespace_infomap& m,
                                  const ::std::wstring& e,
                                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    LXACMLAuthzDecisionStatement (::std::ostream& o,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType& s,
                                  const ::xml_schema::namespace_infomap& m,
                                  ::xml_schema::error_handler& h,
                                  const ::std::wstring& e,
                                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLAuthzDecisionStatement (::std::ostream& o,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType& s,
                                  const ::xml_schema::namespace_infomap& m,
                                  ::xercesc::DOMErrorHandler& h,
                                  const ::std::wstring& e,
                                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLAuthzDecisionStatement (::xercesc::XMLFormatTarget& t,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType& s,
                                  const ::xml_schema::namespace_infomap& m,
                                  const ::std::wstring& e,
                                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    LXACMLAuthzDecisionStatement (::xercesc::XMLFormatTarget& t,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType& s,
                                  const ::xml_schema::namespace_infomap& m,
                                  ::xml_schema::error_handler& h,
                                  const ::std::wstring& e,
                                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLAuthzDecisionStatement (::xercesc::XMLFormatTarget& t,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType& s,
                                  const ::xml_schema::namespace_infomap& m,
                                  ::xercesc::DOMErrorHandler& h,
                                  const ::std::wstring& e,
                                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLAuthzDecisionStatement (::xercesc::DOMDocument& d,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType& s,
                                  ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType) == typeid (s))
      {
        if (n.name () == L"LXACMLAuthzDecisionStatement" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"LXACMLAuthzDecisionStatement",
            L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"LXACMLAuthzDecisionStatement",
          L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    LXACMLAuthzDecisionStatement (const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType& s,
                                  const ::xml_schema::namespace_infomap& m,
                                  ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"LXACMLAuthzDecisionStatement",
            L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"LXACMLAuthzDecisionStatement",
            L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema",
            m, s, f);
        }

        ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatement (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const LXACMLAuthzDecisionStatementType& i)
    {
      e << static_cast< const ::saml2::assertion::StatementAbstractType& > (i);

      // Response
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const LXACMLAuthzDecisionStatementType::Response_type& x (i.Response ());
        if (typeid (LXACMLAuthzDecisionStatementType::Response_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"Response",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"Response",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            true, true, e, x);
      }

      // Request
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Request ())
        {
          const LXACMLAuthzDecisionStatementType::Request_type& x (*i.Request ());
          if (typeid (LXACMLAuthzDecisionStatementType::Request_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Request",
                L"http://www.qut.com/middleware/lxacmlContextSchema",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"Request",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              true, true, e, x);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, LXACMLAuthzDecisionStatementType >
    _xsd_LXACMLAuthzDecisionStatementType_type_serializer_init (
      L"LXACMLAuthzDecisionStatementType",
      L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema");


    void
    LXACMLPolicyStatement (::std::ostream& o,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::wstring& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    LXACMLPolicyStatement (::std::ostream& o,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::error_handler& h,
                           const ::std::wstring& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLPolicyStatement (::std::ostream& o,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xercesc::DOMErrorHandler& h,
                           const ::std::wstring& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLPolicyStatement (::xercesc::XMLFormatTarget& t,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::wstring& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    LXACMLPolicyStatement (::xercesc::XMLFormatTarget& t,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::error_handler& h,
                           const ::std::wstring& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLPolicyStatement (::xercesc::XMLFormatTarget& t,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xercesc::DOMErrorHandler& h,
                           const ::std::wstring& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLPolicyStatement (::xercesc::DOMDocument& d,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType& s,
                           ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType) == typeid (s))
      {
        if (n.name () == L"LXACMLPolicyStatement" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"LXACMLPolicyStatement",
            L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"LXACMLPolicyStatement",
          L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    LXACMLPolicyStatement (const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"LXACMLPolicyStatement",
            L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"LXACMLPolicyStatement",
            L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema",
            m, s, f);
        }

        ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatement (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const LXACMLPolicyStatementType& i)
    {
      e << static_cast< const ::saml2::assertion::StatementAbstractType& > (i);

      // Policy
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (LXACMLPolicyStatementType::Policy_const_iterator
             b (i.Policy ().begin ()), n (i.Policy ().end ());
             b != n; ++b)
        {
          if (typeid (LXACMLPolicyStatementType::Policy_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Policy",
                L"http://www.qut.com/middleware/lxacmlSchema",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"Policy",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true, true, e, *b);
        }
      }

      // PolicySet
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (LXACMLPolicyStatementType::PolicySet_const_iterator
             b (i.PolicySet ().begin ()), n (i.PolicySet ().end ());
             b != n; ++b)
        {
          if (typeid (LXACMLPolicyStatementType::PolicySet_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"PolicySet",
                L"http://www.qut.com/middleware/lxacmlSchema",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"PolicySet",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true, true, e, *b);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, LXACMLPolicyStatementType >
    _xsd_LXACMLPolicyStatementType_type_serializer_init (
      L"LXACMLPolicyStatementType",
      L"http://www.qut.com/middleware/lxacmlSAMLAssertionSchema");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

