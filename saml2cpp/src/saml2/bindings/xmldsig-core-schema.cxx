// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License. You may obtain a copy of 
// the License at 
// 
//   http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
// License for the specific language governing permissions and limitations under 
// the License.

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "saml2/bindings/xmldsig-core-schema.hxx"

namespace w3
{
  namespace xmldsig
  {
    // CryptoBinary
    // 


    // SignatureType
    // 

    const SignatureType::SignedInfo_type& SignatureType::
    SignedInfo () const
    {
      return this->SignedInfo_.get ();
    }

    SignatureType::SignedInfo_type& SignatureType::
    SignedInfo ()
    {
      return this->SignedInfo_.get ();
    }

    void SignatureType::
    SignedInfo (const SignedInfo_type& SignedInfo)
    {
      this->SignedInfo_.set (SignedInfo);
    }

    void SignatureType::
    SignedInfo (::std::auto_ptr< SignedInfo_type > SignedInfo)
    {
      this->SignedInfo_.set (SignedInfo);
    }

    const SignatureType::SignatureValue_type& SignatureType::
    SignatureValue () const
    {
      return this->SignatureValue_.get ();
    }

    SignatureType::SignatureValue_type& SignatureType::
    SignatureValue ()
    {
      return this->SignatureValue_.get ();
    }

    void SignatureType::
    SignatureValue (const SignatureValue_type& SignatureValue)
    {
      this->SignatureValue_.set (SignatureValue);
    }

    void SignatureType::
    SignatureValue (::std::auto_ptr< SignatureValue_type > SignatureValue)
    {
      this->SignatureValue_.set (SignatureValue);
    }

    const SignatureType::KeyInfo_optional& SignatureType::
    KeyInfo () const
    {
      return this->KeyInfo_;
    }

    SignatureType::KeyInfo_optional& SignatureType::
    KeyInfo ()
    {
      return this->KeyInfo_;
    }

    void SignatureType::
    KeyInfo (const KeyInfo_type& KeyInfo)
    {
      this->KeyInfo_.set (KeyInfo);
    }

    void SignatureType::
    KeyInfo (const KeyInfo_optional& KeyInfo)
    {
      this->KeyInfo_ = KeyInfo;
    }

    void SignatureType::
    KeyInfo (::std::auto_ptr< KeyInfo_type > KeyInfo)
    {
      this->KeyInfo_.set (KeyInfo);
    }

    const SignatureType::Object_sequence& SignatureType::
    Object () const
    {
      return this->Object_;
    }

    SignatureType::Object_sequence& SignatureType::
    Object ()
    {
      return this->Object_;
    }

    void SignatureType::
    Object (const Object_sequence& Object)
    {
      this->Object_ = Object;
    }

    const SignatureType::Id_optional& SignatureType::
    Id () const
    {
      return this->Id_;
    }

    SignatureType::Id_optional& SignatureType::
    Id ()
    {
      return this->Id_;
    }

    void SignatureType::
    Id (const Id_type& Id)
    {
      this->Id_.set (Id);
    }

    void SignatureType::
    Id (const Id_optional& Id)
    {
      this->Id_ = Id;
    }

    void SignatureType::
    Id (::std::auto_ptr< Id_type > Id)
    {
      this->Id_.set (Id);
    }


    // SignatureValueType
    // 

    const SignatureValueType::Id_optional& SignatureValueType::
    Id () const
    {
      return this->Id_;
    }

    SignatureValueType::Id_optional& SignatureValueType::
    Id ()
    {
      return this->Id_;
    }

    void SignatureValueType::
    Id (const Id_type& Id)
    {
      this->Id_.set (Id);
    }

    void SignatureValueType::
    Id (const Id_optional& Id)
    {
      this->Id_ = Id;
    }

    void SignatureValueType::
    Id (::std::auto_ptr< Id_type > Id)
    {
      this->Id_.set (Id);
    }


    // SignedInfoType
    // 

    const SignedInfoType::CanonicalizationMethod_type& SignedInfoType::
    CanonicalizationMethod () const
    {
      return this->CanonicalizationMethod_.get ();
    }

    SignedInfoType::CanonicalizationMethod_type& SignedInfoType::
    CanonicalizationMethod ()
    {
      return this->CanonicalizationMethod_.get ();
    }

    void SignedInfoType::
    CanonicalizationMethod (const CanonicalizationMethod_type& CanonicalizationMethod)
    {
      this->CanonicalizationMethod_.set (CanonicalizationMethod);
    }

    void SignedInfoType::
    CanonicalizationMethod (::std::auto_ptr< CanonicalizationMethod_type > CanonicalizationMethod)
    {
      this->CanonicalizationMethod_.set (CanonicalizationMethod);
    }

    const SignedInfoType::SignatureMethod_type& SignedInfoType::
    SignatureMethod () const
    {
      return this->SignatureMethod_.get ();
    }

    SignedInfoType::SignatureMethod_type& SignedInfoType::
    SignatureMethod ()
    {
      return this->SignatureMethod_.get ();
    }

    void SignedInfoType::
    SignatureMethod (const SignatureMethod_type& SignatureMethod)
    {
      this->SignatureMethod_.set (SignatureMethod);
    }

    void SignedInfoType::
    SignatureMethod (::std::auto_ptr< SignatureMethod_type > SignatureMethod)
    {
      this->SignatureMethod_.set (SignatureMethod);
    }

    const SignedInfoType::Reference_sequence& SignedInfoType::
    Reference () const
    {
      return this->Reference_;
    }

    SignedInfoType::Reference_sequence& SignedInfoType::
    Reference ()
    {
      return this->Reference_;
    }

    void SignedInfoType::
    Reference (const Reference_sequence& Reference)
    {
      this->Reference_ = Reference;
    }

    const SignedInfoType::Id_optional& SignedInfoType::
    Id () const
    {
      return this->Id_;
    }

    SignedInfoType::Id_optional& SignedInfoType::
    Id ()
    {
      return this->Id_;
    }

    void SignedInfoType::
    Id (const Id_type& Id)
    {
      this->Id_.set (Id);
    }

    void SignedInfoType::
    Id (const Id_optional& Id)
    {
      this->Id_ = Id;
    }

    void SignedInfoType::
    Id (::std::auto_ptr< Id_type > Id)
    {
      this->Id_.set (Id);
    }


    // CanonicalizationMethodType
    // 

    const CanonicalizationMethodType::any_sequence& CanonicalizationMethodType::
    any () const
    {
      return this->any_;
    }

    CanonicalizationMethodType::any_sequence& CanonicalizationMethodType::
    any ()
    {
      return this->any_;
    }

    void CanonicalizationMethodType::
    any (const any_sequence& any)
    {
      this->any_ = any;
    }

    const CanonicalizationMethodType::Algorithm_type& CanonicalizationMethodType::
    Algorithm () const
    {
      return this->Algorithm_.get ();
    }

    CanonicalizationMethodType::Algorithm_type& CanonicalizationMethodType::
    Algorithm ()
    {
      return this->Algorithm_.get ();
    }

    void CanonicalizationMethodType::
    Algorithm (const Algorithm_type& Algorithm)
    {
      this->Algorithm_.set (Algorithm);
    }

    void CanonicalizationMethodType::
    Algorithm (::std::auto_ptr< Algorithm_type > Algorithm)
    {
      this->Algorithm_.set (Algorithm);
    }

    const ::xercesc::DOMDocument& CanonicalizationMethodType::
    dom_document () const
    {
      return *dom_document_;
    }

    ::xercesc::DOMDocument& CanonicalizationMethodType::
    dom_document ()
    {
      return *dom_document_;
    }


    // SignatureMethodType
    // 

    const SignatureMethodType::HMACOutputLength_optional& SignatureMethodType::
    HMACOutputLength () const
    {
      return this->HMACOutputLength_;
    }

    SignatureMethodType::HMACOutputLength_optional& SignatureMethodType::
    HMACOutputLength ()
    {
      return this->HMACOutputLength_;
    }

    void SignatureMethodType::
    HMACOutputLength (const HMACOutputLength_type& HMACOutputLength)
    {
      this->HMACOutputLength_.set (HMACOutputLength);
    }

    void SignatureMethodType::
    HMACOutputLength (const HMACOutputLength_optional& HMACOutputLength)
    {
      this->HMACOutputLength_ = HMACOutputLength;
    }

    void SignatureMethodType::
    HMACOutputLength (::std::auto_ptr< HMACOutputLength_type > HMACOutputLength)
    {
      this->HMACOutputLength_.set (HMACOutputLength);
    }

    const SignatureMethodType::any_sequence& SignatureMethodType::
    any () const
    {
      return this->any_;
    }

    SignatureMethodType::any_sequence& SignatureMethodType::
    any ()
    {
      return this->any_;
    }

    void SignatureMethodType::
    any (const any_sequence& any)
    {
      this->any_ = any;
    }

    const SignatureMethodType::Algorithm_type& SignatureMethodType::
    Algorithm () const
    {
      return this->Algorithm_.get ();
    }

    SignatureMethodType::Algorithm_type& SignatureMethodType::
    Algorithm ()
    {
      return this->Algorithm_.get ();
    }

    void SignatureMethodType::
    Algorithm (const Algorithm_type& Algorithm)
    {
      this->Algorithm_.set (Algorithm);
    }

    void SignatureMethodType::
    Algorithm (::std::auto_ptr< Algorithm_type > Algorithm)
    {
      this->Algorithm_.set (Algorithm);
    }

    const ::xercesc::DOMDocument& SignatureMethodType::
    dom_document () const
    {
      return *dom_document_;
    }

    ::xercesc::DOMDocument& SignatureMethodType::
    dom_document ()
    {
      return *dom_document_;
    }


    // ReferenceType
    // 

    const ReferenceType::Transforms_optional& ReferenceType::
    Transforms () const
    {
      return this->Transforms_;
    }

    ReferenceType::Transforms_optional& ReferenceType::
    Transforms ()
    {
      return this->Transforms_;
    }

    void ReferenceType::
    Transforms (const Transforms_type& Transforms)
    {
      this->Transforms_.set (Transforms);
    }

    void ReferenceType::
    Transforms (const Transforms_optional& Transforms)
    {
      this->Transforms_ = Transforms;
    }

    void ReferenceType::
    Transforms (::std::auto_ptr< Transforms_type > Transforms)
    {
      this->Transforms_.set (Transforms);
    }

    const ReferenceType::DigestMethod_type& ReferenceType::
    DigestMethod () const
    {
      return this->DigestMethod_.get ();
    }

    ReferenceType::DigestMethod_type& ReferenceType::
    DigestMethod ()
    {
      return this->DigestMethod_.get ();
    }

    void ReferenceType::
    DigestMethod (const DigestMethod_type& DigestMethod)
    {
      this->DigestMethod_.set (DigestMethod);
    }

    void ReferenceType::
    DigestMethod (::std::auto_ptr< DigestMethod_type > DigestMethod)
    {
      this->DigestMethod_.set (DigestMethod);
    }

    const ReferenceType::DigestValue_type& ReferenceType::
    DigestValue () const
    {
      return this->DigestValue_.get ();
    }

    ReferenceType::DigestValue_type& ReferenceType::
    DigestValue ()
    {
      return this->DigestValue_.get ();
    }

    void ReferenceType::
    DigestValue (const DigestValue_type& DigestValue)
    {
      this->DigestValue_.set (DigestValue);
    }

    void ReferenceType::
    DigestValue (::std::auto_ptr< DigestValue_type > DigestValue)
    {
      this->DigestValue_.set (DigestValue);
    }

    const ReferenceType::Id_optional& ReferenceType::
    Id () const
    {
      return this->Id_;
    }

    ReferenceType::Id_optional& ReferenceType::
    Id ()
    {
      return this->Id_;
    }

    void ReferenceType::
    Id (const Id_type& Id)
    {
      this->Id_.set (Id);
    }

    void ReferenceType::
    Id (const Id_optional& Id)
    {
      this->Id_ = Id;
    }

    void ReferenceType::
    Id (::std::auto_ptr< Id_type > Id)
    {
      this->Id_.set (Id);
    }

    const ReferenceType::URI_optional& ReferenceType::
    URI () const
    {
      return this->URI_;
    }

    ReferenceType::URI_optional& ReferenceType::
    URI ()
    {
      return this->URI_;
    }

    void ReferenceType::
    URI (const URI_type& URI)
    {
      this->URI_.set (URI);
    }

    void ReferenceType::
    URI (const URI_optional& URI)
    {
      this->URI_ = URI;
    }

    void ReferenceType::
    URI (::std::auto_ptr< URI_type > URI)
    {
      this->URI_.set (URI);
    }

    const ReferenceType::Type_optional& ReferenceType::
    Type () const
    {
      return this->Type_;
    }

    ReferenceType::Type_optional& ReferenceType::
    Type ()
    {
      return this->Type_;
    }

    void ReferenceType::
    Type (const Type_type& Type)
    {
      this->Type_.set (Type);
    }

    void ReferenceType::
    Type (const Type_optional& Type)
    {
      this->Type_ = Type;
    }

    void ReferenceType::
    Type (::std::auto_ptr< Type_type > Type)
    {
      this->Type_.set (Type);
    }


    // TransformsType
    // 

    const TransformsType::Transform_sequence& TransformsType::
    Transform () const
    {
      return this->Transform_;
    }

    TransformsType::Transform_sequence& TransformsType::
    Transform ()
    {
      return this->Transform_;
    }

    void TransformsType::
    Transform (const Transform_sequence& Transform)
    {
      this->Transform_ = Transform;
    }


    // TransformType
    // 

    const TransformType::any_sequence& TransformType::
    any () const
    {
      return this->any_;
    }

    TransformType::any_sequence& TransformType::
    any ()
    {
      return this->any_;
    }

    void TransformType::
    any (const any_sequence& any)
    {
      this->any_ = any;
    }

    const TransformType::XPath_sequence& TransformType::
    XPath () const
    {
      return this->XPath_;
    }

    TransformType::XPath_sequence& TransformType::
    XPath ()
    {
      return this->XPath_;
    }

    void TransformType::
    XPath (const XPath_sequence& XPath)
    {
      this->XPath_ = XPath;
    }

    const TransformType::Algorithm_type& TransformType::
    Algorithm () const
    {
      return this->Algorithm_.get ();
    }

    TransformType::Algorithm_type& TransformType::
    Algorithm ()
    {
      return this->Algorithm_.get ();
    }

    void TransformType::
    Algorithm (const Algorithm_type& Algorithm)
    {
      this->Algorithm_.set (Algorithm);
    }

    void TransformType::
    Algorithm (::std::auto_ptr< Algorithm_type > Algorithm)
    {
      this->Algorithm_.set (Algorithm);
    }

    const ::xercesc::DOMDocument& TransformType::
    dom_document () const
    {
      return *dom_document_;
    }

    ::xercesc::DOMDocument& TransformType::
    dom_document ()
    {
      return *dom_document_;
    }


    // DigestMethodType
    // 

    const DigestMethodType::any_sequence& DigestMethodType::
    any () const
    {
      return this->any_;
    }

    DigestMethodType::any_sequence& DigestMethodType::
    any ()
    {
      return this->any_;
    }

    void DigestMethodType::
    any (const any_sequence& any)
    {
      this->any_ = any;
    }

    const DigestMethodType::Algorithm_type& DigestMethodType::
    Algorithm () const
    {
      return this->Algorithm_.get ();
    }

    DigestMethodType::Algorithm_type& DigestMethodType::
    Algorithm ()
    {
      return this->Algorithm_.get ();
    }

    void DigestMethodType::
    Algorithm (const Algorithm_type& Algorithm)
    {
      this->Algorithm_.set (Algorithm);
    }

    void DigestMethodType::
    Algorithm (::std::auto_ptr< Algorithm_type > Algorithm)
    {
      this->Algorithm_.set (Algorithm);
    }

    const ::xercesc::DOMDocument& DigestMethodType::
    dom_document () const
    {
      return *dom_document_;
    }

    ::xercesc::DOMDocument& DigestMethodType::
    dom_document ()
    {
      return *dom_document_;
    }


    // DigestValueType
    // 


    // KeyInfoType
    // 

    const KeyInfoType::KeyName_sequence& KeyInfoType::
    KeyName () const
    {
      return this->KeyName_;
    }

    KeyInfoType::KeyName_sequence& KeyInfoType::
    KeyName ()
    {
      return this->KeyName_;
    }

    void KeyInfoType::
    KeyName (const KeyName_sequence& KeyName)
    {
      this->KeyName_ = KeyName;
    }

    const KeyInfoType::KeyValue_sequence& KeyInfoType::
    KeyValue () const
    {
      return this->KeyValue_;
    }

    KeyInfoType::KeyValue_sequence& KeyInfoType::
    KeyValue ()
    {
      return this->KeyValue_;
    }

    void KeyInfoType::
    KeyValue (const KeyValue_sequence& KeyValue)
    {
      this->KeyValue_ = KeyValue;
    }

    const KeyInfoType::RetrievalMethod_sequence& KeyInfoType::
    RetrievalMethod () const
    {
      return this->RetrievalMethod_;
    }

    KeyInfoType::RetrievalMethod_sequence& KeyInfoType::
    RetrievalMethod ()
    {
      return this->RetrievalMethod_;
    }

    void KeyInfoType::
    RetrievalMethod (const RetrievalMethod_sequence& RetrievalMethod)
    {
      this->RetrievalMethod_ = RetrievalMethod;
    }

    const KeyInfoType::X509Data_sequence& KeyInfoType::
    X509Data () const
    {
      return this->X509Data_;
    }

    KeyInfoType::X509Data_sequence& KeyInfoType::
    X509Data ()
    {
      return this->X509Data_;
    }

    void KeyInfoType::
    X509Data (const X509Data_sequence& X509Data)
    {
      this->X509Data_ = X509Data;
    }

    const KeyInfoType::PGPData_sequence& KeyInfoType::
    PGPData () const
    {
      return this->PGPData_;
    }

    KeyInfoType::PGPData_sequence& KeyInfoType::
    PGPData ()
    {
      return this->PGPData_;
    }

    void KeyInfoType::
    PGPData (const PGPData_sequence& PGPData)
    {
      this->PGPData_ = PGPData;
    }

    const KeyInfoType::SPKIData_sequence& KeyInfoType::
    SPKIData () const
    {
      return this->SPKIData_;
    }

    KeyInfoType::SPKIData_sequence& KeyInfoType::
    SPKIData ()
    {
      return this->SPKIData_;
    }

    void KeyInfoType::
    SPKIData (const SPKIData_sequence& SPKIData)
    {
      this->SPKIData_ = SPKIData;
    }

    const KeyInfoType::MgmtData_sequence& KeyInfoType::
    MgmtData () const
    {
      return this->MgmtData_;
    }

    KeyInfoType::MgmtData_sequence& KeyInfoType::
    MgmtData ()
    {
      return this->MgmtData_;
    }

    void KeyInfoType::
    MgmtData (const MgmtData_sequence& MgmtData)
    {
      this->MgmtData_ = MgmtData;
    }

    const KeyInfoType::any_sequence& KeyInfoType::
    any () const
    {
      return this->any_;
    }

    KeyInfoType::any_sequence& KeyInfoType::
    any ()
    {
      return this->any_;
    }

    void KeyInfoType::
    any (const any_sequence& any)
    {
      this->any_ = any;
    }

    const KeyInfoType::Id_optional& KeyInfoType::
    Id () const
    {
      return this->Id_;
    }

    KeyInfoType::Id_optional& KeyInfoType::
    Id ()
    {
      return this->Id_;
    }

    void KeyInfoType::
    Id (const Id_type& Id)
    {
      this->Id_.set (Id);
    }

    void KeyInfoType::
    Id (const Id_optional& Id)
    {
      this->Id_ = Id;
    }

    void KeyInfoType::
    Id (::std::auto_ptr< Id_type > Id)
    {
      this->Id_.set (Id);
    }

    const ::xercesc::DOMDocument& KeyInfoType::
    dom_document () const
    {
      return *dom_document_;
    }

    ::xercesc::DOMDocument& KeyInfoType::
    dom_document ()
    {
      return *dom_document_;
    }


    // KeyValueType
    // 

    const KeyValueType::DSAKeyValue_optional& KeyValueType::
    DSAKeyValue () const
    {
      return this->DSAKeyValue_;
    }

    KeyValueType::DSAKeyValue_optional& KeyValueType::
    DSAKeyValue ()
    {
      return this->DSAKeyValue_;
    }

    void KeyValueType::
    DSAKeyValue (const DSAKeyValue_type& DSAKeyValue)
    {
      this->DSAKeyValue_.set (DSAKeyValue);
    }

    void KeyValueType::
    DSAKeyValue (const DSAKeyValue_optional& DSAKeyValue)
    {
      this->DSAKeyValue_ = DSAKeyValue;
    }

    void KeyValueType::
    DSAKeyValue (::std::auto_ptr< DSAKeyValue_type > DSAKeyValue)
    {
      this->DSAKeyValue_.set (DSAKeyValue);
    }

    const KeyValueType::RSAKeyValue_optional& KeyValueType::
    RSAKeyValue () const
    {
      return this->RSAKeyValue_;
    }

    KeyValueType::RSAKeyValue_optional& KeyValueType::
    RSAKeyValue ()
    {
      return this->RSAKeyValue_;
    }

    void KeyValueType::
    RSAKeyValue (const RSAKeyValue_type& RSAKeyValue)
    {
      this->RSAKeyValue_.set (RSAKeyValue);
    }

    void KeyValueType::
    RSAKeyValue (const RSAKeyValue_optional& RSAKeyValue)
    {
      this->RSAKeyValue_ = RSAKeyValue;
    }

    void KeyValueType::
    RSAKeyValue (::std::auto_ptr< RSAKeyValue_type > RSAKeyValue)
    {
      this->RSAKeyValue_.set (RSAKeyValue);
    }

    const KeyValueType::any_optional& KeyValueType::
    any () const
    {
      return this->any_;
    }

    KeyValueType::any_optional& KeyValueType::
    any ()
    {
      return this->any_;
    }

    void KeyValueType::
    any (const ::xercesc::DOMElement& any)
    {
      this->any_.set (any);
    }

    void KeyValueType::
    any (::xercesc::DOMElement* any)
    {
      this->any_.set (any);
    }

    void KeyValueType::
    any (const any_optional& any)
    {
      this->any_ = any;
    }

    const ::xercesc::DOMDocument& KeyValueType::
    dom_document () const
    {
      return *dom_document_;
    }

    ::xercesc::DOMDocument& KeyValueType::
    dom_document ()
    {
      return *dom_document_;
    }


    // RetrievalMethodType
    // 

    const RetrievalMethodType::Transforms_optional& RetrievalMethodType::
    Transforms () const
    {
      return this->Transforms_;
    }

    RetrievalMethodType::Transforms_optional& RetrievalMethodType::
    Transforms ()
    {
      return this->Transforms_;
    }

    void RetrievalMethodType::
    Transforms (const Transforms_type& Transforms)
    {
      this->Transforms_.set (Transforms);
    }

    void RetrievalMethodType::
    Transforms (const Transforms_optional& Transforms)
    {
      this->Transforms_ = Transforms;
    }

    void RetrievalMethodType::
    Transforms (::std::auto_ptr< Transforms_type > Transforms)
    {
      this->Transforms_.set (Transforms);
    }

    const RetrievalMethodType::URI_optional& RetrievalMethodType::
    URI () const
    {
      return this->URI_;
    }

    RetrievalMethodType::URI_optional& RetrievalMethodType::
    URI ()
    {
      return this->URI_;
    }

    void RetrievalMethodType::
    URI (const URI_type& URI)
    {
      this->URI_.set (URI);
    }

    void RetrievalMethodType::
    URI (const URI_optional& URI)
    {
      this->URI_ = URI;
    }

    void RetrievalMethodType::
    URI (::std::auto_ptr< URI_type > URI)
    {
      this->URI_.set (URI);
    }

    const RetrievalMethodType::Type_optional& RetrievalMethodType::
    Type () const
    {
      return this->Type_;
    }

    RetrievalMethodType::Type_optional& RetrievalMethodType::
    Type ()
    {
      return this->Type_;
    }

    void RetrievalMethodType::
    Type (const Type_type& Type)
    {
      this->Type_.set (Type);
    }

    void RetrievalMethodType::
    Type (const Type_optional& Type)
    {
      this->Type_ = Type;
    }

    void RetrievalMethodType::
    Type (::std::auto_ptr< Type_type > Type)
    {
      this->Type_.set (Type);
    }


    // X509DataType
    // 

    const X509DataType::X509IssuerSerial_sequence& X509DataType::
    X509IssuerSerial () const
    {
      return this->X509IssuerSerial_;
    }

    X509DataType::X509IssuerSerial_sequence& X509DataType::
    X509IssuerSerial ()
    {
      return this->X509IssuerSerial_;
    }

    void X509DataType::
    X509IssuerSerial (const X509IssuerSerial_sequence& X509IssuerSerial)
    {
      this->X509IssuerSerial_ = X509IssuerSerial;
    }

    const X509DataType::X509SKI_sequence& X509DataType::
    X509SKI () const
    {
      return this->X509SKI_;
    }

    X509DataType::X509SKI_sequence& X509DataType::
    X509SKI ()
    {
      return this->X509SKI_;
    }

    void X509DataType::
    X509SKI (const X509SKI_sequence& X509SKI)
    {
      this->X509SKI_ = X509SKI;
    }

    const X509DataType::X509SubjectName_sequence& X509DataType::
    X509SubjectName () const
    {
      return this->X509SubjectName_;
    }

    X509DataType::X509SubjectName_sequence& X509DataType::
    X509SubjectName ()
    {
      return this->X509SubjectName_;
    }

    void X509DataType::
    X509SubjectName (const X509SubjectName_sequence& X509SubjectName)
    {
      this->X509SubjectName_ = X509SubjectName;
    }

    const X509DataType::X509Certificate_sequence& X509DataType::
    X509Certificate () const
    {
      return this->X509Certificate_;
    }

    X509DataType::X509Certificate_sequence& X509DataType::
    X509Certificate ()
    {
      return this->X509Certificate_;
    }

    void X509DataType::
    X509Certificate (const X509Certificate_sequence& X509Certificate)
    {
      this->X509Certificate_ = X509Certificate;
    }

    const X509DataType::X509CRL_sequence& X509DataType::
    X509CRL () const
    {
      return this->X509CRL_;
    }

    X509DataType::X509CRL_sequence& X509DataType::
    X509CRL ()
    {
      return this->X509CRL_;
    }

    void X509DataType::
    X509CRL (const X509CRL_sequence& X509CRL)
    {
      this->X509CRL_ = X509CRL;
    }

    const X509DataType::any_sequence& X509DataType::
    any () const
    {
      return this->any_;
    }

    X509DataType::any_sequence& X509DataType::
    any ()
    {
      return this->any_;
    }

    void X509DataType::
    any (const any_sequence& any)
    {
      this->any_ = any;
    }

    const ::xercesc::DOMDocument& X509DataType::
    dom_document () const
    {
      return *dom_document_;
    }

    ::xercesc::DOMDocument& X509DataType::
    dom_document ()
    {
      return *dom_document_;
    }


    // X509IssuerSerialType
    // 

    const X509IssuerSerialType::X509IssuerName_type& X509IssuerSerialType::
    X509IssuerName () const
    {
      return this->X509IssuerName_.get ();
    }

    X509IssuerSerialType::X509IssuerName_type& X509IssuerSerialType::
    X509IssuerName ()
    {
      return this->X509IssuerName_.get ();
    }

    void X509IssuerSerialType::
    X509IssuerName (const X509IssuerName_type& X509IssuerName)
    {
      this->X509IssuerName_.set (X509IssuerName);
    }

    void X509IssuerSerialType::
    X509IssuerName (::std::auto_ptr< X509IssuerName_type > X509IssuerName)
    {
      this->X509IssuerName_.set (X509IssuerName);
    }

    const X509IssuerSerialType::X509SerialNumber_type& X509IssuerSerialType::
    X509SerialNumber () const
    {
      return this->X509SerialNumber_.get ();
    }

    X509IssuerSerialType::X509SerialNumber_type& X509IssuerSerialType::
    X509SerialNumber ()
    {
      return this->X509SerialNumber_.get ();
    }

    void X509IssuerSerialType::
    X509SerialNumber (const X509SerialNumber_type& X509SerialNumber)
    {
      this->X509SerialNumber_.set (X509SerialNumber);
    }


    // PGPDataType
    // 

    const PGPDataType::PGPKeyID_optional& PGPDataType::
    PGPKeyID () const
    {
      return this->PGPKeyID_;
    }

    PGPDataType::PGPKeyID_optional& PGPDataType::
    PGPKeyID ()
    {
      return this->PGPKeyID_;
    }

    void PGPDataType::
    PGPKeyID (const PGPKeyID_type& PGPKeyID)
    {
      this->PGPKeyID_.set (PGPKeyID);
    }

    void PGPDataType::
    PGPKeyID (const PGPKeyID_optional& PGPKeyID)
    {
      this->PGPKeyID_ = PGPKeyID;
    }

    void PGPDataType::
    PGPKeyID (::std::auto_ptr< PGPKeyID_type > PGPKeyID)
    {
      this->PGPKeyID_.set (PGPKeyID);
    }

    const PGPDataType::PGPKeyPacket_optional& PGPDataType::
    PGPKeyPacket () const
    {
      return this->PGPKeyPacket_;
    }

    PGPDataType::PGPKeyPacket_optional& PGPDataType::
    PGPKeyPacket ()
    {
      return this->PGPKeyPacket_;
    }

    void PGPDataType::
    PGPKeyPacket (const PGPKeyPacket_type& PGPKeyPacket)
    {
      this->PGPKeyPacket_.set (PGPKeyPacket);
    }

    void PGPDataType::
    PGPKeyPacket (const PGPKeyPacket_optional& PGPKeyPacket)
    {
      this->PGPKeyPacket_ = PGPKeyPacket;
    }

    void PGPDataType::
    PGPKeyPacket (::std::auto_ptr< PGPKeyPacket_type > PGPKeyPacket)
    {
      this->PGPKeyPacket_.set (PGPKeyPacket);
    }

    const PGPDataType::any_sequence& PGPDataType::
    any () const
    {
      return this->any_;
    }

    PGPDataType::any_sequence& PGPDataType::
    any ()
    {
      return this->any_;
    }

    void PGPDataType::
    any (const any_sequence& any)
    {
      this->any_ = any;
    }

    const PGPDataType::any1_sequence& PGPDataType::
    any1 () const
    {
      return this->any1_;
    }

    PGPDataType::any1_sequence& PGPDataType::
    any1 ()
    {
      return this->any1_;
    }

    void PGPDataType::
    any1 (const any1_sequence& any1)
    {
      this->any1_ = any1;
    }

    const ::xercesc::DOMDocument& PGPDataType::
    dom_document () const
    {
      return *dom_document_;
    }

    ::xercesc::DOMDocument& PGPDataType::
    dom_document ()
    {
      return *dom_document_;
    }


    // SPKIDataType
    // 

    const SPKIDataType::SPKISexp_sequence& SPKIDataType::
    SPKISexp () const
    {
      return this->SPKISexp_;
    }

    SPKIDataType::SPKISexp_sequence& SPKIDataType::
    SPKISexp ()
    {
      return this->SPKISexp_;
    }

    void SPKIDataType::
    SPKISexp (const SPKISexp_sequence& SPKISexp)
    {
      this->SPKISexp_ = SPKISexp;
    }

    const SPKIDataType::any_sequence& SPKIDataType::
    any () const
    {
      return this->any_;
    }

    SPKIDataType::any_sequence& SPKIDataType::
    any ()
    {
      return this->any_;
    }

    void SPKIDataType::
    any (const any_sequence& any)
    {
      this->any_ = any;
    }

    const ::xercesc::DOMDocument& SPKIDataType::
    dom_document () const
    {
      return *dom_document_;
    }

    ::xercesc::DOMDocument& SPKIDataType::
    dom_document ()
    {
      return *dom_document_;
    }


    // ObjectType
    // 

    const ObjectType::any_sequence& ObjectType::
    any () const
    {
      return this->any_;
    }

    ObjectType::any_sequence& ObjectType::
    any ()
    {
      return this->any_;
    }

    void ObjectType::
    any (const any_sequence& any)
    {
      this->any_ = any;
    }

    const ObjectType::Id_optional& ObjectType::
    Id () const
    {
      return this->Id_;
    }

    ObjectType::Id_optional& ObjectType::
    Id ()
    {
      return this->Id_;
    }

    void ObjectType::
    Id (const Id_type& Id)
    {
      this->Id_.set (Id);
    }

    void ObjectType::
    Id (const Id_optional& Id)
    {
      this->Id_ = Id;
    }

    void ObjectType::
    Id (::std::auto_ptr< Id_type > Id)
    {
      this->Id_.set (Id);
    }

    const ObjectType::MimeType_optional& ObjectType::
    MimeType () const
    {
      return this->MimeType_;
    }

    ObjectType::MimeType_optional& ObjectType::
    MimeType ()
    {
      return this->MimeType_;
    }

    void ObjectType::
    MimeType (const MimeType_type& MimeType)
    {
      this->MimeType_.set (MimeType);
    }

    void ObjectType::
    MimeType (const MimeType_optional& MimeType)
    {
      this->MimeType_ = MimeType;
    }

    void ObjectType::
    MimeType (::std::auto_ptr< MimeType_type > MimeType)
    {
      this->MimeType_.set (MimeType);
    }

    const ObjectType::Encoding_optional& ObjectType::
    Encoding () const
    {
      return this->Encoding_;
    }

    ObjectType::Encoding_optional& ObjectType::
    Encoding ()
    {
      return this->Encoding_;
    }

    void ObjectType::
    Encoding (const Encoding_type& Encoding)
    {
      this->Encoding_.set (Encoding);
    }

    void ObjectType::
    Encoding (const Encoding_optional& Encoding)
    {
      this->Encoding_ = Encoding;
    }

    void ObjectType::
    Encoding (::std::auto_ptr< Encoding_type > Encoding)
    {
      this->Encoding_.set (Encoding);
    }

    const ::xercesc::DOMDocument& ObjectType::
    dom_document () const
    {
      return *dom_document_;
    }

    ::xercesc::DOMDocument& ObjectType::
    dom_document ()
    {
      return *dom_document_;
    }


    // ManifestType
    // 

    const ManifestType::Reference_sequence& ManifestType::
    Reference () const
    {
      return this->Reference_;
    }

    ManifestType::Reference_sequence& ManifestType::
    Reference ()
    {
      return this->Reference_;
    }

    void ManifestType::
    Reference (const Reference_sequence& Reference)
    {
      this->Reference_ = Reference;
    }

    const ManifestType::Id_optional& ManifestType::
    Id () const
    {
      return this->Id_;
    }

    ManifestType::Id_optional& ManifestType::
    Id ()
    {
      return this->Id_;
    }

    void ManifestType::
    Id (const Id_type& Id)
    {
      this->Id_.set (Id);
    }

    void ManifestType::
    Id (const Id_optional& Id)
    {
      this->Id_ = Id;
    }

    void ManifestType::
    Id (::std::auto_ptr< Id_type > Id)
    {
      this->Id_.set (Id);
    }


    // SignaturePropertiesType
    // 

    const SignaturePropertiesType::SignatureProperty_sequence& SignaturePropertiesType::
    SignatureProperty () const
    {
      return this->SignatureProperty_;
    }

    SignaturePropertiesType::SignatureProperty_sequence& SignaturePropertiesType::
    SignatureProperty ()
    {
      return this->SignatureProperty_;
    }

    void SignaturePropertiesType::
    SignatureProperty (const SignatureProperty_sequence& SignatureProperty)
    {
      this->SignatureProperty_ = SignatureProperty;
    }

    const SignaturePropertiesType::Id_optional& SignaturePropertiesType::
    Id () const
    {
      return this->Id_;
    }

    SignaturePropertiesType::Id_optional& SignaturePropertiesType::
    Id ()
    {
      return this->Id_;
    }

    void SignaturePropertiesType::
    Id (const Id_type& Id)
    {
      this->Id_.set (Id);
    }

    void SignaturePropertiesType::
    Id (const Id_optional& Id)
    {
      this->Id_ = Id;
    }

    void SignaturePropertiesType::
    Id (::std::auto_ptr< Id_type > Id)
    {
      this->Id_.set (Id);
    }


    // SignaturePropertyType
    // 

    const SignaturePropertyType::any_sequence& SignaturePropertyType::
    any () const
    {
      return this->any_;
    }

    SignaturePropertyType::any_sequence& SignaturePropertyType::
    any ()
    {
      return this->any_;
    }

    void SignaturePropertyType::
    any (const any_sequence& any)
    {
      this->any_ = any;
    }

    const SignaturePropertyType::Target_type& SignaturePropertyType::
    Target () const
    {
      return this->Target_.get ();
    }

    SignaturePropertyType::Target_type& SignaturePropertyType::
    Target ()
    {
      return this->Target_.get ();
    }

    void SignaturePropertyType::
    Target (const Target_type& Target)
    {
      this->Target_.set (Target);
    }

    void SignaturePropertyType::
    Target (::std::auto_ptr< Target_type > Target)
    {
      this->Target_.set (Target);
    }

    const SignaturePropertyType::Id_optional& SignaturePropertyType::
    Id () const
    {
      return this->Id_;
    }

    SignaturePropertyType::Id_optional& SignaturePropertyType::
    Id ()
    {
      return this->Id_;
    }

    void SignaturePropertyType::
    Id (const Id_type& Id)
    {
      this->Id_.set (Id);
    }

    void SignaturePropertyType::
    Id (const Id_optional& Id)
    {
      this->Id_ = Id;
    }

    void SignaturePropertyType::
    Id (::std::auto_ptr< Id_type > Id)
    {
      this->Id_.set (Id);
    }

    const ::xercesc::DOMDocument& SignaturePropertyType::
    dom_document () const
    {
      return *dom_document_;
    }

    ::xercesc::DOMDocument& SignaturePropertyType::
    dom_document ()
    {
      return *dom_document_;
    }


    // HMACOutputLengthType
    // 


    // DSAKeyValueType
    // 

    const DSAKeyValueType::P_optional& DSAKeyValueType::
    P () const
    {
      return this->P_;
    }

    DSAKeyValueType::P_optional& DSAKeyValueType::
    P ()
    {
      return this->P_;
    }

    void DSAKeyValueType::
    P (const P_type& P)
    {
      this->P_.set (P);
    }

    void DSAKeyValueType::
    P (const P_optional& P)
    {
      this->P_ = P;
    }

    void DSAKeyValueType::
    P (::std::auto_ptr< P_type > P)
    {
      this->P_.set (P);
    }

    const DSAKeyValueType::Q_optional& DSAKeyValueType::
    Q () const
    {
      return this->Q_;
    }

    DSAKeyValueType::Q_optional& DSAKeyValueType::
    Q ()
    {
      return this->Q_;
    }

    void DSAKeyValueType::
    Q (const Q_type& Q)
    {
      this->Q_.set (Q);
    }

    void DSAKeyValueType::
    Q (const Q_optional& Q)
    {
      this->Q_ = Q;
    }

    void DSAKeyValueType::
    Q (::std::auto_ptr< Q_type > Q)
    {
      this->Q_.set (Q);
    }

    const DSAKeyValueType::G_optional& DSAKeyValueType::
    G () const
    {
      return this->G_;
    }

    DSAKeyValueType::G_optional& DSAKeyValueType::
    G ()
    {
      return this->G_;
    }

    void DSAKeyValueType::
    G (const G_type& G)
    {
      this->G_.set (G);
    }

    void DSAKeyValueType::
    G (const G_optional& G)
    {
      this->G_ = G;
    }

    void DSAKeyValueType::
    G (::std::auto_ptr< G_type > G)
    {
      this->G_.set (G);
    }

    const DSAKeyValueType::Y_type& DSAKeyValueType::
    Y () const
    {
      return this->Y_.get ();
    }

    DSAKeyValueType::Y_type& DSAKeyValueType::
    Y ()
    {
      return this->Y_.get ();
    }

    void DSAKeyValueType::
    Y (const Y_type& Y)
    {
      this->Y_.set (Y);
    }

    void DSAKeyValueType::
    Y (::std::auto_ptr< Y_type > Y)
    {
      this->Y_.set (Y);
    }

    const DSAKeyValueType::J_optional& DSAKeyValueType::
    J () const
    {
      return this->J_;
    }

    DSAKeyValueType::J_optional& DSAKeyValueType::
    J ()
    {
      return this->J_;
    }

    void DSAKeyValueType::
    J (const J_type& J)
    {
      this->J_.set (J);
    }

    void DSAKeyValueType::
    J (const J_optional& J)
    {
      this->J_ = J;
    }

    void DSAKeyValueType::
    J (::std::auto_ptr< J_type > J)
    {
      this->J_.set (J);
    }

    const DSAKeyValueType::Seed_optional& DSAKeyValueType::
    Seed () const
    {
      return this->Seed_;
    }

    DSAKeyValueType::Seed_optional& DSAKeyValueType::
    Seed ()
    {
      return this->Seed_;
    }

    void DSAKeyValueType::
    Seed (const Seed_type& Seed)
    {
      this->Seed_.set (Seed);
    }

    void DSAKeyValueType::
    Seed (const Seed_optional& Seed)
    {
      this->Seed_ = Seed;
    }

    void DSAKeyValueType::
    Seed (::std::auto_ptr< Seed_type > Seed)
    {
      this->Seed_.set (Seed);
    }

    const DSAKeyValueType::PgenCounter_optional& DSAKeyValueType::
    PgenCounter () const
    {
      return this->PgenCounter_;
    }

    DSAKeyValueType::PgenCounter_optional& DSAKeyValueType::
    PgenCounter ()
    {
      return this->PgenCounter_;
    }

    void DSAKeyValueType::
    PgenCounter (const PgenCounter_type& PgenCounter)
    {
      this->PgenCounter_.set (PgenCounter);
    }

    void DSAKeyValueType::
    PgenCounter (const PgenCounter_optional& PgenCounter)
    {
      this->PgenCounter_ = PgenCounter;
    }

    void DSAKeyValueType::
    PgenCounter (::std::auto_ptr< PgenCounter_type > PgenCounter)
    {
      this->PgenCounter_.set (PgenCounter);
    }


    // RSAKeyValueType
    // 

    const RSAKeyValueType::Modulus_type& RSAKeyValueType::
    Modulus () const
    {
      return this->Modulus_.get ();
    }

    RSAKeyValueType::Modulus_type& RSAKeyValueType::
    Modulus ()
    {
      return this->Modulus_.get ();
    }

    void RSAKeyValueType::
    Modulus (const Modulus_type& Modulus)
    {
      this->Modulus_.set (Modulus);
    }

    void RSAKeyValueType::
    Modulus (::std::auto_ptr< Modulus_type > Modulus)
    {
      this->Modulus_.set (Modulus);
    }

    const RSAKeyValueType::Exponent_type& RSAKeyValueType::
    Exponent () const
    {
      return this->Exponent_.get ();
    }

    RSAKeyValueType::Exponent_type& RSAKeyValueType::
    Exponent ()
    {
      return this->Exponent_.get ();
    }

    void RSAKeyValueType::
    Exponent (const Exponent_type& Exponent)
    {
      this->Exponent_.set (Exponent);
    }

    void RSAKeyValueType::
    Exponent (::std::auto_ptr< Exponent_type > Exponent)
    {
      this->Exponent_.set (Exponent);
    }
  }
}

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_factory_plate< 0, wchar_t >
  type_factory_plate_init;
}

namespace w3
{
  namespace xmldsig
  {
    // CryptoBinary
    //

    CryptoBinary::
    CryptoBinary ()
    : ::xml_schema::base64_binary ()
    {
    }

    CryptoBinary::
    CryptoBinary (const ::xml_schema::base64_binary& base64Binary)
    : ::xml_schema::base64_binary (base64Binary)
    {
    }

    CryptoBinary::
    CryptoBinary (const CryptoBinary& x,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::base64_binary (x, f, c)
    {
    }

    CryptoBinary::
    CryptoBinary (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::base64_binary (e, f, c)
    {
    }

    CryptoBinary::
    CryptoBinary (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::base64_binary (a, f, c)
    {
    }

    CryptoBinary::
    CryptoBinary (const ::std::wstring& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::base64_binary (s, e, f, c)
    {
    }

    CryptoBinary* CryptoBinary::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new CryptoBinary (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CryptoBinary >
    _xsd_CryptoBinary_type_factory_init (
      L"CryptoBinary",
      L"http://www.w3.org/2000/09/xmldsig#");


    // SignatureType
    //

    SignatureType::
    SignatureType ()
    : ::xml_schema::type (),
      SignedInfo_ (::xml_schema::flags (), this),
      SignatureValue_ (::xml_schema::flags (), this),
      KeyInfo_ (::xml_schema::flags (), this),
      Object_ (::xml_schema::flags (), this),
      Id_ (::xml_schema::flags (), this)
    {
    }

    SignatureType::
    SignatureType (const SignedInfo_type& SignedInfo,
                   const SignatureValue_type& SignatureValue)
    : ::xml_schema::type (),
      SignedInfo_ (SignedInfo, ::xml_schema::flags (), this),
      SignatureValue_ (SignatureValue, ::xml_schema::flags (), this),
      KeyInfo_ (::xml_schema::flags (), this),
      Object_ (::xml_schema::flags (), this),
      Id_ (::xml_schema::flags (), this)
    {
    }

    SignatureType::
    SignatureType (const SignatureType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (x, f, c),
      SignedInfo_ (x.SignedInfo_, f, this),
      SignatureValue_ (x.SignatureValue_, f, this),
      KeyInfo_ (x.KeyInfo_, f, this),
      Object_ (x.Object_, f, this),
      Id_ (x.Id_, f, this)
    {
    }

    SignatureType::
    SignatureType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      SignedInfo_ (f, this),
      SignatureValue_ (f, this),
      KeyInfo_ (f, this),
      Object_ (f, this),
      Id_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e);
        this->parse (p, f);
      }
    }

    void SignatureType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // SignedInfo
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"SignedInfo",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< SignedInfo_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!SignedInfo_.present ())
            {
              ::std::auto_ptr< SignedInfo_type > r (
                dynamic_cast< SignedInfo_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->SignedInfo (r);
              continue;
            }
          }
        }

        // SignatureValue
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"SignatureValue",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< SignatureValue_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!SignatureValue_.present ())
            {
              ::std::auto_ptr< SignatureValue_type > r (
                dynamic_cast< SignatureValue_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->SignatureValue (r);
              continue;
            }
          }
        }

        // KeyInfo
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"KeyInfo",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< KeyInfo_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->KeyInfo ())
            {
              ::std::auto_ptr< KeyInfo_type > r (
                dynamic_cast< KeyInfo_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->KeyInfo (r);
              continue;
            }
          }
        }

        // Object
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"Object",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< Object_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< Object_type > r (
              dynamic_cast< Object_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->Object ().push_back (r);
            continue;
          }
        }

        break;
      }

      if (!SignedInfo_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"SignedInfo",
          L"http://www.w3.org/2000/09/xmldsig#");
      }

      if (!SignatureValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"SignatureValue",
          L"http://www.w3.org/2000/09/xmldsig#");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"Id" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Id_type > r (
            Id_traits::create (i, f, this));

          this->Id (r);
          continue;
        }
      }
    }

    SignatureType* SignatureType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new SignatureType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SignatureType >
    _xsd_SignatureType_type_factory_init (
      L"SignatureType",
      L"http://www.w3.org/2000/09/xmldsig#");


    // SignatureValueType
    //

    SignatureValueType::
    SignatureValueType ()
    : ::xml_schema::base64_binary (),
      Id_ (::xml_schema::flags (), this)
    {
    }

    SignatureValueType::
    SignatureValueType (const ::xml_schema::base64_binary& base64Binary)
    : ::xml_schema::base64_binary (base64Binary),
      Id_ (::xml_schema::flags (), this)
    {
    }

    SignatureValueType::
    SignatureValueType (const SignatureValueType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
    : ::xml_schema::base64_binary (x, f, c),
      Id_ (x.Id_, f, this)
    {
    }

    SignatureValueType::
    SignatureValueType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
    : ::xml_schema::base64_binary (e, f | ::xml_schema::flags::base, c),
      Id_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e);
        this->parse (p, f);
      }
    }

    void SignatureValueType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"Id" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Id_type > r (
            Id_traits::create (i, f, this));

          this->Id (r);
          continue;
        }
      }
    }

    SignatureValueType* SignatureValueType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new SignatureValueType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SignatureValueType >
    _xsd_SignatureValueType_type_factory_init (
      L"SignatureValueType",
      L"http://www.w3.org/2000/09/xmldsig#");


    // SignedInfoType
    //

    SignedInfoType::
    SignedInfoType ()
    : ::xml_schema::type (),
      CanonicalizationMethod_ (::xml_schema::flags (), this),
      SignatureMethod_ (::xml_schema::flags (), this),
      Reference_ (::xml_schema::flags (), this),
      Id_ (::xml_schema::flags (), this)
    {
    }

    SignedInfoType::
    SignedInfoType (const CanonicalizationMethod_type& CanonicalizationMethod,
                    const SignatureMethod_type& SignatureMethod)
    : ::xml_schema::type (),
      CanonicalizationMethod_ (CanonicalizationMethod, ::xml_schema::flags (), this),
      SignatureMethod_ (SignatureMethod, ::xml_schema::flags (), this),
      Reference_ (::xml_schema::flags (), this),
      Id_ (::xml_schema::flags (), this)
    {
    }

    SignedInfoType::
    SignedInfoType (const SignedInfoType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (x, f, c),
      CanonicalizationMethod_ (x.CanonicalizationMethod_, f, this),
      SignatureMethod_ (x.SignatureMethod_, f, this),
      Reference_ (x.Reference_, f, this),
      Id_ (x.Id_, f, this)
    {
    }

    SignedInfoType::
    SignedInfoType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      CanonicalizationMethod_ (f, this),
      SignatureMethod_ (f, this),
      Reference_ (f, this),
      Id_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e);
        this->parse (p, f);
      }
    }

    void SignedInfoType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // CanonicalizationMethod
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"CanonicalizationMethod",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< CanonicalizationMethod_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!CanonicalizationMethod_.present ())
            {
              ::std::auto_ptr< CanonicalizationMethod_type > r (
                dynamic_cast< CanonicalizationMethod_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->CanonicalizationMethod (r);
              continue;
            }
          }
        }

        // SignatureMethod
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"SignatureMethod",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< SignatureMethod_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!SignatureMethod_.present ())
            {
              ::std::auto_ptr< SignatureMethod_type > r (
                dynamic_cast< SignatureMethod_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->SignatureMethod (r);
              continue;
            }
          }
        }

        // Reference
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"Reference",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< Reference_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< Reference_type > r (
              dynamic_cast< Reference_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->Reference ().push_back (r);
            continue;
          }
        }

        break;
      }

      if (!CanonicalizationMethod_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"CanonicalizationMethod",
          L"http://www.w3.org/2000/09/xmldsig#");
      }

      if (!SignatureMethod_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"SignatureMethod",
          L"http://www.w3.org/2000/09/xmldsig#");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"Id" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Id_type > r (
            Id_traits::create (i, f, this));

          this->Id (r);
          continue;
        }
      }
    }

    SignedInfoType* SignedInfoType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new SignedInfoType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SignedInfoType >
    _xsd_SignedInfoType_type_factory_init (
      L"SignedInfoType",
      L"http://www.w3.org/2000/09/xmldsig#");


    // CanonicalizationMethodType
    //

    CanonicalizationMethodType::
    CanonicalizationMethodType ()
    : ::xml_schema::type (),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      any_ (this->dom_document ()),
      Algorithm_ (::xml_schema::flags (), this)
    {
    }

    CanonicalizationMethodType::
    CanonicalizationMethodType (const Algorithm_type& Algorithm)
    : ::xml_schema::type (),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      any_ (this->dom_document ()),
      Algorithm_ (Algorithm, ::xml_schema::flags (), this)
    {
    }

    CanonicalizationMethodType::
    CanonicalizationMethodType (const CanonicalizationMethodType& x,
                                ::xml_schema::flags f,
                                ::xml_schema::type* c)
    : ::xml_schema::type (x, f, c),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      any_ (x.any_, this->dom_document ()),
      Algorithm_ (x.Algorithm_, f, this)
    {
    }

    CanonicalizationMethodType::
    CanonicalizationMethodType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::type* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      any_ (this->dom_document ()),
      Algorithm_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e);
        this->parse (p, f);
      }
    }

    void CanonicalizationMethodType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // any
        //
        if (true)
        {
          ::xercesc::DOMElement* r (
            static_cast< ::xercesc::DOMElement* > (
              this->dom_document ().importNode (
                const_cast< ::xercesc::DOMElement* > (&i), true)));
          this->any ().push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"Algorithm" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Algorithm_type > r (
            Algorithm_traits::create (i, f, this));

          this->Algorithm (r);
          continue;
        }
      }

      if (!Algorithm_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Algorithm",
          L"");
      }
    }

    CanonicalizationMethodType* CanonicalizationMethodType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new CanonicalizationMethodType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, CanonicalizationMethodType >
    _xsd_CanonicalizationMethodType_type_factory_init (
      L"CanonicalizationMethodType",
      L"http://www.w3.org/2000/09/xmldsig#");


    // SignatureMethodType
    //

    SignatureMethodType::
    SignatureMethodType ()
    : ::xml_schema::type (),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      HMACOutputLength_ (::xml_schema::flags (), this),
      any_ (this->dom_document ()),
      Algorithm_ (::xml_schema::flags (), this)
    {
    }

    SignatureMethodType::
    SignatureMethodType (const Algorithm_type& Algorithm)
    : ::xml_schema::type (),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      HMACOutputLength_ (::xml_schema::flags (), this),
      any_ (this->dom_document ()),
      Algorithm_ (Algorithm, ::xml_schema::flags (), this)
    {
    }

    SignatureMethodType::
    SignatureMethodType (const SignatureMethodType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
    : ::xml_schema::type (x, f, c),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      HMACOutputLength_ (x.HMACOutputLength_, f, this),
      any_ (x.any_, this->dom_document ()),
      Algorithm_ (x.Algorithm_, f, this)
    {
    }

    SignatureMethodType::
    SignatureMethodType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      HMACOutputLength_ (f, this),
      any_ (this->dom_document ()),
      Algorithm_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e);
        this->parse (p, f);
      }
    }

    void SignatureMethodType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // HMACOutputLength
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"HMACOutputLength",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< HMACOutputLength_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->HMACOutputLength ())
            {
              ::std::auto_ptr< HMACOutputLength_type > r (
                dynamic_cast< HMACOutputLength_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->HMACOutputLength (r);
              continue;
            }
          }
        }

        // any
        //
        if ((!n.namespace_ ().empty () && n.namespace_ () != L"http://www.w3.org/2000/09/xmldsig#"))
        {
          ::xercesc::DOMElement* r (
            static_cast< ::xercesc::DOMElement* > (
              this->dom_document ().importNode (
                const_cast< ::xercesc::DOMElement* > (&i), true)));
          this->any ().push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"Algorithm" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Algorithm_type > r (
            Algorithm_traits::create (i, f, this));

          this->Algorithm (r);
          continue;
        }
      }

      if (!Algorithm_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Algorithm",
          L"");
      }
    }

    SignatureMethodType* SignatureMethodType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new SignatureMethodType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SignatureMethodType >
    _xsd_SignatureMethodType_type_factory_init (
      L"SignatureMethodType",
      L"http://www.w3.org/2000/09/xmldsig#");


    // ReferenceType
    //

    ReferenceType::
    ReferenceType ()
    : ::xml_schema::type (),
      Transforms_ (::xml_schema::flags (), this),
      DigestMethod_ (::xml_schema::flags (), this),
      DigestValue_ (::xml_schema::flags (), this),
      Id_ (::xml_schema::flags (), this),
      URI_ (::xml_schema::flags (), this),
      Type_ (::xml_schema::flags (), this)
    {
    }

    ReferenceType::
    ReferenceType (const DigestMethod_type& DigestMethod,
                   const DigestValue_type& DigestValue)
    : ::xml_schema::type (),
      Transforms_ (::xml_schema::flags (), this),
      DigestMethod_ (DigestMethod, ::xml_schema::flags (), this),
      DigestValue_ (DigestValue, ::xml_schema::flags (), this),
      Id_ (::xml_schema::flags (), this),
      URI_ (::xml_schema::flags (), this),
      Type_ (::xml_schema::flags (), this)
    {
    }

    ReferenceType::
    ReferenceType (const ReferenceType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (x, f, c),
      Transforms_ (x.Transforms_, f, this),
      DigestMethod_ (x.DigestMethod_, f, this),
      DigestValue_ (x.DigestValue_, f, this),
      Id_ (x.Id_, f, this),
      URI_ (x.URI_, f, this),
      Type_ (x.Type_, f, this)
    {
    }

    ReferenceType::
    ReferenceType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Transforms_ (f, this),
      DigestMethod_ (f, this),
      DigestValue_ (f, this),
      Id_ (f, this),
      URI_ (f, this),
      Type_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e);
        this->parse (p, f);
      }
    }

    void ReferenceType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Transforms
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"Transforms",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< Transforms_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->Transforms ())
            {
              ::std::auto_ptr< Transforms_type > r (
                dynamic_cast< Transforms_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Transforms (r);
              continue;
            }
          }
        }

        // DigestMethod
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"DigestMethod",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< DigestMethod_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!DigestMethod_.present ())
            {
              ::std::auto_ptr< DigestMethod_type > r (
                dynamic_cast< DigestMethod_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->DigestMethod (r);
              continue;
            }
          }
        }

        // DigestValue
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"DigestValue",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< DigestValue_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!DigestValue_.present ())
            {
              ::std::auto_ptr< DigestValue_type > r (
                dynamic_cast< DigestValue_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->DigestValue (r);
              continue;
            }
          }
        }

        break;
      }

      if (!DigestMethod_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"DigestMethod",
          L"http://www.w3.org/2000/09/xmldsig#");
      }

      if (!DigestValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"DigestValue",
          L"http://www.w3.org/2000/09/xmldsig#");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"Id" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Id_type > r (
            Id_traits::create (i, f, this));

          this->Id (r);
          continue;
        }

        if (n.name () == L"URI" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< URI_type > r (
            URI_traits::create (i, f, this));

          this->URI (r);
          continue;
        }

        if (n.name () == L"Type" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Type_type > r (
            Type_traits::create (i, f, this));

          this->Type (r);
          continue;
        }
      }
    }

    ReferenceType* ReferenceType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ReferenceType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ReferenceType >
    _xsd_ReferenceType_type_factory_init (
      L"ReferenceType",
      L"http://www.w3.org/2000/09/xmldsig#");


    // TransformsType
    //

    TransformsType::
    TransformsType ()
    : ::xml_schema::type (),
      Transform_ (::xml_schema::flags (), this)
    {
    }

    TransformsType::
    TransformsType (const TransformsType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (x, f, c),
      Transform_ (x.Transform_, f, this)
    {
    }

    TransformsType::
    TransformsType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Transform_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e);
        this->parse (p, f);
      }
    }

    void TransformsType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Transform
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"Transform",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< Transform_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< Transform_type > r (
              dynamic_cast< Transform_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->Transform ().push_back (r);
            continue;
          }
        }

        break;
      }
    }

    TransformsType* TransformsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new TransformsType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, TransformsType >
    _xsd_TransformsType_type_factory_init (
      L"TransformsType",
      L"http://www.w3.org/2000/09/xmldsig#");


    // TransformType
    //

    TransformType::
    TransformType ()
    : ::xml_schema::type (),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      any_ (this->dom_document ()),
      XPath_ (::xml_schema::flags (), this),
      Algorithm_ (::xml_schema::flags (), this)
    {
    }

    TransformType::
    TransformType (const Algorithm_type& Algorithm)
    : ::xml_schema::type (),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      any_ (this->dom_document ()),
      XPath_ (::xml_schema::flags (), this),
      Algorithm_ (Algorithm, ::xml_schema::flags (), this)
    {
    }

    TransformType::
    TransformType (const TransformType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (x, f, c),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      any_ (x.any_, this->dom_document ()),
      XPath_ (x.XPath_, f, this),
      Algorithm_ (x.Algorithm_, f, this)
    {
    }

    TransformType::
    TransformType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      any_ (this->dom_document ()),
      XPath_ (f, this),
      Algorithm_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e);
        this->parse (p, f);
      }
    }

    void TransformType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // any
        //
        if ((!n.namespace_ ().empty () && n.namespace_ () != L"http://www.w3.org/2000/09/xmldsig#"))
        {
          ::xercesc::DOMElement* r (
            static_cast< ::xercesc::DOMElement* > (
              this->dom_document ().importNode (
                const_cast< ::xercesc::DOMElement* > (&i), true)));
          this->any ().push_back (r);
          continue;
        }

        // XPath
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"XPath",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< XPath_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< XPath_type > r (
              dynamic_cast< XPath_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->XPath ().push_back (r);
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"Algorithm" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Algorithm_type > r (
            Algorithm_traits::create (i, f, this));

          this->Algorithm (r);
          continue;
        }
      }

      if (!Algorithm_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Algorithm",
          L"");
      }
    }

    TransformType* TransformType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new TransformType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, TransformType >
    _xsd_TransformType_type_factory_init (
      L"TransformType",
      L"http://www.w3.org/2000/09/xmldsig#");


    // DigestMethodType
    //

    DigestMethodType::
    DigestMethodType ()
    : ::xml_schema::type (),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      any_ (this->dom_document ()),
      Algorithm_ (::xml_schema::flags (), this)
    {
    }

    DigestMethodType::
    DigestMethodType (const Algorithm_type& Algorithm)
    : ::xml_schema::type (),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      any_ (this->dom_document ()),
      Algorithm_ (Algorithm, ::xml_schema::flags (), this)
    {
    }

    DigestMethodType::
    DigestMethodType (const DigestMethodType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
    : ::xml_schema::type (x, f, c),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      any_ (x.any_, this->dom_document ()),
      Algorithm_ (x.Algorithm_, f, this)
    {
    }

    DigestMethodType::
    DigestMethodType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      any_ (this->dom_document ()),
      Algorithm_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e);
        this->parse (p, f);
      }
    }

    void DigestMethodType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // any
        //
        if ((!n.namespace_ ().empty () && n.namespace_ () != L"http://www.w3.org/2000/09/xmldsig#"))
        {
          ::xercesc::DOMElement* r (
            static_cast< ::xercesc::DOMElement* > (
              this->dom_document ().importNode (
                const_cast< ::xercesc::DOMElement* > (&i), true)));
          this->any ().push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"Algorithm" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Algorithm_type > r (
            Algorithm_traits::create (i, f, this));

          this->Algorithm (r);
          continue;
        }
      }

      if (!Algorithm_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Algorithm",
          L"");
      }
    }

    DigestMethodType* DigestMethodType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new DigestMethodType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DigestMethodType >
    _xsd_DigestMethodType_type_factory_init (
      L"DigestMethodType",
      L"http://www.w3.org/2000/09/xmldsig#");


    // DigestValueType
    //

    DigestValueType::
    DigestValueType ()
    : ::xml_schema::base64_binary ()
    {
    }

    DigestValueType::
    DigestValueType (const ::xml_schema::base64_binary& base64Binary)
    : ::xml_schema::base64_binary (base64Binary)
    {
    }

    DigestValueType::
    DigestValueType (const DigestValueType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::base64_binary (x, f, c)
    {
    }

    DigestValueType::
    DigestValueType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::base64_binary (e, f, c)
    {
    }

    DigestValueType::
    DigestValueType (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::base64_binary (a, f, c)
    {
    }

    DigestValueType::
    DigestValueType (const ::std::wstring& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::base64_binary (s, e, f, c)
    {
    }

    DigestValueType* DigestValueType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new DigestValueType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DigestValueType >
    _xsd_DigestValueType_type_factory_init (
      L"DigestValueType",
      L"http://www.w3.org/2000/09/xmldsig#");


    // KeyInfoType
    //

    KeyInfoType::
    KeyInfoType ()
    : ::xml_schema::type (),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      KeyName_ (::xml_schema::flags (), this),
      KeyValue_ (::xml_schema::flags (), this),
      RetrievalMethod_ (::xml_schema::flags (), this),
      X509Data_ (::xml_schema::flags (), this),
      PGPData_ (::xml_schema::flags (), this),
      SPKIData_ (::xml_schema::flags (), this),
      MgmtData_ (::xml_schema::flags (), this),
      any_ (this->dom_document ()),
      Id_ (::xml_schema::flags (), this)
    {
    }

    KeyInfoType::
    KeyInfoType (const KeyInfoType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xml_schema::type (x, f, c),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      KeyName_ (x.KeyName_, f, this),
      KeyValue_ (x.KeyValue_, f, this),
      RetrievalMethod_ (x.RetrievalMethod_, f, this),
      X509Data_ (x.X509Data_, f, this),
      PGPData_ (x.PGPData_, f, this),
      SPKIData_ (x.SPKIData_, f, this),
      MgmtData_ (x.MgmtData_, f, this),
      any_ (x.any_, this->dom_document ()),
      Id_ (x.Id_, f, this)
    {
    }

    KeyInfoType::
    KeyInfoType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      KeyName_ (f, this),
      KeyValue_ (f, this),
      RetrievalMethod_ (f, this),
      X509Data_ (f, this),
      PGPData_ (f, this),
      SPKIData_ (f, this),
      MgmtData_ (f, this),
      any_ (this->dom_document ()),
      Id_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e);
        this->parse (p, f);
      }
    }

    void KeyInfoType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // KeyName
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"KeyName",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< KeyName_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< KeyName_type > r (
              dynamic_cast< KeyName_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->KeyName ().push_back (r);
            continue;
          }
        }

        // KeyValue
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"KeyValue",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< KeyValue_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< KeyValue_type > r (
              dynamic_cast< KeyValue_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->KeyValue ().push_back (r);
            continue;
          }
        }

        // RetrievalMethod
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"RetrievalMethod",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< RetrievalMethod_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< RetrievalMethod_type > r (
              dynamic_cast< RetrievalMethod_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->RetrievalMethod ().push_back (r);
            continue;
          }
        }

        // X509Data
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"X509Data",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< X509Data_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< X509Data_type > r (
              dynamic_cast< X509Data_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->X509Data ().push_back (r);
            continue;
          }
        }

        // PGPData
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"PGPData",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< PGPData_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< PGPData_type > r (
              dynamic_cast< PGPData_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->PGPData ().push_back (r);
            continue;
          }
        }

        // SPKIData
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"SPKIData",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< SPKIData_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< SPKIData_type > r (
              dynamic_cast< SPKIData_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->SPKIData ().push_back (r);
            continue;
          }
        }

        // MgmtData
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"MgmtData",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< MgmtData_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< MgmtData_type > r (
              dynamic_cast< MgmtData_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->MgmtData ().push_back (r);
            continue;
          }
        }

        // any
        //
        if ((!n.namespace_ ().empty () && n.namespace_ () != L"http://www.w3.org/2000/09/xmldsig#"))
        {
          ::xercesc::DOMElement* r (
            static_cast< ::xercesc::DOMElement* > (
              this->dom_document ().importNode (
                const_cast< ::xercesc::DOMElement* > (&i), true)));
          this->any ().push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"Id" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Id_type > r (
            Id_traits::create (i, f, this));

          this->Id (r);
          continue;
        }
      }
    }

    KeyInfoType* KeyInfoType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new KeyInfoType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, KeyInfoType >
    _xsd_KeyInfoType_type_factory_init (
      L"KeyInfoType",
      L"http://www.w3.org/2000/09/xmldsig#");


    // KeyValueType
    //

    KeyValueType::
    KeyValueType ()
    : ::xml_schema::type (),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      DSAKeyValue_ (::xml_schema::flags (), this),
      RSAKeyValue_ (::xml_schema::flags (), this),
      any_ (this->dom_document ())
    {
    }

    KeyValueType::
    KeyValueType (const KeyValueType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (x, f, c),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      DSAKeyValue_ (x.DSAKeyValue_, f, this),
      RSAKeyValue_ (x.RSAKeyValue_, f, this),
      any_ (x.any_, this->dom_document ())
    {
    }

    KeyValueType::
    KeyValueType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      DSAKeyValue_ (f, this),
      RSAKeyValue_ (f, this),
      any_ (this->dom_document ())
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e);
        this->parse (p, f);
      }
    }

    void KeyValueType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // DSAKeyValue
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"DSAKeyValue",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< DSAKeyValue_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->DSAKeyValue ())
            {
              ::std::auto_ptr< DSAKeyValue_type > r (
                dynamic_cast< DSAKeyValue_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->DSAKeyValue (r);
              continue;
            }
          }
        }

        // RSAKeyValue
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"RSAKeyValue",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< RSAKeyValue_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->RSAKeyValue ())
            {
              ::std::auto_ptr< RSAKeyValue_type > r (
                dynamic_cast< RSAKeyValue_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->RSAKeyValue (r);
              continue;
            }
          }
        }

        // any
        //
        if ((!n.namespace_ ().empty () && n.namespace_ () != L"http://www.w3.org/2000/09/xmldsig#"))
        {
          if (!this->any ())
          {
            ::xercesc::DOMElement* r (
              static_cast< ::xercesc::DOMElement* > (
                this->dom_document ().importNode (
                  const_cast< ::xercesc::DOMElement* > (&i), true)));
            this->any (r);
            continue;
          }
        }

        break;
      }
    }

    KeyValueType* KeyValueType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new KeyValueType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, KeyValueType >
    _xsd_KeyValueType_type_factory_init (
      L"KeyValueType",
      L"http://www.w3.org/2000/09/xmldsig#");


    // RetrievalMethodType
    //

    RetrievalMethodType::
    RetrievalMethodType ()
    : ::xml_schema::type (),
      Transforms_ (::xml_schema::flags (), this),
      URI_ (::xml_schema::flags (), this),
      Type_ (::xml_schema::flags (), this)
    {
    }

    RetrievalMethodType::
    RetrievalMethodType (const RetrievalMethodType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
    : ::xml_schema::type (x, f, c),
      Transforms_ (x.Transforms_, f, this),
      URI_ (x.URI_, f, this),
      Type_ (x.Type_, f, this)
    {
    }

    RetrievalMethodType::
    RetrievalMethodType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Transforms_ (f, this),
      URI_ (f, this),
      Type_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e);
        this->parse (p, f);
      }
    }

    void RetrievalMethodType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Transforms
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"Transforms",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< Transforms_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->Transforms ())
            {
              ::std::auto_ptr< Transforms_type > r (
                dynamic_cast< Transforms_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Transforms (r);
              continue;
            }
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"URI" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< URI_type > r (
            URI_traits::create (i, f, this));

          this->URI (r);
          continue;
        }

        if (n.name () == L"Type" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Type_type > r (
            Type_traits::create (i, f, this));

          this->Type (r);
          continue;
        }
      }
    }

    RetrievalMethodType* RetrievalMethodType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new RetrievalMethodType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, RetrievalMethodType >
    _xsd_RetrievalMethodType_type_factory_init (
      L"RetrievalMethodType",
      L"http://www.w3.org/2000/09/xmldsig#");


    // X509DataType
    //

    X509DataType::
    X509DataType ()
    : ::xml_schema::type (),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      X509IssuerSerial_ (::xml_schema::flags (), this),
      X509SKI_ (::xml_schema::flags (), this),
      X509SubjectName_ (::xml_schema::flags (), this),
      X509Certificate_ (::xml_schema::flags (), this),
      X509CRL_ (::xml_schema::flags (), this),
      any_ (this->dom_document ())
    {
    }

    X509DataType::
    X509DataType (const X509DataType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (x, f, c),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      X509IssuerSerial_ (x.X509IssuerSerial_, f, this),
      X509SKI_ (x.X509SKI_, f, this),
      X509SubjectName_ (x.X509SubjectName_, f, this),
      X509Certificate_ (x.X509Certificate_, f, this),
      X509CRL_ (x.X509CRL_, f, this),
      any_ (x.any_, this->dom_document ())
    {
    }

    X509DataType::
    X509DataType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      X509IssuerSerial_ (f, this),
      X509SKI_ (f, this),
      X509SubjectName_ (f, this),
      X509Certificate_ (f, this),
      X509CRL_ (f, this),
      any_ (this->dom_document ())
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e);
        this->parse (p, f);
      }
    }

    void X509DataType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // X509IssuerSerial
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"X509IssuerSerial",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< X509IssuerSerial_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< X509IssuerSerial_type > r (
              dynamic_cast< X509IssuerSerial_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->X509IssuerSerial ().push_back (r);
            continue;
          }
        }

        // X509SKI
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"X509SKI",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< X509SKI_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< X509SKI_type > r (
              dynamic_cast< X509SKI_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->X509SKI ().push_back (r);
            continue;
          }
        }

        // X509SubjectName
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"X509SubjectName",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< X509SubjectName_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< X509SubjectName_type > r (
              dynamic_cast< X509SubjectName_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->X509SubjectName ().push_back (r);
            continue;
          }
        }

        // X509Certificate
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"X509Certificate",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< X509Certificate_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< X509Certificate_type > r (
              dynamic_cast< X509Certificate_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->X509Certificate ().push_back (r);
            continue;
          }
        }

        // X509CRL
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"X509CRL",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< X509CRL_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< X509CRL_type > r (
              dynamic_cast< X509CRL_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->X509CRL ().push_back (r);
            continue;
          }
        }

        // any
        //
        if ((!n.namespace_ ().empty () && n.namespace_ () != L"http://www.w3.org/2000/09/xmldsig#"))
        {
          ::xercesc::DOMElement* r (
            static_cast< ::xercesc::DOMElement* > (
              this->dom_document ().importNode (
                const_cast< ::xercesc::DOMElement* > (&i), true)));
          this->any ().push_back (r);
          continue;
        }

        break;
      }
    }

    X509DataType* X509DataType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new X509DataType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, X509DataType >
    _xsd_X509DataType_type_factory_init (
      L"X509DataType",
      L"http://www.w3.org/2000/09/xmldsig#");


    // X509IssuerSerialType
    //

    X509IssuerSerialType::
    X509IssuerSerialType ()
    : ::xml_schema::type (),
      X509IssuerName_ (::xml_schema::flags (), this),
      X509SerialNumber_ (::xml_schema::flags (), this)
    {
    }

    X509IssuerSerialType::
    X509IssuerSerialType (const X509IssuerName_type& X509IssuerName,
                          const X509SerialNumber_type& X509SerialNumber)
    : ::xml_schema::type (),
      X509IssuerName_ (X509IssuerName, ::xml_schema::flags (), this),
      X509SerialNumber_ (X509SerialNumber, ::xml_schema::flags (), this)
    {
    }

    X509IssuerSerialType::
    X509IssuerSerialType (const X509IssuerSerialType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::type* c)
    : ::xml_schema::type (x, f, c),
      X509IssuerName_ (x.X509IssuerName_, f, this),
      X509SerialNumber_ (x.X509SerialNumber_, f, this)
    {
    }

    X509IssuerSerialType::
    X509IssuerSerialType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::type* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      X509IssuerName_ (f, this),
      X509SerialNumber_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e);
        this->parse (p, f);
      }
    }

    void X509IssuerSerialType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // X509IssuerName
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"X509IssuerName",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< X509IssuerName_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!X509IssuerName_.present ())
            {
              ::std::auto_ptr< X509IssuerName_type > r (
                dynamic_cast< X509IssuerName_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->X509IssuerName (r);
              continue;
            }
          }
        }

        // X509SerialNumber
        //
        if (n.name () == L"X509SerialNumber" && n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          if (!X509SerialNumber_.present ())
          {
            this->X509SerialNumber (X509SerialNumber_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!X509IssuerName_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"X509IssuerName",
          L"http://www.w3.org/2000/09/xmldsig#");
      }

      if (!X509SerialNumber_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"X509SerialNumber",
          L"http://www.w3.org/2000/09/xmldsig#");
      }
    }

    X509IssuerSerialType* X509IssuerSerialType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new X509IssuerSerialType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, X509IssuerSerialType >
    _xsd_X509IssuerSerialType_type_factory_init (
      L"X509IssuerSerialType",
      L"http://www.w3.org/2000/09/xmldsig#");


    // PGPDataType
    //

    PGPDataType::
    PGPDataType ()
    : ::xml_schema::type (),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      PGPKeyID_ (::xml_schema::flags (), this),
      PGPKeyPacket_ (::xml_schema::flags (), this),
      any_ (this->dom_document ()),
      any1_ (this->dom_document ())
    {
    }

    PGPDataType::
    PGPDataType (const PGPDataType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xml_schema::type (x, f, c),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      PGPKeyID_ (x.PGPKeyID_, f, this),
      PGPKeyPacket_ (x.PGPKeyPacket_, f, this),
      any_ (x.any_, this->dom_document ()),
      any1_ (x.any1_, this->dom_document ())
    {
    }

    PGPDataType::
    PGPDataType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      PGPKeyID_ (f, this),
      PGPKeyPacket_ (f, this),
      any_ (this->dom_document ()),
      any1_ (this->dom_document ())
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e);
        this->parse (p, f);
      }
    }

    void PGPDataType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // PGPKeyID
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"PGPKeyID",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< PGPKeyID_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->PGPKeyID ())
            {
              ::std::auto_ptr< PGPKeyID_type > r (
                dynamic_cast< PGPKeyID_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->PGPKeyID (r);
              continue;
            }
          }
        }

        // PGPKeyPacket
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"PGPKeyPacket",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< PGPKeyPacket_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->PGPKeyPacket ())
            {
              ::std::auto_ptr< PGPKeyPacket_type > r (
                dynamic_cast< PGPKeyPacket_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->PGPKeyPacket (r);
              continue;
            }
          }
        }

        // any
        //
        if ((!n.namespace_ ().empty () && n.namespace_ () != L"http://www.w3.org/2000/09/xmldsig#"))
        {
          ::xercesc::DOMElement* r (
            static_cast< ::xercesc::DOMElement* > (
              this->dom_document ().importNode (
                const_cast< ::xercesc::DOMElement* > (&i), true)));
          this->any ().push_back (r);
          continue;
        }

        // any1
        //
        if ((!n.namespace_ ().empty () && n.namespace_ () != L"http://www.w3.org/2000/09/xmldsig#"))
        {
          ::xercesc::DOMElement* r (
            static_cast< ::xercesc::DOMElement* > (
              this->dom_document ().importNode (
                const_cast< ::xercesc::DOMElement* > (&i), true)));
          this->any1 ().push_back (r);
          continue;
        }

        break;
      }
    }

    PGPDataType* PGPDataType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new PGPDataType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, PGPDataType >
    _xsd_PGPDataType_type_factory_init (
      L"PGPDataType",
      L"http://www.w3.org/2000/09/xmldsig#");


    // SPKIDataType
    //

    SPKIDataType::
    SPKIDataType ()
    : ::xml_schema::type (),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      SPKISexp_ (::xml_schema::flags (), this),
      any_ (this->dom_document ())
    {
    }

    SPKIDataType::
    SPKIDataType (const SPKIDataType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (x, f, c),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      SPKISexp_ (x.SPKISexp_, f, this),
      any_ (x.any_, this->dom_document ())
    {
    }

    SPKIDataType::
    SPKIDataType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      SPKISexp_ (f, this),
      any_ (this->dom_document ())
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e);
        this->parse (p, f);
      }
    }

    void SPKIDataType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // SPKISexp
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"SPKISexp",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< SPKISexp_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< SPKISexp_type > r (
              dynamic_cast< SPKISexp_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->SPKISexp ().push_back (r);
            continue;
          }
        }

        // any
        //
        if ((!n.namespace_ ().empty () && n.namespace_ () != L"http://www.w3.org/2000/09/xmldsig#"))
        {
          ::xercesc::DOMElement* r (
            static_cast< ::xercesc::DOMElement* > (
              this->dom_document ().importNode (
                const_cast< ::xercesc::DOMElement* > (&i), true)));
          this->any ().push_back (r);
          continue;
        }

        break;
      }
    }

    SPKIDataType* SPKIDataType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new SPKIDataType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SPKIDataType >
    _xsd_SPKIDataType_type_factory_init (
      L"SPKIDataType",
      L"http://www.w3.org/2000/09/xmldsig#");


    // ObjectType
    //

    ObjectType::
    ObjectType ()
    : ::xml_schema::type (),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      any_ (this->dom_document ()),
      Id_ (::xml_schema::flags (), this),
      MimeType_ (::xml_schema::flags (), this),
      Encoding_ (::xml_schema::flags (), this)
    {
    }

    ObjectType::
    ObjectType (const ObjectType& x,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
    : ::xml_schema::type (x, f, c),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      any_ (x.any_, this->dom_document ()),
      Id_ (x.Id_, f, this),
      MimeType_ (x.MimeType_, f, this),
      Encoding_ (x.Encoding_, f, this)
    {
    }

    ObjectType::
    ObjectType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      any_ (this->dom_document ()),
      Id_ (f, this),
      MimeType_ (f, this),
      Encoding_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e);
        this->parse (p, f);
      }
    }

    void ObjectType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // any
        //
        if (true)
        {
          ::xercesc::DOMElement* r (
            static_cast< ::xercesc::DOMElement* > (
              this->dom_document ().importNode (
                const_cast< ::xercesc::DOMElement* > (&i), true)));
          this->any ().push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"Id" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Id_type > r (
            Id_traits::create (i, f, this));

          this->Id (r);
          continue;
        }

        if (n.name () == L"MimeType" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< MimeType_type > r (
            MimeType_traits::create (i, f, this));

          this->MimeType (r);
          continue;
        }

        if (n.name () == L"Encoding" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Encoding_type > r (
            Encoding_traits::create (i, f, this));

          this->Encoding (r);
          continue;
        }
      }
    }

    ObjectType* ObjectType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ObjectType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ObjectType >
    _xsd_ObjectType_type_factory_init (
      L"ObjectType",
      L"http://www.w3.org/2000/09/xmldsig#");


    // ManifestType
    //

    ManifestType::
    ManifestType ()
    : ::xml_schema::type (),
      Reference_ (::xml_schema::flags (), this),
      Id_ (::xml_schema::flags (), this)
    {
    }

    ManifestType::
    ManifestType (const ManifestType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (x, f, c),
      Reference_ (x.Reference_, f, this),
      Id_ (x.Id_, f, this)
    {
    }

    ManifestType::
    ManifestType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Reference_ (f, this),
      Id_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e);
        this->parse (p, f);
      }
    }

    void ManifestType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Reference
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"Reference",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< Reference_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< Reference_type > r (
              dynamic_cast< Reference_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->Reference ().push_back (r);
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"Id" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Id_type > r (
            Id_traits::create (i, f, this));

          this->Id (r);
          continue;
        }
      }
    }

    ManifestType* ManifestType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new ManifestType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ManifestType >
    _xsd_ManifestType_type_factory_init (
      L"ManifestType",
      L"http://www.w3.org/2000/09/xmldsig#");


    // SignaturePropertiesType
    //

    SignaturePropertiesType::
    SignaturePropertiesType ()
    : ::xml_schema::type (),
      SignatureProperty_ (::xml_schema::flags (), this),
      Id_ (::xml_schema::flags (), this)
    {
    }

    SignaturePropertiesType::
    SignaturePropertiesType (const SignaturePropertiesType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::type* c)
    : ::xml_schema::type (x, f, c),
      SignatureProperty_ (x.SignatureProperty_, f, this),
      Id_ (x.Id_, f, this)
    {
    }

    SignaturePropertiesType::
    SignaturePropertiesType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::type* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      SignatureProperty_ (f, this),
      Id_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e);
        this->parse (p, f);
      }
    }

    void SignaturePropertiesType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // SignatureProperty
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"SignatureProperty",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< SignatureProperty_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< SignatureProperty_type > r (
              dynamic_cast< SignatureProperty_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->SignatureProperty ().push_back (r);
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"Id" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Id_type > r (
            Id_traits::create (i, f, this));

          this->Id (r);
          continue;
        }
      }
    }

    SignaturePropertiesType* SignaturePropertiesType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new SignaturePropertiesType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SignaturePropertiesType >
    _xsd_SignaturePropertiesType_type_factory_init (
      L"SignaturePropertiesType",
      L"http://www.w3.org/2000/09/xmldsig#");


    // SignaturePropertyType
    //

    SignaturePropertyType::
    SignaturePropertyType ()
    : ::xml_schema::type (),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      any_ (this->dom_document ()),
      Target_ (::xml_schema::flags (), this),
      Id_ (::xml_schema::flags (), this)
    {
    }

    SignaturePropertyType::
    SignaturePropertyType (const Target_type& Target)
    : ::xml_schema::type (),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      any_ (this->dom_document ()),
      Target_ (Target, ::xml_schema::flags (), this),
      Id_ (::xml_schema::flags (), this)
    {
    }

    SignaturePropertyType::
    SignaturePropertyType (const SignaturePropertyType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::type* c)
    : ::xml_schema::type (x, f, c),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      any_ (x.any_, this->dom_document ()),
      Target_ (x.Target_, f, this),
      Id_ (x.Id_, f, this)
    {
    }

    SignaturePropertyType::
    SignaturePropertyType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::type* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      any_ (this->dom_document ()),
      Target_ (f, this),
      Id_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e);
        this->parse (p, f);
      }
    }

    void SignaturePropertyType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // any
        //
        if ((!n.namespace_ ().empty () && n.namespace_ () != L"http://www.w3.org/2000/09/xmldsig#"))
        {
          ::xercesc::DOMElement* r (
            static_cast< ::xercesc::DOMElement* > (
              this->dom_document ().importNode (
                const_cast< ::xercesc::DOMElement* > (&i), true)));
          this->any ().push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"Target" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Target_type > r (
            Target_traits::create (i, f, this));

          this->Target (r);
          continue;
        }

        if (n.name () == L"Id" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Id_type > r (
            Id_traits::create (i, f, this));

          this->Id (r);
          continue;
        }
      }

      if (!Target_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Target",
          L"");
      }
    }

    SignaturePropertyType* SignaturePropertyType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new SignaturePropertyType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SignaturePropertyType >
    _xsd_SignaturePropertyType_type_factory_init (
      L"SignaturePropertyType",
      L"http://www.w3.org/2000/09/xmldsig#");


    // HMACOutputLengthType
    //

    HMACOutputLengthType::
    HMACOutputLengthType ()
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type > ()
    {
    }

    HMACOutputLengthType::
    HMACOutputLengthType (const ::xml_schema::integer& integer)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type > (integer)
    {
    }

    HMACOutputLengthType::
    HMACOutputLengthType (const HMACOutputLengthType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::type* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type > (x, f, c)
    {
    }

    HMACOutputLengthType::
    HMACOutputLengthType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::type* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type > (e, f, c)
    {
    }

    HMACOutputLengthType::
    HMACOutputLengthType (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f,
                          ::xml_schema::type* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type > (a, f, c)
    {
    }

    HMACOutputLengthType::
    HMACOutputLengthType (const ::std::wstring& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f,
                          ::xml_schema::type* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type > (s, e, f, c)
    {
    }

    HMACOutputLengthType* HMACOutputLengthType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new HMACOutputLengthType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, HMACOutputLengthType >
    _xsd_HMACOutputLengthType_type_factory_init (
      L"HMACOutputLengthType",
      L"http://www.w3.org/2000/09/xmldsig#");


    // DSAKeyValueType
    //

    DSAKeyValueType::
    DSAKeyValueType ()
    : ::xml_schema::type (),
      P_ (::xml_schema::flags (), this),
      Q_ (::xml_schema::flags (), this),
      G_ (::xml_schema::flags (), this),
      Y_ (::xml_schema::flags (), this),
      J_ (::xml_schema::flags (), this),
      Seed_ (::xml_schema::flags (), this),
      PgenCounter_ (::xml_schema::flags (), this)
    {
    }

    DSAKeyValueType::
    DSAKeyValueType (const Y_type& Y)
    : ::xml_schema::type (),
      P_ (::xml_schema::flags (), this),
      Q_ (::xml_schema::flags (), this),
      G_ (::xml_schema::flags (), this),
      Y_ (Y, ::xml_schema::flags (), this),
      J_ (::xml_schema::flags (), this),
      Seed_ (::xml_schema::flags (), this),
      PgenCounter_ (::xml_schema::flags (), this)
    {
    }

    DSAKeyValueType::
    DSAKeyValueType (const DSAKeyValueType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::type (x, f, c),
      P_ (x.P_, f, this),
      Q_ (x.Q_, f, this),
      G_ (x.G_, f, this),
      Y_ (x.Y_, f, this),
      J_ (x.J_, f, this),
      Seed_ (x.Seed_, f, this),
      PgenCounter_ (x.PgenCounter_, f, this)
    {
    }

    DSAKeyValueType::
    DSAKeyValueType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      P_ (f, this),
      Q_ (f, this),
      G_ (f, this),
      Y_ (f, this),
      J_ (f, this),
      Seed_ (f, this),
      PgenCounter_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e);
        this->parse (p, f);
      }
    }

    void DSAKeyValueType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // P
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"P",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< P_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->P ())
            {
              ::std::auto_ptr< P_type > r (
                dynamic_cast< P_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->P (r);
              continue;
            }
          }
        }

        // Q
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"Q",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< Q_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->Q ())
            {
              ::std::auto_ptr< Q_type > r (
                dynamic_cast< Q_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Q (r);
              continue;
            }
          }
        }

        // G
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"G",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< G_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->G ())
            {
              ::std::auto_ptr< G_type > r (
                dynamic_cast< G_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->G (r);
              continue;
            }
          }
        }

        // Y
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"Y",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< Y_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Y_.present ())
            {
              ::std::auto_ptr< Y_type > r (
                dynamic_cast< Y_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Y (r);
              continue;
            }
          }
        }

        // J
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"J",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< J_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->J ())
            {
              ::std::auto_ptr< J_type > r (
                dynamic_cast< J_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->J (r);
              continue;
            }
          }
        }

        // Seed
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"Seed",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< Seed_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->Seed ())
            {
              ::std::auto_ptr< Seed_type > r (
                dynamic_cast< Seed_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Seed (r);
              continue;
            }
          }
        }

        // PgenCounter
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"PgenCounter",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< PgenCounter_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->PgenCounter ())
            {
              ::std::auto_ptr< PgenCounter_type > r (
                dynamic_cast< PgenCounter_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->PgenCounter (r);
              continue;
            }
          }
        }

        break;
      }

      if (!Y_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Y",
          L"http://www.w3.org/2000/09/xmldsig#");
      }
    }

    DSAKeyValueType* DSAKeyValueType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new DSAKeyValueType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DSAKeyValueType >
    _xsd_DSAKeyValueType_type_factory_init (
      L"DSAKeyValueType",
      L"http://www.w3.org/2000/09/xmldsig#");


    // RSAKeyValueType
    //

    RSAKeyValueType::
    RSAKeyValueType ()
    : ::xml_schema::type (),
      Modulus_ (::xml_schema::flags (), this),
      Exponent_ (::xml_schema::flags (), this)
    {
    }

    RSAKeyValueType::
    RSAKeyValueType (const Modulus_type& Modulus,
                     const Exponent_type& Exponent)
    : ::xml_schema::type (),
      Modulus_ (Modulus, ::xml_schema::flags (), this),
      Exponent_ (Exponent, ::xml_schema::flags (), this)
    {
    }

    RSAKeyValueType::
    RSAKeyValueType (const RSAKeyValueType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::type (x, f, c),
      Modulus_ (x.Modulus_, f, this),
      Exponent_ (x.Exponent_, f, this)
    {
    }

    RSAKeyValueType::
    RSAKeyValueType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Modulus_ (f, this),
      Exponent_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e);
        this->parse (p, f);
      }
    }

    void RSAKeyValueType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Modulus
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"Modulus",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< Modulus_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Modulus_.present ())
            {
              ::std::auto_ptr< Modulus_type > r (
                dynamic_cast< Modulus_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Modulus (r);
              continue;
            }
          }
        }

        // Exponent
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xml_schema::type > tmp (
            tfm.create (
              L"Exponent",
              L"http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< Exponent_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Exponent_.present ())
            {
              ::std::auto_ptr< Exponent_type > r (
                dynamic_cast< Exponent_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Exponent (r);
              continue;
            }
          }
        }

        break;
      }

      if (!Modulus_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Modulus",
          L"http://www.w3.org/2000/09/xmldsig#");
      }

      if (!Exponent_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Exponent",
          L"http://www.w3.org/2000/09/xmldsig#");
      }
    }

    RSAKeyValueType* RSAKeyValueType::
    _clone (::xml_schema::flags f,
            ::xml_schema::type* c) const
    {
      return new RSAKeyValueType (*this, f, c);
    }

    static
    ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, RSAKeyValueType >
    _xsd_RSAKeyValueType_type_factory_init (
      L"RSAKeyValueType",
      L"http://www.w3.org/2000/09/xmldsig#");
  }
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace w3
{
  namespace xmldsig
  {
    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (const ::std::wstring& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::SignatureType > r (
        ::w3::xmldsig::Signature (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (const ::std::wstring& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SignatureType > r (
        ::w3::xmldsig::Signature (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (const ::std::wstring& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SignatureType > r (
        ::w3::xmldsig::Signature (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Signature (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Signature (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Signature (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (::std::istream& is,
               const ::std::wstring& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Signature (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (::std::istream& is,
               const ::std::wstring& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Signature (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (::std::istream& is,
               const ::std::wstring& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Signature (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (const ::xercesc::DOMInputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::SignatureType > r (
        ::w3::xmldsig::Signature (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (const ::xercesc::DOMInputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SignatureType > r (
        ::w3::xmldsig::Signature (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (const ::xercesc::DOMInputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SignatureType > r (
        ::w3::xmldsig::Signature (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::w3::xmldsig::SignatureType > r (
          ::w3::xmldsig::Signature (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"Signature",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::SignatureType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::w3::xmldsig::SignatureType > r (
          dynamic_cast< ::w3::xmldsig::SignatureType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Signature",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureType >
    Signature (::xercesc::DOMDocument* d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"Signature",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::SignatureType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::w3::xmldsig::SignatureType > r (
          dynamic_cast< ::w3::xmldsig::SignatureType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Signature",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (const ::std::wstring& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::SignatureValueType > r (
        ::w3::xmldsig::SignatureValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (const ::std::wstring& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SignatureValueType > r (
        ::w3::xmldsig::SignatureValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (const ::std::wstring& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SignatureValueType > r (
        ::w3::xmldsig::SignatureValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureValue (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (::std::istream& is,
                    const ::std::wstring& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureValue (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (::std::istream& is,
                    const ::std::wstring& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (::std::istream& is,
                    const ::std::wstring& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (const ::xercesc::DOMInputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::SignatureValueType > r (
        ::w3::xmldsig::SignatureValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (const ::xercesc::DOMInputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SignatureValueType > r (
        ::w3::xmldsig::SignatureValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (const ::xercesc::DOMInputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SignatureValueType > r (
        ::w3::xmldsig::SignatureValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::w3::xmldsig::SignatureValueType > r (
          ::w3::xmldsig::SignatureValue (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"SignatureValue",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::SignatureValueType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::w3::xmldsig::SignatureValueType > r (
          dynamic_cast< ::w3::xmldsig::SignatureValueType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"SignatureValue",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureValueType >
    SignatureValue (::xercesc::DOMDocument* d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"SignatureValue",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::SignatureValueType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::w3::xmldsig::SignatureValueType > r (
          dynamic_cast< ::w3::xmldsig::SignatureValueType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"SignatureValue",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (const ::std::wstring& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::SignedInfoType > r (
        ::w3::xmldsig::SignedInfo (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (const ::std::wstring& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SignedInfoType > r (
        ::w3::xmldsig::SignedInfo (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (const ::std::wstring& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SignedInfoType > r (
        ::w3::xmldsig::SignedInfo (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignedInfo (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignedInfo (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignedInfo (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (::std::istream& is,
                const ::std::wstring& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignedInfo (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (::std::istream& is,
                const ::std::wstring& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignedInfo (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (::std::istream& is,
                const ::std::wstring& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignedInfo (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (const ::xercesc::DOMInputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::SignedInfoType > r (
        ::w3::xmldsig::SignedInfo (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (const ::xercesc::DOMInputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SignedInfoType > r (
        ::w3::xmldsig::SignedInfo (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (const ::xercesc::DOMInputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SignedInfoType > r (
        ::w3::xmldsig::SignedInfo (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::w3::xmldsig::SignedInfoType > r (
          ::w3::xmldsig::SignedInfo (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"SignedInfo",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::SignedInfoType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::w3::xmldsig::SignedInfoType > r (
          dynamic_cast< ::w3::xmldsig::SignedInfoType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"SignedInfo",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::SignedInfoType >
    SignedInfo (::xercesc::DOMDocument* d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"SignedInfo",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::SignedInfoType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::w3::xmldsig::SignedInfoType > r (
          dynamic_cast< ::w3::xmldsig::SignedInfoType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"SignedInfo",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (const ::std::wstring& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType > r (
        ::w3::xmldsig::CanonicalizationMethod (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (const ::std::wstring& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType > r (
        ::w3::xmldsig::CanonicalizationMethod (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (const ::std::wstring& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType > r (
        ::w3::xmldsig::CanonicalizationMethod (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::CanonicalizationMethod (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::CanonicalizationMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::CanonicalizationMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (::std::istream& is,
                            const ::std::wstring& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::CanonicalizationMethod (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (::std::istream& is,
                            const ::std::wstring& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::CanonicalizationMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (::std::istream& is,
                            const ::std::wstring& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::CanonicalizationMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (const ::xercesc::DOMInputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType > r (
        ::w3::xmldsig::CanonicalizationMethod (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (const ::xercesc::DOMInputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType > r (
        ::w3::xmldsig::CanonicalizationMethod (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (const ::xercesc::DOMInputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType > r (
        ::w3::xmldsig::CanonicalizationMethod (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType > r (
          ::w3::xmldsig::CanonicalizationMethod (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"CanonicalizationMethod",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::CanonicalizationMethodType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType > r (
          dynamic_cast< ::w3::xmldsig::CanonicalizationMethodType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"CanonicalizationMethod",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType >
    CanonicalizationMethod (::xercesc::DOMDocument* d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"CanonicalizationMethod",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::CanonicalizationMethodType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::w3::xmldsig::CanonicalizationMethodType > r (
          dynamic_cast< ::w3::xmldsig::CanonicalizationMethodType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"CanonicalizationMethod",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (const ::std::wstring& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType > r (
        ::w3::xmldsig::SignatureMethod (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (const ::std::wstring& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType > r (
        ::w3::xmldsig::SignatureMethod (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (const ::std::wstring& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType > r (
        ::w3::xmldsig::SignatureMethod (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureMethod (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (::std::istream& is,
                     const ::std::wstring& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureMethod (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (::std::istream& is,
                     const ::std::wstring& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (::std::istream& is,
                     const ::std::wstring& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (const ::xercesc::DOMInputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType > r (
        ::w3::xmldsig::SignatureMethod (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (const ::xercesc::DOMInputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType > r (
        ::w3::xmldsig::SignatureMethod (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (const ::xercesc::DOMInputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType > r (
        ::w3::xmldsig::SignatureMethod (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType > r (
          ::w3::xmldsig::SignatureMethod (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"SignatureMethod",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::SignatureMethodType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType > r (
          dynamic_cast< ::w3::xmldsig::SignatureMethodType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"SignatureMethod",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType >
    SignatureMethod (::xercesc::DOMDocument* d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"SignatureMethod",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::SignatureMethodType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::w3::xmldsig::SignatureMethodType > r (
          dynamic_cast< ::w3::xmldsig::SignatureMethodType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"SignatureMethod",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (const ::std::wstring& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::ReferenceType > r (
        ::w3::xmldsig::Reference (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (const ::std::wstring& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::ReferenceType > r (
        ::w3::xmldsig::Reference (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (const ::std::wstring& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::ReferenceType > r (
        ::w3::xmldsig::Reference (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Reference (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Reference (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Reference (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (::std::istream& is,
               const ::std::wstring& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Reference (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (::std::istream& is,
               const ::std::wstring& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Reference (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (::std::istream& is,
               const ::std::wstring& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Reference (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (const ::xercesc::DOMInputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::ReferenceType > r (
        ::w3::xmldsig::Reference (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (const ::xercesc::DOMInputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::ReferenceType > r (
        ::w3::xmldsig::Reference (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (const ::xercesc::DOMInputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::ReferenceType > r (
        ::w3::xmldsig::Reference (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::w3::xmldsig::ReferenceType > r (
          ::w3::xmldsig::Reference (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"Reference",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::ReferenceType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::w3::xmldsig::ReferenceType > r (
          dynamic_cast< ::w3::xmldsig::ReferenceType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Reference",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::ReferenceType >
    Reference (::xercesc::DOMDocument* d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"Reference",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::ReferenceType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::w3::xmldsig::ReferenceType > r (
          dynamic_cast< ::w3::xmldsig::ReferenceType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Reference",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (const ::std::wstring& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::TransformsType > r (
        ::w3::xmldsig::Transforms (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (const ::std::wstring& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::TransformsType > r (
        ::w3::xmldsig::Transforms (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (const ::std::wstring& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::TransformsType > r (
        ::w3::xmldsig::Transforms (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Transforms (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Transforms (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Transforms (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (::std::istream& is,
                const ::std::wstring& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Transforms (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (::std::istream& is,
                const ::std::wstring& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Transforms (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (::std::istream& is,
                const ::std::wstring& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Transforms (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (const ::xercesc::DOMInputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::TransformsType > r (
        ::w3::xmldsig::Transforms (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (const ::xercesc::DOMInputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::TransformsType > r (
        ::w3::xmldsig::Transforms (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (const ::xercesc::DOMInputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::TransformsType > r (
        ::w3::xmldsig::Transforms (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::w3::xmldsig::TransformsType > r (
          ::w3::xmldsig::Transforms (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"Transforms",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::TransformsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::w3::xmldsig::TransformsType > r (
          dynamic_cast< ::w3::xmldsig::TransformsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Transforms",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformsType >
    Transforms (::xercesc::DOMDocument* d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"Transforms",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::TransformsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::w3::xmldsig::TransformsType > r (
          dynamic_cast< ::w3::xmldsig::TransformsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Transforms",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (const ::std::wstring& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::TransformType > r (
        ::w3::xmldsig::Transform (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (const ::std::wstring& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::TransformType > r (
        ::w3::xmldsig::Transform (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (const ::std::wstring& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::TransformType > r (
        ::w3::xmldsig::Transform (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Transform (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Transform (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Transform (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (::std::istream& is,
               const ::std::wstring& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Transform (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (::std::istream& is,
               const ::std::wstring& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Transform (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (::std::istream& is,
               const ::std::wstring& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Transform (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (const ::xercesc::DOMInputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::TransformType > r (
        ::w3::xmldsig::Transform (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (const ::xercesc::DOMInputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::TransformType > r (
        ::w3::xmldsig::Transform (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (const ::xercesc::DOMInputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::TransformType > r (
        ::w3::xmldsig::Transform (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::w3::xmldsig::TransformType > r (
          ::w3::xmldsig::Transform (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"Transform",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::TransformType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::w3::xmldsig::TransformType > r (
          dynamic_cast< ::w3::xmldsig::TransformType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Transform",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::TransformType >
    Transform (::xercesc::DOMDocument* d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"Transform",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::TransformType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::w3::xmldsig::TransformType > r (
          dynamic_cast< ::w3::xmldsig::TransformType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Transform",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (const ::std::wstring& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::DigestMethodType > r (
        ::w3::xmldsig::DigestMethod (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (const ::std::wstring& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::DigestMethodType > r (
        ::w3::xmldsig::DigestMethod (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (const ::std::wstring& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::DigestMethodType > r (
        ::w3::xmldsig::DigestMethod (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DigestMethod (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DigestMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DigestMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (::std::istream& is,
                  const ::std::wstring& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DigestMethod (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (::std::istream& is,
                  const ::std::wstring& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DigestMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (::std::istream& is,
                  const ::std::wstring& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DigestMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (const ::xercesc::DOMInputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::DigestMethodType > r (
        ::w3::xmldsig::DigestMethod (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (const ::xercesc::DOMInputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::DigestMethodType > r (
        ::w3::xmldsig::DigestMethod (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (const ::xercesc::DOMInputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::DigestMethodType > r (
        ::w3::xmldsig::DigestMethod (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::w3::xmldsig::DigestMethodType > r (
          ::w3::xmldsig::DigestMethod (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"DigestMethod",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::DigestMethodType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::w3::xmldsig::DigestMethodType > r (
          dynamic_cast< ::w3::xmldsig::DigestMethodType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"DigestMethod",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestMethodType >
    DigestMethod (::xercesc::DOMDocument* d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"DigestMethod",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::DigestMethodType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::w3::xmldsig::DigestMethodType > r (
          dynamic_cast< ::w3::xmldsig::DigestMethodType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"DigestMethod",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (const ::std::wstring& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::DigestValueType > r (
        ::w3::xmldsig::DigestValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (const ::std::wstring& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::DigestValueType > r (
        ::w3::xmldsig::DigestValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (const ::std::wstring& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::DigestValueType > r (
        ::w3::xmldsig::DigestValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DigestValue (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DigestValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DigestValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DigestValue (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DigestValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DigestValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (const ::xercesc::DOMInputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::DigestValueType > r (
        ::w3::xmldsig::DigestValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (const ::xercesc::DOMInputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::DigestValueType > r (
        ::w3::xmldsig::DigestValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (const ::xercesc::DOMInputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::DigestValueType > r (
        ::w3::xmldsig::DigestValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::w3::xmldsig::DigestValueType > r (
          ::w3::xmldsig::DigestValue (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"DigestValue",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::DigestValueType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::w3::xmldsig::DigestValueType > r (
          dynamic_cast< ::w3::xmldsig::DigestValueType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"DigestValue",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::DigestValueType >
    DigestValue (::xercesc::DOMDocument* d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"DigestValue",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::DigestValueType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::w3::xmldsig::DigestValueType > r (
          dynamic_cast< ::w3::xmldsig::DigestValueType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"DigestValue",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (const ::std::wstring& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::KeyInfoType > r (
        ::w3::xmldsig::KeyInfo (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (const ::std::wstring& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::KeyInfoType > r (
        ::w3::xmldsig::KeyInfo (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (const ::std::wstring& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::KeyInfoType > r (
        ::w3::xmldsig::KeyInfo (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyInfo (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyInfo (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyInfo (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (::std::istream& is,
             const ::std::wstring& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyInfo (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (::std::istream& is,
             const ::std::wstring& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyInfo (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (::std::istream& is,
             const ::std::wstring& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyInfo (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (const ::xercesc::DOMInputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::KeyInfoType > r (
        ::w3::xmldsig::KeyInfo (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (const ::xercesc::DOMInputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::KeyInfoType > r (
        ::w3::xmldsig::KeyInfo (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (const ::xercesc::DOMInputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::KeyInfoType > r (
        ::w3::xmldsig::KeyInfo (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::w3::xmldsig::KeyInfoType > r (
          ::w3::xmldsig::KeyInfo (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"KeyInfo",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::KeyInfoType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::w3::xmldsig::KeyInfoType > r (
          dynamic_cast< ::w3::xmldsig::KeyInfoType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"KeyInfo",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyInfoType >
    KeyInfo (::xercesc::DOMDocument* d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"KeyInfo",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::KeyInfoType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::w3::xmldsig::KeyInfoType > r (
          dynamic_cast< ::w3::xmldsig::KeyInfoType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"KeyInfo",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (const ::std::wstring& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::xml_schema::string > r (
        ::w3::xmldsig::KeyName (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (const ::std::wstring& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::xml_schema::string > r (
        ::w3::xmldsig::KeyName (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (const ::std::wstring& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::xml_schema::string > r (
        ::w3::xmldsig::KeyName (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyName (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (::std::istream& is,
             const ::std::wstring& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyName (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (::std::istream& is,
             const ::std::wstring& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (::std::istream& is,
             const ::std::wstring& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyName (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (const ::xercesc::DOMInputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::xml_schema::string > r (
        ::w3::xmldsig::KeyName (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (const ::xercesc::DOMInputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::xml_schema::string > r (
        ::w3::xmldsig::KeyName (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (const ::xercesc::DOMInputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::xml_schema::string > r (
        ::w3::xmldsig::KeyName (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xml_schema::string > r (
          ::w3::xmldsig::KeyName (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"KeyName",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::xml_schema::string >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xml_schema::string > r (
          dynamic_cast< ::xml_schema::string* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"KeyName",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::xml_schema::string >
    KeyName (::xercesc::DOMDocument* d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"KeyName",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::xml_schema::string >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::xml_schema::string > r (
          dynamic_cast< ::xml_schema::string* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"KeyName",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (const ::std::wstring& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::xml_schema::string > r (
        ::w3::xmldsig::MgmtData (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (const ::std::wstring& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::xml_schema::string > r (
        ::w3::xmldsig::MgmtData (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (const ::std::wstring& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::xml_schema::string > r (
        ::w3::xmldsig::MgmtData (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::MgmtData (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::MgmtData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::MgmtData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (::std::istream& is,
              const ::std::wstring& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::MgmtData (wrap, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (::std::istream& is,
              const ::std::wstring& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::MgmtData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (::std::istream& is,
              const ::std::wstring& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::MgmtData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (const ::xercesc::DOMInputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::xml_schema::string > r (
        ::w3::xmldsig::MgmtData (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (const ::xercesc::DOMInputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::xml_schema::string > r (
        ::w3::xmldsig::MgmtData (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (const ::xercesc::DOMInputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::xml_schema::string > r (
        ::w3::xmldsig::MgmtData (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xml_schema::string > r (
          ::w3::xmldsig::MgmtData (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"MgmtData",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::xml_schema::string >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xml_schema::string > r (
          dynamic_cast< ::xml_schema::string* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"MgmtData",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::xml_schema::string >
    MgmtData (::xercesc::DOMDocument* d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"MgmtData",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::xml_schema::string >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::xml_schema::string > r (
          dynamic_cast< ::xml_schema::string* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"MgmtData",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (const ::std::wstring& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::KeyValueType > r (
        ::w3::xmldsig::KeyValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (const ::std::wstring& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::KeyValueType > r (
        ::w3::xmldsig::KeyValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (const ::std::wstring& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::KeyValueType > r (
        ::w3::xmldsig::KeyValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyValue (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (::std::istream& is,
              const ::std::wstring& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyValue (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (::std::istream& is,
              const ::std::wstring& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (::std::istream& is,
              const ::std::wstring& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::KeyValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (const ::xercesc::DOMInputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::KeyValueType > r (
        ::w3::xmldsig::KeyValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (const ::xercesc::DOMInputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::KeyValueType > r (
        ::w3::xmldsig::KeyValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (const ::xercesc::DOMInputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::KeyValueType > r (
        ::w3::xmldsig::KeyValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::w3::xmldsig::KeyValueType > r (
          ::w3::xmldsig::KeyValue (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"KeyValue",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::KeyValueType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::w3::xmldsig::KeyValueType > r (
          dynamic_cast< ::w3::xmldsig::KeyValueType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"KeyValue",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::KeyValueType >
    KeyValue (::xercesc::DOMDocument* d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"KeyValue",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::KeyValueType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::w3::xmldsig::KeyValueType > r (
          dynamic_cast< ::w3::xmldsig::KeyValueType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"KeyValue",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (const ::std::wstring& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType > r (
        ::w3::xmldsig::RetrievalMethod (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (const ::std::wstring& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType > r (
        ::w3::xmldsig::RetrievalMethod (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (const ::std::wstring& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType > r (
        ::w3::xmldsig::RetrievalMethod (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::RetrievalMethod (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::RetrievalMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::RetrievalMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (::std::istream& is,
                     const ::std::wstring& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::RetrievalMethod (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (::std::istream& is,
                     const ::std::wstring& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::RetrievalMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (::std::istream& is,
                     const ::std::wstring& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::RetrievalMethod (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (const ::xercesc::DOMInputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType > r (
        ::w3::xmldsig::RetrievalMethod (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (const ::xercesc::DOMInputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType > r (
        ::w3::xmldsig::RetrievalMethod (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (const ::xercesc::DOMInputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType > r (
        ::w3::xmldsig::RetrievalMethod (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType > r (
          ::w3::xmldsig::RetrievalMethod (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"RetrievalMethod",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::RetrievalMethodType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType > r (
          dynamic_cast< ::w3::xmldsig::RetrievalMethodType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"RetrievalMethod",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType >
    RetrievalMethod (::xercesc::DOMDocument* d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"RetrievalMethod",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::RetrievalMethodType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::w3::xmldsig::RetrievalMethodType > r (
          dynamic_cast< ::w3::xmldsig::RetrievalMethodType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"RetrievalMethod",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (const ::std::wstring& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::X509DataType > r (
        ::w3::xmldsig::X509Data (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (const ::std::wstring& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::X509DataType > r (
        ::w3::xmldsig::X509Data (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (const ::std::wstring& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::X509DataType > r (
        ::w3::xmldsig::X509Data (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::X509Data (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::X509Data (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::X509Data (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (::std::istream& is,
              const ::std::wstring& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::X509Data (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (::std::istream& is,
              const ::std::wstring& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::X509Data (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (::std::istream& is,
              const ::std::wstring& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::X509Data (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (const ::xercesc::DOMInputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::X509DataType > r (
        ::w3::xmldsig::X509Data (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (const ::xercesc::DOMInputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::X509DataType > r (
        ::w3::xmldsig::X509Data (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (const ::xercesc::DOMInputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::X509DataType > r (
        ::w3::xmldsig::X509Data (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::w3::xmldsig::X509DataType > r (
          ::w3::xmldsig::X509Data (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"X509Data",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::X509DataType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::w3::xmldsig::X509DataType > r (
          dynamic_cast< ::w3::xmldsig::X509DataType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"X509Data",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::X509DataType >
    X509Data (::xercesc::DOMDocument* d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"X509Data",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::X509DataType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::w3::xmldsig::X509DataType > r (
          dynamic_cast< ::w3::xmldsig::X509DataType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"X509Data",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (const ::std::wstring& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::PGPDataType > r (
        ::w3::xmldsig::PGPData (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (const ::std::wstring& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::PGPDataType > r (
        ::w3::xmldsig::PGPData (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (const ::std::wstring& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::PGPDataType > r (
        ::w3::xmldsig::PGPData (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::PGPData (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::PGPData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::PGPData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (::std::istream& is,
             const ::std::wstring& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::PGPData (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (::std::istream& is,
             const ::std::wstring& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::PGPData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (::std::istream& is,
             const ::std::wstring& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::PGPData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (const ::xercesc::DOMInputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::PGPDataType > r (
        ::w3::xmldsig::PGPData (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (const ::xercesc::DOMInputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::PGPDataType > r (
        ::w3::xmldsig::PGPData (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (const ::xercesc::DOMInputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::PGPDataType > r (
        ::w3::xmldsig::PGPData (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::w3::xmldsig::PGPDataType > r (
          ::w3::xmldsig::PGPData (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"PGPData",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::PGPDataType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::w3::xmldsig::PGPDataType > r (
          dynamic_cast< ::w3::xmldsig::PGPDataType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"PGPData",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::PGPDataType >
    PGPData (::xercesc::DOMDocument* d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"PGPData",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::PGPDataType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::w3::xmldsig::PGPDataType > r (
          dynamic_cast< ::w3::xmldsig::PGPDataType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"PGPData",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (const ::std::wstring& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::SPKIDataType > r (
        ::w3::xmldsig::SPKIData (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (const ::std::wstring& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SPKIDataType > r (
        ::w3::xmldsig::SPKIData (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (const ::std::wstring& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SPKIDataType > r (
        ::w3::xmldsig::SPKIData (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SPKIData (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SPKIData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SPKIData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (::std::istream& is,
              const ::std::wstring& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SPKIData (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (::std::istream& is,
              const ::std::wstring& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SPKIData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (::std::istream& is,
              const ::std::wstring& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SPKIData (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (const ::xercesc::DOMInputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::SPKIDataType > r (
        ::w3::xmldsig::SPKIData (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (const ::xercesc::DOMInputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SPKIDataType > r (
        ::w3::xmldsig::SPKIData (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (const ::xercesc::DOMInputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SPKIDataType > r (
        ::w3::xmldsig::SPKIData (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::w3::xmldsig::SPKIDataType > r (
          ::w3::xmldsig::SPKIData (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"SPKIData",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::SPKIDataType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::w3::xmldsig::SPKIDataType > r (
          dynamic_cast< ::w3::xmldsig::SPKIDataType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"SPKIData",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::SPKIDataType >
    SPKIData (::xercesc::DOMDocument* d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"SPKIData",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::SPKIDataType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::w3::xmldsig::SPKIDataType > r (
          dynamic_cast< ::w3::xmldsig::SPKIDataType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"SPKIData",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (const ::std::wstring& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::ObjectType > r (
        ::w3::xmldsig::Object (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (const ::std::wstring& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::ObjectType > r (
        ::w3::xmldsig::Object (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (const ::std::wstring& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::ObjectType > r (
        ::w3::xmldsig::Object (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Object (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Object (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Object (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (::std::istream& is,
            const ::std::wstring& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Object (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (::std::istream& is,
            const ::std::wstring& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Object (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (::std::istream& is,
            const ::std::wstring& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Object (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (const ::xercesc::DOMInputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::ObjectType > r (
        ::w3::xmldsig::Object (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (const ::xercesc::DOMInputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::ObjectType > r (
        ::w3::xmldsig::Object (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (const ::xercesc::DOMInputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::ObjectType > r (
        ::w3::xmldsig::Object (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::w3::xmldsig::ObjectType > r (
          ::w3::xmldsig::Object (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"Object",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::ObjectType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::w3::xmldsig::ObjectType > r (
          dynamic_cast< ::w3::xmldsig::ObjectType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Object",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::ObjectType >
    Object (::xercesc::DOMDocument* d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"Object",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::ObjectType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::w3::xmldsig::ObjectType > r (
          dynamic_cast< ::w3::xmldsig::ObjectType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Object",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (const ::std::wstring& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::ManifestType > r (
        ::w3::xmldsig::Manifest (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (const ::std::wstring& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::ManifestType > r (
        ::w3::xmldsig::Manifest (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (const ::std::wstring& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::ManifestType > r (
        ::w3::xmldsig::Manifest (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Manifest (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Manifest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Manifest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (::std::istream& is,
              const ::std::wstring& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Manifest (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (::std::istream& is,
              const ::std::wstring& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Manifest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (::std::istream& is,
              const ::std::wstring& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::Manifest (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (const ::xercesc::DOMInputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::ManifestType > r (
        ::w3::xmldsig::Manifest (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (const ::xercesc::DOMInputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::ManifestType > r (
        ::w3::xmldsig::Manifest (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (const ::xercesc::DOMInputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::ManifestType > r (
        ::w3::xmldsig::Manifest (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::w3::xmldsig::ManifestType > r (
          ::w3::xmldsig::Manifest (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"Manifest",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::ManifestType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::w3::xmldsig::ManifestType > r (
          dynamic_cast< ::w3::xmldsig::ManifestType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Manifest",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::ManifestType >
    Manifest (::xercesc::DOMDocument* d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"Manifest",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::ManifestType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::w3::xmldsig::ManifestType > r (
          dynamic_cast< ::w3::xmldsig::ManifestType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Manifest",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (const ::std::wstring& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType > r (
        ::w3::xmldsig::SignatureProperties (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (const ::std::wstring& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType > r (
        ::w3::xmldsig::SignatureProperties (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (const ::std::wstring& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType > r (
        ::w3::xmldsig::SignatureProperties (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureProperties (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureProperties (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureProperties (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (::std::istream& is,
                         const ::std::wstring& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureProperties (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (::std::istream& is,
                         const ::std::wstring& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureProperties (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (::std::istream& is,
                         const ::std::wstring& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureProperties (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (const ::xercesc::DOMInputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType > r (
        ::w3::xmldsig::SignatureProperties (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (const ::xercesc::DOMInputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType > r (
        ::w3::xmldsig::SignatureProperties (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (const ::xercesc::DOMInputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType > r (
        ::w3::xmldsig::SignatureProperties (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType > r (
          ::w3::xmldsig::SignatureProperties (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"SignatureProperties",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::SignaturePropertiesType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType > r (
          dynamic_cast< ::w3::xmldsig::SignaturePropertiesType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"SignatureProperties",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType >
    SignatureProperties (::xercesc::DOMDocument* d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"SignatureProperties",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::SignaturePropertiesType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::w3::xmldsig::SignaturePropertiesType > r (
          dynamic_cast< ::w3::xmldsig::SignaturePropertiesType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"SignatureProperties",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (const ::std::wstring& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType > r (
        ::w3::xmldsig::SignatureProperty (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (const ::std::wstring& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType > r (
        ::w3::xmldsig::SignatureProperty (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (const ::std::wstring& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType > r (
        ::w3::xmldsig::SignatureProperty (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureProperty (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureProperty (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureProperty (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (::std::istream& is,
                       const ::std::wstring& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureProperty (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (::std::istream& is,
                       const ::std::wstring& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureProperty (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (::std::istream& is,
                       const ::std::wstring& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::SignatureProperty (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (const ::xercesc::DOMInputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType > r (
        ::w3::xmldsig::SignatureProperty (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (const ::xercesc::DOMInputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType > r (
        ::w3::xmldsig::SignatureProperty (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (const ::xercesc::DOMInputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType > r (
        ::w3::xmldsig::SignatureProperty (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType > r (
          ::w3::xmldsig::SignatureProperty (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"SignatureProperty",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::SignaturePropertyType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType > r (
          dynamic_cast< ::w3::xmldsig::SignaturePropertyType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"SignatureProperty",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType >
    SignatureProperty (::xercesc::DOMDocument* d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"SignatureProperty",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::SignaturePropertyType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::w3::xmldsig::SignaturePropertyType > r (
          dynamic_cast< ::w3::xmldsig::SignaturePropertyType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"SignatureProperty",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (const ::std::wstring& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType > r (
        ::w3::xmldsig::DSAKeyValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (const ::std::wstring& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType > r (
        ::w3::xmldsig::DSAKeyValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (const ::std::wstring& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType > r (
        ::w3::xmldsig::DSAKeyValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DSAKeyValue (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DSAKeyValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DSAKeyValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DSAKeyValue (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DSAKeyValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::DSAKeyValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (const ::xercesc::DOMInputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType > r (
        ::w3::xmldsig::DSAKeyValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (const ::xercesc::DOMInputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType > r (
        ::w3::xmldsig::DSAKeyValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (const ::xercesc::DOMInputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType > r (
        ::w3::xmldsig::DSAKeyValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType > r (
          ::w3::xmldsig::DSAKeyValue (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"DSAKeyValue",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::DSAKeyValueType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType > r (
          dynamic_cast< ::w3::xmldsig::DSAKeyValueType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"DSAKeyValue",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType >
    DSAKeyValue (::xercesc::DOMDocument* d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"DSAKeyValue",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::DSAKeyValueType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::w3::xmldsig::DSAKeyValueType > r (
          dynamic_cast< ::w3::xmldsig::DSAKeyValueType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"DSAKeyValue",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (const ::std::wstring& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType > r (
        ::w3::xmldsig::RSAKeyValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (const ::std::wstring& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType > r (
        ::w3::xmldsig::RSAKeyValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (const ::std::wstring& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType > r (
        ::w3::xmldsig::RSAKeyValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::RSAKeyValue (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::RSAKeyValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::RSAKeyValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::RSAKeyValue (wrap, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::RSAKeyValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      ::xercesc::Wrapper4InputSource wrap (&isrc, false);
      return ::w3::xmldsig::RSAKeyValue (wrap, h, f, p);
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (const ::xercesc::DOMInputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType > r (
        ::w3::xmldsig::RSAKeyValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (const ::xercesc::DOMInputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType > r (
        ::w3::xmldsig::RSAKeyValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (const ::xercesc::DOMInputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d)
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType > r (
        ::w3::xmldsig::RSAKeyValue (
          d.get (), f | ::xml_schema::flags::own_dom, p));

      if (f & ::xml_schema::flags::keep_dom)
        d.release ();

      return r;
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType > r (
          ::w3::xmldsig::RSAKeyValue (
            c.get (), f | ::xml_schema::flags::own_dom, p));

        c.release ();
        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"RSAKeyValue",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::RSAKeyValueType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType > r (
          dynamic_cast< ::w3::xmldsig::RSAKeyValueType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"RSAKeyValue",
        L"http://www.w3.org/2000/09/xmldsig#");
    }

    ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType >
    RSAKeyValue (::xercesc::DOMDocument* d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      const ::xercesc::DOMElement& e (
        c.get ()
        ? *c->getDocumentElement ()
        : *d->getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xml_schema::type > tmp (
        tfm.create (
          L"RSAKeyValue",
          L"http://www.w3.org/2000/09/xmldsig#",
          &::xsd::cxx::tree::factory_impl< ::w3::xmldsig::RSAKeyValueType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        c.release ();

        ::std::auto_ptr< ::w3::xmldsig::RSAKeyValueType > r (
          dynamic_cast< ::w3::xmldsig::RSAKeyValueType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"RSAKeyValue",
        L"http://www.w3.org/2000/09/xmldsig#");
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_serializer_plate< 0, wchar_t >
  type_serializer_plate_init;
}

namespace w3
{
  namespace xmldsig
  {
    void
    operator<< (::xercesc::DOMElement& e, const CryptoBinary& i)
    {
      e << static_cast< const ::xml_schema::base64_binary& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,const CryptoBinary& i)
    {
      a << static_cast< const ::xml_schema::base64_binary& > (i);
    }

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >& l,
                const CryptoBinary& i)
    {
      l << static_cast< const ::xml_schema::base64_binary& > (i);
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CryptoBinary >
    _xsd_CryptoBinary_type_serializer_init (
      L"CryptoBinary",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    Signature (::std::ostream& o,
               const ::w3::xmldsig::SignatureType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Signature (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Signature (::std::ostream& o,
               const ::w3::xmldsig::SignatureType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& h,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Signature (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Signature (::std::ostream& o,
               const ::w3::xmldsig::SignatureType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Signature (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Signature (::xercesc::XMLFormatTarget& t,
               const ::w3::xmldsig::SignatureType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Signature (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Signature (::xercesc::XMLFormatTarget& t,
               const ::w3::xmldsig::SignatureType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& h,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Signature (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Signature (::xercesc::XMLFormatTarget& t,
               const ::w3::xmldsig::SignatureType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Signature (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Signature (::xercesc::DOMDocument& d,
               const ::w3::xmldsig::SignatureType& s,
               ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::w3::xmldsig::SignatureType) == typeid (s))
      {
        if (n.name () == L"Signature" &&
            n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Signature",
            L"http://www.w3.org/2000/09/xmldsig#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Signature",
          L"http://www.w3.org/2000/09/xmldsig#",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Signature (const ::w3::xmldsig::SignatureType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::w3::xmldsig::SignatureType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Signature",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"Signature",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, s, f);
        }

        ::w3::xmldsig::Signature (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const SignatureType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // SignedInfo
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const SignatureType::SignedInfo_type& x (i.SignedInfo ());
        if (typeid (SignatureType::SignedInfo_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"SignedInfo",
              L"http://www.w3.org/2000/09/xmldsig#",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"SignedInfo",
            L"http://www.w3.org/2000/09/xmldsig#",
            true, true, e, x);
      }

      // SignatureValue
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const SignatureType::SignatureValue_type& x (i.SignatureValue ());
        if (typeid (SignatureType::SignatureValue_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"SignatureValue",
              L"http://www.w3.org/2000/09/xmldsig#",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"SignatureValue",
            L"http://www.w3.org/2000/09/xmldsig#",
            true, true, e, x);
      }

      // KeyInfo
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.KeyInfo ())
        {
          const SignatureType::KeyInfo_type& x (*i.KeyInfo ());
          if (typeid (SignatureType::KeyInfo_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"KeyInfo",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"KeyInfo",
              L"http://www.w3.org/2000/09/xmldsig#",
              true, true, e, x);
        }
      }

      // Object
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (SignatureType::Object_const_iterator
             b (i.Object ().begin ()), n (i.Object ().end ());
             b != n; ++b)
        {
          if (typeid (SignatureType::Object_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Object",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"Object",
              L"http://www.w3.org/2000/09/xmldsig#",
              true, true, e, *b);
        }
      }

      // Id
      //
      if (i.Id ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Id",
            e));

        a << *i.Id ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SignatureType >
    _xsd_SignatureType_type_serializer_init (
      L"SignatureType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    SignatureValue (::std::ostream& o,
                    const ::w3::xmldsig::SignatureValueType& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::wstring& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SignatureValue (::std::ostream& o,
                    const ::w3::xmldsig::SignatureValueType& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::error_handler& h,
                    const ::std::wstring& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureValue (::std::ostream& o,
                    const ::w3::xmldsig::SignatureValueType& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::wstring& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureValue (::xercesc::XMLFormatTarget& t,
                    const ::w3::xmldsig::SignatureValueType& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::wstring& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SignatureValue (::xercesc::XMLFormatTarget& t,
                    const ::w3::xmldsig::SignatureValueType& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::error_handler& h,
                    const ::std::wstring& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureValue (::xercesc::XMLFormatTarget& t,
                    const ::w3::xmldsig::SignatureValueType& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::wstring& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureValue (::xercesc::DOMDocument& d,
                    const ::w3::xmldsig::SignatureValueType& s,
                    ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::w3::xmldsig::SignatureValueType) == typeid (s))
      {
        if (n.name () == L"SignatureValue" &&
            n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"SignatureValue",
            L"http://www.w3.org/2000/09/xmldsig#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"SignatureValue",
          L"http://www.w3.org/2000/09/xmldsig#",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SignatureValue (const ::w3::xmldsig::SignatureValueType& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::w3::xmldsig::SignatureValueType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"SignatureValue",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"SignatureValue",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, s, f);
        }

        ::w3::xmldsig::SignatureValue (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const SignatureValueType& i)
    {
      e << static_cast< const ::xml_schema::base64_binary& > (i);

      // Id
      //
      if (i.Id ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Id",
            e));

        a << *i.Id ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SignatureValueType >
    _xsd_SignatureValueType_type_serializer_init (
      L"SignatureValueType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    SignedInfo (::std::ostream& o,
                const ::w3::xmldsig::SignedInfoType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignedInfo (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SignedInfo (::std::ostream& o,
                const ::w3::xmldsig::SignedInfoType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::error_handler& h,
                const ::std::wstring& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignedInfo (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignedInfo (::std::ostream& o,
                const ::w3::xmldsig::SignedInfoType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::wstring& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignedInfo (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignedInfo (::xercesc::XMLFormatTarget& t,
                const ::w3::xmldsig::SignedInfoType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignedInfo (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SignedInfo (::xercesc::XMLFormatTarget& t,
                const ::w3::xmldsig::SignedInfoType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::error_handler& h,
                const ::std::wstring& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignedInfo (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignedInfo (::xercesc::XMLFormatTarget& t,
                const ::w3::xmldsig::SignedInfoType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::wstring& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignedInfo (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignedInfo (::xercesc::DOMDocument& d,
                const ::w3::xmldsig::SignedInfoType& s,
                ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::w3::xmldsig::SignedInfoType) == typeid (s))
      {
        if (n.name () == L"SignedInfo" &&
            n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"SignedInfo",
            L"http://www.w3.org/2000/09/xmldsig#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"SignedInfo",
          L"http://www.w3.org/2000/09/xmldsig#",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SignedInfo (const ::w3::xmldsig::SignedInfoType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::w3::xmldsig::SignedInfoType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"SignedInfo",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"SignedInfo",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, s, f);
        }

        ::w3::xmldsig::SignedInfo (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const SignedInfoType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // CanonicalizationMethod
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const SignedInfoType::CanonicalizationMethod_type& x (i.CanonicalizationMethod ());
        if (typeid (SignedInfoType::CanonicalizationMethod_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"CanonicalizationMethod",
              L"http://www.w3.org/2000/09/xmldsig#",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"CanonicalizationMethod",
            L"http://www.w3.org/2000/09/xmldsig#",
            true, true, e, x);
      }

      // SignatureMethod
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const SignedInfoType::SignatureMethod_type& x (i.SignatureMethod ());
        if (typeid (SignedInfoType::SignatureMethod_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"SignatureMethod",
              L"http://www.w3.org/2000/09/xmldsig#",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"SignatureMethod",
            L"http://www.w3.org/2000/09/xmldsig#",
            true, true, e, x);
      }

      // Reference
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (SignedInfoType::Reference_const_iterator
             b (i.Reference ().begin ()), n (i.Reference ().end ());
             b != n; ++b)
        {
          if (typeid (SignedInfoType::Reference_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Reference",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"Reference",
              L"http://www.w3.org/2000/09/xmldsig#",
              true, true, e, *b);
        }
      }

      // Id
      //
      if (i.Id ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Id",
            e));

        a << *i.Id ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SignedInfoType >
    _xsd_SignedInfoType_type_serializer_init (
      L"SignedInfoType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    CanonicalizationMethod (::std::ostream& o,
                            const ::w3::xmldsig::CanonicalizationMethodType& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::wstring& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::CanonicalizationMethod (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    CanonicalizationMethod (::std::ostream& o,
                            const ::w3::xmldsig::CanonicalizationMethodType& s,
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::error_handler& h,
                            const ::std::wstring& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::CanonicalizationMethod (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    CanonicalizationMethod (::std::ostream& o,
                            const ::w3::xmldsig::CanonicalizationMethodType& s,
                            const ::xml_schema::namespace_infomap& m,
                            ::xercesc::DOMErrorHandler& h,
                            const ::std::wstring& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::CanonicalizationMethod (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    CanonicalizationMethod (::xercesc::XMLFormatTarget& t,
                            const ::w3::xmldsig::CanonicalizationMethodType& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::wstring& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::CanonicalizationMethod (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    CanonicalizationMethod (::xercesc::XMLFormatTarget& t,
                            const ::w3::xmldsig::CanonicalizationMethodType& s,
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::error_handler& h,
                            const ::std::wstring& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::CanonicalizationMethod (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    CanonicalizationMethod (::xercesc::XMLFormatTarget& t,
                            const ::w3::xmldsig::CanonicalizationMethodType& s,
                            const ::xml_schema::namespace_infomap& m,
                            ::xercesc::DOMErrorHandler& h,
                            const ::std::wstring& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::CanonicalizationMethod (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    CanonicalizationMethod (::xercesc::DOMDocument& d,
                            const ::w3::xmldsig::CanonicalizationMethodType& s,
                            ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::w3::xmldsig::CanonicalizationMethodType) == typeid (s))
      {
        if (n.name () == L"CanonicalizationMethod" &&
            n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"CanonicalizationMethod",
            L"http://www.w3.org/2000/09/xmldsig#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"CanonicalizationMethod",
          L"http://www.w3.org/2000/09/xmldsig#",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    CanonicalizationMethod (const ::w3::xmldsig::CanonicalizationMethodType& s,
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::w3::xmldsig::CanonicalizationMethodType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"CanonicalizationMethod",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"CanonicalizationMethod",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, s, f);
        }

        ::w3::xmldsig::CanonicalizationMethod (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const CanonicalizationMethodType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // any
      //
      for (CanonicalizationMethodType::any_const_iterator
           b (i.any ().begin ()), n (i.any ().end ());
           b != n; ++b)
      {
        e.appendChild (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMElement* > (&(*b)), true));
      }

      // Algorithm
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Algorithm",
            e));

        a << i.Algorithm ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, CanonicalizationMethodType >
    _xsd_CanonicalizationMethodType_type_serializer_init (
      L"CanonicalizationMethodType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    SignatureMethod (::std::ostream& o,
                     const ::w3::xmldsig::SignatureMethodType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::wstring& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureMethod (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SignatureMethod (::std::ostream& o,
                     const ::w3::xmldsig::SignatureMethodType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::error_handler& h,
                     const ::std::wstring& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureMethod (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureMethod (::std::ostream& o,
                     const ::w3::xmldsig::SignatureMethodType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::wstring& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureMethod (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureMethod (::xercesc::XMLFormatTarget& t,
                     const ::w3::xmldsig::SignatureMethodType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::wstring& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureMethod (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SignatureMethod (::xercesc::XMLFormatTarget& t,
                     const ::w3::xmldsig::SignatureMethodType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::error_handler& h,
                     const ::std::wstring& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureMethod (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureMethod (::xercesc::XMLFormatTarget& t,
                     const ::w3::xmldsig::SignatureMethodType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::wstring& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureMethod (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureMethod (::xercesc::DOMDocument& d,
                     const ::w3::xmldsig::SignatureMethodType& s,
                     ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::w3::xmldsig::SignatureMethodType) == typeid (s))
      {
        if (n.name () == L"SignatureMethod" &&
            n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"SignatureMethod",
            L"http://www.w3.org/2000/09/xmldsig#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"SignatureMethod",
          L"http://www.w3.org/2000/09/xmldsig#",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SignatureMethod (const ::w3::xmldsig::SignatureMethodType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::w3::xmldsig::SignatureMethodType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"SignatureMethod",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"SignatureMethod",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, s, f);
        }

        ::w3::xmldsig::SignatureMethod (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const SignatureMethodType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // HMACOutputLength
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.HMACOutputLength ())
        {
          const SignatureMethodType::HMACOutputLength_type& x (*i.HMACOutputLength ());
          if (typeid (SignatureMethodType::HMACOutputLength_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"HMACOutputLength",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"HMACOutputLength",
              L"http://www.w3.org/2000/09/xmldsig#",
              false, true, e, x);
        }
      }

      // any
      //
      for (SignatureMethodType::any_const_iterator
           b (i.any ().begin ()), n (i.any ().end ());
           b != n; ++b)
      {
        e.appendChild (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMElement* > (&(*b)), true));
      }

      // Algorithm
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Algorithm",
            e));

        a << i.Algorithm ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SignatureMethodType >
    _xsd_SignatureMethodType_type_serializer_init (
      L"SignatureMethodType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    Reference (::std::ostream& o,
               const ::w3::xmldsig::ReferenceType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Reference (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Reference (::std::ostream& o,
               const ::w3::xmldsig::ReferenceType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& h,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Reference (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Reference (::std::ostream& o,
               const ::w3::xmldsig::ReferenceType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Reference (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Reference (::xercesc::XMLFormatTarget& t,
               const ::w3::xmldsig::ReferenceType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Reference (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Reference (::xercesc::XMLFormatTarget& t,
               const ::w3::xmldsig::ReferenceType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& h,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Reference (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Reference (::xercesc::XMLFormatTarget& t,
               const ::w3::xmldsig::ReferenceType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Reference (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Reference (::xercesc::DOMDocument& d,
               const ::w3::xmldsig::ReferenceType& s,
               ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::w3::xmldsig::ReferenceType) == typeid (s))
      {
        if (n.name () == L"Reference" &&
            n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Reference",
            L"http://www.w3.org/2000/09/xmldsig#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Reference",
          L"http://www.w3.org/2000/09/xmldsig#",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Reference (const ::w3::xmldsig::ReferenceType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::w3::xmldsig::ReferenceType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Reference",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"Reference",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, s, f);
        }

        ::w3::xmldsig::Reference (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const ReferenceType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Transforms
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Transforms ())
        {
          const ReferenceType::Transforms_type& x (*i.Transforms ());
          if (typeid (ReferenceType::Transforms_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Transforms",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"Transforms",
              L"http://www.w3.org/2000/09/xmldsig#",
              true, true, e, x);
        }
      }

      // DigestMethod
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const ReferenceType::DigestMethod_type& x (i.DigestMethod ());
        if (typeid (ReferenceType::DigestMethod_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"DigestMethod",
              L"http://www.w3.org/2000/09/xmldsig#",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"DigestMethod",
            L"http://www.w3.org/2000/09/xmldsig#",
            true, true, e, x);
      }

      // DigestValue
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const ReferenceType::DigestValue_type& x (i.DigestValue ());
        if (typeid (ReferenceType::DigestValue_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"DigestValue",
              L"http://www.w3.org/2000/09/xmldsig#",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"DigestValue",
            L"http://www.w3.org/2000/09/xmldsig#",
            true, true, e, x);
      }

      // Id
      //
      if (i.Id ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Id",
            e));

        a << *i.Id ();
      }

      // URI
      //
      if (i.URI ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"URI",
            e));

        a << *i.URI ();
      }

      // Type
      //
      if (i.Type ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Type",
            e));

        a << *i.Type ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ReferenceType >
    _xsd_ReferenceType_type_serializer_init (
      L"ReferenceType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    Transforms (::std::ostream& o,
                const ::w3::xmldsig::TransformsType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Transforms (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Transforms (::std::ostream& o,
                const ::w3::xmldsig::TransformsType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::error_handler& h,
                const ::std::wstring& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Transforms (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Transforms (::std::ostream& o,
                const ::w3::xmldsig::TransformsType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::wstring& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Transforms (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Transforms (::xercesc::XMLFormatTarget& t,
                const ::w3::xmldsig::TransformsType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Transforms (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Transforms (::xercesc::XMLFormatTarget& t,
                const ::w3::xmldsig::TransformsType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::error_handler& h,
                const ::std::wstring& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Transforms (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Transforms (::xercesc::XMLFormatTarget& t,
                const ::w3::xmldsig::TransformsType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::wstring& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Transforms (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Transforms (::xercesc::DOMDocument& d,
                const ::w3::xmldsig::TransformsType& s,
                ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::w3::xmldsig::TransformsType) == typeid (s))
      {
        if (n.name () == L"Transforms" &&
            n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Transforms",
            L"http://www.w3.org/2000/09/xmldsig#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Transforms",
          L"http://www.w3.org/2000/09/xmldsig#",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Transforms (const ::w3::xmldsig::TransformsType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::w3::xmldsig::TransformsType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Transforms",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"Transforms",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, s, f);
        }

        ::w3::xmldsig::Transforms (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const TransformsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Transform
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (TransformsType::Transform_const_iterator
             b (i.Transform ().begin ()), n (i.Transform ().end ());
             b != n; ++b)
        {
          if (typeid (TransformsType::Transform_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Transform",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"Transform",
              L"http://www.w3.org/2000/09/xmldsig#",
              true, true, e, *b);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, TransformsType >
    _xsd_TransformsType_type_serializer_init (
      L"TransformsType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    Transform (::std::ostream& o,
               const ::w3::xmldsig::TransformType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Transform (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Transform (::std::ostream& o,
               const ::w3::xmldsig::TransformType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& h,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Transform (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Transform (::std::ostream& o,
               const ::w3::xmldsig::TransformType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Transform (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Transform (::xercesc::XMLFormatTarget& t,
               const ::w3::xmldsig::TransformType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Transform (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Transform (::xercesc::XMLFormatTarget& t,
               const ::w3::xmldsig::TransformType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& h,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Transform (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Transform (::xercesc::XMLFormatTarget& t,
               const ::w3::xmldsig::TransformType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Transform (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Transform (::xercesc::DOMDocument& d,
               const ::w3::xmldsig::TransformType& s,
               ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::w3::xmldsig::TransformType) == typeid (s))
      {
        if (n.name () == L"Transform" &&
            n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Transform",
            L"http://www.w3.org/2000/09/xmldsig#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Transform",
          L"http://www.w3.org/2000/09/xmldsig#",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Transform (const ::w3::xmldsig::TransformType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::w3::xmldsig::TransformType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Transform",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"Transform",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, s, f);
        }

        ::w3::xmldsig::Transform (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const TransformType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // any
      //
      for (TransformType::any_const_iterator
           b (i.any ().begin ()), n (i.any ().end ());
           b != n; ++b)
      {
        e.appendChild (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMElement* > (&(*b)), true));
      }

      // XPath
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (TransformType::XPath_const_iterator
             b (i.XPath ().begin ()), n (i.XPath ().end ());
             b != n; ++b)
        {
          if (typeid (TransformType::XPath_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"XPath",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"XPath",
              L"http://www.w3.org/2000/09/xmldsig#",
              false, true, e, *b);
        }
      }

      // Algorithm
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Algorithm",
            e));

        a << i.Algorithm ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, TransformType >
    _xsd_TransformType_type_serializer_init (
      L"TransformType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    DigestMethod (::std::ostream& o,
                  const ::w3::xmldsig::DigestMethodType& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DigestMethod (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    DigestMethod (::std::ostream& o,
                  const ::w3::xmldsig::DigestMethodType& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& h,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DigestMethod (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    DigestMethod (::std::ostream& o,
                  const ::w3::xmldsig::DigestMethodType& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DigestMethod (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    DigestMethod (::xercesc::XMLFormatTarget& t,
                  const ::w3::xmldsig::DigestMethodType& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DigestMethod (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    DigestMethod (::xercesc::XMLFormatTarget& t,
                  const ::w3::xmldsig::DigestMethodType& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& h,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DigestMethod (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    DigestMethod (::xercesc::XMLFormatTarget& t,
                  const ::w3::xmldsig::DigestMethodType& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DigestMethod (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    DigestMethod (::xercesc::DOMDocument& d,
                  const ::w3::xmldsig::DigestMethodType& s,
                  ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::w3::xmldsig::DigestMethodType) == typeid (s))
      {
        if (n.name () == L"DigestMethod" &&
            n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"DigestMethod",
            L"http://www.w3.org/2000/09/xmldsig#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"DigestMethod",
          L"http://www.w3.org/2000/09/xmldsig#",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    DigestMethod (const ::w3::xmldsig::DigestMethodType& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::w3::xmldsig::DigestMethodType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"DigestMethod",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"DigestMethod",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, s, f);
        }

        ::w3::xmldsig::DigestMethod (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const DigestMethodType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // any
      //
      for (DigestMethodType::any_const_iterator
           b (i.any ().begin ()), n (i.any ().end ());
           b != n; ++b)
      {
        e.appendChild (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMElement* > (&(*b)), true));
      }

      // Algorithm
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Algorithm",
            e));

        a << i.Algorithm ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DigestMethodType >
    _xsd_DigestMethodType_type_serializer_init (
      L"DigestMethodType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    DigestValue (::std::ostream& o,
                 const ::w3::xmldsig::DigestValueType& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DigestValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    DigestValue (::std::ostream& o,
                 const ::w3::xmldsig::DigestValueType& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& h,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DigestValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    DigestValue (::std::ostream& o,
                 const ::w3::xmldsig::DigestValueType& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DigestValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    DigestValue (::xercesc::XMLFormatTarget& t,
                 const ::w3::xmldsig::DigestValueType& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DigestValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    DigestValue (::xercesc::XMLFormatTarget& t,
                 const ::w3::xmldsig::DigestValueType& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& h,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DigestValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    DigestValue (::xercesc::XMLFormatTarget& t,
                 const ::w3::xmldsig::DigestValueType& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DigestValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    DigestValue (::xercesc::DOMDocument& d,
                 const ::w3::xmldsig::DigestValueType& s,
                 ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::w3::xmldsig::DigestValueType) == typeid (s))
      {
        if (n.name () == L"DigestValue" &&
            n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"DigestValue",
            L"http://www.w3.org/2000/09/xmldsig#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"DigestValue",
          L"http://www.w3.org/2000/09/xmldsig#",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    DigestValue (const ::w3::xmldsig::DigestValueType& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::w3::xmldsig::DigestValueType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"DigestValue",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"DigestValue",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, s, f);
        }

        ::w3::xmldsig::DigestValue (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const DigestValueType& i)
    {
      e << static_cast< const ::xml_schema::base64_binary& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,const DigestValueType& i)
    {
      a << static_cast< const ::xml_schema::base64_binary& > (i);
    }

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >& l,
                const DigestValueType& i)
    {
      l << static_cast< const ::xml_schema::base64_binary& > (i);
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DigestValueType >
    _xsd_DigestValueType_type_serializer_init (
      L"DigestValueType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    KeyInfo (::std::ostream& o,
             const ::w3::xmldsig::KeyInfoType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyInfo (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    KeyInfo (::std::ostream& o,
             const ::w3::xmldsig::KeyInfoType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& h,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyInfo (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyInfo (::std::ostream& o,
             const ::w3::xmldsig::KeyInfoType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyInfo (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyInfo (::xercesc::XMLFormatTarget& t,
             const ::w3::xmldsig::KeyInfoType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyInfo (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    KeyInfo (::xercesc::XMLFormatTarget& t,
             const ::w3::xmldsig::KeyInfoType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& h,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyInfo (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyInfo (::xercesc::XMLFormatTarget& t,
             const ::w3::xmldsig::KeyInfoType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyInfo (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyInfo (::xercesc::DOMDocument& d,
             const ::w3::xmldsig::KeyInfoType& s,
             ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::w3::xmldsig::KeyInfoType) == typeid (s))
      {
        if (n.name () == L"KeyInfo" &&
            n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"KeyInfo",
            L"http://www.w3.org/2000/09/xmldsig#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"KeyInfo",
          L"http://www.w3.org/2000/09/xmldsig#",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    KeyInfo (const ::w3::xmldsig::KeyInfoType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::w3::xmldsig::KeyInfoType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"KeyInfo",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"KeyInfo",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, s, f);
        }

        ::w3::xmldsig::KeyInfo (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const KeyInfoType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // KeyName
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (KeyInfoType::KeyName_const_iterator
             b (i.KeyName ().begin ()), n (i.KeyName ().end ());
             b != n; ++b)
        {
          if (typeid (KeyInfoType::KeyName_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"KeyName",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"KeyName",
              L"http://www.w3.org/2000/09/xmldsig#",
              true, true, e, *b);
        }
      }

      // KeyValue
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (KeyInfoType::KeyValue_const_iterator
             b (i.KeyValue ().begin ()), n (i.KeyValue ().end ());
             b != n; ++b)
        {
          if (typeid (KeyInfoType::KeyValue_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"KeyValue",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"KeyValue",
              L"http://www.w3.org/2000/09/xmldsig#",
              true, true, e, *b);
        }
      }

      // RetrievalMethod
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (KeyInfoType::RetrievalMethod_const_iterator
             b (i.RetrievalMethod ().begin ()), n (i.RetrievalMethod ().end ());
             b != n; ++b)
        {
          if (typeid (KeyInfoType::RetrievalMethod_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"RetrievalMethod",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"RetrievalMethod",
              L"http://www.w3.org/2000/09/xmldsig#",
              true, true, e, *b);
        }
      }

      // X509Data
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (KeyInfoType::X509Data_const_iterator
             b (i.X509Data ().begin ()), n (i.X509Data ().end ());
             b != n; ++b)
        {
          if (typeid (KeyInfoType::X509Data_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"X509Data",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"X509Data",
              L"http://www.w3.org/2000/09/xmldsig#",
              true, true, e, *b);
        }
      }

      // PGPData
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (KeyInfoType::PGPData_const_iterator
             b (i.PGPData ().begin ()), n (i.PGPData ().end ());
             b != n; ++b)
        {
          if (typeid (KeyInfoType::PGPData_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"PGPData",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"PGPData",
              L"http://www.w3.org/2000/09/xmldsig#",
              true, true, e, *b);
        }
      }

      // SPKIData
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (KeyInfoType::SPKIData_const_iterator
             b (i.SPKIData ().begin ()), n (i.SPKIData ().end ());
             b != n; ++b)
        {
          if (typeid (KeyInfoType::SPKIData_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"SPKIData",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"SPKIData",
              L"http://www.w3.org/2000/09/xmldsig#",
              true, true, e, *b);
        }
      }

      // MgmtData
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (KeyInfoType::MgmtData_const_iterator
             b (i.MgmtData ().begin ()), n (i.MgmtData ().end ());
             b != n; ++b)
        {
          if (typeid (KeyInfoType::MgmtData_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"MgmtData",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"MgmtData",
              L"http://www.w3.org/2000/09/xmldsig#",
              true, true, e, *b);
        }
      }

      // any
      //
      for (KeyInfoType::any_const_iterator
           b (i.any ().begin ()), n (i.any ().end ());
           b != n; ++b)
      {
        e.appendChild (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMElement* > (&(*b)), true));
      }

      // Id
      //
      if (i.Id ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Id",
            e));

        a << *i.Id ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, KeyInfoType >
    _xsd_KeyInfoType_type_serializer_init (
      L"KeyInfoType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    KeyName (::std::ostream& o,
             const ::xml_schema::string& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyName (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    KeyName (::std::ostream& o,
             const ::xml_schema::string& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& h,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyName (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyName (::std::ostream& o,
             const ::xml_schema::string& s,
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyName (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyName (::xercesc::XMLFormatTarget& t,
             const ::xml_schema::string& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyName (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    KeyName (::xercesc::XMLFormatTarget& t,
             const ::xml_schema::string& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& h,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyName (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyName (::xercesc::XMLFormatTarget& t,
             const ::xml_schema::string& s,
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyName (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyName (::xercesc::DOMDocument& d,
             const ::xml_schema::string& s,
             ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::xml_schema::string) == typeid (s))
      {
        if (n.name () == L"KeyName" &&
            n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"KeyName",
            L"http://www.w3.org/2000/09/xmldsig#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"KeyName",
          L"http://www.w3.org/2000/09/xmldsig#",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    KeyName (const ::xml_schema::string& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::xml_schema::string) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"KeyName",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"KeyName",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, s, f);
        }

        ::w3::xmldsig::KeyName (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    MgmtData (::std::ostream& o,
              const ::xml_schema::string& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::MgmtData (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    MgmtData (::std::ostream& o,
              const ::xml_schema::string& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& h,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::MgmtData (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    MgmtData (::std::ostream& o,
              const ::xml_schema::string& s,
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::MgmtData (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    MgmtData (::xercesc::XMLFormatTarget& t,
              const ::xml_schema::string& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::MgmtData (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    MgmtData (::xercesc::XMLFormatTarget& t,
              const ::xml_schema::string& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& h,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::MgmtData (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    MgmtData (::xercesc::XMLFormatTarget& t,
              const ::xml_schema::string& s,
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::MgmtData (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    MgmtData (::xercesc::DOMDocument& d,
              const ::xml_schema::string& s,
              ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::xml_schema::string) == typeid (s))
      {
        if (n.name () == L"MgmtData" &&
            n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"MgmtData",
            L"http://www.w3.org/2000/09/xmldsig#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"MgmtData",
          L"http://www.w3.org/2000/09/xmldsig#",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    MgmtData (const ::xml_schema::string& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::xml_schema::string) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"MgmtData",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"MgmtData",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, s, f);
        }

        ::w3::xmldsig::MgmtData (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    KeyValue (::std::ostream& o,
              const ::w3::xmldsig::KeyValueType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    KeyValue (::std::ostream& o,
              const ::w3::xmldsig::KeyValueType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& h,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyValue (::std::ostream& o,
              const ::w3::xmldsig::KeyValueType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyValue (::xercesc::XMLFormatTarget& t,
              const ::w3::xmldsig::KeyValueType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    KeyValue (::xercesc::XMLFormatTarget& t,
              const ::w3::xmldsig::KeyValueType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& h,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyValue (::xercesc::XMLFormatTarget& t,
              const ::w3::xmldsig::KeyValueType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::KeyValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    KeyValue (::xercesc::DOMDocument& d,
              const ::w3::xmldsig::KeyValueType& s,
              ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::w3::xmldsig::KeyValueType) == typeid (s))
      {
        if (n.name () == L"KeyValue" &&
            n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"KeyValue",
            L"http://www.w3.org/2000/09/xmldsig#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"KeyValue",
          L"http://www.w3.org/2000/09/xmldsig#",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    KeyValue (const ::w3::xmldsig::KeyValueType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::w3::xmldsig::KeyValueType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"KeyValue",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"KeyValue",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, s, f);
        }

        ::w3::xmldsig::KeyValue (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const KeyValueType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // DSAKeyValue
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.DSAKeyValue ())
        {
          const KeyValueType::DSAKeyValue_type& x (*i.DSAKeyValue ());
          if (typeid (KeyValueType::DSAKeyValue_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"DSAKeyValue",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"DSAKeyValue",
              L"http://www.w3.org/2000/09/xmldsig#",
              true, true, e, x);
        }
      }

      // RSAKeyValue
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.RSAKeyValue ())
        {
          const KeyValueType::RSAKeyValue_type& x (*i.RSAKeyValue ());
          if (typeid (KeyValueType::RSAKeyValue_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"RSAKeyValue",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"RSAKeyValue",
              L"http://www.w3.org/2000/09/xmldsig#",
              true, true, e, x);
        }
      }

      // any
      //
      if (i.any ())
      {
        e.appendChild (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMElement* > (&(*i.any ())), true));
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, KeyValueType >
    _xsd_KeyValueType_type_serializer_init (
      L"KeyValueType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    RetrievalMethod (::std::ostream& o,
                     const ::w3::xmldsig::RetrievalMethodType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::wstring& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::RetrievalMethod (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    RetrievalMethod (::std::ostream& o,
                     const ::w3::xmldsig::RetrievalMethodType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::error_handler& h,
                     const ::std::wstring& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::RetrievalMethod (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RetrievalMethod (::std::ostream& o,
                     const ::w3::xmldsig::RetrievalMethodType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::wstring& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::RetrievalMethod (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RetrievalMethod (::xercesc::XMLFormatTarget& t,
                     const ::w3::xmldsig::RetrievalMethodType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::wstring& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::RetrievalMethod (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    RetrievalMethod (::xercesc::XMLFormatTarget& t,
                     const ::w3::xmldsig::RetrievalMethodType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::error_handler& h,
                     const ::std::wstring& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::RetrievalMethod (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RetrievalMethod (::xercesc::XMLFormatTarget& t,
                     const ::w3::xmldsig::RetrievalMethodType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::wstring& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::RetrievalMethod (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RetrievalMethod (::xercesc::DOMDocument& d,
                     const ::w3::xmldsig::RetrievalMethodType& s,
                     ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::w3::xmldsig::RetrievalMethodType) == typeid (s))
      {
        if (n.name () == L"RetrievalMethod" &&
            n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"RetrievalMethod",
            L"http://www.w3.org/2000/09/xmldsig#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"RetrievalMethod",
          L"http://www.w3.org/2000/09/xmldsig#",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    RetrievalMethod (const ::w3::xmldsig::RetrievalMethodType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::w3::xmldsig::RetrievalMethodType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"RetrievalMethod",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"RetrievalMethod",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, s, f);
        }

        ::w3::xmldsig::RetrievalMethod (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const RetrievalMethodType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Transforms
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Transforms ())
        {
          const RetrievalMethodType::Transforms_type& x (*i.Transforms ());
          if (typeid (RetrievalMethodType::Transforms_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Transforms",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"Transforms",
              L"http://www.w3.org/2000/09/xmldsig#",
              true, true, e, x);
        }
      }

      // URI
      //
      if (i.URI ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"URI",
            e));

        a << *i.URI ();
      }

      // Type
      //
      if (i.Type ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Type",
            e));

        a << *i.Type ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, RetrievalMethodType >
    _xsd_RetrievalMethodType_type_serializer_init (
      L"RetrievalMethodType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    X509Data (::std::ostream& o,
              const ::w3::xmldsig::X509DataType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::X509Data (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    X509Data (::std::ostream& o,
              const ::w3::xmldsig::X509DataType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& h,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::X509Data (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    X509Data (::std::ostream& o,
              const ::w3::xmldsig::X509DataType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::X509Data (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    X509Data (::xercesc::XMLFormatTarget& t,
              const ::w3::xmldsig::X509DataType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::X509Data (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    X509Data (::xercesc::XMLFormatTarget& t,
              const ::w3::xmldsig::X509DataType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& h,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::X509Data (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    X509Data (::xercesc::XMLFormatTarget& t,
              const ::w3::xmldsig::X509DataType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::X509Data (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    X509Data (::xercesc::DOMDocument& d,
              const ::w3::xmldsig::X509DataType& s,
              ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::w3::xmldsig::X509DataType) == typeid (s))
      {
        if (n.name () == L"X509Data" &&
            n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"X509Data",
            L"http://www.w3.org/2000/09/xmldsig#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"X509Data",
          L"http://www.w3.org/2000/09/xmldsig#",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    X509Data (const ::w3::xmldsig::X509DataType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::w3::xmldsig::X509DataType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"X509Data",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"X509Data",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, s, f);
        }

        ::w3::xmldsig::X509Data (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const X509DataType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // X509IssuerSerial
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (X509DataType::X509IssuerSerial_const_iterator
             b (i.X509IssuerSerial ().begin ()), n (i.X509IssuerSerial ().end ());
             b != n; ++b)
        {
          if (typeid (X509DataType::X509IssuerSerial_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"X509IssuerSerial",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"X509IssuerSerial",
              L"http://www.w3.org/2000/09/xmldsig#",
              false, true, e, *b);
        }
      }

      // X509SKI
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (X509DataType::X509SKI_const_iterator
             b (i.X509SKI ().begin ()), n (i.X509SKI ().end ());
             b != n; ++b)
        {
          if (typeid (X509DataType::X509SKI_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"X509SKI",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"X509SKI",
              L"http://www.w3.org/2000/09/xmldsig#",
              false, true, e, *b);
        }
      }

      // X509SubjectName
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (X509DataType::X509SubjectName_const_iterator
             b (i.X509SubjectName ().begin ()), n (i.X509SubjectName ().end ());
             b != n; ++b)
        {
          if (typeid (X509DataType::X509SubjectName_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"X509SubjectName",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"X509SubjectName",
              L"http://www.w3.org/2000/09/xmldsig#",
              false, true, e, *b);
        }
      }

      // X509Certificate
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (X509DataType::X509Certificate_const_iterator
             b (i.X509Certificate ().begin ()), n (i.X509Certificate ().end ());
             b != n; ++b)
        {
          if (typeid (X509DataType::X509Certificate_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"X509Certificate",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"X509Certificate",
              L"http://www.w3.org/2000/09/xmldsig#",
              false, true, e, *b);
        }
      }

      // X509CRL
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (X509DataType::X509CRL_const_iterator
             b (i.X509CRL ().begin ()), n (i.X509CRL ().end ());
             b != n; ++b)
        {
          if (typeid (X509DataType::X509CRL_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"X509CRL",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"X509CRL",
              L"http://www.w3.org/2000/09/xmldsig#",
              false, true, e, *b);
        }
      }

      // any
      //
      for (X509DataType::any_const_iterator
           b (i.any ().begin ()), n (i.any ().end ());
           b != n; ++b)
      {
        e.appendChild (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMElement* > (&(*b)), true));
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, X509DataType >
    _xsd_X509DataType_type_serializer_init (
      L"X509DataType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    operator<< (::xercesc::DOMElement& e, const X509IssuerSerialType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // X509IssuerName
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const X509IssuerSerialType::X509IssuerName_type& x (i.X509IssuerName ());
        if (typeid (X509IssuerSerialType::X509IssuerName_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"X509IssuerName",
              L"http://www.w3.org/2000/09/xmldsig#",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"X509IssuerName",
            L"http://www.w3.org/2000/09/xmldsig#",
            false, true, e, x);
      }

      // X509SerialNumber
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"X509SerialNumber",
            L"http://www.w3.org/2000/09/xmldsig#",
            e));

        s << i.X509SerialNumber ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, X509IssuerSerialType >
    _xsd_X509IssuerSerialType_type_serializer_init (
      L"X509IssuerSerialType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    PGPData (::std::ostream& o,
             const ::w3::xmldsig::PGPDataType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::PGPData (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    PGPData (::std::ostream& o,
             const ::w3::xmldsig::PGPDataType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& h,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::PGPData (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    PGPData (::std::ostream& o,
             const ::w3::xmldsig::PGPDataType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::PGPData (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    PGPData (::xercesc::XMLFormatTarget& t,
             const ::w3::xmldsig::PGPDataType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::PGPData (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    PGPData (::xercesc::XMLFormatTarget& t,
             const ::w3::xmldsig::PGPDataType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& h,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::PGPData (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    PGPData (::xercesc::XMLFormatTarget& t,
             const ::w3::xmldsig::PGPDataType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::PGPData (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    PGPData (::xercesc::DOMDocument& d,
             const ::w3::xmldsig::PGPDataType& s,
             ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::w3::xmldsig::PGPDataType) == typeid (s))
      {
        if (n.name () == L"PGPData" &&
            n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"PGPData",
            L"http://www.w3.org/2000/09/xmldsig#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"PGPData",
          L"http://www.w3.org/2000/09/xmldsig#",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    PGPData (const ::w3::xmldsig::PGPDataType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::w3::xmldsig::PGPDataType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"PGPData",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"PGPData",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, s, f);
        }

        ::w3::xmldsig::PGPData (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const PGPDataType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // PGPKeyID
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.PGPKeyID ())
        {
          const PGPDataType::PGPKeyID_type& x (*i.PGPKeyID ());
          if (typeid (PGPDataType::PGPKeyID_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"PGPKeyID",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"PGPKeyID",
              L"http://www.w3.org/2000/09/xmldsig#",
              false, true, e, x);
        }
      }

      // PGPKeyPacket
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.PGPKeyPacket ())
        {
          const PGPDataType::PGPKeyPacket_type& x (*i.PGPKeyPacket ());
          if (typeid (PGPDataType::PGPKeyPacket_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"PGPKeyPacket",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"PGPKeyPacket",
              L"http://www.w3.org/2000/09/xmldsig#",
              false, true, e, x);
        }
      }

      // any
      //
      for (PGPDataType::any_const_iterator
           b (i.any ().begin ()), n (i.any ().end ());
           b != n; ++b)
      {
        e.appendChild (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMElement* > (&(*b)), true));
      }

      // any1
      //
      for (PGPDataType::any1_const_iterator
           b (i.any1 ().begin ()), n (i.any1 ().end ());
           b != n; ++b)
      {
        e.appendChild (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMElement* > (&(*b)), true));
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, PGPDataType >
    _xsd_PGPDataType_type_serializer_init (
      L"PGPDataType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    SPKIData (::std::ostream& o,
              const ::w3::xmldsig::SPKIDataType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SPKIData (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SPKIData (::std::ostream& o,
              const ::w3::xmldsig::SPKIDataType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& h,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SPKIData (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SPKIData (::std::ostream& o,
              const ::w3::xmldsig::SPKIDataType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SPKIData (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SPKIData (::xercesc::XMLFormatTarget& t,
              const ::w3::xmldsig::SPKIDataType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SPKIData (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SPKIData (::xercesc::XMLFormatTarget& t,
              const ::w3::xmldsig::SPKIDataType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& h,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SPKIData (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SPKIData (::xercesc::XMLFormatTarget& t,
              const ::w3::xmldsig::SPKIDataType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SPKIData (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SPKIData (::xercesc::DOMDocument& d,
              const ::w3::xmldsig::SPKIDataType& s,
              ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::w3::xmldsig::SPKIDataType) == typeid (s))
      {
        if (n.name () == L"SPKIData" &&
            n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"SPKIData",
            L"http://www.w3.org/2000/09/xmldsig#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"SPKIData",
          L"http://www.w3.org/2000/09/xmldsig#",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SPKIData (const ::w3::xmldsig::SPKIDataType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::w3::xmldsig::SPKIDataType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"SPKIData",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"SPKIData",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, s, f);
        }

        ::w3::xmldsig::SPKIData (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const SPKIDataType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // SPKISexp
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (SPKIDataType::SPKISexp_const_iterator
             b (i.SPKISexp ().begin ()), n (i.SPKISexp ().end ());
             b != n; ++b)
        {
          if (typeid (SPKIDataType::SPKISexp_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"SPKISexp",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"SPKISexp",
              L"http://www.w3.org/2000/09/xmldsig#",
              false, true, e, *b);
        }
      }

      // any
      //
      for (SPKIDataType::any_const_iterator
           b (i.any ().begin ()), n (i.any ().end ());
           b != n; ++b)
      {
        e.appendChild (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMElement* > (&(*b)), true));
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SPKIDataType >
    _xsd_SPKIDataType_type_serializer_init (
      L"SPKIDataType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    Object (::std::ostream& o,
            const ::w3::xmldsig::ObjectType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Object (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Object (::std::ostream& o,
            const ::w3::xmldsig::ObjectType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& h,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Object (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Object (::std::ostream& o,
            const ::w3::xmldsig::ObjectType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Object (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Object (::xercesc::XMLFormatTarget& t,
            const ::w3::xmldsig::ObjectType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Object (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Object (::xercesc::XMLFormatTarget& t,
            const ::w3::xmldsig::ObjectType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& h,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Object (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Object (::xercesc::XMLFormatTarget& t,
            const ::w3::xmldsig::ObjectType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Object (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Object (::xercesc::DOMDocument& d,
            const ::w3::xmldsig::ObjectType& s,
            ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::w3::xmldsig::ObjectType) == typeid (s))
      {
        if (n.name () == L"Object" &&
            n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Object",
            L"http://www.w3.org/2000/09/xmldsig#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Object",
          L"http://www.w3.org/2000/09/xmldsig#",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Object (const ::w3::xmldsig::ObjectType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::w3::xmldsig::ObjectType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Object",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"Object",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, s, f);
        }

        ::w3::xmldsig::Object (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const ObjectType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // any
      //
      for (ObjectType::any_const_iterator
           b (i.any ().begin ()), n (i.any ().end ());
           b != n; ++b)
      {
        e.appendChild (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMElement* > (&(*b)), true));
      }

      // Id
      //
      if (i.Id ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Id",
            e));

        a << *i.Id ();
      }

      // MimeType
      //
      if (i.MimeType ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"MimeType",
            e));

        a << *i.MimeType ();
      }

      // Encoding
      //
      if (i.Encoding ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Encoding",
            e));

        a << *i.Encoding ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ObjectType >
    _xsd_ObjectType_type_serializer_init (
      L"ObjectType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    Manifest (::std::ostream& o,
              const ::w3::xmldsig::ManifestType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Manifest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Manifest (::std::ostream& o,
              const ::w3::xmldsig::ManifestType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& h,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Manifest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Manifest (::std::ostream& o,
              const ::w3::xmldsig::ManifestType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Manifest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Manifest (::xercesc::XMLFormatTarget& t,
              const ::w3::xmldsig::ManifestType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Manifest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Manifest (::xercesc::XMLFormatTarget& t,
              const ::w3::xmldsig::ManifestType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& h,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Manifest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Manifest (::xercesc::XMLFormatTarget& t,
              const ::w3::xmldsig::ManifestType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::Manifest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Manifest (::xercesc::DOMDocument& d,
              const ::w3::xmldsig::ManifestType& s,
              ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::w3::xmldsig::ManifestType) == typeid (s))
      {
        if (n.name () == L"Manifest" &&
            n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Manifest",
            L"http://www.w3.org/2000/09/xmldsig#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Manifest",
          L"http://www.w3.org/2000/09/xmldsig#",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    Manifest (const ::w3::xmldsig::ManifestType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::w3::xmldsig::ManifestType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Manifest",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"Manifest",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, s, f);
        }

        ::w3::xmldsig::Manifest (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const ManifestType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Reference
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (ManifestType::Reference_const_iterator
             b (i.Reference ().begin ()), n (i.Reference ().end ());
             b != n; ++b)
        {
          if (typeid (ManifestType::Reference_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Reference",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"Reference",
              L"http://www.w3.org/2000/09/xmldsig#",
              true, true, e, *b);
        }
      }

      // Id
      //
      if (i.Id ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Id",
            e));

        a << *i.Id ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ManifestType >
    _xsd_ManifestType_type_serializer_init (
      L"ManifestType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    SignatureProperties (::std::ostream& o,
                         const ::w3::xmldsig::SignaturePropertiesType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::wstring& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureProperties (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SignatureProperties (::std::ostream& o,
                         const ::w3::xmldsig::SignaturePropertiesType& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xml_schema::error_handler& h,
                         const ::std::wstring& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureProperties (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureProperties (::std::ostream& o,
                         const ::w3::xmldsig::SignaturePropertiesType& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xercesc::DOMErrorHandler& h,
                         const ::std::wstring& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureProperties (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureProperties (::xercesc::XMLFormatTarget& t,
                         const ::w3::xmldsig::SignaturePropertiesType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::wstring& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureProperties (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SignatureProperties (::xercesc::XMLFormatTarget& t,
                         const ::w3::xmldsig::SignaturePropertiesType& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xml_schema::error_handler& h,
                         const ::std::wstring& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureProperties (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureProperties (::xercesc::XMLFormatTarget& t,
                         const ::w3::xmldsig::SignaturePropertiesType& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xercesc::DOMErrorHandler& h,
                         const ::std::wstring& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureProperties (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureProperties (::xercesc::DOMDocument& d,
                         const ::w3::xmldsig::SignaturePropertiesType& s,
                         ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::w3::xmldsig::SignaturePropertiesType) == typeid (s))
      {
        if (n.name () == L"SignatureProperties" &&
            n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"SignatureProperties",
            L"http://www.w3.org/2000/09/xmldsig#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"SignatureProperties",
          L"http://www.w3.org/2000/09/xmldsig#",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SignatureProperties (const ::w3::xmldsig::SignaturePropertiesType& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::w3::xmldsig::SignaturePropertiesType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"SignatureProperties",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"SignatureProperties",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, s, f);
        }

        ::w3::xmldsig::SignatureProperties (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const SignaturePropertiesType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // SignatureProperty
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (SignaturePropertiesType::SignatureProperty_const_iterator
             b (i.SignatureProperty ().begin ()), n (i.SignatureProperty ().end ());
             b != n; ++b)
        {
          if (typeid (SignaturePropertiesType::SignatureProperty_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"SignatureProperty",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"SignatureProperty",
              L"http://www.w3.org/2000/09/xmldsig#",
              true, true, e, *b);
        }
      }

      // Id
      //
      if (i.Id ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Id",
            e));

        a << *i.Id ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SignaturePropertiesType >
    _xsd_SignaturePropertiesType_type_serializer_init (
      L"SignaturePropertiesType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    SignatureProperty (::std::ostream& o,
                       const ::w3::xmldsig::SignaturePropertyType& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::wstring& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureProperty (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SignatureProperty (::std::ostream& o,
                       const ::w3::xmldsig::SignaturePropertyType& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& h,
                       const ::std::wstring& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureProperty (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureProperty (::std::ostream& o,
                       const ::w3::xmldsig::SignaturePropertyType& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& h,
                       const ::std::wstring& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureProperty (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureProperty (::xercesc::XMLFormatTarget& t,
                       const ::w3::xmldsig::SignaturePropertyType& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::wstring& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureProperty (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SignatureProperty (::xercesc::XMLFormatTarget& t,
                       const ::w3::xmldsig::SignaturePropertyType& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& h,
                       const ::std::wstring& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureProperty (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureProperty (::xercesc::XMLFormatTarget& t,
                       const ::w3::xmldsig::SignaturePropertyType& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& h,
                       const ::std::wstring& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::SignatureProperty (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SignatureProperty (::xercesc::DOMDocument& d,
                       const ::w3::xmldsig::SignaturePropertyType& s,
                       ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::w3::xmldsig::SignaturePropertyType) == typeid (s))
      {
        if (n.name () == L"SignatureProperty" &&
            n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"SignatureProperty",
            L"http://www.w3.org/2000/09/xmldsig#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"SignatureProperty",
          L"http://www.w3.org/2000/09/xmldsig#",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    SignatureProperty (const ::w3::xmldsig::SignaturePropertyType& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::w3::xmldsig::SignaturePropertyType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"SignatureProperty",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"SignatureProperty",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, s, f);
        }

        ::w3::xmldsig::SignatureProperty (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const SignaturePropertyType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // any
      //
      for (SignaturePropertyType::any_const_iterator
           b (i.any ().begin ()), n (i.any ().end ());
           b != n; ++b)
      {
        e.appendChild (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMElement* > (&(*b)), true));
      }

      // Target
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Target",
            e));

        a << i.Target ();
      }

      // Id
      //
      if (i.Id ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Id",
            e));

        a << *i.Id ();
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SignaturePropertyType >
    _xsd_SignaturePropertyType_type_serializer_init (
      L"SignaturePropertyType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    operator<< (::xercesc::DOMElement& e, const HMACOutputLengthType& i)
    {
      e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type >& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a,const HMACOutputLengthType& i)
    {
      a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type >& > (i);
    }

    void
    operator<< (::xsd::cxx::tree::list_stream< wchar_t >& l,
                const HMACOutputLengthType& i)
    {
      l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type >& > (i);
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, HMACOutputLengthType >
    _xsd_HMACOutputLengthType_type_serializer_init (
      L"HMACOutputLengthType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    DSAKeyValue (::std::ostream& o,
                 const ::w3::xmldsig::DSAKeyValueType& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DSAKeyValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    DSAKeyValue (::std::ostream& o,
                 const ::w3::xmldsig::DSAKeyValueType& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& h,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DSAKeyValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    DSAKeyValue (::std::ostream& o,
                 const ::w3::xmldsig::DSAKeyValueType& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DSAKeyValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    DSAKeyValue (::xercesc::XMLFormatTarget& t,
                 const ::w3::xmldsig::DSAKeyValueType& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DSAKeyValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    DSAKeyValue (::xercesc::XMLFormatTarget& t,
                 const ::w3::xmldsig::DSAKeyValueType& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& h,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DSAKeyValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    DSAKeyValue (::xercesc::XMLFormatTarget& t,
                 const ::w3::xmldsig::DSAKeyValueType& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::DSAKeyValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    DSAKeyValue (::xercesc::DOMDocument& d,
                 const ::w3::xmldsig::DSAKeyValueType& s,
                 ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::w3::xmldsig::DSAKeyValueType) == typeid (s))
      {
        if (n.name () == L"DSAKeyValue" &&
            n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"DSAKeyValue",
            L"http://www.w3.org/2000/09/xmldsig#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"DSAKeyValue",
          L"http://www.w3.org/2000/09/xmldsig#",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    DSAKeyValue (const ::w3::xmldsig::DSAKeyValueType& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::w3::xmldsig::DSAKeyValueType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"DSAKeyValue",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"DSAKeyValue",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, s, f);
        }

        ::w3::xmldsig::DSAKeyValue (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const DSAKeyValueType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // P
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.P ())
        {
          const DSAKeyValueType::P_type& x (*i.P ());
          if (typeid (DSAKeyValueType::P_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"P",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"P",
              L"http://www.w3.org/2000/09/xmldsig#",
              false, true, e, x);
        }
      }

      // Q
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Q ())
        {
          const DSAKeyValueType::Q_type& x (*i.Q ());
          if (typeid (DSAKeyValueType::Q_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Q",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"Q",
              L"http://www.w3.org/2000/09/xmldsig#",
              false, true, e, x);
        }
      }

      // G
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.G ())
        {
          const DSAKeyValueType::G_type& x (*i.G ());
          if (typeid (DSAKeyValueType::G_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"G",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"G",
              L"http://www.w3.org/2000/09/xmldsig#",
              false, true, e, x);
        }
      }

      // Y
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const DSAKeyValueType::Y_type& x (i.Y ());
        if (typeid (DSAKeyValueType::Y_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"Y",
              L"http://www.w3.org/2000/09/xmldsig#",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"Y",
            L"http://www.w3.org/2000/09/xmldsig#",
            false, true, e, x);
      }

      // J
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.J ())
        {
          const DSAKeyValueType::J_type& x (*i.J ());
          if (typeid (DSAKeyValueType::J_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"J",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"J",
              L"http://www.w3.org/2000/09/xmldsig#",
              false, true, e, x);
        }
      }

      // Seed
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Seed ())
        {
          const DSAKeyValueType::Seed_type& x (*i.Seed ());
          if (typeid (DSAKeyValueType::Seed_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Seed",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"Seed",
              L"http://www.w3.org/2000/09/xmldsig#",
              false, true, e, x);
        }
      }

      // PgenCounter
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.PgenCounter ())
        {
          const DSAKeyValueType::PgenCounter_type& x (*i.PgenCounter ());
          if (typeid (DSAKeyValueType::PgenCounter_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"PgenCounter",
                L"http://www.w3.org/2000/09/xmldsig#",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"PgenCounter",
              L"http://www.w3.org/2000/09/xmldsig#",
              false, true, e, x);
        }
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DSAKeyValueType >
    _xsd_DSAKeyValueType_type_serializer_init (
      L"DSAKeyValueType",
      L"http://www.w3.org/2000/09/xmldsig#");


    void
    RSAKeyValue (::std::ostream& o,
                 const ::w3::xmldsig::RSAKeyValueType& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::RSAKeyValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    RSAKeyValue (::std::ostream& o,
                 const ::w3::xmldsig::RSAKeyValueType& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& h,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::RSAKeyValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RSAKeyValue (::std::ostream& o,
                 const ::w3::xmldsig::RSAKeyValueType& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::RSAKeyValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RSAKeyValue (::xercesc::XMLFormatTarget& t,
                 const ::w3::xmldsig::RSAKeyValueType& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::RSAKeyValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    RSAKeyValue (::xercesc::XMLFormatTarget& t,
                 const ::w3::xmldsig::RSAKeyValueType& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& h,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::RSAKeyValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RSAKeyValue (::xercesc::XMLFormatTarget& t,
                 const ::w3::xmldsig::RSAKeyValueType& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::w3::xmldsig::RSAKeyValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RSAKeyValue (::xercesc::DOMDocument& d,
                 const ::w3::xmldsig::RSAKeyValueType& s,
                 ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::w3::xmldsig::RSAKeyValueType) == typeid (s))
      {
        if (n.name () == L"RSAKeyValue" &&
            n.namespace_ () == L"http://www.w3.org/2000/09/xmldsig#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"RSAKeyValue",
            L"http://www.w3.org/2000/09/xmldsig#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"RSAKeyValue",
          L"http://www.w3.org/2000/09/xmldsig#",
          e, n, s);
      }
    }

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
    RSAKeyValue (const ::w3::xmldsig::RSAKeyValueType& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
    {
      try
      {
        ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d;

        if (typeid (::w3::xmldsig::RSAKeyValueType) == typeid (s))
        {
          d = ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"RSAKeyValue",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, f);
        }
        else
        {
          ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
            ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

          d = tsm.serialize (
            L"RSAKeyValue",
            L"http://www.w3.org/2000/09/xmldsig#",
            m, s, f);
        }

        ::w3::xmldsig::RSAKeyValue (*d, s, f);
        return d;
      }
      catch (const ::xsd::cxx::xml::dom::mapping< wchar_t >& e)
      {
        throw ::xsd::cxx::tree::no_namespace_mapping< wchar_t > (e.name ());
      }
      catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
      {
        throw ::xsd::cxx::tree::xsi_already_in_use< wchar_t > ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const RSAKeyValueType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Modulus
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const RSAKeyValueType::Modulus_type& x (i.Modulus ());
        if (typeid (RSAKeyValueType::Modulus_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"Modulus",
              L"http://www.w3.org/2000/09/xmldsig#",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"Modulus",
            L"http://www.w3.org/2000/09/xmldsig#",
            false, true, e, x);
      }

      // Exponent
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const RSAKeyValueType::Exponent_type& x (i.Exponent ());
        if (typeid (RSAKeyValueType::Exponent_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"Exponent",
              L"http://www.w3.org/2000/09/xmldsig#",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"Exponent",
            L"http://www.w3.org/2000/09/xmldsig#",
            false, true, e, x);
      }
    }

    static
    ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, RSAKeyValueType >
    _xsd_RSAKeyValueType_type_serializer_init (
      L"RSAKeyValueType",
      L"http://www.w3.org/2000/09/xmldsig#");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

