<?xml version="1.0"?>

<!-- ====================================================================== 
	Author: Bradley Beddoes
	Date: 10/04/2006
	Purpose: Builds ESOE Startup Web Application
	
	This build file expects the system to present values for:
	jar.repository - Base directory of binary repository
	junit.test.regression.reports  - Directory to store XML output for regression testing
	junit.test.functional.reports  - Directory to store XML output for functional testing
	
	Generally this is specified in localbuild.properties localbuild.properties is to be created by the developer and NOT STORED IN SVN   
	====================================================================== -->

<project name="esoestartup" default="dev-war">

	<property file="localbuild.properties" />
	<property file="build.properties" />

	<description>Builds ESOE Startup for various deployment environments</description>

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${ant.contrib}" />
		</classpath>
	</taskdef>

	<taskdef resource="emma_ant.properties">
		<classpath>
			<pathelement location="${ant.emma}" />
			<pathelement location="${ant.emma_ant}" />
		</classpath>
	</taskdef>

	<!-- 
		ESOEStartup development environment compilation and war creation
	-->
	<target name="dev-war" depends="dev-jar" description="Assembles ESOEStartup development war">
		<war destfile="${output.dev}/${output.dev.war}" webxml="${war.dev.descriptor}">

			<webinf dir="${webapp.spring.resources}">
				<include name="**/*.xml" />
				<include name="**/*.config" />
				<include name="**/*.conf" />
			</webinf>
			<webinf dir="sql" />
			
			<classes dir="ibatis" />
			<classes dir="${webapp.classes}" />
			
			<lib file="${output.dev}/${output.dev.jar}.jar" />
			<lib refid="esoemanager" />
			<lib refid="click" />
			
			<fileset dir="${webapp.content}" />
		</war>
	</target>

	<target name="dev-jar" depends="dev-build"
		description="Assembles ESOEStartup development jar">
		<osfamily property="osfamily" />
		<jar destfile="${output.dev}/${output.dev.jar}.jar">
			<fileset dir="${output.dev.build}">
				<include name="**/*" />
			</fileset>
			<fileset dir="${src}">
				<include name="**/*.properties" />
				<include name="**/*.xml" />
				<include name="**/*.html" />
			</fileset>
		</jar>
	</target>

	<target name="dev-build" depends="setup" description="Compiles ESOE Startup code base">
		<javac source="1.5" target="1.5" destdir="${output.dev.build}" srcdir="${src}"
			classpathref="esoestartup.classpath" debug="true" debuglevel="lines,vars,source" />
	</target>

	<!-- 
		ESOEStartup JUnit test execution and report generation, includes automated code
		coverage statistics generated by emma, emma.sourceforge.net
	-->
	<target name="junit" depends="junit-functional, junit-regression"
		description="Invokes all unit tests defined for the ESOEStartup">

		<!-- Combine coverage reports to single view -->
		<emma>
			<report sourcepath="${src}">
				<fileset dir="${output.dev.coverage.dir}">
					<include name="**/*.emma" />
				</fileset>

				<txt outfile="${output.dev.coverage.dir}/coverage.txt" />
				<html outfile="${output.dev.coverage.dir}/coverage.html" />
				<xml outfile="${output.dev.coverage.dir}/coverage.xml" />
			</report>
		</emma>
	</target>

	<target name="emma-instr"
		description="Configures esoestartup jar for emma coverage reporting">
		<emma>
			<instr mode="fullcopy" outdir="${output.dev.coverage.dir}" merge="false"
				metadatafile="${output.dev.coverage.dir}/metadata.emma">
				<instrpath>
					<fileset dir="${output.dev}" includes="**/*.jar" />
				</instrpath>
				<!-- Coverage report on all ESOEStartup code except dynamically generated message classes and exception implementations -->
				<filter includes="com.qut.*" excludes="com.qut.*Messages*, com.qut.*Exception*" />
			</instr>
		</emma>
	</target>

	<target name="junit-regression-build" depends="dev-jar"
		description="Compiles ESOEStartup regression tests code base">
		<javac source="1.5" target="1.5" destdir="${output.test.regression.build}"
			srcdir="${src.tests.regression}" debug="true" debuglevel="lines,vars,source">
			<classpath>
				<path refid="esoestartup.classpath" />
				<path path="${output.dev}/${output.dev.jar}.jar" />
			</classpath>
		</javac>
	</target>

	<target name="junit-regression" depends="junit-regression-build, emma-instr"
		description="Invokes all junit regression tests for the ESOEStartup">
		<mkdir dir="${junit.test.regression.reports}" />

		<junit printsummary="yes" haltonfailure="no" fork="yes">
			<classpath>
				<path path="${output.dev.coverage.dir}/lib/${output.dev.jar}.jar" />
				<path path="${output.test.regression.build}" />
				<path refid="esoestartup.classpath" />
				<!--  Allow tests to resolve locally required resouces such as xml config files -->
				<path path="${src.tests.regression}" />
			</classpath>

			<jvmarg
				value="-Demma.coverage.out.file=${output.dev.coverage.regression.dir}/coverage.emma" />
			<jvmarg value="-Demma.coverage.out.merge=true" />

			<formatter type="xml" />

			<batchtest fork="yes" todir="${junit.test.regression.reports}">
				<fileset dir="${output.test.regression.build}">
					<include name="**/*Test*.class" />
					<exclude name="**/*KerberosV5*.class" />
				</fileset>
			</batchtest>
		</junit>

		<emma>
			<report sourcepath="${src}">
				<fileset dir="${output.dev.coverage.regression.dir}">
					<include name="*.emma" />
				</fileset>
				<fileset file="${output.dev.coverage.dir}/metadata.emma" />

				<txt outfile="${output.dev.coverage.regression.dir}/coverage.txt" />
				<html outfile="${output.dev.coverage.regression.dir}/coverage.html" />
				<xml outfile="${output.dev.coverage.regression.dir}/coverage.xml" />
			</report>
		</emma>

	</target>

	<target name="junit-functional-build" depends="dev-jar"
		description="Compiles ESOEStartup functional test code base">
		<javac source="1.5" target="1.5" destdir="${output.test.functional.build}"
			srcdir="${src.tests.functional}" debug="true" debuglevel="lines,vars,source">
			<classpath>
				<path refid="esoestartup.classpath" />
				<path path="${output.dev}/${output.dev.jar}.jar" />
			</classpath>
		</javac>
	</target>

	<target name="junit-functional" depends="junit-functional-build, emma-instr"
		description="Invokes all junit functional tests for the ESOEStartup">
		<mkdir dir="${junit.test.functional.reports}" />

		<junit printsummary="yes" haltonfailure="no" fork="yes">
			<classpath>
				<path path="${output.dev.coverage.dir}/lib/${output.dev.jar}.jar" />
				<path path="${output.test.functional.build}" />
				<path refid="esoestartup.classpath" />
				<!--  Allow tests to resolve locally required resouces such as xml config files -->
				<path path="${src.tests.functional}" />
			</classpath>

			<formatter type="xml" />

			<jvmarg
				value="-Demma.coverage.out.file=${output.dev.coverage.functional.dir}/coverage.emma" />
			<jvmarg value="-Demma.coverage.out.merge=true" />

			<batchtest fork="yes" todir="${junit.test.functional.reports}">
				<fileset dir="${output.test.functional.build}">
					<include name="**/*Test*.class" />
					<exclude name="**/*KerberosV5*.class" />
				</fileset>
			</batchtest>
		</junit>

		<emma>
			<report sourcepath="${src}">
				<fileset dir="${output.dev.coverage.functional.dir}">
					<include name="*.emma" />
				</fileset>
				<fileset file="${output.dev.coverage.dir}/metadata.emma" />

				<txt outfile="${output.dev.coverage.functional.dir}/coverage.txt" />
				<html outfile="${output.dev.coverage.functional.dir}/coverage.html" />
				<xml outfile="${output.dev.coverage.functional.dir}/coverage.xml" />
			</report>
		</emma>
	</target>

	<!-- 
		ESOEStartup java documentation generation
	-->
	<target name="javadoc" description="Build javadoc for the entire project">
		<javadoc packagenames="com.qut.*" sourcepath="src" defaultexcludes="yes" destdir="${doc}"
			author="true" version="true" use="true" windowtitle="administration">
			<doctitle>
				<![CDATA[<h1>ESOE Startup API</h1>]]>
			</doctitle>
			<bottom>
				<![CDATA[<i>Copyright &#169; 2006 Queensland University of Technology. All Rights Reserved.</i>]]>
			</bottom>
			<tag name="todo" scope="all" description="To do:" />

			<!-- configure our classpath -->
			<classpath>
				<pathelement path="${classpath}" />
				<fileset dir="${jar.repository}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>

		</javadoc>
	</target>

	<!-- 
		General operations to setup and cleanup environment 
	-->
	<target name="setup" depends="clean">
		<mkdir dir="${output.dev.build}" />
		<mkdir dir="${output.dev}" />

		<mkdir dir="${output.test.regression.build}" />
		<mkdir dir="${output.test.functional.build}" />

		<mkdir dir="${output.dev.coverage.dir}" />
		<mkdir dir="${output.dev.coverage.functional.dir}" />
		<mkdir dir="${output.dev.coverage.regression.dir}" />
	</target>

	<target name="clean" description="clean up binaries and api doc">
		<delete dir="${output.dev.build}" />
		<delete dir="${output.dev}" />

		<delete dir="${output.test.regression.build}" />
		<delete dir="${output.test.functional.build}" />

		<delete dir="${output.dev.coverage.dir}" />
		<delete dir="${output.dev.coverage.functional.dir}" />
		<delete dir="${output.dev.coverage.regression.dir}" />
	</target>

	<!-- 
		Required binaries from repository
	-->
	<path id="esoestartup.classpath">
		<fileset dir="${com.qut.middleware.saml2lib-j}" id="saml2lib-j">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${com.qut.middleware.esoemanager}" id="esoemanager">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${javax.servlet}" id="servlet">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${net.sourceforge.click}" id="click">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${javax.xml.jaxb}" id="jaxb">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${org.springframework.jakarta-commons}" id="spring.jakarta-commons">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${org.springframework.log4j}" id="spring.log4j">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${org.springframework}" id="spring">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${org.bouncycastle}" id="bouncycastle">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${org.apache.ibatis}" id="ibatis">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${org.apache.struts}" id="struts">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${com.oracle.jdbc}" id="oracle">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${org.junit}" id="junit4">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${net.sourceforge.emma}" id="emma">
			<include name="**/*.jar" />
		</fileset>
	</path>

</project>
