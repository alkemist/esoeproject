<?xml version="1.0"?>

<!-- ====================================================================== 
	Author: Bradley Beddoes
	Date: 10/04/2006
	Purpose: Builds ESOE Startup Web Application
	====================================================================== -->

<project name="esoestartup" xmlns:ivy="antlib:org.apache.ivy.ant">

	<property file="build.properties" />

	<description>Builds ESOE Startup for various deployment environments</description>

	<taskdef resource="emma_ant.properties">
		<classpath>
			<pathelement location="${ant.emma}" />
			<pathelement location="${ant.emma_ant}" />
		</classpath>
	</taskdef>

	<target name="dev-resolve">
		<ivy:configure />
		<ivy:resolve file="ivy.xml" conf="dev" />
		<ivy:retrieve pattern="${basedir}/${artifacts.dev}/[artifact].[ext]" conf="dev" />
		<ivy:report conf="dev" graph="false" todir="${basedir}/${artifacts.dev}" />
	</target>

	<target name="release-resolve">
		<ivy:configure />
		<ivy:resolve file="ivy.xml" conf="release" />
		<ivy:retrieve pattern="${basedir}/${artifacts.release}/[artifact].[ext]" conf="release" />
		<ivy:report conf="release" graph="false" todir="${basedir}/${artifacts.release}" />
	
		<ivy:resolve file="ivy.xml" conf="release-endorsed" />
		<ivy:retrieve pattern="${basedir}/${artifacts.release.endorsed}/[artifact].[ext]" conf="release-endorsed" />
		<ivy:report conf="release-endorsed" graph="false" todir="${basedir}/${artifacts.release.endorsed}" />
		
		<ivy:resolve file="ivy.xml" conf="release-shared" />
		<ivy:retrieve pattern="${basedir}/${artifacts.release.shared}/[artifact].[ext]" conf="release-shared" />
		<ivy:report conf="release-shared" graph="false" todir="${basedir}/${artifacts.release.shared}" />
	</target>

	<target name="publish">
		<ivy:configure />
		<ivy:resolve file="ivy.xml" conf="dev" />
		<ivy:publish resolver="local-resolver" forcedeliver="true">
			<artifacts pattern="${basedir}/${output}/[artifact].[ext]" />
		</ivy:publish>
	</target>

	<target name="release" depends="war" description="Creates the ESOE Startup development release">
		<tar destfile="${output}/${output.shared.tar}.tar.gz" basedir="${artifacts.release.shared}" compression="gzip" />
		<tar destfile="${output}/${output.endorsed.tar}.tar.gz" basedir="${artifacts.release.endorsed}" compression="gzip" />
		<tar destfile="${output}/${output.tar}.tar.gz" compression="gzip" >
			<tarfileset file="${esoe.core.war}" preserveLeadingSlashes="true"/>
			<tarfileset file="${esoe.manager.war}" preserveLeadingSlashes="true"/>
			<tarfileset file="${spep.war}" preserveLeadingSlashes="true"/>
			<tarfileset file="${esoe.web.war}" preserveLeadingSlashes="true"/>
			<tarfileset file="${esoecore-endorsed.tar}" preserveLeadingSlashes="true"/>
			<tarfileset file="${esoecore-shared.tar}" preserveLeadingSlashes="true"/>
			<tarfileset file="${esoemanager-shared.tar}" preserveLeadingSlashes="true"/>
			<tarfileset file="${spep-shared.tar}" preserveLeadingSlashes="true"/>
			<tarfileset file="${spep-endorsed.tar}" preserveLeadingSlashes="true"/>
			<tarfileset file="${output}/${output.endorsed.tar}.tar.gz" preserveLeadingSlashes="true"/>
			<tarfileset file="${output}/${output.shared.tar}.tar.gz" preserveLeadingSlashes="true"/>
			<tarfileset file="${output}/${output.war}" preserveLeadingSlashes="true"/>
			<tarfileset dir="${sql}" preserveLeadingSlashes="true"/>
			<tarfileset file="log4j.xml" />
		</tar>
	</target>
	
	<target name="war" depends="jar, release-resolve" description="Assembles ESOEStartup development war">
		<mkdir dir="${webapp.content}/esoe"/>
		<mkdir dir="${webapp.content}/esoemanager"/>
		<mkdir dir="${webapp.content}/spep"/>
	
		<war destfile="${output}/${output.war}" webxml="${war.descriptor}">

			<webinf dir="${webapp.spring.resources}">
				<include name="**/*.xml" />
				<include name="**/*.config" />
				<include name="**/*.conf" />
			</webinf>

			<classes dir="ibatis" />
			<classes dir="${webapp.classes}" />

			<lib file="${output}/${output.jar}.jar" />
			<lib dir="${artifacts.release}" />

			<fileset dir="${webapp.content}" />
		</war>
		
		<delete dir="${webapp.content}/esoe"/>
		<delete dir="${webapp.content}/esoemanager"/>
		<delete dir="${webapp.content}/spep"/>
	</target>

	<target name="jar" depends="build" description="Assembles ESOEStartup development jar">
		<jar destfile="${output}/${output.jar}.jar">
			<fileset dir="${output.build}">
				<include name="**/*" />
			</fileset>
			<fileset dir="${src}">
				<include name="**/*.properties" />
				<include name="**/*.xml" />
				<include name="**/*.html" />
			</fileset>
		</jar>
	</target>

	<target name="build" depends="setup" description="Compiles ESOE Startup code base">
		<javac destdir="${output.build}" srcdir="${src}" debug="true" debuglevel="lines,vars,source">
			<classpath>
				<fileset dir="${artifacts}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${artifacts.dev}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>

	<target name="junit" depends="junit-functional, junit-regression" description="Invokes all unit tests defined for the ESOEStartup">
		<emma>
			<report sourcepath="${src}">
				<fileset dir="${output.coverage.dir}">
					<include name="**/*.emma" />
				</fileset>

				<txt outfile="${output.coverage.dir}/coverage.txt" />
				<html outfile="${output.coverage.dir}/coverage.html" />
				<xml outfile="${output.coverage.dir}/coverage.xml" />
			</report>
		</emma>
	</target>

	<target name="emma-instr" description="Configures esoestartup jar for emma coverage reporting">
		<emma>
			<instr mode="fullcopy" outdir="${output.coverage.dir}" merge="false" metadatafile="${output.coverage.dir}/metadata.emma">
				<instrpath>
					<fileset dir="${output}" includes="**/*.jar" />
				</instrpath>
				<filter includes="com.qut.*" excludes="com.qut.*Messages*, com.qut.*Exception*" />
			</instr>
		</emma>
	</target>

	<target name="junit-regression-build" depends="jar" description="Compiles ESOEStartup regression tests code base">
		<javac destdir="${output.test.regression.build}" srcdir="${src.tests.regression}" debug="true" debuglevel="lines,vars,source">
			<classpath>
				<fileset dir="${artifacts}">
					<include name="**/*.jar" />
				</fileset>
				<path path="${output}/${output.jar}.jar" />
			</classpath>
		</javac>
	</target>

	<target name="junit-regression" depends="junit-regression-build, emma-instr" description="Invokes all junit regression tests for the ESOEStartup">
		<mkdir dir="${junit.test.regression.reports}" />

		<junit printsummary="yes" haltonfailure="no" fork="yes">
			<classpath>
				<path path="${output.coverage.dir}/lib/${output.jar}.jar" />
				<path path="${output.test.regression.build}" />
				<path refid="esoestartup.classpath" />
				<path path="${src.tests.regression}" />
			</classpath>

			<jvmarg value="-Demma.coverage.out.file=${output.coverage.regression.dir}/coverage.emma" />
			<jvmarg value="-Demma.coverage.out.merge=true" />

			<formatter type="xml" />

			<batchtest fork="yes" todir="${output.junit.regression.reports}">
				<fileset dir="${output.test.regression.build}">
					<include name="**/*Test*.class" />
					<exclude name="**/*KerberosV5*.class" />
				</fileset>
			</batchtest>
		</junit>

		<emma>
			<report sourcepath="${src}">
				<fileset dir="${output.coverage.regression.dir}">
					<include name="*.emma" />
				</fileset>
				<fileset file="${output.coverage.dir}/metadata.emma" />

				<txt outfile="${output.coverage.regression.dir}/coverage.txt" />
				<html outfile="${output.coverage.regression.dir}/coverage.html" />
				<xml outfile="${output.coverage.regression.dir}/coverage.xml" />
			</report>
		</emma>
	</target>

	<target name="junit-functional-build" depends="jar" description="Compiles ESOEStartup functional test code base">
		<javac destdir="${output.test.functional.build}" srcdir="${src.tests.functional}" debug="true" debuglevel="lines,vars,source">
			<classpath>
				<fileset dir="${artifacts}">
					<include name="**/*.jar" />
				</fileset>
				<path path="${output}/${output.jar}.jar" />
			</classpath>
		</javac>
	</target>

	<target name="junit-functional" depends="junit-functional-build, emma-instr" description="Invokes all junit functional tests for the ESOEStartup">
		<mkdir dir="${junit.test.functional.reports}" />

		<junit printsummary="yes" haltonfailure="no" fork="yes">
			<classpath>
				<path path="${output.coverage.dir}/lib/${output.jar}.jar" />
				<path path="${output.test.functional.build}" />
				<fileset dir="${artifacts}">
					<include name="**/*.jar" />
				</fileset>
				<path path="${src.tests.functional}" />
			</classpath>

			<formatter type="xml" />

			<jvmarg value="-Demma.coverage.out.file=${output.coverage.functional.dir}/coverage.emma" />
			<jvmarg value="-Demma.coverage.out.merge=true" />

			<batchtest fork="yes" todir="${output.junit.functional.reports}">
				<fileset dir="${output.test.functional.build}">
					<include name="**/*Test*.class" />
					<exclude name="**/*KerberosV5*.class" />
				</fileset>
			</batchtest>
		</junit>

		<emma>
			<report sourcepath="${src}">
				<fileset dir="${output.coverage.functional.dir}">
					<include name="*.emma" />
				</fileset>
				<fileset file="${output.coverage.dir}/metadata.emma" />

				<txt outfile="${output.coverage.functional.dir}/coverage.txt" />
				<html outfile="${output.coverage.functional.dir}/coverage.html" />
				<xml outfile="${output.coverage.functional.dir}/coverage.xml" />
			</report>
		</emma>
	</target>

	<target name="javadoc" description="Build javadoc for the entire project">
		<javadoc packagenames="com.qut.*" sourcepath="src" defaultexcludes="yes" destdir="${doc}" author="true" version="true" use="true" windowtitle="administration">
			<doctitle>
				<![CDATA[<h1>ESOE Startup API</h1>]]>
			</doctitle>
		<bottom>
			<![CDATA[<i>Copyright &#169; 2006 Queensland University of Technology. All Rights Reserved.</i>]]>
		</bottom>
		<tag name="todo" scope="all" description="To do:" />

			<classpath>
			<fileset dir="${artifacts}">
				<include name="**/*.jar" />
			</fileset>
		</classpath>
	
		</javadoc>
	</target>
	
	<target name="setup" depends="clean">
		<mkdir dir="${output.build}" />
		<mkdir dir="${output}" />
		<mkdir dir="${output.test.regression.build}" />
		<mkdir dir="${output.test.functional.build}" />
		<mkdir dir="${output.coverage.dir}" />
		<mkdir dir="${output.coverage.functional.dir}" />
		<mkdir dir="${output.coverage.regression.dir}" />
		<mkdir dir="${output}" />
		<mkdir dir="${artifacts.release.endorsed}" />
		<mkdir dir="${artifacts.release}" />
	</target>

	<target name="clean" description="clean up binaries and api doc">
		<delete dir="${output.build}" />
		<delete dir="${output}" />
		<delete dir="${output.test.regression.build}" />
		<delete dir="${output.test.functional.build}" />
		<delete dir="${output.coverage.dir}" />
		<delete dir="${output.coverage.functional.dir}" />
		<delete dir="${output.coverage.regression.dir}" />
		<delete dir="${artifacts.release.endorsed}" />
		<delete dir="${artifacts.release}" />
	</target>

</project>
