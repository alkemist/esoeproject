/*
 * Creates database structure for ESOE and ESOE Manager web applications. Must be run into the database before running ESOE Startup
 */

CREATE TABLE ESOE_VERSION_DATA (DATECREATED DATE NOT NULL, CURRENTVERSION VARCHAR(256) NOT NULL, SCHEMAVERSION VARCHAR(256) NOT NULL, LICENCEBINARY BLOB);
COMMENT ON TABLE ESOE_VERSION_DATA IS 'Stores authorative reference to currently deployed ESOE version data';


CREATE TABLE ESOE_VERSION_DATA_HISTORY (DATEUPDATED DATE, VERSION VARCHAR(256) );
COMMENT ON TABLE ESOE_VERSION_DATA IS 'Stores historical reference to deployed ESOE versions';


CREATE TABLE ENTITY_DESCRIPTORS (ENT_ID NUMBER(10, 0) NOT NULL, ENTITYID VARCHAR(512) NOT NULL UNIQUE, ORGANIZATIONNAME VARCHAR(1024) NOT NULL, ORGANIZATIONDISPLAYNAME VARCHAR(1024) NOT NULL, ORGANIZATIONURL VARCHAR(1024) NOT NULL, ACTIVEFLAG CHAR(1) NOT NULL, PRIMARY KEY (ENT_ID));
COMMENT ON TABLE ENTITY_DESCRIPTORS IS 'Stores authorative reference to all service points deployed in the system';
COMMENT ON COLUMN ENTITY_DESCRIPTORS.ENTITYID IS 'Specifies the unique identifier of the SAML entity described by this entries contents (1000 due to requirements in SAML core spec 8.6.3 and maximums of DB width)';
COMMENT ON COLUMN ENTITY_DESCRIPTORS.ORGANIZATIONNAME IS 'Language qualified names that may or may not be suitable for human consumption';
COMMENT ON COLUMN ENTITY_DESCRIPTORS.ORGANIZATIONDISPLAYNAME IS 'Language qualified names that are suitable for human consumption';
COMMENT ON COLUMN ENTITY_DESCRIPTORS.ORGANIZATIONURL IS 'Language qualified URI that specify a location to which to direct a user for additional information';
COMMENT ON COLUMN ENTITY_DESCRIPTORS.ACTIVEFLAG IS 'Denotes if this entity is currently considered active for the puposes of generating metadata and other processing inside the ESOE';


CREATE TABLE SERVICE_DESCRIPTIONS (ENT_ID NUMBER(10, 0) NOT NULL,  SERVICENAME VARCHAR(1024) NOT NULL, SERVICEURL VARCHAR(2048) NOT NULL, SERVICEDESC VARCHAR(2048), AUTHZFAILUREMSG VARCHAR(2048), PRIMARY KEY (ENT_ID));
COMMENT ON TABLE SERVICE_DESCRIPTIONS IS 'Stores authorative reference to all service points deployed in the system';
COMMENT ON COLUMN SERVICE_DESCRIPTIONS.SERVICENAME IS 'Name of the service';
COMMENT ON COLUMN SERVICE_DESCRIPTIONS.SERVICEURL IS 'URL that specifies the location of the service used by clients to access the service';
COMMENT ON COLUMN SERVICE_DESCRIPTIONS.SERVICEDESC IS 'Description of the service suitable for human consumption';
COMMENT ON COLUMN SERVICE_DESCRIPTIONS.AUTHZFAILUREMSG IS 'Details to be provided by central system when authorization fails';


CREATE TABLE DESCRIPTORS (ENT_ID NUMBER(10, 0) NOT NULL, DESC_ID NUMBER(10, 0) NOT NULL,  DESCRIPTORID VARCHAR(512) NOT NULL, DESCRIPTORXML BLOB NOT NULL, DESCRIPTORTYPEID NUMBER(2) NOT NULL, PRIMARY KEY(DESC_ID));
COMMENT ON TABLE DESCRIPTORS IS 'Stores authoritive reference to all descriptors deployed in this system for each entity.';
COMMENT ON COLUMN DESCRIPTORS.DESCRIPTORID IS 'A SAML document unique identifier, generally used as a reference point for signatures but also uniquely identifies this descriptor, generated by the SAML2lib-j IdentifierGenerator';
COMMENT ON COLUMN DESCRIPTORS.DESCRIPTORXML IS 'Contains one of the different extensions of the SAML RoleDescriptorType with content reflecting to which the RoleDescriptor belongs. This field stores an XML representation the descriptor';
COMMENT ON COLUMN DESCRIPTORS.DESCRIPTORTYPEID IS 'References the look up table DESCRIPTORTYPES';


CREATE TABLE DESCRIPTORS_SHUNT (ENT_ID NUMBER(10, 0) NOT NULL, DESC_ID NUMBER(10, 0) NOT NULL,  DESCRIPTORID VARCHAR(512) NOT NULL, DESCRIPTORXML BLOB NOT NULL, DESCRIPTORTYPEID NUMBER(2) NOT NULL, PRIMARY KEY(DESC_ID));
COMMENT ON TABLE DESCRIPTORS_SHUNT IS 'Stores temporary reference to descriptors deployed in this system, between times when system is in transition state (key regeneration etc)';
COMMENT ON COLUMN DESCRIPTORS_SHUNT.DESCRIPTORID IS 'A SAML document unique identifier, generally used as a reference point for signatures but also uniquely identifies this descriptor, generated by the SAML2lib-j IdentifierGenerator';
COMMENT ON COLUMN DESCRIPTORS_SHUNT.DESCRIPTORXML IS 'Contains one of the different extensions of the SAML RoleDescriptorType with content reflecting to which the RoleDescriptor belongs. This field stores an XML representation the descriptor';
COMMENT ON COLUMN DESCRIPTORS_SHUNT.DESCRIPTORTYPEID IS 'References the look up table DESCRIPTORTYPES';


CREATE TABLE DESCRIPTOR_PUBLIC_KEYS(DESC_ID NUMBER(10, 0) NOT NULL, EXPIRYDATE DATE NOT NULL, KEYNAME VARCHAR(255), PUBLICKEY BLOB NOT NULL, PRIMARY KEY(DESC_ID, KEYNAME));
COMMENT ON TABLE DESCRIPTOR_PUBLIC_KEYS IS 'Table to store public keys associated with each descriptor, inserted into Metadata dynamically by Metadata generator';
COMMENT ON COLUMN DESCRIPTOR_PUBLIC_KEYS.EXPIRYDATE IS 'Date that this key pair will expire so that invalid keys arent replicated in metadata';
COMMENT ON COLUMN DESCRIPTOR_PUBLIC_KEYS.KEYNAME IS 'Identifier for the key which is specified in metadata as the ds:KeyInfo KeyName element.';


CREATE TABLE SERVICE_ENDPOINTS (DESC_ID NUMBER(10, 0) NOT NULL, ENDPOINTID VARCHAR(12) NOT NULL, NODEURL VARCHAR(512) NOT NULL, ASSERTIONCONSUMER_ENDPOINT VARCHAR(512) NOT NULL, SINGLELOGOUT_ENDPOINT VARCHAR(512) NOT NULL, CACHECLEAR_ENDPOINT VARCHAR(512) NOT NULL, ACTIVEFLAG CHAR(1) DEFAULT 'y' NOT NULL, PRIMARY KEY (ENDPOINTID, DESC_ID));
COMMENT ON TABLE SERVICE_ENDPOINTS IS 'Table which stores endpoints for each logic node of the service, this will be used to generate the service descriptor xml document to saml compliance';
COMMENT ON COLUMN SERVICE_ENDPOINTS.ENDPOINTID IS 'Unique value representing the id of each backend node for this service, this is used as the value of index when createing IndexedEndpointType';
COMMENT ON COLUMN SERVICE_ENDPOINTS.NODEURL IS 'Base URL of node which is combined with each endpoint below when generating service descriptor';
COMMENT ON COLUMN SERVICE_ENDPOINTS.ASSERTIONCONSUMER_ENDPOINT IS 'SAML Assertion consumer endpoint, will be combined with value of NodeURL for generation of service descriptor values';
COMMENT ON COLUMN SERVICE_ENDPOINTS.SINGLELOGOUT_ENDPOINT IS  'SAML single logout endpoint, will be combined with value of NodeURL for generation of service descriptor values';
COMMENT ON COLUMN SERVICE_ENDPOINTS.CACHECLEAR_ENDPOINT IS  'LXACML cache clear endpoint, will be combined with value of NodeURL for generation of service descriptor values';


CREATE TABLE DESCRIPTOR_TYPES (DESCRIPTORTYPEID NUMBER(2) NOT NULL, DESCRIPTORTYPEDESCRIPTION VARCHAR(128) NOT NULL, PRIMARY KEY(DESCRIPTORTYPEID));
COMMENT ON TABLE DESCRIPTOR_TYPES IS 'A look up table to determine what type of RoleDescriptor is contained within the the DESCRIPTORS table.';
COMMENT ON COLUMN DESCRIPTOR_TYPES.DESCRIPTORTYPEID IS 'References DESCRIPTORS.DESCRIPTORTYPE. Provides a keyed look up mechanism.';
COMMENT ON COLUMN DESCRIPTOR_TYPES.DESCRIPTORTYPEDESCRIPTION IS 'A human readable description of the SAML type contained within the descriptors table.';
INSERT INTO DESCRIPTOR_TYPES VALUES (1, 'IDPSSODescriptor');
INSERT INTO DESCRIPTOR_TYPES VALUES (2, 'SPSSODescriptor');
INSERT INTO DESCRIPTOR_TYPES VALUES (3, 'LXACMLPDPDescriptor');
INSERT INTO DESCRIPTOR_TYPES VALUES (4, 'AuthNAuthorityDescriptor');
INSERT INTO DESCRIPTOR_TYPES VALUES (5, 'AttributeAuthorityDescriptor');


CREATE TABLE ENTITY_CONTACTS (CONTACTTYPE VARCHAR(255) NOT NULL CHECK(CONTACTTYPE IN ('technical', 'support', 'administrative', 'billing', 'other')), ENT_ID NUMBER(10, 0) NOT NULL, CONTACTID VARCHAR(12) NOT NULL, COMPANY VARCHAR(255), GIVENNAME VARCHAR(255) NOT NULL, SURNAME VARCHAR(255) NOT NULL, EMAILADDRESS VARCHAR(255) NOT NULL, TELEPHONENUMBER VARCHAR(255) NOT NULL, CONSTRAINT CONTACTTYPE PRIMARY KEY (CONTACTID, ENT_ID));
COMMENT ON TABLE ENTITY_CONTACTS IS 'Provides contact details for each service provider deployed within the system';
COMMENT ON COLUMN ENTITY_CONTACTS.CONTACTTYPE IS 'Specifies the type of contact';
COMMENT ON COLUMN ENTITY_CONTACTS.CONTACTID IS 'Unique numerical reference for this contact which wont change';
COMMENT ON COLUMN ENTITY_CONTACTS.COMPANY IS 'Specifies the name of the company for the contact person';
COMMENT ON COLUMN ENTITY_CONTACTS.GIVENNAME IS 'Specifies the given name of the contact person';
COMMENT ON COLUMN ENTITY_CONTACTS.SURNAME IS 'Optional string element that specifies the surname of the contact person';
COMMENT ON COLUMN ENTITY_CONTACTS.EMAILADDRESS IS 'Contains mailto: URIs representing email addresses belonging to the contact person';
COMMENT ON COLUMN ENTITY_CONTACTS.TELEPHONENUMBER IS 'Specifies a telephone number of the contact person';


CREATE TABLE SUPPORTED_ATTRIBUTES (ENT_ID NUMBER(10, 0) NOT NULL, ATTRIBPOLICY BLOB NOT NULL, SEQID NUMBER(19, 0) NOT NULL, PRIMARY KEY (ENT_ID));
COMMENT ON TABLE SUPPORTED_ATTRIBUTES IS 'Stores config data for attributes which ESOE supports resolving from multiple sources';
COMMENT ON COLUMN SUPPORTED_ATTRIBUTES.ATTRIBPOLICY IS 'The configuration data xml document for attributes which are supported';


CREATE TABLE SUPPORTED_ATTRIB_HISTORICAL (ENT_ID NUMBER(10, 0) NOT NULL, ATTRIBPOLICY BLOB NOT NULL, DATEINSERTED DATE NOT NULL);
COMMENT ON TABLE SUPPORTED_ATTRIB_HISTORICAL IS 'Stores modifications to config data for attributes which ESOE supports resolving from multiple sources';


CREATE TABLE SERVICE_POLICIES (ENT_ID NUMBER(10, 0) NOT NULL, POLICYID VARCHAR(100) NOT NULL, LXACMLPOLICY BLOB NOT NULL, ACTIVEFLAG CHAR(1) DEFAULT 'y' NOT NULL, PRIMARY KEY (ENT_ID, POLICYID));
COMMENT ON TABLE SERVICE_POLICIES IS 'Stores authorative reference to all policies for all services deployed in the system';
COMMENT ON COLUMN SERVICE_POLICIES.LXACMLPOLICY IS 'Stores XML representation of LXACML authorization policy to be applied to requests at the associated service. Consumed by the ESOE Manager.';


CREATE TABLE SERVICE_POLICIES_STATE (ENT_ID NUMBER(10, 0) NOT NULL, POLICYID VARCHAR(100) NOT NULL, POLACTION CHAR NOT NULL, SEQID NUMBER(19, 0) NOT NULL, PRIMARY KEY (ENT_ID, POLICYID));
COMMENT ON TABLE SERVICE_POLICIES_STATE IS 'Stores modification state of policies updating the value of POLACTION and SEQID when changes are made to a policy in the editor so ESOE can reload';
COMMENT ON COLUMN SERVICE_POLICIES_STATE.SEQID IS 'Stores a sequence value which PDP relies on as the last point in the changeset it updated itself to';


CREATE TABLE SERVICE_POLICIES_HISTORICAL (ENT_ID NUMBER(10, 0) NOT NULL, POLICYID VARCHAR(100) NOT NULL, LXACMLPOLICY BLOB NOT NULL, DATEINSERTED DATE NOT NULL);
COMMENT ON TABLE SERVICE_POLICIES IS 'Stores authorative reference to all policies for all services deployed in the system';
COMMENT ON COLUMN SERVICE_POLICIES.LXACMLPOLICY IS 'Stores held XML representation of LXACML authorization policy, represents policy that does not conform to standard and must be approved by system administrators.';


CREATE TABLE SERVICE_POLICIES_SHUNT (ENT_ID NUMBER(10, 0) NOT NULL, LXACMLPOLICY BLOB NOT NULL, DATEINSERTED DATE NOT NULL, PRIMARY KEY (ENT_ID));
COMMENT ON TABLE SERVICE_POLICIES IS 'Stores authorative reference to all policies for all services deployed in the system';
COMMENT ON COLUMN SERVICE_POLICIES.LXACMLPOLICY IS 'Stores held XML representation of LXACML authorization policy, represents policy that does not conform to standard and must be approved by system administrators.';


CREATE TABLE METADATA_PKI_STORES (EXPIRYDATE DATE NOT NULL, KEYPAIRNAME VARCHAR(255) NOT NULL, KEYPAIR_PASSPHRASE VARCHAR(255) NOT NULL UNIQUE, KEYSTORE BLOB, KEYSTORE_PASSPHRASE VARCHAR(255), PRIMARY KEY (KEYPAIRNAME));
COMMENT ON TABLE METADATA_PKI_STORES IS 'Stores references to all PKI keys generated in the system for use in signing Metadata documents';

CREATE TABLE PKI_STORES (DESC_ID NUMBER(10, 0) NOT NULL, EXPIRYDATE DATE NOT NULL, KEYPAIRNAME VARCHAR(255) NOT NULL, KEYPAIR_PASSPHRASE VARCHAR(255) NOT NULL, KEYSTORE BLOB, KEYSTORE_PASSPHRASE VARCHAR(255), PRIMARY KEY (DESC_ID, KEYPAIRNAME));
COMMENT ON TABLE PKI_STORES IS 'Stores references to all PKI keys generated in the system for use on SP''s';
COMMENT ON COLUMN PKI_STORES.EXPIRYDATE IS 'Date that this key pair will expire so that notification may be sent to end users';
COMMENT ON COLUMN PKI_STORES.KEYPAIRNAME IS 'Identifier for the key which is specified in metadata as the ds:KeyInfo KeyName element.';
COMMENT ON COLUMN PKI_STORES.KEYPAIR_PASSPHRASE IS 'Passphrase of the generated keypair for this descriptor';
COMMENT ON COLUMN PKI_STORES.KEYSTORE IS 'generated KeyStore object';
COMMENT ON COLUMN PKI_STORES.KEYSTORE_PASSPHRASE IS 'Passphrase of generated key store';


CREATE TABLE SPEP_REGISTRATIONS (ENT_ID NUMBER(10, 0) NOT NULL, NODEID VARCHAR(100) NOT NULL, IPADDRESS VARCHAR(1024) NOT NULL, COMPILEDATE VARCHAR(30) NOT NULL, COMPILESYSTEM VARCHAR(512) NOT NULL, VERSION VARCHAR(100) NOT NULL, ENVIRONMENT VARCHAR(512) NOT NULL, DATE_ADDED DATE NOT NULL, DATE_UPDATED DATE NOT NULL, PRIMARY KEY (ENT_ID, NODEID));
COMMENT ON TABLE SPEP_REGISTRATIONS IS 'Stores the current details of registered SPEPS';
COMMENT ON COLUMN SPEP_REGISTRATIONS.IPADDRESS IS 'IPAddress of the SPEP, may be space seperated for multiple addresses';
COMMENT ON COLUMN SPEP_REGISTRATIONS.COMPILEDATE IS 'Date this SPEP was compiled';
COMMENT ON COLUMN SPEP_REGISTRATIONS.COMPILESYSTEM IS 'Name of the system this SPEP was compiled on';
COMMENT ON COLUMN SPEP_REGISTRATIONS.VERSION IS 'Versioning details of the SPEP';
COMMENT ON COLUMN SPEP_REGISTRATIONS.ENVIRONMENT IS 'Environment specific details about the SPEP';
COMMENT ON COLUMN SPEP_REGISTRATIONS.DATE_ADDED IS 'Date this SPEP was first seen';
COMMENT ON COLUMN SPEP_REGISTRATIONS.DATE_UPDATED IS 'Date this SPEP was last modified';


CREATE TABLE SPEP_REGISTRATIONS_HISTORICAL (ENT_ID NUMBER(10, 0) NOT NULL, NODEID VARCHAR(100) NOT NULL, IPADDRESS VARCHAR(100) NOT NULL, COMPILEDATE VARCHAR(30) NOT NULL, COMPILESYSTEM VARCHAR(512) NOT NULL, VERSION VARCHAR(100) NOT NULL, ENVIRONMENT VARCHAR(512) NOT NULL, DATE_ADDED DATE NOT NULL);
COMMENT ON TABLE SPEP_REGISTRATIONS_HISTORICAL IS 'Stores the historical details of registered SPEPS and how theyve changed over time';
COMMENT ON COLUMN SPEP_REGISTRATIONS_HISTORICAL.IPADDRESS IS 'IPAddress of the SPEP, may be space seperated for multiple addresses';
COMMENT ON COLUMN SPEP_REGISTRATIONS_HISTORICAL.COMPILEDATE IS 'Date this SPEP was compiled';
COMMENT ON COLUMN SPEP_REGISTRATIONS_HISTORICAL.COMPILESYSTEM IS 'Name of the system this SPEP was compiled on';
COMMENT ON COLUMN SPEP_REGISTRATIONS_HISTORICAL.VERSION IS 'Versioning details of the SPEP';
COMMENT ON COLUMN SPEP_REGISTRATIONS_HISTORICAL.ENVIRONMENT IS 'Environment specific details about the SPEP';
COMMENT ON COLUMN SPEP_REGISTRATIONS_HISTORICAL.DATE_ADDED IS 'Date this SPEP was first seen';


CREATE INDEX DESCRIPTORS_INDEXS ON  DESCRIPTORS (ENT_ID, DESCRIPTORID); 
CREATE INDEX DESCRIPTORS_SHUNT_INDEXS ON  DESCRIPTORS_SHUNT (ENT_ID, DESCRIPTORID); 

ALTER TABLE ENTITY_CONTACTS ADD CONSTRAINT FK_CONTACTS FOREIGN KEY (ENT_ID) REFERENCES ENTITY_DESCRIPTORS;
ALTER TABLE SERVICE_DESCRIPTIONS ADD CONSTRAINT FK_SERV_DESC FOREIGN KEY (ENT_ID) REFERENCES ENTITY_DESCRIPTORS;
ALTER TABLE SERVICE_ENDPOINTS  ADD CONSTRAINT FK_SERV_ENDP FOREIGN KEY (DESC_ID) REFERENCES DESCRIPTORS;
ALTER TABLE DESCRIPTORS ADD CONSTRAINT FK_DESCRIPTORS FOREIGN KEY (ENT_ID) REFERENCES ENTITY_DESCRIPTORS;
ALTER TABLE DESCRIPTORS_SHUNT ADD CONSTRAINT FK_DESCRIPTORS_SHUNT FOREIGN KEY (ENT_ID) REFERENCES ENTITY_DESCRIPTORS;
ALTER TABLE PKI_STORES ADD CONSTRAINT FK_PKI FOREIGN KEY (DESC_ID) REFERENCES DESCRIPTORS;
ALTER TABLE SERVICE_POLICIES ADD CONSTRAINT FK_SERV_POL FOREIGN KEY (ENT_ID) REFERENCES ENTITY_DESCRIPTORS;
ALTER TABLE SPEP_REGISTRATIONS ADD CONSTRAINT FK_SPEP_REG FOREIGN KEY (ENT_ID) REFERENCES ENTITY_DESCRIPTORS;
ALTER TABLE SPEP_REGISTRATIONS_HISTORICAL ADD CONSTRAINT FK_SPEP_REG_HIST FOREIGN KEY (ENT_ID) REFERENCES ENTITY_DESCRIPTORS;
ALTER TABLE DESCRIPTORS ADD CONSTRAINT FKDESCTYPE FOREIGN KEY (DESCRIPTORTYPEID) REFERENCES DESCRIPTOR_TYPES;


CREATE SEQUENCE ENT_ID_SEQUENCE
START WITH 1
INCREMENT BY 1
CACHE 10;
/

CREATE SEQUENCE DESC_ID_SEQUENCE
START WITH 1
INCREMENT BY 1
CACHE 10;
/

CREATE SEQUENCE POLICY_ID_SEQUENCE
START WITH 1
INCREMENT BY 1
CACHE 10;
/

CREATE OR REPLACE FUNCTION NEXT_ENT_ID RETURN NUMBER AS
retVal NUMBER(19);
cursor nextSEQ is select ENT_ID_SEQUENCE.nextval from dual;
BEGIN
  open nextSEQ;
  fetch nextSEQ into retVal;
  close nextSEQ;
  RETURN retVal;
END NEXT_ENT_ID;
/

CREATE OR REPLACE FUNCTION NEXT_DESC_ID RETURN NUMBER AS
retVal NUMBER(19);
cursor nextSEQ is select DESC_ID_SEQUENCE.nextval from dual;
BEGIN
  open nextSEQ;
  fetch nextSEQ into retVal;
  close nextSEQ;
  RETURN retVal;
END NEXT_DESC_ID;
/

CREATE OR REPLACE FUNCTION NEXT_SEQ_ID RETURN NUMBER AS
retVal NUMBER(19);
cursor nextSEQ is select POLICY_ID_SEQUENCE.nextval from dual;
BEGIN
  open nextSEQ;
  fetch nextSEQ into retVal;
  close nextSEQ;
  RETURN retVal;
END NEXT_SEQ_ID;
/

CREATE OR REPLACE TRIGGER VERSION_HISTORY_INSERT
BEFORE INSERT
ON ESOE_VERSION_DATA
FOR EACH ROW
BEGIN
INSERT INTO ESOE_VERSION_DATA_HISTORY (DATEUPDATED, VERSION) VALUES (SYSDATE(), :NEW.CURRENTVERSION); 
END;
/

CREATE OR REPLACE TRIGGER VERSION_HISTORY_UPDATE
BEFORE UPDATE
ON ESOE_VERSION_DATA
FOR EACH ROW
BEGIN
INSERT INTO ESOE_VERSION_DATA_HISTORY (DATEUPDATED, VERSION) VALUES (SYSDATE(), :NEW.CURRENTVERSION); 
END;
/

CREATE OR REPLACE TRIGGER ENTITY_DESCRIPTOR_CHANGE
BEFORE UPDATE
ON ENTITY_DESCRIPTORS
FOR EACH ROW
BEGIN
UPDATE SERVICE_POLICIES SET ACTIVEFLAG=:NEW.ACTIVEFLAG WHERE ENT_ID = :OLD.ENT_ID;
END;
/

CREATE OR REPLACE TRIGGER POLICY_INSERT
BEFORE INSERT
ON SERVICE_POLICIES
FOR EACH ROW
BEGIN
INSERT INTO SERVICE_POLICIES_STATE (ENT_ID, POLICYID, POLACTION) VALUES (:NEW.ENT_ID, :NEW.POLICYID, 'A');
INSERT INTO SERVICE_POLICIES_HISTORICAL (ENT_ID, POLICYID, LXACMLPOLICY, DATEINSERTED) VALUES (:NEW.ENT_ID, :NEW.POLICYID, :NEW.LXACMLPOLICY, SYSDATE);
END;
/

CREATE OR REPLACE TRIGGER POLICY_UPDATE
BEFORE UPDATE
ON SERVICE_POLICIES
FOR EACH ROW
BEGIN
UPDATE SERVICE_POLICIES_STATE SET POLACTION = 'U' WHERE ENT_ID = :OLD.ENT_ID AND POLICYID = :OLD.POLICYID;
INSERT INTO SERVICE_POLICIES_HISTORICAL (ENT_ID, POLICYID, LXACMLPOLICY, DATEINSERTED) VALUES (:OLD.ENT_ID, :OLD.POLICYID, :NEW.LXACMLPOLICY, SYSDATE);
END;
/

CREATE OR REPLACE TRIGGER POLICY_DELETE
BEFORE DELETE
ON SERVICE_POLICIES
FOR EACH ROW
BEGIN
UPDATE SERVICE_POLICIES_STATE SET POLACTION = 'D' WHERE ENT_ID = :OLD.ENT_ID AND POLICYID = :OLD.POLICYID;
END;
/

CREATE OR REPLACE TRIGGER POLICY_STATE_INSERT
BEFORE INSERT
ON SERVICE_POLICIES_STATE
FOR EACH ROW
BEGIN
SELECT POLICY_ID_SEQUENCE.nextval INTO :NEW.SEQID FROM dual;
END;
/

CREATE OR REPLACE TRIGGER POLICY_STATE_UPDATE
BEFORE UPDATE
ON SERVICE_POLICIES_STATE
FOR EACH ROW
BEGIN
SELECT POLICY_ID_SEQUENCE.nextval INTO :NEW.SEQID FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ATTRIBUTE_INSERT
BEFORE INSERT
ON SUPPORTED_ATTRIBUTES
FOR EACH ROW
BEGIN
INSERT INTO SUPPORTED_ATTRIB_HISTORICAL (ENT_ID, ATTRIBPOLICY, DATEINSERTED) VALUES (:NEW.ENT_ID, :NEW.ATTRIBPOLICY, SYSDATE);
END;
/

CREATE OR REPLACE TRIGGER ATTRIBUTE_UPDATE
BEFORE UPDATE
ON SUPPORTED_ATTRIBUTES
FOR EACH ROW
BEGIN
INSERT INTO SUPPORTED_ATTRIB_HISTORICAL (ENT_ID, ATTRIBPOLICY, DATEINSERTED) VALUES (:OLD.ENT_ID, :NEW.ATTRIBPOLICY, SYSDATE);
END;
/

CREATE OR REPLACE TRIGGER SPEP_REGISTRATIONS_INSERT 
BEFORE INSERT 
ON SPEP_REGISTRATIONS
FOR EACH ROW
BEGIN
INSERT INTO SPEP_REGISTRATIONS_HISTORICAL (ENT_ID, NODEID, IPADDRESS, COMPILEDATE, COMPILESYSTEM, VERSION, ENVIRONMENT, DATE_ADDED) VALUES (:NEW.ENT_ID, :NEW.NODEID, :NEW.IPADDRESS, :NEW.COMPILEDATE, :NEW.COMPILESYSTEM, :NEW.VERSION, :NEW.ENVIRONMENT, SYSDATE()); 
END; 
/

CREATE OR REPLACE TRIGGER SPEP_REGISTRATIONS_UPDATE 
BEFORE UPDATE 
ON SPEP_REGISTRATIONS
FOR EACH ROW
BEGIN
INSERT INTO SPEP_REGISTRATIONS_HISTORICAL (ENT_ID, NODEID, IPADDRESS, COMPILEDATE, COMPILESYSTEM, VERSION, ENVIRONMENT, DATE_ADDED) VALUES (:NEW.ENT_ID, :NEW.NODEID, :NEW.IPADDRESS, :NEW.COMPILEDATE, :NEW.COMPILESYSTEM, :NEW.VERSION, :NEW.ENVIRONMENT, SYSDATE()); 
END; 
/