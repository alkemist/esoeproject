/* Copyright 2006, Queensland University of Technology
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
 * use this file except in compliance with the License. You may obtain a copy of 
 * the License at 
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
 * License for the specific language governing permissions and limitations under 
 * the License.
 * 
 * Author: Bradley Beddoes
 * Creation Date: 03/10/2006
 * 
 * Purpose: Generates random identifiers compliant to SAML 2.0, XML Schema and ESOE session identification standards
 */

package com.qut.middleware.saml2.identifier;

/** Generates random identifiers compliant to SAML 2.0, XML Schema and ESOE session identification standards. */
public interface IdentifierGenerator
{
	/**
	 * This function generates a random identifier to be used with SAML 2.0 documents. The case that the same random
	 * identifier would be generated by the ESOE for two seperate objects will be less the 2 ^ -160. This meets
	 * requirements of the SAML 2.0 specification. Additionally identifiers will begin with the character '_' to meet
	 * requirements of the xsd:ID attribute. Format of the identifier: ID ::= _(SHA1 20 bytes)-(SHA1 16 bytes)
	 * 
	 * @return Returns an ID
	 */
	public String generateSAMLID();

	/**
	 * This function generates a random identifier to be used with a SAML 2.0 subject. The case that the same
	 * random identifier would be generated by the ESOE for two seperate objects will be less the 2 ^ -160. This meets
	 * requirements of the SAML 2.0 specification. Format of the identifier: AuthnID ::= (SHA1 20 bytes)-(SHA1 16 bytes)
	 * 
	 * @return Returns an AuthnID
	 */
	public String generateSAMLAuthnID();

	/**
	 * This function generates a random identifier to be used with SAML 2.0 session identifiers. Format of the
	 * identifier: SessionID ::= (SHA1 10 bytes)
	 * 
	 * @return Returns an SessionID
	 */
	public String generateSAMLSessionID();
	
	/**
	 * This function generates a random identifier to be used with metadata KeyName values. Format of the
	 * identifier: KeyName ::= (SHA1 8 bytes)
	 * 
	 * @return Returns an SessionID
	 */
	public String generateXMLKeyName();

	/**
	 * This function generates a random identifier to be used in supplying session identifiers to user-agents. The case
	 * that the same random identifier would be generated by the ESOE for two seperate objects will be less the 2 ^
	 * -160. Format of the identifier: SESSIONID ::= ID-(Time since epoch of session generation)
	 * 
	 * @return Returns a SESSIONID
	 */
	public String generateSessionID();
}
