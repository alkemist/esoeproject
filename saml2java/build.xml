<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
	Author: Bradley Beddoes
	Date: 17/10/2006                                                        
	Purpose: Builds SAML2lib-j library for use in applications wishing to conform to SAML 2.0 standards and extenstions
	
	====================================================================== -->
<project name="saml2java" xmlns:ivy="antlib:org.apache.ivy.ant">

	<property file="build.properties" />

	<description>
		Builds SAML2lib-j library for use in applications wishing to conform to SAML 2.0 standards
		and extenstions
	</description>

	<taskdef resource="emma_ant.properties">
		<classpath>
			<pathelement location="${ant.emma}" />
			<pathelement location="${ant.emma_ant}" />
		</classpath>
	</taskdef>

	<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask" onerror="ignore">
		<!-- https://jaxb.dev.java.net/jaxb20-ea/docs/xjcTask.html -->
		<classpath>
			<fileset dir="${basedir}/${artifacts}">
				<include name="**/*.jar" />
			</fileset>
		</classpath>
	</taskdef>

	<!-- 
		Integration with apache ivy for dependency resolution in the development environment, this is a standalone target and should be run manually before invoking other
		ant operations associated with SAML2 lib for Java
	-->
	<target name="dev-resolve">
		<ivy:configure />
		<ivy:resolve file="ivy.xml" conf="dev" />
		<ivy:retrieve pattern="${basedir}/${artifacts.dev}/[artifact].[ext]" conf="dev" />
		<ivy:report conf="dev" graph="false" todir="${basedir}/${artifacts.dev}" />
	</target>
	
	<target name="dev-publish">
		<ivy:configure />
		<ivy:resolve file="ivy.xml" conf="dev" />
		<ivy:publish resolver="local-resolver" forcedeliver="true">
			<artifacts pattern="${basedir}/${output.dev}/[artifact].[ext]" />
		</ivy:publish>
	</target>

	<!-- 
		SAML2lib-j Development environment compilation and jar creation
	 -->
	<target name="dev-jar" depends="dev-build">
		<jar destfile="${output.dev}/${output.dev.jar}.jar">
			<fileset dir="${src}">
				<include name="**/*.properties" />
			</fileset>
			<fileset dir="${output.dev.build}">
				<include name="**/*.class" />
				<include name="**/*.xsd" />
			</fileset>
			<fileset dir="${gensrc}">
				<include name="**/*.properties" />
			</fileset>
		</jar>
	</target>

	<target name="dev-build" depends="generate" description="Builds the JAXB generated code.">
		<javac destdir="${output.dev.build}" srcdir="${gensrc}" debug="true" debuglevel="lines,vars,source">
			<classpath>
				<fileset dir="${basedir}/${artifacts}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${basedir}/${artifacts.dev}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
		<javac destdir="${output.dev.build}" srcdir="${src}" debug="true" debuglevel="lines,vars,source">
			<classpath>
				<fileset dir="${basedir}/${artifacts}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${basedir}/${artifacts.dev}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
		<copy todir="${output.dev.build}/${schemajar.dir}">
			<fileset dir="${basedir}/${schema.dir}">
				<include name="*.xsd" />
			</fileset>
		</copy>
	</target>

	<target name="generate" depends="setup" description="Builds the JAXB generated code.">
		<xjc destdir="${gensrc}" binding="${schema.dir}/saml2.xjb" extension="true" >
			<classpath>
				<fileset dir="${basedir}/${artifacts}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${basedir}/${artifacts.dev}">
					<include name="*.jar" />
				</fileset>
			</classpath>
				
			<schema dir="${basedir}/${schema.dir}">
				<include name="*.xsd" />
				<!--  The following are retrieved from the internet during generation and ignored locally -->
				<exclude name="xml.xsd" />
				<exclude name="xmldsig-core-schema.xsd" />
				<exclude name="xenc-schema.xsd" />
			</schema>
		</xjc>
	</target>

	<!-- 
		SAML2lib-j JUnit test execution and report generation, includes automated code
		coverage statistics generated by emma, emma.sourceforge.net
	-->
	<target name="junit" depends="junit-functional, junit-regression" description="Invokes all unit tests defined for SAML2lib-j">

		<!-- Combine coverage reports to single view -->
		<emma>
			<report sourcepath="${src}">
				<fileset dir="${output.dev.coverage.dir}">
					<include name="**/*.emma" />
				</fileset>

				<txt outfile="${output.dev.coverage.dir}/coverage.txt" />
				<html outfile="${output.dev.coverage.dir}/coverage.html" />
				<xml outfile="${output.dev.coverage.dir}/coverage.xml" />
			</report>
		</emma>
	</target>

	<target name="emma-instr" description="Configures SAML2lib-j jar for emma coverage reporting">
		<emma>
			<instr mode="fullcopy" outdir="${output.dev.coverage.dir}" merge="false" metadatafile="${output.dev.coverage.dir}/metadata.emma">
				<instrpath>
					<fileset dir="${output.dev}" includes="**/*.jar" />
				</instrpath>
				<!-- Coverage report on all SAML2lib-j code except dynamically generated message/schema classes, 
					Constants classes, exception implementations and log4j extenstions -->
				<filter includes="com.qut.*" excludes="com.qut.*Messages*, com.qut.*Exception*, com.qut.middleware.saml2.schemas.*, com.qut.middleware.saml2.*Constants*, com.qut.middleware.saml2.resolver.SchemaResolver" />
			</instr>
		</emma>
	</target>

	<target name="junit-regression-build" depends="dev-jar" description="Compiles SAML2lib-j regression tests code base">
		<javac destdir="${output.test.regression.build}" srcdir="${src.tests.regression}" debug="true" debuglevel="lines,vars,source">
			<classpath>
				<fileset dir="${artifacts}">
					<include name="**/*.jar" />
				</fileset>
				<path path="${output.dev}/${output.dev.jar}.jar" />
			</classpath>
		</javac>
	</target>

	<target name="junit-regression" depends="junit-regression-build, emma-instr" description="Invokes all junit regression tests for SAML2lib-j">

		<junit printsummary="yes" haltonfailure="no" fork="yes">
			<classpath>
				<path path="${output.dev.coverage.dir}/lib/${output.dev.jar}.jar" />
				<path path="${output.test.regression.build}" />
				<fileset dir="${artifacts}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>

			<jvmarg value="-Demma.coverage.out.file=${output.dev.coverage.regression.dir}/coverage.emma" />
			<jvmarg value="-Demma.coverage.out.merge=true" />

			<formatter type="xml" />

			<batchtest fork="yes" todir="${output.dev.junit.regression.reports}">
				<fileset dir="${output.test.regression.build}">
					<include name="**/*Test*.class" />
				</fileset>
			</batchtest>
		</junit>

		<emma>
			<report sourcepath="${src}">
				<fileset dir="${output.dev.coverage.regression.dir}">
					<include name="*.emma" />
				</fileset>
				<fileset file="${output.dev.coverage.dir}/metadata.emma" />

				<txt outfile="${output.dev.coverage.functional.dir}/coverage.txt" />
				<html outfile="${output.dev.coverage.functional.dir}/coverage.html" />
				<xml outfile="${output.dev.coverage.functional.dir}/coverage.xml" />
			</report>
		</emma>
	</target>

	<target name="junit-functional-build" depends="dev-jar" description="Compiles SAML2lib-j functional test code base">
		<javac destdir="${output.test.functional.build}" srcdir="${src.tests.functional}" debug="true" debuglevel="lines,vars,source">
			<classpath>
				<fileset dir="${artifacts}">
					<include name="**/*.jar" />
				</fileset>
				<path path="${output.dev}/${output.dev.jar}.jar" />
			</classpath>
		</javac>
	</target>

	<target name="javadoc" description="Create Javadocs">
		<mkdir dir="${output.javadoc}" />
		<javadoc destdir="${output.javadoc}" sourcepath="${src}">
			<classpath>
				<fileset dir="${artifacts}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javadoc>
	</target>

	<target name="junit-functional" depends="junit-functional-build, emma-instr" description="Invokes all junit functional tests for SAML2lib-j">

		<junit printsummary="yes" haltonfailure="no" fork="yes">
			<classpath>
				<path path="${output.dev.coverage.dir}/lib/${output.dev.jar}.jar" />
				<path path="${output.test.functional.build}" />
				<fileset dir="${artifacts}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>

			<jvmarg value="-Demma.coverage.out.file=${output.dev.coverage.functional.dir}/coverage.emma" />
			<jvmarg value="-Demma.coverage.out.merge=true" />

			<formatter type="xml" />

			<batchtest fork="yes" todir="${output.dev.junit.functional.reports}">
				<fileset dir="${output.test.functional.build}">
					<include name="**/*Test*.class" />
				</fileset>
			</batchtest>
		</junit>

		<emma>
			<report sourcepath="${src}">
				<fileset dir="${output.dev.coverage.functional.dir}">
					<include name="*.emma" />
				</fileset>
				<fileset file="${output.dev.coverage.dir}/metadata.emma" />

				<txt outfile="${output.dev.coverage.functional.dir}/coverage.txt" />
				<html outfile="${output.dev.coverage.functional.dir}/coverage.html" />
				<xml outfile="${output.dev.coverage.functional.dir}/coverage.xml" />
			</report>
		</emma>
	</target>

	<!-- 
		General operations to setup and cleanup environment 
	-->
	<target name="setup" depends="clean">
		<mkdir dir="${gensrc}" />
		<mkdir dir="${artifacts.dev}" />
		<mkdir dir="${artifacts.prd}" />
		<mkdir dir="${output.dev}" />
		<mkdir dir="${output.dev.build}" />
		<mkdir dir="${output.test.regression.build}" />
		<mkdir dir="${output.test.functional.build}" />
		<mkdir dir="${output.dev.junit.dir}" />
		<mkdir dir="${output.dev.junit.functional.reports}" />
		<mkdir dir="${output.dev.junit.regression.reports}" />
		<mkdir dir="${output.dev.coverage.dir}" />
		<mkdir dir="${output.dev.coverage.functional.dir}" />
		<mkdir dir="${output.dev.coverage.regression.dir}" />
	</target>

	<target name="clean">
		<delete dir="${gensrc}" />
		<delete dir="${output.dev.build}" />
		<delete dir="${output.dev}" />
		<delete dir="${output.test.regression.build}" />
		<delete dir="${output.test.functional.build}" />
		<delete dir="${output.dev.junit.dir}" />
		<delete dir="${output.dev.junit.functional.reports}" />
		<delete dir="${output.dev.junit.regression.reports}" />
		<delete dir="${output.dev.coverage.dir}" />
		<delete dir="${output.dev.coverage.functional.dir}" />
		<delete dir="${output.dev.coverage.regression.dir}" />
	</target>

	<!--
		Haven't been able to get eclipse resources to recognise .xsd so manual copy for now
	-->
	<target name="eclipsexml">
		<copy todir="${eclipse-bin}/${schemajar.dir}">
			<fileset dir="${schema.dir}">
				<include name="*.xsd" />
			</fileset>
		</copy>
	</target>

</project>
